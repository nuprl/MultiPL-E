language: go_test.go
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplclom913_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplclom913_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := \"\"\n    for\
    \ _, char := range myString {\n        prefix += char\n        prefixes = append(prefixes,\
    \ prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpartjy6eo_test.go:15:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[0:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe92s1jgx_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[0:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_wsit5kz_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplclom913_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplclom913_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, len(myString))\n    i := 0\n\
    \    for len(myString) > 0 {\n        result[i] = myString\n        myString =\
    \ myString[:len(myString)-1]\n        i++\n    }\n    return result\n}\n\nfunc\
    \ TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"\
    asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"\
    WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp8hbzbr0b_test.go:37: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp8hbzbr0b_test.go:37: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[0:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe92s1jgx_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    length := len(myString)\n\
    \    for i := 0; i < length; i++ {\n        prefixes = append(prefixes, myString[:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp6s_cnn5o_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp6s_cnn5o_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpcyenqz_e_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpcyenqz_e_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for _, prefix := range all_prefixes_test.prefixes\
    \ {\n        if strings.HasPrefix(myString, prefix) {\n            prefixes =\
    \ append(prefixes, prefix)\n        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc0brkjh__test.go:13:28: undefined: all_prefixes_test

    /tmp/tmpc0brkjh__test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n    \
    \    prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpg3cw0iib_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpg3cw0iib_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    var i int\n    for i = 0;\
    \ i < len(myString); i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpb8v4501l_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpb8v4501l_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplclom913_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplclom913_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefix := myString[:i]\n        prefixes = append(prefixes, prefix)\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpztngqzx1_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpztngqzx1_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhz_tbqe_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplclom913_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplclom913_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := \"\"\n    for\
    \ _, char := range myString {\n        if char == prefix {\n            prefixes\
    \ = append(prefixes, prefix)\n        } else {\n            prefix = char\n  \
    \          prefixes = append(prefixes, prefix)\n        }\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavs7gqq_test.go:15:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmpxavs7gqq_test.go:18:22: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhz_tbqe_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhz_tbqe_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplclom913_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplclom913_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmph543_jhe_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmph543_jhe_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpcyenqz_e_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpcyenqz_e_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := \"\"\n    for\
    \ _, char := range myString {\n        prefix += char\n        prefixes = append(prefixes,\
    \ prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpartjy6eo_test.go:15:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := \"\"\n    for\
    \ _, char := range myString {\n        prefix += char\n        prefixes = append(prefixes,\
    \ prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpartjy6eo_test.go:15:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    prefix := myString\n    for\
    \ i := 0; i < len(myString); i++ {\n        prefix += myString[i]\n        prefixes\
    \ = append(prefixes, prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbzyyiixj_test.go:15:9: invalid operation: prefix += myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplclom913_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplclom913_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    length := len(myString)\n\
    \    for i := 0; i < length; i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmprst87afx_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmprst87afx_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpcyenqz_e_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpcyenqz_e_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpcyenqz_e_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpcyenqz_e_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    length := len(myString)\n\
    \    for i := 0; i < length; i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmprst87afx_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmprst87afx_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5mm4fno5_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp5mm4fno5_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := \"\"\n    for\
    \ _, char := range myString {\n        prefix += char\n        prefixes = append(prefixes,\
    \ prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpartjy6eo_test.go:15:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhz_tbqe_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for _, prefix := range myString\
    \ {\n        prefixes = append(prefixes, prefix)\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdri70i21_test.go:14:37: cannot use prefix (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5mm4fno5_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp5mm4fno5_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[len(prefix):]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpyeohedz5_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n       \
    \ tmpyeohedz5_test.go:36: expected '[W WW WWW]', got '[WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplclom913_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplclom913_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := \"\"\n    for\
    \ _, char := range myString {\n        prefix += char\n        prefixes = append(prefixes,\
    \ prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpartjy6eo_test.go:15:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    var i int\n    for i = 0;\
    \ i < len(myString); i++ {\n        prefixes = append(prefixes, myString[:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpj_zyaj9t_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpj_zyaj9t_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, len(myString))\n    for i :=\
    \ range myString {\n        result[i] = myString[0:i]\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp7g0q3rxm_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp7g0q3rxm_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[0:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_wsit5kz_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhz_tbqe_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := \"\"\n    for\
    \ _, char := range myString {\n        prefix += char\n        prefixes = append(prefixes,\
    \ prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpartjy6eo_test.go:15:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpcyenqz_e_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpcyenqz_e_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmph543_jhe_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmph543_jhe_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpcyenqz_e_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpcyenqz_e_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    for _, prefix := range\
    \ all_prefixes_test.prefixes {\n        if strings.HasPrefix(myString, prefix)\
    \ {\n            result = append(result, prefix)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_td3_sww_test.go:13:28: undefined: all_prefixes_test

    /tmp/tmp_td3_sww_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    var i int\n    for i = 0;\
    \ i < len(myString); i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpb8v4501l_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpb8v4501l_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhz_tbqe_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, len(myString))\n    i := 0\n\
    \    for len(myString) > 0 {\n        result[i] = myString[:len(myString)]\n \
    \       myString = myString[len(myString):]\n        i++\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpmzw14jit_test.go:37: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh     ]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n  \
    \      tmpmzw14jit_test.go:37: expected '[W WW WWW]', got '[WWW  ]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmph543_jhe_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmph543_jhe_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplclom913_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplclom913_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpcyenqz_e_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpcyenqz_e_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for _, prefix := range all_prefixes_test.all_prefixes_test.prefixes\
    \ {\n        if strings.HasPrefix(myString, prefix) {\n            prefixes =\
    \ append(prefixes, prefix)\n        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpffhuglbn_test.go:13:28: undefined: all_prefixes_test

    /tmp/tmpffhuglbn_test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := \"\"\n    for\
    \ _, char := range myString {\n        if char == prefix {\n            prefixes\
    \ = append(prefixes, prefix)\n            prefix = \"\"\n        } else {\n  \
    \          prefix = prefix + char\n        }\n    }\n    prefixes = append(prefixes,\
    \ prefix)\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n \
    \ candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbmkkhidb_test.go:15:20: invalid operation: char == prefix (mismatched
    types rune and string)

    /tmp/tmpbmkkhidb_test.go:19:22: invalid operation: prefix + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5mm4fno5_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp5mm4fno5_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    var i int\n    for i = 0;\
    \ i < len(myString); i++ {\n        prefixes = append(prefixes, myString[0:i])\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpb8v4501l_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpb8v4501l_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for _, prefix := range all_prefixes_test.prefixes\
    \ {\n        if strings.HasPrefix(myString, prefix) {\n            prefixes =\
    \ append(prefixes, prefix)\n        }\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc0brkjh__test.go:13:28: undefined: all_prefixes_test

    /tmp/tmpc0brkjh__test.go:14:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5mm4fno5_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp5mm4fno5_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[0:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_wsit5kz_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplclom913_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplclom913_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpcyenqz_e_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpcyenqz_e_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    var prefix string\n    for\
    \ i := 0; i < len(myString); i++ {\n        prefix = myString[:i]\n        if\
    \ prefix == \"\" {\n            prefixes = append(prefixes, prefix)\n        }\
    \ else {\n            prefixes = append(prefixes, prefix)\n            prefixes\
    \ = append(prefixes, prefix[:len(prefix)])\n        }\n    }\n    return prefixes\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpb5o_q3ng_test.go:41: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a a as as asd asd asdf asdf asdfg asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpb5o_q3ng_test.go:41: expected '[W WW WWW]', got '[ W W WW\
    \ WW]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefix := myString[:i]\n        if prefix != \"\" {\n       \
    \     result = append(result, prefix)\n        }\n    }\n    return result\n}\n\
    \nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpjst0ab8d_test.go:37: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpjst0ab8d_test.go:37: expected '[W WW WWW]', got '[W WW]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplclom913_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplclom913_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5mm4fno5_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmp5mm4fno5_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplclom913_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplclom913_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpejp__dv2_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpejp__dv2_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075264
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpcyenqz_e_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpcyenqz_e_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefix := myString[:i]\n        prefixes = append(prefixes, prefix)\n\
    \    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate\
    \ := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"asdfgh\"), expected: []string{\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"\
    WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpztngqzx1_test.go:35: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpztngqzx1_test.go:35: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpcyenqz_e_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpcyenqz_e_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmplclom913_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmplclom913_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n        prefix\
    \ = prefix[len(prefix):]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuf9u7yj5_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n       \
    \ tmpuf9u7yj5_test.go:36: expected '[W WW WWW]', got '[WWW]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075264
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhz_tbqe_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := \"\"\n    for\
    \ _, char := range myString {\n        prefix += char\n        prefixes = append(prefixes,\
    \ prefix)\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T)\
    \ {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"), expected:\
    \ []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"} },\n     {\
    \ actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"WWW\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpartjy6eo_test.go:15:9: invalid operation: prefix += char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 2
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result := append(result, myString[0:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_wsit5kz_test.go:14:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n    \
    \    prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpg3cw0iib_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpg3cw0iib_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpcyenqz_e_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpcyenqz_e_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[0:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpha22bqvs_test.go:34: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[ a as asd asdf asdfg]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n\
    \        tmpha22bqvs_test.go:34: expected '[W WW WWW]', got '[ W WW]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := make([]string, 0)\n    prefix := myString\n\
    \    for len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix\
    \ = prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmp5rif5zec_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    prefix := myString\n   \
    \ for len(prefix) > 0 {\n        prefixes = append(prefixes, prefix)\n       \
    \ prefix = prefix[:len(prefix)-1]\n    }\n    return prefixes\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmpuj2so32z_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    prefix := myString\n    for\
    \ len(prefix) > 0 {\n        result = append(result, prefix)\n        prefix =\
    \ prefix[:len(prefix)-1]\n    }\n    return result\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[asdfgh asdfg asdf asd as a]'\n    --- FAIL: TestAll_Prefixes/test_num__2\
    \ (0.00s)\n        tmparj7ej52_test.go:36: expected '[W WW WWW]', got '[WWW WW\
    \ W]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075263
