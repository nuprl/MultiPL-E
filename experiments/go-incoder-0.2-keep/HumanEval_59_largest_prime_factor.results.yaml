language: go_test.go
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            n /= i\n        } else {\n         \
    \   return i\n        }\n        i++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpg8qs71yi_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpg8qs71yi_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpg8qs71yi_test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpg8qs71yi_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpg8qs71yi_test.go:43: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for factor < n {\n        if n%prime == 0 {\n            factor++\n     \
    \   }\n        prime++\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075492
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if p*p > n {\n            break\n\
    \        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpw06eji_1_test.go:47: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpw06eji_1_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpw06eji_1_test.go:47: expected '%!s(int=7)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpw06eji_1_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpw06eji_1_test.go:47: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            n /= i\n        } else {\n         \
    \   break\n        }\n        i++\n    }\n    return n\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpy320992l_test.go:44: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpy320992l_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpy320992l_test.go:44: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpy320992l_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=164)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpy320992l_test.go:44: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.042s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factors\
    \ := make([]int, 0)\n    for ; i*i <= n; i += 2 {\n        if n % i == 0 {\n \
    \           factors = append(factors, i)\n            n /= i\n        }\n    }\n\
    \    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors[len(factors)-1]\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpf80f9nbs_test.go:46: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpf80f9nbs_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpf80f9nbs_test.go:46: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpf80f9nbs_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpf80f9nbs_test.go:46: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.038s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n   \
    \         p = i\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpo58d6qoa_test.go:43: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpo58d6qoa_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpo58d6qoa_test.go:43: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpo58d6qoa_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpo58d6qoa_test.go:43: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.039s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    prime := 2\n   \
    \ for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp1j2cix97_test.go:42: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp1j2cix97_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp1j2cix97_test.go:42: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp1j2cix97_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp1j2cix97_test.go:42: expected '%!s(int=29)', got '%!s(int=79)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660075483
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    i := 3\n    for {\n        if n % p == 0 {\n         \
    \   return p\n        }\n        p += i\n        i += 2\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075492
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n\n    for\
    \ {\n        if q%p == 0 {\n            return p\n        }\n        p += 2\n\
    \        q -= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n \
    \ candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075492
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            n /= i\n        } else {\n         \
    \   break\n        }\n        i++\n    }\n    return n\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpy320992l_test.go:44: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpy320992l_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpy320992l_test.go:44: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpy320992l_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=164)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpy320992l_test.go:44: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.042s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p = i\n            break\n    \
    \    }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        p += 2\n        q /= p\n        r++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpsbvif6_w_test.go:50: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpsbvif6_w_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpsbvif6_w_test.go:50: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpsbvif6_w_test.go:50:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpsbvif6_w_test.go:50: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.051s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p += 1\n        }\n    }\n    return\
    \ p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpocmmlhr4_test.go:40:\
    \ expected '%!s(int=11)', got '%!s(int=17)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=29)', got '%!s(int=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    x := n\n    y :=\
    \ 2\n    for {\n        if n % y == 0 {\n            x = y\n            y *= 2\n\
    \        } else {\n            break\n        }\n    }\n    return x\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpqhgnt1pm_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpqhgnt1pm_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpqhgnt1pm_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpqhgnt1pm_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=329)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpqhgnt1pm_test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.027s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    p :=\
    \ 2\n    for i <= n {\n        if n % i == 0 {\n            p = i\n        }\n\
    \        i += p\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpyfitxz6d_test.go:43: expected '%!s(int=5)', got '%!s(int=14)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpyfitxz6d_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=26)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpyfitxz6d_test.go:43: expected '%!s(int=7)', got '%!s(int=62)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpyfitxz6d_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpyfitxz6d_test.go:43: expected '%!s(int=29)', got '%!s(int=13194)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            factor++\n\
    \            if factor > prime {\n                prime = factor\n           \
    \ }\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmpul6mdail_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpul6mdail_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpul6mdail_test.go:44: expected '%!s(int=29)', got '%!s(int=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.040s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n % i == 0 {\n            n = n / i\n            p++\n\
    \        } else {\n            break\n        }\n        i++\n    }\n    return\
    \ p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpwfickivk_test.go:46: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpwfickivk_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpwfickivk_test.go:46: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpwfickivk_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpwfickivk_test.go:46: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.045s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        p += 2\n        q /= p\n        r *= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpg2q51cns_test.go:50: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpg2q51cns_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpg2q51cns_test.go:50: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpg2q51cns_test.go:50:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpg2q51cns_test.go:50: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    i := 2\n    for {\n        if n % i == 0 {\n         \
    \   p += i\n            n /= i\n        } else {\n            i++\n        }\n\
    \        if n == 1 {\n            return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpul4uz2lh_test.go:49: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpul4uz2lh_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=11)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpul4uz2lh_test.go:49: expected '%!s(int=7)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpul4uz2lh_test.go:49:\
    \ expected '%!s(int=11)', got '%!s(int=23)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpul4uz2lh_test.go:49: expected '%!s(int=29)', got '%!s(int=56)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660075483
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := 2\n    for\
    \ {\n        if n%p == 0 {\n            return p\n        }\n        if n%q ==\
    \ 0 {\n            return q\n        }\n        if p > q {\n            p, q =\
    \ q, p\n        }\n        p += q\n        q += p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075492
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ i := 2; i <= n; i++ {\n        if n % i == 0 {\n            p += 1\n       \
    \     n /= i\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpb45lzeru_test.go:42: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpb45lzeru_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpb45lzeru_test.go:42: expected '%!s(int=7)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpb45lzeru_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpb45lzeru_test.go:42: expected '%!s(int=29)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.031s\nFAIL\n"
  timestamp: 1660075483
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1 // Make n positive\n\
    \    p := 2\n    for {\n        if n%p == 0 {\n            return p\n        }\n\
    \        p += 2\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n \
    \ candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075492
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p = i\n            break\n    \
    \    }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075445
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factor\
    \ := 1\n    for ; i*i <= n; i += 2 {\n        if n % i == 0 {\n            factor\
    \ *= i\n            n /= i\n        }\n    }\n    if n > 1 {\n        factor *=\
    \ n\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvemkz5ry_test.go:46: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpvemkz5ry_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpvemkz5ry_test.go:46: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpvemkz5ry_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=328)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpvemkz5ry_test.go:46: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ = p * q\n        q = q / p\n        r = r + 1\n    }\n    return r\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp_ecwf2s__test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp_ecwf2s__test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp_ecwf2s__test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp_ecwf2s__test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp_ecwf2s__test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.027s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for {\n        if\
    \ n%p == 0 {\n            return p\n        }\n        p += 1\n    }\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpky2vplyp_test.go:40: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpky2vplyp_test.go:40:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpky2vplyp_test.go:40: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpky2vplyp_test.go:40:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    factors\
    \ := []int{}\n    for i <= n {\n        if n % i == 0 {\n            factors =\
    \ append(factors, i)\n            n /= i\n        }\n        i += 1\n    }\n \
    \   return factors[len(factors)-1]\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpneekzrsx_test.go:44: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpneekzrsx_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpneekzrsx_test.go:44: expected '%!s(int=7)', got '%!s(int=31)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpneekzrsx_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=47)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpneekzrsx_test.go:44: expected '%!s(int=29)', got '%!s(int=733)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.055s\nFAIL\n"
  timestamp: 1660075483
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075445
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n \
    \           p += i\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp4czy9q9p_test.go:43: expected '%!s(int=5)', got '%!s(int=25)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp4czy9q9p_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp4czy9q9p_test.go:43: expected '%!s(int=7)', got '%!s(int=105)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp4czy9q9p_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=865)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp4czy9q9p_test.go:43: expected '%!s(int=29)', got '%!s(int=20161)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p = i\n            break\n    \
    \    }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            p = i\n            break\n  \
    \      }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp8l37mw23_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp8l37mw23_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp8l37mw23_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp8l37mw23_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.014s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 3\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if p*p > n {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpxlf7s_to_test.go:46: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpxlf7s_to_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpxlf7s_to_test.go:46: expected '%!s(int=7)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpxlf7s_to_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpxlf7s_to_test.go:46: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.027s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            p = i\n            break\n  \
    \      }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp8l37mw23_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp8l37mw23_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp8l37mw23_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp8l37mw23_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.014s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime\n        } else {\n            prime++\n        }\n \
    \   }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ factor := 2\n    for factor < n {\n        if n%prime == 0 {\n            n\
    \ /= prime\n        } else {\n            prime++\n        }\n        factor++\n\
    \    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpgutelynm_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpgutelynm_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpgutelynm_test.go:45: expected '%!s(int=7)', got '%!s(int=30)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpgutelynm_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=46)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpgutelynm_test.go:45: expected '%!s(int=29)', got '%!s(int=730)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            factor++\n        }\n\
    \        prime++\n        n = n/prime\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpen9acuis_test.go:43: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpen9acuis_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpen9acuis_test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpen9acuis_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpen9acuis_test.go:43: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        p += 2\n        q /= p\n        r++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpsbvif6_w_test.go:50: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpsbvif6_w_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpsbvif6_w_test.go:50: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpsbvif6_w_test.go:50:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpsbvif6_w_test.go:50: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.051s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            prime = i\n\
    \            break\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpy2m8p3gv_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpy2m8p3gv_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpy2m8p3gv_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpy2m8p3gv_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpy2m8p3gv_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.070s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    prime := 2\n    factor := 2\n    for i := 3; i <= n; i++ {\n     \
    \   if n % i == 0 {\n            factor++\n            if factor > prime {\n \
    \               prime = factor\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmp559sy7f4_test.go:47: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp559sy7f4_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp559sy7f4_test.go:47: expected '%!s(int=29)', got '%!s(int=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.046s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    largestPrimeFactor\
    \ := n\n    for i <= n {\n        if n % i == 0 {\n            largestPrimeFactor\
    \ = i\n            break\n        }\n        i += 2\n    }\n    return largestPrimeFactor\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp_h1txp80_test.go:44: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp_h1txp80_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp_h1txp80_test.go:44: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp_h1txp80_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp_h1txp80_test.go:44: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p = i\n            break\n    \
    \    }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ factor := 2\n    for n > 1 {\n        if n%prime == 0 {\n            factor++\n\
    \        }\n        prime++\n        n/=prime\n    }\n    return factor\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp2sov_ecy_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp2sov_ecy_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp2sov_ecy_test.go:44: expected '%!s(int=11)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp2sov_ecy_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.026s\nFAIL\n"
  timestamp: 1660075486
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for factor < n {\n        if n%prime == 0 {\n            factor++\n     \
    \   }\n        prime++\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075492
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075423
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if i == p {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075438
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    p := 2\n    i :=\
    \ 2\n    for {\n        if n%p == 0 {\n            return p\n        }\n     \
    \   p += i\n        i += 2\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1 // ignore even numbers\n\
    \    n |= n >> 1 // ignore even numbers\n    n |= n >> 2 // ignore even numbers\n\
    \    n |= n >> 4 // ignore even numbers\n    n |= n >> 8 // ignore even numbers\n\
    \    n |= n >> 16 // ignore even numbers\n    n |= n >> 32 // ignore even numbers\n\
    \    n |= n >> 64 // ignore even numbers\n    n |= n >> 128 // ignore even numbers\n\
    \    n |= n >> 256 // ignore even numbers\n    n |= n >> 512 // ignore even numbers\n\
    \    n |= n >> 1024 // ignore even numbers\n    n |= n >> 2048 // ignore even\
    \ numbers\n    n |= n >> 4096 // ignore even numbers\n    n |= n >> 8192 // ignore\
    \ even numbers\n    n |= n >> 16384 // ignore even numbers\n    n |= n >> 32768\
    \ // ignore even numbers\n    n |= n >> 65536 // ignore even numbers\n    n |=\
    \ n >> 131072 // ignore even numbers\n    n |= n >> 262144 // ignore even numbers\n\
    \    n |= n >> 524288 // ignore even numbers\n    n |= n >> 1048576 // ignore\
    \ even numbers\n    n |= n >> 2097152 // ignore even numbers\n    n |= n >> 4194304\
    \ // ignore even numbers\n    n |= n >> 8388608 // ignore even numbers\n    n\
    \ |= n >> 16777216 // ignore even numbers\n    n |= n >> 33554432 // ignore even\
    \ numbers\n    n |= n >> 67108864 // ignore even numbers\n    n |= n >> 134217728\
    \ // ignore even numbers\n    n |= n >> 268435456 // ignore even numbers\n   \
    \ n |= n >> 536870912 // ignore even numbers\n    n |= n >> 1073741824 // ignore\
    \ even numbers\n    n |= n >> 2147483648 // ignore even numbers\n    n |= n >>\
    \ 4294967296 // ignore even numbers\n    n |= n >> 8589934592 // ignore even numbers\n\
    \    n |= n >> 17179869184 // ignore even numbers\n    n |= n >> 34359738368 //\
    \ ignore even numbers\n    n |= n >> 68719476736 // ignore even numbers\n    n\
    \ |= n >> 137438953472 // ignore even numbers\n    n |= n >> 274877906944 // \n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv27x15fs_test.go:54:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2 // remove even number\n\
    \    i := 2\n    largestPrimeFactor := 1\n    for i <= n {\n        if n % i ==\
    \ 0 {\n            largestPrimeFactor = i\n            n = n / i\n        }\n\
    \        i++\n    }\n    return largestPrimeFactor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpml1nt4tn_test.go:44: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpml1nt4tn_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpml1nt4tn_test.go:44: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpml1nt4tn_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpml1nt4tn_test.go:44: expected '%!s(int=29)', got '%!s(int=167)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.036s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    p := 3\n    for\
    \ {\n        if n%p == 0 {\n            return p\n        }\n        p += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpyzpdz93e_test.go:41: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpyzpdz93e_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpyzpdz93e_test.go:41: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpyzpdz93e_test.go:41:\
    \ expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpyzpdz93e_test.go:41: expected '%!s(int=29)', got '%!s(int=79)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.020s\nFAIL\n"
  timestamp: 1660075433
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n            p++\n        } else\
    \ {\n            i++\n        }\n        if i == p {\n            return p\n \
    \       }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075498
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime\n        } else {\n            prime++\n        }\n \
    \   }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p += 1\n            n /= i\n  \
    \      }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpujm36nuj_test.go:41: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpujm36nuj_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpujm36nuj_test.go:41: expected '%!s(int=7)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpujm36nuj_test.go:41:\
    \ expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpujm36nuj_test.go:41: expected '%!s(int=29)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime\n        } else {\n            prime++\n        }\n \
    \   }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime + 1\n        } else {\n            prime++\n        }\n\
    \    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp51bdbjkg_test.go:44: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp51bdbjkg_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp51bdbjkg_test.go:44: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp51bdbjkg_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp51bdbjkg_test.go:44: expected '%!s(int=29)', got '%!s(int=30)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            n /= i\n        } else {\n         \
    \   break\n        }\n        i++\n    }\n    return n\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpy320992l_test.go:44: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpy320992l_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpy320992l_test.go:44: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpy320992l_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=164)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpy320992l_test.go:44: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.042s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    largest := 2\n    for i := 3; i <= n; i++ {\n        if n % i == 0\
    \ {\n            if largest < i {\n                largest = i\n            }\n\
    \        }\n    }\n    return largest\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpbsvlih_5_test.go:45: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpbsvlih_5_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpbsvlih_5_test.go:45: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpbsvlih_5_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpbsvlih_5_test.go:45: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.029s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ factor := 2\n    for n > 1 {\n        if n % prime == 0 {\n            factor++\n\
    \        }\n        prime++\n        n/=prime\n    }\n    return factor\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpnqfmff_i_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpnqfmff_i_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpnqfmff_i_test.go:44: expected '%!s(int=11)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpnqfmff_i_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n /= i\n        } else {\n           \
    \ p = i\n            break\n        }\n        i++\n    }\n    return p\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvs2qcmwq_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpvs2qcmwq_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpvs2qcmwq_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpvs2qcmwq_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpvs2qcmwq_test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2 // remove 2 since 2 is\
    \ the smallest prime factor\n    n -= 2 // remove 2 since 2 is the smallest prime\
    \ factor\n    n -= 2 // remove 2 since 2 is the smallest prime factor\n    n -=\
    \ 2 // remove 2 since 2 is the smallest prime factor\n    n -= 2 // remove 2 since\
    \ 2 is the smallest prime factor\n    n -= 2 // remove 2 since 2 is the smallest\
    \ prime factor\n    n -= 2 // remove 2 since 2 is the smallest prime factor\n\
    \    n -= 2 // remove 2 since 2 is the smallest prime factor\n    n -= 2 // remove\
    \ 2 since 2 is the smallest prime factor\n    n -= 2 // remove 2 since 2 is the\
    \ smallest prime factor\n    n -= 2 // remove 2 since 2 is the smallest prime\
    \ factor\n    n -= 2 // remove 2 since 2 is the smallest prime factor\n    n -=\
    \ 2 // remove 2 since 2 is the smallest prime factor\n    n -= 2 // remove 2 since\
    \ 2 is the smallest prime factor\n    n -= 2 // remove 2 since 2 is the smallest\
    \ prime factor\n    n -= 2 // remove 2 since 2 is the smallest prime factor\n\
    \    n -= 2 // remove 2 since 2 is the smallest prime factor\n    n -= 2 // remove\
    \ 2 since 2 is the smallest prime factor\n    n -= 2 // remove 2 since 2 is the\
    \ smallest prime factor\n    n -= 2 // remove 2 since 2 is the smallest prime\
    \ factor\n    n -= 2 // remove 2 since 2 is the smallest prime factor\n    n -=\
    \ 2 // remove 2 since 2 is the smallest prime factor\n    n -= 2 // remove 2 since\
    \ 2 is the smallest prime factor\n    n -= 2 // remove 2 since 2 is the smallest\
    \ prime factor\n    n -= 2 // remove 2 since 2 is the smallest prime factor\n\
    \    n -= 2 // remove 2 since 2 is the smallest prime factor\n    n -= 2 // remove\
    \ 2 since 2 is the smallest prime factor\n    n -= 2 // remove 2 since 2 is the\
    \ smallest prime factor\n    n -= 2 // remove 2 since 2 is the smallest prime\
    \ factor\n    n -= 2 // remove 2 since 2 is the smallest prime factor\n    n -=\
    \ 2 // remove 2 since 2 is the smallest prime factor\n    n -= 2 // remove 2 since\
    \ 2 is the smallest prime factor\n    n -= 2 // remove 2 since 2 is the smallest\
    \ prime factor\n    n -= 2 // remove 2 since 2 is the smallest prime factor\n\
    \    n -= 2 // remove 2 since 2 is the smallest prime factor\n    n -= 2 // remove\
    \ 2 since 2 is the smallest prime factor\n    n -= 2 // remove 2 since \nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprd_x5q5o_test.go:51:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    max := 2\n    i := 2\n    for i <= n {\n        if n % i == 0 {\n\
    \            max = i\n        }\n        i += 2\n    }\n    return max\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpm0s_g7pd_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpm0s_g7pd_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpm0s_g7pd_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpm0s_g7pd_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpm0s_g7pd_test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp5w9ajtjb_test.go:42: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp5w9ajtjb_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp5w9ajtjb_test.go:42: expected '%!s(int=7)', got '%!s(int=31)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp5w9ajtjb_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp5w9ajtjb_test.go:42: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  i++\n        }\n        if i == p {\n            return p\n        }\n    \
    \    p++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpu936cp0y_test.go:46: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpu936cp0y_test.go:46:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpu936cp0y_test.go:46: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpu936cp0y_test.go:46:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.041s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            p = i\n          \
    \  break\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvk64aro3_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpvk64aro3_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpvk64aro3_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpvk64aro3_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpvk64aro3_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            factor++\n        }\n\
    \        prime++\n        n = n / prime\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpzqejwn2u_test.go:43: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpzqejwn2u_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpzqejwn2u_test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpzqejwn2u_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpzqejwn2u_test.go:43: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 3\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n            p++\n        } else\
    \ {\n            break\n        }\n        i++\n    }\n    return p\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp0u3swuy6_test.go:45: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp0u3swuy6_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp0u3swuy6_test.go:45: expected '%!s(int=11)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp0u3swuy6_test.go:45:\
    \ expected '%!s(int=29)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.022s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factor\
    \ := 1\n    for ; i * i <= n; i += 2 {\n        if n % i == 0 {\n            factor\
    \ *= i\n            n /= i\n        }\n    }\n    if n > 1 {\n        factor *=\
    \ n\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpw7yziyey_test.go:46: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpw7yziyey_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpw7yziyey_test.go:46: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpw7yziyey_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=328)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpw7yziyey_test.go:46: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    prime := 2\n   \
    \ for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp1j2cix97_test.go:42: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp1j2cix97_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp1j2cix97_test.go:42: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp1j2cix97_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp1j2cix97_test.go:42: expected '%!s(int=29)', got '%!s(int=79)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660075483
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if i == p {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075438
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n   \
    \         p += 1\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmpl4r9ru5x_test.go:43: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpl4r9ru5x_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=17)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpl4r9ru5x_test.go:43: expected '%!s(int=29)', got '%!s(int=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.031s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ = p * q\n        q = q / p\n        r++\n    }\n    return r\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmptue41_rp_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmptue41_rp_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmptue41_rp_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmptue41_rp_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmptue41_rp_test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factors\
    \ := []int{}\n    for ; i * i <= n; i++ {\n        if n % i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    if\
    \ n > 1 {\n        factors = append(factors, n)\n    }\n    return factors[len(factors)-1]\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpbnf1wzkg_test.go:46: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpbnf1wzkg_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpbnf1wzkg_test.go:46: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpbnf1wzkg_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpbnf1wzkg_test.go:46: expected '%!s(int=29)', got '%!s(int=167)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.039s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for factor < n {\n        if n%prime == 0 {\n            n = n / prime\n\
    \        } else {\n            prime++\n        }\n        factor++\n    }\n \
    \   return prime\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpfme5vyps_test.go:44: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpfme5vyps_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpfme5vyps_test.go:44: expected '%!s(int=11)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpfme5vyps_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=26)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.035s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ += 2\n        q /= p\n    }\n    for {\n        if q%r == 0 {\n            break\n\
    \        }\n        r += 2\n        q /= r\n    }\n    return r\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpwg47whab_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpwg47whab_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpwg47whab_test.go:51: expected '%!s(int=7)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpwg47whab_test.go:51:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpwg47whab_test.go:51: expected '%!s(int=29)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    prime := 2\n   \
    \ for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp1j2cix97_test.go:42: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp1j2cix97_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp1j2cix97_test.go:42: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp1j2cix97_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp1j2cix97_test.go:42: expected '%!s(int=29)', got '%!s(int=79)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp5w9ajtjb_test.go:42: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp5w9ajtjb_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp5w9ajtjb_test.go:42: expected '%!s(int=7)', got '%!s(int=31)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp5w9ajtjb_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp5w9ajtjb_test.go:42: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n % i == 0 {\n            p += i\n            n /=\
    \ i\n        } else {\n            i++\n        }\n        if n == 1 {\n     \
    \       return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpog614mow_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpog614mow_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=49)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=29)', got '%!s(int=248)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n%i == 0 {\n            n = n/i\n            return\
    \ p\n        }\n        i++\n        p++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpyksoxem9_test.go:44: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpyksoxem9_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpyksoxem9_test.go:44: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpyksoxem9_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpyksoxem9_test.go:44: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.026s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for {\n        if n % p == 0 {\n            return p\n\
    \        }\n        p += 1\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp3adg76nz_test.go:43: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp3adg76nz_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp3adg76nz_test.go:43: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp3adg76nz_test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    i := 2\n    for {\n        if n % i == 0 {\n         \
    \   p += i\n            n /= i\n        } else {\n            i++\n        }\n\
    \        if n == 1 {\n            return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpul4uz2lh_test.go:49: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpul4uz2lh_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=11)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpul4uz2lh_test.go:49: expected '%!s(int=7)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpul4uz2lh_test.go:49:\
    \ expected '%!s(int=11)', got '%!s(int=23)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpul4uz2lh_test.go:49: expected '%!s(int=29)', got '%!s(int=56)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    max := n\n\n   \
    \ for p < max {\n        if n%p == 0 {\n            max /= p\n        } else {\n\
    \            p++\n        }\n    }\n\n    return max\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp6tv3mdt4_test.go:45: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp6tv3mdt4_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp6tv3mdt4_test.go:45: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp6tv3mdt4_test.go:45:\
    \ expected '%!s(int=29)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.029s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor = prime + 1\n        } else {\n            prime++\n        }\n\
    \    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp51bdbjkg_test.go:44: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp51bdbjkg_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp51bdbjkg_test.go:44: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp51bdbjkg_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp51bdbjkg_test.go:44: expected '%!s(int=29)', got '%!s(int=30)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n % i == 0 {\n            p += i\n            n /=\
    \ i\n        } else {\n            i++\n        }\n        if n == 1 {\n     \
    \       break\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpztzlazw__test.go:48: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpztzlazw__test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpztzlazw__test.go:48: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpztzlazw__test.go:48:\
    \ expected '%!s(int=11)', got '%!s(int=49)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpztzlazw__test.go:48: expected '%!s(int=29)', got '%!s(int=248)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factor++\n\
    \            if factor > prime {\n                prime = factor\n           \
    \ }\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp76fwva0l_test.go:44: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp76fwva0l_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp76fwva0l_test.go:44: expected '%!s(int=7)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp76fwva0l_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp76fwva0l_test.go:44: expected '%!s(int=29)', got '%!s(int=16)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.021s\nFAIL\n"
  timestamp: 1660075432
- exit_code: 2
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    factors\
    \ := make([]int, 0)\n    for factor := 2; factor*factor <= n; factor++ {\n   \
    \     if n%factor == 0 {\n            factors = append(factors, factor)\n    \
    \        n /= factor\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors[len(factors)-1]\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpndikl1ln_test.go:15:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    p := 2\n    for\
    \ i := 3; i <= n; i++ {\n        if n % i == 0 {\n            p += i\n       \
    \     n /= i\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpbfa1v3a0_test.go:42: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpbfa1v3a0_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpbfa1v3a0_test.go:42: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpbfa1v3a0_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=47)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpbfa1v3a0_test.go:42: expected '%!s(int=29)', got '%!s(int=248)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1 // ignore 1 since it\
    \ is not a prime\n    p := 2\n    for {\n        if n%p == 0 {\n            return\
    \ p\n        }\n        p += 1\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmposx84xmi_test.go:41: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmposx84xmi_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmposx84xmi_test.go:41: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmposx84xmi_test.go:41:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmposx84xmi_test.go:41: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            p = i\n          \
    \  break\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvk64aro3_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpvk64aro3_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpvk64aro3_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpvk64aro3_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpvk64aro3_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            n /= i\n        } else {\n         \
    \   break\n        }\n        i++\n    }\n    return n\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpy320992l_test.go:44: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpy320992l_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpy320992l_test.go:44: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpy320992l_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=164)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpy320992l_test.go:44: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.042s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    max := n\n    for p < max {\n        if n % p == 0 {\n\
    \            max = p\n        }\n        p += 1\n    }\n    return max\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpu233edis_test.go:45: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpu233edis_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpu233edis_test.go:45: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpu233edis_test.go:45:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    q :=\
    \ 2\n    d := 1\n    for {\n        if n%d == 0 {\n            return d\n    \
    \    }\n        if n%d%p == 0 {\n            return d\n        }\n        if n%d%q\
    \ == 0 {\n            return d\n        }\n        d *= q\n        p += q\n  \
    \      q *= p\n        n--\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp030nubr2_test.go:52: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp030nubr2_test.go:52:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp030nubr2_test.go:52: expected '%!s(int=7)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp030nubr2_test.go:52:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp030nubr2_test.go:52: expected '%!s(int=29)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.034s\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    largest := 2\n    for i := 3; i <= n; i++ {\n        if n % i == 0\
    \ {\n            largest = i\n            break\n        }\n    }\n    return\
    \ largest\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate :=\
    \ largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected:\
    \ 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual: candidate(63),\
    \ expected: 7 },\n     { actual: candidate(330), expected: 11 },\n     { actual:\
    \ candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpavy34i7i_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpavy34i7i_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpavy34i7i_test.go:44: expected '%!s(int=11)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpavy34i7i_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.037s\nFAIL\n"
  timestamp: 1660075489
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            p = i\n        }\n        i += 2\n \
    \       if i == n {\n            return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075501
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            factor++\n        }\n\
    \        prime++\n        n = n/prime\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=11)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  i++\n        }\n        if i == p {\n            return i\n        }\n    \
    \    p++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp9fp5ln53_test.go:46: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp9fp5ln53_test.go:46:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp9fp5ln53_test.go:46: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp9fp5ln53_test.go:46:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.040s\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n            p++\n        } else\
    \ {\n            break\n        }\n        i++\n    }\n    return p\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpzudfq161_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpzudfq161_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpzudfq161_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpzudfq161_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpzudfq161_test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.039s\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factors\
    \ := make([]int, n)\n    for ; n > 1; n-- {\n        if n % i == 0 {\n       \
    \     factors[i] = i\n            n /= i\n        }\n        i++\n    }\n    if\
    \ n > 1 {\n        factors[i] = n\n    }\n    return factors[len(factors)-1]\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp_mixxqbw_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp_mixxqbw_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp_mixxqbw_test.go:47: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp_mixxqbw_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp_mixxqbw_test.go:47: expected '%!s(int=29)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.043s\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ {\n        if n%p == 0 {\n            return p\n        }\n        p += 1\n\
    \        n/=p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpmukxmn5g_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpmukxmn5g_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpmukxmn5g_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpmukxmn5g_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpmukxmn5g_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n           \
    \ return p\n        }\n        p += 2\n        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk5lp_99u_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk5lp_99u_test.go:45: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660075423
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n%i == 0 {\n            n = n/i\n            p++\n\
    \        } else {\n            i++\n        }\n        if i == p {\n         \
    \   return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075501
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    d := 1\n    for {\n        if q%p == 0 {\n\
    \            break\n        }\n        p += d\n        q /= p\n        d++\n \
    \   }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp03w1nnmb_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp03w1nnmb_test.go:48:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp03w1nnmb_test.go:48: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp03w1nnmb_test.go:48:\
    \ expected '%!s(int=29)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ = p * q\n        q = q / p\n        r = r + 1\n    }\n    return r\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp_ecwf2s__test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp_ecwf2s__test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp_ecwf2s__test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp_ecwf2s__test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp_ecwf2s__test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.027s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    max := n\n    for i := 3; i <= max; i++ {\n        if\
    \ n % i == 0 {\n            p += i\n            max /= i\n        }\n    }\n \
    \   return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpyfeet_v__test.go:45: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpyfeet_v__test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=14)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpyfeet_v__test.go:45: expected '%!s(int=7)', got '%!s(int=12)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpyfeet_v__test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpyfeet_v__test.go:45: expected '%!s(int=29)', got '%!s(int=56)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ = p * q\n        q = q / p\n        r = r + 1\n    }\n    return r\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp_ecwf2s__test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp_ecwf2s__test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp_ecwf2s__test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp_ecwf2s__test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp_ecwf2s__test.go:45: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.027s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n /= prime\n      \
    \      factor = prime\n        } else {\n            prime++\n        }\n    }\n\
    \    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n\n    p := 2\n    i := 2\n    for {\n        if n % i == 0 {\n       \
    \     p += i\n            n /= i\n        } else {\n            i++\n        }\n\
    \        if n == 1 {\n            return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmptylrb67y_test.go:50: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmptylrb67y_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=11)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmptylrb67y_test.go:50: expected '%!s(int=7)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmptylrb67y_test.go:50:\
    \ expected '%!s(int=11)', got '%!s(int=23)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmptylrb67y_test.go:50: expected '%!s(int=29)', got '%!s(int=56)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.034s\nFAIL\n"
  timestamp: 1660075489
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    q :=\
    \ 2\n    d := 2\n    for {\n        if n%d == 0 {\n            return n\n    \
    \    }\n        if n%d%p == 0 {\n            p = p + 1\n        }\n        if\
    \ n%d%q == 0 {\n            q = q + 1\n        }\n        if n%d%d*p == 0 {\n\
    \            d = d + 1\n        }\n        n = n%d\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075501
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpmob0nkp4_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpmob0nkp4_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpmob0nkp4_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpmob0nkp4_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpmob0nkp4_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        p += r\n        q /= p\n        r++\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp5j5lioyn_test.go:47: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp5j5lioyn_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp5j5lioyn_test.go:47: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp5j5lioyn_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp5j5lioyn_test.go:47: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.031s\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n \
    \           p = i\n            break\n        }\n    }\n    return p\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpft0rzgwu_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpft0rzgwu_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpft0rzgwu_test.go:44: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpft0rzgwu_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 2
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    x := n\n    y :=\
    \ 2\n    for {\n        if n%y == 0 {\n            return y\n        }\n     \
    \   y *= 2\n        n /= y\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4tk3v0o_test.go:15:5: x declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        p\
    \ += 2\n        q /= p\n        r *= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpno61hi3b_test.go:53: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpno61hi3b_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpno61hi3b_test.go:53: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpno61hi3b_test.go:53:\
    \ expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpno61hi3b_test.go:53: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 2
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    i := 2\n    d := 1\n    s := 1\n    for {\n        if q%i == 0 {\n  \
    \          if r > d {\n                p = i\n                q = q/i\n      \
    \      }\n            if r == d {\n                p = i\n                q =\
    \ q/i\n            }\n            if r < d {\n                p = i\n        \
    \        q = q/i\n            }\n            break\n        }\n        i++\n \
    \   }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjg4688_w_test.go:19:5: s declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075489
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075432
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for factor < n {\n        if n%prime == 0 {\n            factor++\n     \
    \   } else {\n            prime++\n        }\n    }\n    return factor\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpcikfpmis_test.go:43: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpcikfpmis_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpcikfpmis_test.go:43: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpcikfpmis_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpcikfpmis_test.go:43: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            factor++\n        }\n\
    \        prime++\n        n = n/prime\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=11)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            n /= prime\n        \
    \    factor = prime\n        } else {\n            prime++\n        }\n    }\n\
    \    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.026s\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa9492_og_test.go:137:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    d := 1\n    while q > 0 {\n        if q%p == 0 {\n            d := d*p\n\
    \        }\n        p += r\n        r /= p\n        q -= p\n    }\n    return\
    \ d\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8_mg723v_test.go:18:11: expected '';'', found q

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factors\
    \ := make([]int, 0)\n    for ; i*i <= n; i++ {\n        if n%i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors[len(factors)-1]\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmptj93mskk_test.go:46: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmptj93mskk_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmptj93mskk_test.go:46: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmptj93mskk_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmptj93mskk_test.go:46: expected '%!s(int=29)', got '%!s(int=167)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075429
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075504
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            n /= i\n        } else {\n         \
    \   return i\n        }\n        i++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpg8qs71yi_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpg8qs71yi_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpg8qs71yi_test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpg8qs71yi_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpg8qs71yi_test.go:43: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factors\
    \ := make([]int, 0)\n    for i <= n {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n        i++\n    }\n  \
    \  return factors[len(factors)-1]\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp19c35hgu_test.go:44: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp19c35hgu_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp19c35hgu_test.go:44: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp19c35hgu_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp19c35hgu_test.go:44: expected '%!s(int=29)', got '%!s(int=167)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660075492
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ += r\n        q = q / p\n        r++\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpdygua_92_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpdygua_92_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpdygua_92_test.go:45: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpdygua_92_test.go:45:\
    \ expected '%!s(int=29)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.035s\nFAIL\n"
  timestamp: 1660075492
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    p :=\
    \ 2\n    for i <= n {\n        if n%i == 0 {\n            n = n/i\n          \
    \  p += 1\n        }\n        i += 2\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpnlj968rp_test.go:44: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpnlj968rp_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpnlj968rp_test.go:44: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpnlj968rp_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.032s\nFAIL\n"
  timestamp: 1660075492
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    x := n\n    y :=\
    \ 2\n    for {\n        if x % y == 0 {\n            return y\n        }\n   \
    \     y *= 2\n        x++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.largest_prime_factor(...)\n\t/tmp/tmpt066g234_test.go:18\n\
    command-line-arguments_test.TestLargest_Prime_Factor(0x0?)\n\t/tmp/tmpt066g234_test.go:36\
    \ +0x405\ntesting.tRunner(0xc0001031e0, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for {\n        if n%prime == 0 {\n            return factor\n        }\n\
    \        prime++\n        factor++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpcv290ikl_test.go:42: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpcv290ikl_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpcv290ikl_test.go:42: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpcv290ikl_test.go:42:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.028s\nFAIL\n"
  timestamp: 1660075492
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ {\n        if n%p == 0 {\n            return p\n        }\n        p += 1\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpdenlxvw8_test.go:41: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpdenlxvw8_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpdenlxvw8_test.go:41: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpdenlxvw8_test.go:41:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpdenlxvw8_test.go:41: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n % i == 0 {\n            p += i\n            n /=\
    \ i\n        } else {\n            i++\n        }\n        if n == 1 {\n     \
    \       return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpog614mow_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpog614mow_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=49)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpog614mow_test.go:47: expected '%!s(int=29)', got '%!s(int=248)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 3\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if n == 1 {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075504
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n % p == 0 {\n            return p\n        }\n        if i >\
    \ n {\n            return n\n        }\n        i++\n        p++\n    }\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpjx8va6z2_test.go:45: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpjx8va6z2_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpjx8va6z2_test.go:45: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpjx8va6z2_test.go:45:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.037s\nFAIL\n"
  timestamp: 1660075492
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            factor++\n        }\n\
    \        prime++\n        n = n/prime\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=11)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    q :=\
    \ 2\n    for {\n        if n%p == 0 {\n            return p\n        }\n     \
    \   if n%q == 0 {\n            return q\n        }\n        if p*p > q*q {\n \
    \           p = p + 1\n        } else {\n            q = q + 1\n        }\n  \
    \  }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpqq4q1ytq_test.go:49: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpqq4q1ytq_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpqq4q1ytq_test.go:49: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpqq4q1ytq_test.go:49:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpqq4q1ytq_test.go:49: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.026s\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    prime := 2\n   \
    \ for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime++\n    \
    \        n /= i\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpotugu37x_test.go:42: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpotugu37x_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpotugu37x_test.go:42: expected '%!s(int=11)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpotugu37x_test.go:42:\
    \ expected '%!s(int=29)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.028s\nFAIL\n"
  timestamp: 1660075492
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            n = n/i\n            p++\n    \
    \    }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpbe34oau5_test.go:41: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpbe34oau5_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpbe34oau5_test.go:41: expected '%!s(int=7)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpbe34oau5_test.go:41:\
    \ expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpbe34oau5_test.go:41: expected '%!s(int=29)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.021s\nFAIL\n"
  timestamp: 1660075492
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n  \
    \          break\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp5w9ajtjb_test.go:42: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp5w9ajtjb_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp5w9ajtjb_test.go:42: expected '%!s(int=7)', got '%!s(int=31)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp5w9ajtjb_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp5w9ajtjb_test.go:42: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n \
    \           p += 1\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmps8bjzump_test.go:43: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmps8bjzump_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=17)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmps8bjzump_test.go:43: expected '%!s(int=29)', got '%!s(int=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.031s\nFAIL\n"
  timestamp: 1660075493
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            break\n        }\n        p += r\n        q /= p\n        r++\n \
    \   }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvli3g8n7_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpvli3g8n7_test.go:48:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpvli3g8n7_test.go:48: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpvli3g8n7_test.go:48:\
    \ expected '%!s(int=29)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.032s\nFAIL\n"
  timestamp: 1660075493
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    for\
    \ {\n        if q%p == 0 {\n            return p\n        }\n        p += 1\n\
    \        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n \
    \ candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpc1z2tkyn_test.go:42: expected '%!s(int=7)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpc1z2tkyn_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpc1z2tkyn_test.go:42: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.040s\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            n /= i\n        } else {\n         \
    \   return i\n        }\n        i++\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpg8qs71yi_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpg8qs71yi_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpg8qs71yi_test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpg8qs71yi_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpg8qs71yi_test.go:43: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075421
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if i == p {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075438
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            p += i\n            n /= i\n       \
    \ } else {\n            i++\n        }\n        if n == 1 {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk7w_8axi_test.go:46: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk7w_8axi_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=11)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk7w_8axi_test.go:46: expected '%!s(int=7)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk7w_8axi_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=23)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk7w_8axi_test.go:46: expected '%!s(int=29)', got '%!s(int=56)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    q :=\
    \ 2\n    r := 2\n    d := 2\n    i := 2\n    p := 2\n    q := 2\n    r := 2\n\
    \    d := 2\n    i := 2\n    for i < n {\n        if n % i == 0 {\n          \
    \  d *= i\n            n /= i\n        } else {\n            d *= i\n        \
    \    n /= i\n            p += 1\n        }\n        i += 1\n    }\n    if n >\
    \ 1 {\n        p += 1\n    }\n    if n > 2 {\n        q += 1\n    }\n    if n\
    \ > 3 {\n        r += 1\n    }\n    if n > 4 {\n        d += 1\n    }\n    if\
    \ n > 5 {\n        p += 1\n    }\n    if n > 6 {\n        q += 1\n    }\n    if\
    \ n > 7 {\n        r += 1\n    }\n    if n > 8 {\n        d += 1\n    }\n    if\
    \ n > 9 {\n        p += 1\n    }\n    if n > 10 {\n        q += 1\n    }\n   \
    \ if n > 11 {\n        r += 1\n    }\n    if n > 12 {\n        d += 1\n    }\n\
    \    if n > 13 {\n        p += 1\n    }\n    if n > 14 {\n        q += 1\n   \
    \ }\n    if n > 15 {\n        r += 1\n    }\n    if n > 16 {\n        d += 1\n\
    \    }\n    if n > 17 {\n        p += 1\n    }\n    if n > 18 {\n        q +=\
    \ 1\n    }\n    if n > 19 {\n        r += 1\n    }\n    if n > 20 {\n        d\
    \ += 1\n    }\n    if n > 21 {\n        p += 1\n    }\n    if n > 22 {\n     \
    \   q += 1\n    }\n    if n > 23 {\n        r += 1\n    }\n    if n > 24 {\n \
    \       d += 1\n    }\n    if n > 25 {\n        p += 1\n    }\n    if n > 26 {\n\
    \        q += 1\n    }\n    if n > 27 {\n        r += 1\n    }\n    if n > 28\
    \ {\n        d += 1\n    }\n    if n > 29 {\n        p += 1\n    }\n    if n >\
    \ 30 {\n        q += 1\n    }\n    if n > 31 {\n        r += 1\n    }\n    if\
    \ n > 32 {\n        d += 1\n    }\n    if n > 33 {\n        p += 1\n    }\n  \
    \  if n > 34 {\n        q += 1\n    }\n    if n > 35 {\n        r += 1\n    }\n\
    \    if n > 36 {\n        d += 1\n    }\n    if n > 37 {\n        p += 1\n   \
    \ }\n    if n > 38 {\n        q += 1\n    }\n    if \nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp84ndwz85_test.go:151:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075493
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ for i := 2; i <= n/prime; i++ {\n        if n%i == 0 {\n            prime =\
    \ i\n            break\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpv_pza_8p_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpv_pza_8p_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpv_pza_8p_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpv_pza_8p_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpv_pza_8p_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660075495
- exit_code: 0
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            n = n/prime\n       \
    \     factor = prime\n        } else {\n            prime++\n        }\n    }\n\
    \    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ i := 2; i <= n; i++ {\n        if n % i == 0 {\n            p = i\n        \
    \    break\n        }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpmngc3ct9_test.go:42: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpmngc3ct9_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpmngc3ct9_test.go:42: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpmngc3ct9_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpmngc3ct9_test.go:42: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if n%i == 0 {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp4f6hpa91_test.go:46: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp4f6hpa91_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp4f6hpa91_test.go:46: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp4f6hpa91_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp4f6hpa91_test.go:46: expected '%!s(int=29)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for {\n        if n%i == 0 {\n            n = n/i\n            p += 1\n\
    \        } else {\n            break\n        }\n        i += 1\n    }\n    return\
    \ p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp14b0n_8r_test.go:46: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp14b0n_8r_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp14b0n_8r_test.go:46: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp14b0n_8r_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp14b0n_8r_test.go:46: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.041s\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n\n    for\
    \ {\n        if q%p == 0 {\n            break\n        }\n        p += 1\n   \
    \     q /= p\n    }\n\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpc7tu2oyf_test.go:45: expected '%!s(int=7)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpc7tu2oyf_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpc7tu2oyf_test.go:45: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    d :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ = p * d\n        q = q / p\n        d++\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpf4g83uaz_test.go:45: expected '%!s(int=5)', got '%!s(int=12)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpf4g83uaz_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=12)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpf4g83uaz_test.go:45: expected '%!s(int=7)', got '%!s(int=12)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpf4g83uaz_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpf4g83uaz_test.go:45: expected '%!s(int=29)', got '%!s(int=240)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660075495
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n = n/i\n        } else {\n          \
    \  p = i\n            i++\n        }\n        if i == p {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075438
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n   \
    \         factor++\n        } else {\n            prime++\n        }\n    }\n\
    \    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpc8fhrdu1_test.go:44: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpc8fhrdu1_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpc8fhrdu1_test.go:44: expected '%!s(int=7)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpc8fhrdu1_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpc8fhrdu1_test.go:44: expected '%!s(int=29)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.020s\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    largestPrimeFactor\
    \ := 1\n    for i <= n {\n        if n % i == 0 {\n            largestPrimeFactor\
    \ = i\n            break\n        }\n        i += 1\n    }\n    return largestPrimeFactor\n\
    }\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpsqagvkyt_test.go:44: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpsqagvkyt_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpsqagvkyt_test.go:44: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpsqagvkyt_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpsqagvkyt_test.go:44: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.034s\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    p :=\
    \ 2\n    for i <= n {\n        if n%i == 0 {\n            p = i\n        }\n \
    \       i += p\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpsfvsk18__test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpsfvsk18__test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpsfvsk18__test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpsfvsk18__test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=328)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpsfvsk18__test.go:43: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.027s\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            p += i\n            n /= i\n       \
    \ } else {\n            i++\n        }\n        if n == 1 {\n            return\
    \ p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk7w_8axi_test.go:46: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk7w_8axi_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=11)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk7w_8axi_test.go:46: expected '%!s(int=7)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk7w_8axi_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=23)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk7w_8axi_test.go:46: expected '%!s(int=29)', got '%!s(int=56)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    i := 2\n    factor\
    \ := 1\n    for ; i*i <= n; i += 2 {\n        if n%i == 0 {\n            factor\
    \ *= i\n            n /= i\n        }\n    }\n    if n > 1 {\n        factor *=\
    \ n\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpmxo6cp5e_test.go:46: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpmxo6cp5e_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpmxo6cp5e_test.go:46: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpmxo6cp5e_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=328)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpmxo6cp5e_test.go:46: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            factor++\n        }\n\
    \        prime++\n        n = n/prime\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=11)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 2
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    p :=\
    \ 2\n    for i < n {\n        if n % i == 0 {\n            p = i\n        }\n\
    \        i++\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp50ghh2dj_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n\n    p := 2\n    q := n\n\n    for {\n        if q%p == 0 {\n       \
    \     return p\n        }\n\n        p += 2\n        q -= p\n    }\n}\n\nfunc\
    \ TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075445
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    d := 1\n    while q > 1 {\n        if q%p\
    \ == 0 {\n            d += 1\n        }\n        p += d\n        q /= p\n    }\n\
    \    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf9y1815s_test.go:20:11: expected '';'', found q

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075494
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    r :=\
    \ 1\n    i := 0\n    for {\n        if q%p == 0 {\n            break\n       \
    \ }\n        p += q\n        i++\n    }\n    for {\n        if q%p == 0 {\n  \
    \          break\n        }\n        q -= p\n        r *= p\n        i++\n   \
    \ }\n    return r\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075507
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    i := 2\n    for\
    \ {\n        if n%i == 0 {\n            n /= i\n        } else {\n           \
    \ if i > p {\n                p = i\n            }\n            i++\n        }\n\
    \        if n == 1 {\n            return p\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpk_1p18d2_test.go:48: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpk_1p18d2_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpk_1p18d2_test.go:48: expected '%!s(int=7)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpk_1p18d2_test.go:48:\
    \ expected '%!s(int=11)', got '%!s(int=10)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpk_1p18d2_test.go:48: expected '%!s(int=29)', got '%!s(int=28)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.036s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n    d :=\
    \ 1\n    for {\n        if q%p == 0 {\n            break\n        }\n        p\
    \ += d\n        q /= p\n        d++\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpwmhjygqg_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpwmhjygqg_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpwmhjygqg_test.go:45: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpwmhjygqg_test.go:45:\
    \ expected '%!s(int=29)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2 // remove even number\n\
    \    for i := 2; i <= n; i += 2 {\n        if n%i == 0 {\n            return i\n\
    \        }\n    }\n    return n\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpcdp314nz_test.go:40: expected '%!s(int=5)', got '%!s(int=13)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpcdp314nz_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpcdp314nz_test.go:40: expected '%!s(int=7)', got '%!s(int=61)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpcdp314nz_test.go:40:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpcdp314nz_test.go:40: expected '%!s(int=29)', got '%!s(int=13193)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p = i\n            break\n    \
    \    }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p = i\n            break\n    \
    \    }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpvaapow2k_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpvaapow2k_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075417
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    i :=\
    \ 2\n    for {\n        if n % i == 0 {\n            n /= i\n            if n\
    \ == 1 {\n                return p\n            }\n            p++\n        }\
    \ else {\n            i++\n        }\n    }\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpgbhb3rkl_test.go:47: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpgbhb3rkl_test.go:47:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpgbhb3rkl_test.go:47: expected '%!s(int=11)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpgbhb3rkl_test.go:47:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    for\
    \ i := 2; i <= n; i++ {\n        if n % i == 0 {\n            p += 1\n       \
    \ }\n    }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n\
    \  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmp159dwgkw_test.go:41: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp159dwgkw_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp159dwgkw_test.go:41: expected '%!s(int=11)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp159dwgkw_test.go:41:\
    \ expected '%!s(int=29)', got '%!s(int=13)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.052s\nFAIL\n"
  timestamp: 1660075497
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2 // remove 2 since 2 is\
    \ the smallest prime factor\n    n += 2 // add 2 since 2 is the smallest prime\
    \ factor\n    n += 2 // add 2 since 2 is the smallest prime factor\n    for i\
    \ := 3; i <= n; i++ {\n        if n%i == 0 {\n            return i\n        }\n\
    \    }\n    return n\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp1oq3wj1w_test.go:42: expected '%!s(int=5)', got '%!s(int=17)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp1oq3wj1w_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=29)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp1oq3wj1w_test.go:42: expected '%!s(int=7)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp1oq3wj1w_test.go:42:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp1oq3wj1w_test.go:42: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.038s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ factor := 1\n    for n > 1 {\n        if n % prime == 0 {\n            n /=\
    \ prime\n            factor++\n        } else {\n            prime++\n       \
    \ }\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpsukt251j_test.go:45: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpsukt251j_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpsukt251j_test.go:45: expected '%!s(int=11)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpsukt251j_test.go:45:\
    \ expected '%!s(int=29)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.043s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    prime := 2\n   \
    \ factor := 2\n    for n > 1 {\n        if n % prime == 0 {\n            n /=\
    \ prime\n            factor = prime\n        } else {\n            prime++\n \
    \       }\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp7x82zwb5_test.go:45: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp7x82zwb5_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=13)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp7x82zwb5_test.go:45: expected '%!s(int=7)', got '%!s(int=31)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp7x82zwb5_test.go:45:\
    \ expected '%!s(int=11)', got '%!s(int=47)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp7x82zwb5_test.go:45: expected '%!s(int=29)', got '%!s(int=733)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.042s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    for i := 3; i <= n; i++ {\n        if n % i == 0 {\n \
    \           p += i\n            n /= i\n        }\n    }\n    return p\n}\n\n\
    func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp7vp98h88_test.go:44: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp7vp98h88_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=14)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp7vp98h88_test.go:44: expected '%!s(int=7)', got '%!s(int=12)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp7vp98h88_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=21)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp7vp98h88_test.go:44: expected '%!s(int=29)', got '%!s(int=56)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.040s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            p += 1\n        }\n    }\n    return\
    \ p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=3)', got '%!s(int=5)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpocmmlhr4_test.go:40:\
    \ expected '%!s(int=11)', got '%!s(int=17)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpocmmlhr4_test.go:40: expected '%!s(int=29)', got '%!s(int=17)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075421
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    max := n\n    for\
    \ n > 1 {\n        if n % p == 0 {\n            max = n\n            break\n \
    \       }\n        p += 1\n    }\n    return max\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpnkkk22l9_test.go:43: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpnkkk22l9_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpnkkk22l9_test.go:43: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpnkkk22l9_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpnkkk22l9_test.go:43: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.029s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n\n    for\
    \ {\n        if q%p == 0 {\n            return p\n        }\n        p += 1\n\
    \        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n \
    \ candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp2e1irawo_test.go:43: expected '%!s(int=7)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp2e1irawo_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp2e1irawo_test.go:43: expected '%!s(int=29)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.043s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    q :=\
    \ 2\n    for {\n        if n%p == 0 {\n            return p\n        }\n     \
    \   if n%q == 0 {\n            return q\n        }\n        p += q\n        q\
    \ += p\n        n /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpklunz0m2_test.go:47: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpklunz0m2_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpklunz0m2_test.go:47: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpklunz0m2_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=26)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpklunz0m2_test.go:47: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.022s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    max := n\n    for\
    \ n > 1 {\n        if n % p == 0 {\n            max = n\n            break\n \
    \       }\n        p += 1\n    }\n    return max\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpnkkk22l9_test.go:43: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpnkkk22l9_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpnkkk22l9_test.go:43: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpnkkk22l9_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpnkkk22l9_test.go:43: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.029s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    p := 2\n    q := n\n\n    for\
    \ {\n        if q%p == 0 {\n            return p\n        }\n        p += 2\n\
    \        q /= p\n    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n \
    \ candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpz_nwjmkz_test.go:43: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpz_nwjmkz_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpz_nwjmkz_test.go:43: expected '%!s(int=7)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpz_nwjmkz_test.go:43:\
    \ expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpz_nwjmkz_test.go:43: expected '%!s(int=29)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.042s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for n > 1 {\n        if n%prime == 0 {\n            factor++\n        }\n\
    \        prime++\n        n = n/prime\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmp7yzmts6t_test.go:43: expected '%!s(int=11)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmp7yzmts6t_test.go:43:\
    \ expected '%!s(int=29)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075417
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    p := 2\n    q :=\
    \ 2\n    for {\n        if n%p == 0 {\n            n = n / p\n            q =\
    \ q * p\n        }\n        if n%q == 0 {\n            n = n / q\n           \
    \ p = p * q\n        }\n        if n == 1 {\n            return p\n        }\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075510
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            break\n        }\n        p += r\n        q /= p\n        r++\n \
    \   }\n    return p\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpvli3g8n7_test.go:48: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpvli3g8n7_test.go:48:\
    \ expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpvli3g8n7_test.go:48: expected '%!s(int=11)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpvli3g8n7_test.go:48:\
    \ expected '%!s(int=29)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.032s\nFAIL\n"
  timestamp: 1660075493
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0 {\n\
    \            return r\n        }\n        if q%p == 1 {\n            return p\n\
    \        }\n        if q%p == 2 {\n            return p\n        }\n        if\
    \ q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n       \
    \     return p\n        }\n        if q%p == 5 {\n            return p\n     \
    \   }\n        if q%p == 6 {\n            return p\n        }\n        if q%p\
    \ == 7 {\n            return p\n        }\n        if q%p == 8 {\n           \
    \ return p\n        }\n        if q%p == 9 {\n            return p\n        }\n\
    \        if q%p == 10 {\n            return p\n        }\n        if q%p == 11\
    \ {\n            return p\n        }\n        if q%p == 12 {\n            return\
    \ p\n        }\n        if q%p == 13 {\n            return p\n        }\n    \
    \    if q%p == 14 {\n            return p\n        }\n        if q%p == 15 {\n\
    \            return p\n        }\n        if q%p == 16 {\n            return p\n\
    \        }\n        if q%p == 17 {\n            return p\n        }\n        if\
    \ q%p == 18 {\n            return p\n        }\n        if q%p == 19 {\n     \
    \       return p\n        }\n        if q%p == 20 {\n            return p\n  \
    \      }\n        if q%p == 21 {\n            return p\n        }\n        if\
    \ q%p == 22 {\n            return p\n        }\n        if q%p == 23 {\n     \
    \       return p\n        }\n        if q%p == 24 {\n            return p\n  \
    \      }\n        if q%p == 25 {\n            return p\n        }\n        if\
    \ q%p == 26 {\n            return p\n        }\n        if q%p == 27 {\n     \
    \       return p\n        }\n        if q%p == 28 {\n            return p\n  \
    \      }\n        if q%p == 29 {\n            return p\n        }\n        if\
    \ q%p == 30 {\n            return p\n        }\n        if q%p == 31 {\n     \
    \       return p\n        }\n        if q%p == 32 {\n            return p\n  \
    \      }\n        if q%p == 33 {\n            return p\n        }\n        if\
    \ q%p == 34 {\n            return p\n        }\n        if q%p == 35 {\n     \
    \       return p\n        }\n        if q%p == 36 {\n            return p\n  \
    \      }\n        if q%p == 37 {\n            return p\n        }\n        if\
    \ q%p == 38 {\n            return p\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsomf4jli_test.go:138:6: expected ''('', found TestLargest_Prime_Factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075420
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1 // Make n positive\n\
    \    n |= n >> 1 // Make n odd\n    n |= n >> 2 // Make n even\n    n |= n >>\
    \ 4 // Make n odd\n    n |= n >> 8 // Make n even\n    n |= n >> 16 // Make n\
    \ odd\n    n |= n >> 32 // Make n even\n    n |= n >> 64 // Make n odd\n    n\
    \ |= n >> 128 // Make n even\n    n |= n >> 256 // Make n odd\n    n |= n >> 512\
    \ // Make n even\n    n |= n >> 1024 // Make n odd\n    n |= n >> 2048 // Make\
    \ n even\n    return int(n + 1)\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T)\
    \ {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpjorf3mf2_test.go:47: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpjorf3mf2_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=32)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpjorf3mf2_test.go:47: expected '%!s(int=7)', got '%!s(int=64)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpjorf3mf2_test.go:47:\
    \ expected '%!s(int=11)', got '%!s(int=512)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpjorf3mf2_test.go:47: expected '%!s(int=29)', got '%!s(int=16384)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            factor++\n\
    \            if factor > prime {\n                prime = factor\n           \
    \ }\n        }\n    }\n    return prime\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpdmzsy29k_test.go:44: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpdmzsy29k_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpdmzsy29k_test.go:44: expected '%!s(int=7)', got '%!s(int=6)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpdmzsy29k_test.go:44:\
    \ expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpdmzsy29k_test.go:44: expected '%!s(int=29)', got '%!s(int=16)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    prime := 2\n    factor := 2\n    for {\n        if n % prime == 0\
    \ {\n            n /= prime\n            factor++\n        } else {\n        \
    \    break\n        }\n        prime++\n    }\n    return factor\n}\n\nfunc TestLargest_Prime_Factor(t\
    \ *testing.T) {\n  candidate := largest_prime_factor\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(15), expected: 5 },\n     { actual: candidate(27), expected:\
    \ 3 },\n     { actual: candidate(63), expected: 7 },\n     { actual: candidate(330),\
    \ expected: 11 },\n     { actual: candidate(13195), expected: 29 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmp0_ugzxt5_test.go:48: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmp0_ugzxt5_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmp0_ugzxt5_test.go:48: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmp0_ugzxt5_test.go:48:\
    \ expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmp0_ugzxt5_test.go:48: expected '%!s(int=29)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.050s\nFAIL\n"
  timestamp: 1660075499
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 2\n    p := 2\n    for\
    \ {\n        if n%p == 0 {\n            return p\n        }\n        p += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075430
- exit_code: null
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    n -= 1\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            return i\n        }\n        i += 2\n\
    \    }\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075504
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 1\n\
    \    for factor < n {\n        if n%prime == 0 {\n            n /= prime\n   \
    \     } else {\n            prime++\n        }\n        factor++\n    }\n    return\
    \ factor\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
    \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
    \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
    \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__1\
    \ (0.00s)\n        tmp0tlvi6zf_test.go:44: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    if n < 2 {\n        return n\n\
    \    }\n    prime := 2\n    max := n\n    for {\n        if n % prime == 0 {\n\
    \            max = n\n            break\n        }\n        prime++\n    }\n \
    \   return max\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpbl2exv31_test.go:46: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__1 (0.00s)\n        tmpbl2exv31_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=27)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__2\
    \ (0.00s)\n        tmpbl2exv31_test.go:46: expected '%!s(int=7)', got '%!s(int=63)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__3 (0.00s)\n        tmpbl2exv31_test.go:46:\
    \ expected '%!s(int=11)', got '%!s(int=330)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__4\
    \ (0.00s)\n        tmpbl2exv31_test.go:46: expected '%!s(int=29)', got '%!s(int=13195)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a\
    \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunc largest_prime_factor(n int) int {\n    prime := 2\n    factor := 2\n\
    \    for factor < n {\n        if n%prime == 0 {\n            n = n/prime\n  \
    \      } else {\n            prime++\n        }\n        factor++\n    }\n   \
    \ return prime\n}\n\nfunc TestLargest_Prime_Factor(t *testing.T) {\n  candidate\
    \ := largest_prime_factor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15),\
    \ expected: 5 },\n     { actual: candidate(27), expected: 3 },\n     { actual:\
    \ candidate(63), expected: 7 },\n     { actual: candidate(330), expected: 11 },\n\
    \     { actual: candidate(13195), expected: 29 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Prime_Factor (0.00s)\n    --- FAIL: TestLargest_Prime_Factor/test_num__0\
    \ (0.00s)\n        tmpnvqaean2_test.go:44: expected '%!s(int=5)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__2 (0.00s)\n        tmpnvqaean2_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestLargest_Prime_Factor/test_num__3\
    \ (0.00s)\n        tmpnvqaean2_test.go:44: expected '%!s(int=11)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Prime_Factor/test_num__4 (0.00s)\n        tmpnvqaean2_test.go:44:\
    \ expected '%!s(int=29)', got '%!s(int=26)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.032s\nFAIL\n"
  timestamp: 1660075499
