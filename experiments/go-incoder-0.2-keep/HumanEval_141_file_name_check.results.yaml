language: go_test.go
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to 'false'\n  \
    \  valid := false\n    \n    // Initialize a variable to hold the file's name\
    \ without extension\n    file_name_without_extension := file_name\n    \n    //\
    \ Initialize a variable to hold the file's extension\n    file_name_extension\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension\n    file_name_without_extension := file_name\n    \n    // Initialize\
    \ a variable to hold the file's extension\n    file_name_extension := \"\"\n \
    \   \n    // Initialize a variable to hold the file's name without extension\n\
    \    file_name_without_extension := file_name\n    \n    // Initialize a variable\
    \ to hold the file's extension\n    file_name_extension := \"\"\n    \n    //\
    \ Initialize a variable to hold the file's name without extension\n    file_name_without_extension\
    \ := file_name\n    \n    // Initialize a variable to hold the file's extension\n\
    \    file_name_extension := \"\"\n    \n    // Initialize a variable to hold the\
    \ file's name without extension\n    file_name_without_extension := file_name\n\
    \    \n    // Initialize a variable to hold the file's extension\n    file_name_extension\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension\n    file_name_without_extension := file_name\n    \n    // Initialize\
    \ a variable to hold the file's extension\n    file_name_extension := \"\"\n \
    \   \n    // Initialize a variable to hold the file's name without extension\n\
    \    file_name_without_extension := file_name\n    \n    // Initialize a variable\
    \ to hold the file's extension\n    file_name_extension := \"\"\n    \n    //\
    \ Initialize a variable to hold the file's name without extension\n    file_name_without_extension\
    \ := file_name\n    \n    // Initialize a variable to hold the file's extension\n\
    \    file_name_extension := \"\"\n    \n    // Initialize a variable to hold the\
    \ file's name without extension\n    file_name_without_extension := file_name\n\
    \    \n    // Initialize a variable to hold the file's extension\n    file_name_extension\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension\n    file_name_without_extension := file_name\n    \n    // Initialize\
    \ a variable to hold the file's extension\n    file_name_extension := \"\"\n \
    \   \n    // Initialize a variable to hold the file's name without extension\n\
    \    file_name_without_extension := file_name\n    \n    // Initialize a variable\
    \ to hold the file's extension\n    file_name_extension := \"\"\n    \n    //\
    \ Initialize a variable to hold the file's name without extension\n    file_name_without_extension\
    \ := file_name\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3ckbtagz_test.go:93:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'.\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_name_length' to\
    \ '0'.\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_char'\
    \ to '0'.\n    file_name_char := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    file_name_dot_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    file_name_dot_position := 0\n    \n  \
    \  // Initialize a variable 'file_name_dot_position' to '0'.\n    file_name_dot_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n\
    \    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    file_name_dot_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    file_name_dot_position := 0\n    \n  \
    \  // Initialize a variable 'file_name_dot_position' to '0'.\n    file_name_dot_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n\
    \    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    file_name_dot_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    file_name_dot_position := 0\n    \n  \
    \  // Initialize a variable 'file_name_dot_position' to '0'.\n    file_name_dot_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n\
    \    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    file_name_dot_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    file_name_dot_position := 0\n    \n  \
    \  // Initialize a variable 'file_name_dot_position' to '0'.\n    file_name_dot_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n\
    \    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    file_name_dot_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    file_name_dot_position := 0\n    \n  \
    \  // Initialize a variable 'file_name_dot_position' to '0'.\n    \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa0yeqp3t_test.go:87:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpf5d25qvu_test.go:64: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'.\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_extension' to\
    \ an empty string.\n    file_extension := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_length' to 0.\n    file_name_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_character' to 0.\n    file_name_character := 0\n    \n\
    \    // Initialize a variable 'dot_position' to 0.\n    dot_position := 0\n  \
    \  \n    // Initialize a variable 'dot_position' to 0.\n    dot_position := 0\n\
    \    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position :=\
    \ 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbakez53t_test.go:107:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'False'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_parts' to\
    \ a slice of strings with length 3\n    file_name_parts := make([]string, 3)\n\
    \    \n    // Initialize a variable 'file_name_parts_index' to 0\n    file_name_parts_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_parts_length' to 0\n   \
    \ file_name_parts_length := 0\n    \n    // Initialize a variable 'file_name_parts_string'\
    \ to an empty string\n    file_name_parts_string := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_parts_string_index' to 0\n    file_name_parts_string_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_parts_string_length' to\
    \ 0\n    file_name_parts_string_length := 0\n    \n    // Initialize a variable\
    \ 'file_name_parts_string_length' to 0\n    file_name_parts_string_length := 0\n\
    \    \n    // Initialize a variable 'file_name_parts_string' to an empty string\n\
    \    file_name_parts_string := \"\"\n    \n    // Initialize a variable 'file_name_parts_string_index'\
    \ to 0\n    file_name_parts_string_index := 0\n    \n    // Initialize a variable\
    \ 'file_name_parts_string_length' to 0\n    file_name_parts_string_length := 0\n\
    \    \n    // Initialize a variable 'file_name_parts_string_length' to 0\n   \
    \ file_name_parts_string_length := 0\n    \n    // Initialize a variable 'file_name_parts_string'\
    \ to an empty string\n    file_name_parts_string := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_parts_string_index' to 0\n    file_name_parts_string_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_parts_string_length' to\
    \ 0\n    file_name_parts_string_length := 0\n    \n    // Initialize a variable\
    \ 'file_name_parts_string_length' to 0\n    file_name_parts_string_length := 0\n\
    \    \n    // Initialize a variable 'file_name_parts_string' to an empty string\n\
    \    file_name_parts_string := \"\"\n    \n    // Initialize a variable 'file_name_parts_string_index'\
    \ to 0\n    file_name_parts_string_index := 0\n    \n    // Initialize a variable\
    \ 'file_name_parts_string_length' to 0\n    file_name_parts_string_length := 0\n\
    \    \n    // Initialize a variable 'file_name_parts_string_length' to 0\n   \
    \ file_name_parts_string_length := \nfunc TestFile_Name_Check(t *testing.T) {\n\
    \  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpysmtne_8_test.go:81:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpf5d25qvu_test.go:64: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n</cell>\n\
    <text>\nRun the cell below to test your solution.\n\n\n</text>\n<cell>\n# Do not\
    \ modify this cell!\n\n# Test 1\nfile_name_check(\"example.txt\")\n</cell>\n<cell>\n\
    # Test 2\nfile_name_check(\"1example.dll\")\n</cell>\n<cell>\n# Test 3\nfile_name_check(\"\
    example\")\n</cell>\n<cell>\n# Test 4\nfile_name_check(\"1example\")\n</cell>\n\
    <cell>\n# Test 5\nfile_name_check(\"1example.txt\")\n</cell>\n<cell>\n# Test 6\n\
    file_name_check(\"example.txt\")\n</cell>\n<cell>\n# Test 7\nfile_name_check(\"\
    example\")\n</cell>\n<cell>\n# Test 8\nfile_name_check(\"1example\")\n</cell>\n\
    <cell>\n# Test 9\nfile_name_check(\"1example.txt\")\n</cell>\n<cell>\n# Test 10\n\
    file_name_check(\"example.txt\")\n</cell>\n<cell>\n# Test 11\nfile_name_check(\"\
    example\")\n</cell>\n<cell>\n# Test 12\nfile_name_check(\"1example\")\n</cell>\n\
    <cell>\n# Test 13\nfile_name_check(\"1example.txt\")\n</cell>\n<cell>\n# Test\
    \ 14\nfile_name_check(\"example.txt\")\n</cell>\n<cell>\n# Test 15\nfile_name_check(\"\
    example\")\n</cell>\n<cell>\n# Test 16\nfile_name_check(\"1example\")\n</cell>\n\
    <cell>\n# Test 17\nfile_name_check(\"1example.txt\")\n</cell>\n<cell>\n# Test\
    \ 18\nfile_name_check(\"example.txt\")\n</cell>\n<cell>\n# Test 19\nfile_name_check(\"\
    example\")\n</cell>\n<cell>\n# Test 20\nfile_name_check(\"1example\")\n</cell>\n\
    <cell>\n# Test 21\nfile_name_check(\"1example.txt\")\n</cell>\n<cell>\n# Test\
    \ 22\nfile_name_check(\"example.txt\")\n</cell>\n<cell>\n# Test 23\nfile_name_check(\"\
    example\")\n</cell>\n<cell>\n# Test 24\nfile_name_check(\"1example\")\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgxkynass_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n    \n    // 2. The file's name contains exactly one dot '.'\n  \
    \  if file_name[len(file_name)-1] == '.' {\n        return \"No\"\n    }\n   \
    \ \n    // 3. The substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n    if file_name[:len(file_name)-1]\
    \ == \"\" {\n        return \"No\"\n    }\n    \n    // 4. The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n    valid_extensions\
    \ := []string{\"txt\", \"exe\", \"dll\"}\n    \n    // 5. Check whether the file's\
    \ name contains one of the valid extensions.\n    for _, extension := range valid_extensions\
    \ {\n        if file_name[len(file_name)-len(extension):] == extension {\n   \
    \         return \"Yes\"\n        }\n    }\n    \n    return \"No\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpfig1s6ca_test.go:88: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmpfig1s6ca_test.go:88: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmpfig1s6ca_test.go:88: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpfig1s6ca_test.go:88: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpfig1s6ca_test.go:88: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmpfig1s6ca_test.go:88: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmpfig1s6ca_test.go:88: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to false\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_parts' to\
    \ an empty array\n    file_name_parts := []string{}\n    \n    // Initialize a\
    \ variable 'file_name_length' to 0\n    file_name_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_part' to an empty string\n    file_name_part := \"\"\n\
    \    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjcymhdl_test.go:90:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpf5d25qvu_test.go:64: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5c3fvxov_test.go:92:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n</cell>\n\
    <text>\nRun the code cell below to test your solution. After running it through\
    \ all the code cells, press the Submit button (located on the left of this cell)\
    \ to submit your solution to the online judge for grading and receive credit.\
    \ Running your solution on your own computer or on your own personal computer\
    \ is fine, but running it on others' might get you into trouble.\n\nThe online\
    \ judge has a regular grading process. It's likely that your solution will pass\
    \ all the specifications of the written assignment, but others might find that\
    \ there are bugs. Therefore, please carefully study the problem carefully to make\
    \ sure that your code is correct. Otherwise, cool! If there is anything you don't\
    \ understand, don't hesitate to contact us at removed@example.com.\n\n\n</text>\n\
    <cell>\n# run this code to turn in your work!\nfrom coursetools.submission import\
    \ Submission\nSubmission().submit()\n</cell>\n<text>\nWhen you finish early, you\
    \ can also submit your final project by clicking on the \"Submit Project\" button\
    \ in the lower right corner of this notebook, located on the left side of the\
    \ notebook.\n\nThe Submit Project button will appear in the top right corner once\
    \ you push it.\n\n\n</text>\n<text>\nSubmission In\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5sbfglch_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5c3fvxov_test.go:92:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // \nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp48vd4kn8_test.go:107:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_name_length' to\
    \ 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_part'\
    \ to an empty string\n    file_name_part := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_part_length' to 0\n    file_name_part_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_part_count' to 0\n    file_name_part_count := 0\n    \n\
    \    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzp2qd1md_test.go:92:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to store whether\
    \ the file's name is valid\n    valid := false\n    \n    // Initialize a variable\
    \ to store the number of digits in the file's name\n    num_digits := 0\n    \n\
    \    // Initialize a variable to store the number of dots in the file's name\n\
    \    num_dots := 0\n    \n    // Initialize a variable to store the number of\
    \ letters in the file's name\n    num_letters := 0\n    \n    // Initialize a\
    \ variable to store the number of characters in the file's name\n    num_chars\
    \ := 0\n    \n    // Initialize a variable to store the number of characters in\
    \ the file's name\n    num_chars := len(file_name)\n    \n    // Initialize a\
    \ variable to store the number of characters in the file's name\n    num_chars\
    \ := len(file_name)\n    \n    // Initialize a variable to store the number of\
    \ characters in the file's name\n    num_chars := len(file_name)\n    \n    //\
    \ Initialize a variable to store the number of characters in the file's name\n\
    \    num_chars := len(file_name)\n    \n    // Initialize a variable to store\
    \ the number of characters in the file's name\n    num_chars := len(file_name)\n\
    \    \n    // Initialize a variable to store the number of characters in the file's\
    \ name\n    num_chars := len(file_name)\n    \n    // Initialize a variable to\
    \ store the number of characters in the file's name\n    num_chars := len(file_name)\n\
    \    \n    // Initialize a variable to store the number of characters in the file's\
    \ name\n    num_chars := len(file_name)\n    \n    // Initialize a variable to\
    \ store the number of characters in the file's name\n    num_chars := len(file_name)\n\
    \    \n    // Initialize a variable to store the number of characters in the file's\
    \ name\n    num_chars := len(file_name)\n    \n    // Initialize a variable to\
    \ store the number of characters in the file's name\n    num_chars := len(file_name)\n\
    \    \n    // Initialize a variable to store the number of characters in the file's\
    \ name\n    num_chars := len(file_name)\n    \n    // Initialize a variable to\
    \ store the number of characters in the file's name\n    num_chars := len(file_name)\n\
    \    \n    // Initialize a variable to store the number of characters in the file's\
    \ name\n    num_chars := len(file_name)\n    \n    // Initialize a variable to\
    \ store the number of characters in the file's name\n    num_chars := len(file_name)\n\
    \    \n    // Initialize a variable to store the number of characters in the file's\
    \ name\n    num_chars := len(file_name)\n    \n    // Initialize a variable to\
    \ store the number of characters in the file's name\n    num_chars := len(file_name)\n\
    \    \n    // Initialize a variable to store the number of characters in the file's\
    \ name\n    num_chars := len(file_name)\n    \n    // Initialize a variable to\
    \ store the number of characters in the file's \nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp81kfu338_test.go:92:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n`\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg3ffuvq__test.go:25:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/26825814)\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question. He wants to know if there is a way to check a\
    \ file name using regex or some other method. He also wants to know if there is\
    \ a way to check a file name using regex. He also wants to know if there is a\
    \ way to check a file name using regex. He also wants to know if there is a way\
    \ to check a file name using regex. He also wants to know if there is a way to\
    \ check a file name using regex. He also wants to know if there is a way to check\
    \ a file name using regex. He also wants to know if there is a way to check a\
    \ file name using regex. He also wants to know if there is a way to check a file\
    \ name using regex. He also wants to know if there is a way to check a file name\
    \ using regex. He also wants to know if there is a way to check a file name using\
    \ regex. He also wants to know if there is a way to check a file name using regex.\
    \ He also wants to know if there is a way to check a file name using regex. He\
    \ also wants to know if there is a way to check a file name using regex. He also\
    \ wants to know if there is a way to check a file name using regex. He also wants\
    \ to know if there is a way to check a file name using regex. He also wants to\
    \ know if there is a way to check a file name using regex. He also wants to know\
    \ if there is a way to check a file name using regex. He also wants to know if\
    \ there is a way to check a file name using regex. He also wants to know if there\
    \ is a way to check a file name using regex. He also wants to know if there is\
    \ a way to check a file name using regex. He also wants to know if there is a\
    \ way to check a file name using regex. He also wants to know if there is a way\
    \ to check a file name using regex. He also wants to know if there is a way to\
    \ check a file name using regex. He also wants to know if there is a way to check\
    \ a file name using regex. He also wants to know if there is a way to check a\
    \ file name using regex. He also wants to know if there is a way to check a file\
    \ name using regex. He also wants to know if there is a way to check a file name\
    \ using regex. He also wants to know if there is a way to check a file name using\
    \ regex. He \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3atziiir_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n</cell>\n\
    <text>\nRun the cell below to test your function\n\n\n</text>\n<cell>\n# Run this\
    \ cell to test your function\nassert(file_name_check(\"example.txt\") == \"Yes\"\
    )\nassert(file_name_check(\"1example.dll\") == \"No\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string representing a file's name, and returns\
    \ the file's extension.\nA file's extension is considered to be valid if and only\
    \ if all the following conditions are met:\n- There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n- The file's name contains exactly one\
    \ dot '.'\n- The substring before the dot should not be empty, and it starts with\
    \ a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"\
    example.txt\") # => 'txt'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    example.exe\") # => 'exe'\nfile_name_check(\"1example.txt\") # => 'No' (the name\
    \ should start with a latin alphapet letter)\nfile_name_check(\"example\") # =>\
    \ 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    1\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example1\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    1example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example1.txt\") # => 'No' (the name should start with a latin alphapet letter)\n\
    file_name_check(\"example1.exe\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\nfile_name_check(\"example1.dll\") # => 'No' (the name should\
    \ start with a latin alphapet letter)\nfile_name_check(\"example1.exe.txt\") #\
    \ => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example1.exe.txt.exe\") # => 'No' (the name should start with a latin alphapet\
    \ letter)\nfile_name_check(\"example1.exe.txt.exe.txt\") # => 'No' (the name should\
    \ start with a latin alphapet letter)\nfile_name_check(\"example1.exe.txt.exe.txt.exe\"\
    ) \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphsvisbtn_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to indicate whether\
    \ the file's name is valid\n    var is_valid = true \n\n    // Initialize a boolean\
    \ variable to indicate whether the file's name contains more than three digits\
    \ ('0'-'9')\n    var contains_three_digits = false \n\n    // Initialize a boolean\
    \ variable to indicate whether the file's name contains exactly one dot '.'\n\
    \    var contains_one_dot = false \n\n    // Initialize a boolean variable to\
    \ indicate whether the file's name starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n    var contains_letter_a = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to indicate whether the file's name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmefc1trs_test.go:72:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n</code>\n\
    <|/ a tags=go |>\n<| c |>\nThanks for your answer. I'm new to golang and I'm still\
    \ trying to understand your code. Could you please explain to me what does `return\
    \ \"\"` mean? And what does `return \"No\"` mean? Thanks.\n<|/ c |>\n<| c |>\n\
    The return statement is just to return a value to the caller. In the code above,\
    \ `return \"\"` means that the function will return a blank string to the caller.\
    \ `return \"No\"` means that the function will return a string `\"No\"` to the\
    \ caller. Hope this helps.\n<|/ c |>\n<| c |>\nThanks. But I still don't understand\
    \ why `return \"\"` means that the function will return a blank string to the\
    \ caller. `return \"No\"` means that the function will return a string `\"No\"\
    ` to the caller. Could you please explain to me what does `return \"\"` mean?\
    \ Thanks.\n<|/ c |>\n<| c |>\nThe `return` statement is just to return a value\
    \ to the caller. In the code above, `return \"\"` means that the function will\
    \ return a blank string to the caller. `return \"No\"` means that the function\
    \ will return a string `\"No\"` to the caller. Hope this helps.\n<|/ c |>\n<|\
    \ c |>\nThanks. But I still don't understand why `return \"\"` means that the\
    \ function will return a blank string to the caller. `return \"No\"` means that\
    \ the function will return a string `\"No\"` to the caller. Could you please explain\
    \ to me what does `return \"\"` mean? Thanks.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf__nultx_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'False'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_substring'\
    \ to an empty string\n    file_name_substring := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_first_character' to an empty string\n    file_name_first_character\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_last_character' to an\
    \ empty string\n    file_name_last_character := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_character' to an empty string\n    file_name_character\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_dot_position' to 0\n\
    \    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyy1k5gmn_test.go:92:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'\n\
    \    is_valid := true\n    \n    // Initialize a variable 'dot_position' to '-1'\n\
    \    dot_position := -1\n    \n    // Initialize a variable 'dot_position' to\
    \ '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfg6ucb1q_test.go:98:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_name_length' to\
    \ 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_substring'\
    \ to an empty string\n    file_name_substring := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_substring_index' to 0\n    file_name_substring_index :=\
    \ 0\n    \n    // Initialize a variable 'file_name_substring_index' to 0\n   \
    \ file_name_substring_index := 0\n    \n    // Initialize a variable 'file_name_substring'\
    \ to an empty string\n    file_name_substring := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_substring_index' to 0\n    file_name_substring_index :=\
    \ 0\n    \n    // Initialize a variable 'file_name_substring_index' to 0\n   \
    \ file_name_substring_index := 0\n    \n    // Initialize a variable 'file_name_substring'\
    \ to an empty string\n    file_name_substring := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_substring_index' to 0\n    file_name_substring_index :=\
    \ 0\n    \n    // Initialize a variable 'file_name_substring' to an empty string\n\
    \    file_name_substring := \"\"\n    \n    // Initialize a variable 'file_name_substring_index'\
    \ to 0\n    file_name_substring_index := 0\n    \n    // Initialize a variable\
    \ 'file_name_substring' to an empty string\n    file_name_substring := \"\"\n\
    \    \n    // Initialize a variable 'file_name_substring_index' to 0\n    file_name_substring_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_substring' to an empty string\n\
    \    file_name_substring := \"\"\n    \n    // Initialize a variable 'file_name_substring_index'\
    \ to 0\n    file_name_substring_index := 0\n    \n    // Initialize a variable\
    \ 'file_name_substring' to an empty string\n    file_name_substring := \"\"\n\
    \    \n    // Initialize a variable 'file_name_substring_index' to 0\n    file_name_substring_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_substring' to an empty string\n\
    \    file_name_substring := \"\"\n    \n    // Initialize a variable 'file_name_substring_index'\
    \ to 0\n    file_name_substring_index := 0\n    \n    // Initialize a variable\
    \ 'file_name_substring' to an empty string\n    file_name_substring := \"\"\n\
    \    \n    // Initialize a variable 'file_name_substring_index' to 0\n    file_name_substring_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_substring' to an empty string\n\
    \    file_name_substring := \"\"\n\nfunc TestFile_Name_Check(t *testing.T) {\n\
    \  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpze08cj3x_test.go:91:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpfmwbqssr_test.go:65: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9y908rp3_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_parts'\
    \ to an empty array\n    file_name_parts := []string{}\n    \n    // Initialize\
    \ a variable 'file_name_length' to 0\n    file_name_length := 0\n    \n    //\
    \ Initialize a variable 'file_name_part' to an empty string\n    file_name_part\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_part_length' to 0\n \
    \   file_name_part_length := 0\n    \n    // Initialize a variable 'file_name_part_count'\
    \ to 0\n    file_name_part_count := 0\n    \n    // Initialize a variable 'file_name_part_index'\
    \ to 0\n    file_name_part_index := 0\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := 0\n    \n    // Initialize a variable 'file_name_part_count'\
    \ to 0\n    file_name_part_count := 0\n    \n    // Initialize a variable 'file_name_part_index'\
    \ to 0\n    file_name_part_index := 0\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := 0\n    \n    // Initialize a variable 'file_name_part_count'\
    \ to 0\n    file_name_part_count := 0\n    \n    // Initialize a variable 'file_name_part_index'\
    \ to 0\n    file_name_part_index := 0\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := 0\n    \n    // Initialize a variable 'file_name_part_count'\
    \ to 0\n    file_name_part_count := 0\n    \n    // Initialize a variable 'file_name_part_index'\
    \ to 0\n    file_name_part_index := 0\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := 0\n    \n    // Initialize a variable 'file_name_part_count'\
    \ to 0\n    file_name_part_count := 0\n    \n    // Initialize a variable 'file_name_part_index'\
    \ to 0\n    file_name_part_index := 0\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := 0\n    \n    // Initialize a variable 'file_name_part_count'\
    \ to 0\n    file_name_part_count := 0\n    \n    // Initialize a variable 'file_name_part_index'\
    \ to 0\n    file_name_part_index := 0\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := 0\n    \n    // Initialize a variable 'file_name\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmoriwlly_test.go:92:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n    \n    // 2. The file's name contains exactly one dot '.'\n  \
    \  if file_name[len(file_name)-1] != '.' {\n        return \"No\"\n    }\n   \
    \ \n    // 3. The substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n    if file_name[:len(file_name)-1]\
    \ == \"\" {\n        return \"No\"\n    }\n    \n    // 4. The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n    if file_name[len(file_name)-1]\
    \ not in [\"txt\", \"exe\", \"dll\"] {\n        return \"No\"\n    }\n    \n \
    \   return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppsyoz9xg_test.go:38:36: expected '';'', found not

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9y908rp3_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5c3fvxov_test.go:92:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to store whether\
    \ the file's name is valid\n    valid := false\n    \n    // Initialize a variable\
    \ to store the file's name without extension\n    file_name := file_name\n   \
    \ \n    // Initialize a variable to store the file's name without extension\n\
    \    file_name_no_ext := file_name\n    \n    // Initialize a variable to store\
    \ the file's name without extension\n    file_name_no_ext_no_dot := file_name\n\
    \    \n    // Initialize a variable to store the file's name without extension\n\
    \    file_name_no_ext_no_dot_no_letter := file_name\n    \n    // Initialize a\
    \ variable to store the file's name without extension\n    file_name_no_ext_no_dot_no_letter_no_dot\
    \ := file_name\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    file_name_no_ext_no_dot_no_letter_no_dot_no_letter := file_name\n\
    \    \n    // Initialize a variable to store the file's name without extension\n\
    \    file_name_no_ext_no_dot_no_letter_no_dot_no_letter_no_dot := file_name\n\
    \    \n    // Initialize a variable to store the file's name without extension\n\
    \    file_name_no_ext_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter := file_name\n\
    \    \n    // Initialize a variable to store the file's name without extension\n\
    \    file_name_no_ext_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_no_dot\
    \ := file_name\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    file_name_no_ext_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter\
    \ := file_name\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    file_name_no_ext_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_no_dot\
    \ := file_name\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    file_name_no_ext_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter\
    \ := file_name\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    file_name_no_ext_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_no_dot\
    \ := file_name\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    file_name_no_ext_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter\
    \ := file_name\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    file_name_no_ext_no_dot_no_letter_no_dot_no_letter_no_dot_no_letter_\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkoop0mv7_test.go:69:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_characters'\
    \ to an empty string\n    file_name_characters := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_characters_length' to 0\n    file_name_characters_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index' to 0\n\
    \    file_name_characters_index := 0\n    \n    // Initialize a variable 'file_name_characters_index_length'\
    \ to 0\n    file_name_characters_index_length := 0\n    \n    // Initialize a\
    \ variable 'file_name_characters_index_length' to 0\n    file_name_characters_index_length_2\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_length_3'\
    \ to 0\n    file_name_characters_index_length_3 := 0\n    \n    // Initialize\
    \ a variable 'file_name_characters_index_length_4' to 0\n    file_name_characters_index_length_4\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_length_5'\
    \ to 0\n    file_name_characters_index_length_5 := 0\n    \n    // Initialize\
    \ a variable 'file_name_characters_index_length_6' to 0\n    file_name_characters_index_length_6\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_length_7'\
    \ to 0\n    file_name_characters_index_length_7 := 0\n    \n    // Initialize\
    \ a variable 'file_name_characters_index_length_8' to 0\n    file_name_characters_index_length_8\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_length_9'\
    \ to 0\n    file_name_characters_index_length_9 := 0\n    \n    // Initialize\
    \ a variable 'file_name_characters_index_length_10' to 0\n    file_name_characters_index_length_10\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_length_11'\
    \ to 0\n    file_name_characters_index_length_11 := 0\n    \n    // Initialize\
    \ a variable 'file_name_characters_index_length_12' to 0\n    file_name_characters_index_length_12\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_length_13'\
    \ to 0\n    file_name_characters_index_length_13 := 0\n    \n    // Initialize\
    \ a variable 'file_name_characters_index_length_14' to 0\n    file_name_characters_index_length_14\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj2bf1rqp_test.go:80:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a variable to store the result\n \
    \   var result string = \"No\"\n    \n    // Initialize a variable to store the\
    \ file's name\n    var file_name string\n    \n    // Initialize a variable to\
    \ store the file's extension\n    var file_extension string\n    \n    // Initialize\
    \ a variable to store the file's name without extension\n    var file_name_without_extension\
    \ string\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    var file_name_without_extension_lower string\n    \n    // Initialize\
    \ a variable to store the file's name without extension\n    var file_name_without_extension_upper\
    \ string\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    var file_name_without_extension_lower string\n    \n    // Initialize\
    \ a variable to store the file's name without extension\n    var file_name_without_extension_upper\
    \ string\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    var file_name_without_extension_lower string\n    \n    // Initialize\
    \ a variable to store the file's name without extension\n    var file_name_without_extension_upper\
    \ string\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    var file_name_without_extension_lower string\n    \n    // Initialize\
    \ a variable to store the file's name without extension\n    var file_name_without_extension_upper\
    \ string\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    var file_name_without_extension_lower string\n    \n    // Initialize\
    \ a variable to store the file's name without extension\n    var file_name_without_extension_upper\
    \ string\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    var file_name_without_extension_lower string\n    \n    // Initialize\
    \ a variable to store the file's name without extension\n    var file_name_without_extension_upper\
    \ string\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    var file_name_without_extension_lower string\n    \n    // Initialize\
    \ a variable to store the file's name without extension\n    var file_name_without_extension_upper\
    \ string\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    var file_name_without_extension_lower string\n    \n    // Initialize\
    \ a variable to store the file's name without extension\n    var file_name_without_extension_upper\
    \ string\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    var file_name_without_extension_lower string\n    \n    // Initialize\
    \ a variable to store the file's name without extension\n    var file_name_without_extension_upper\
    \ string\n    \n    // Initialize a variable to store the file's name without\
    \ extension\n    var file_name_without_extension_lower string\n    \n    // \n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9lj7o5mj_test.go:92:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to false\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_part'\
    \ to an empty string\n    file_name_part := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_part_length' to 0\n    file_name_part_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_part_count' to 0\n    file_name_part_count := 0\n    \n\
    \    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp06zi10tv_test.go:93:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n</code>\n\
    <|/ a tags=go |>\n<| c |>\nThis code does not work. `file_name_check(\"1example.dll\"\
    )` returns `No` instead of `Yes`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks\
    \ for pointing out.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing out.\n\
    <|/ c |>\n<| a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n   \
    \ \"regexp\"\n)\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt7xwwcc8_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to store whether\
    \ the file's name is valid.\n    var is_valid = true \n\n    // Initialize a boolean\
    \ variable to store whether the file's name contains more than \n    // three\
    \ digits ('0'-'9'). \n    var contains_three_digits = false \n\n    // Initialize\
    \ a boolean variable to store whether the file's name contains exactly one \n\
    \    // dot '.'.\n    var contains_one_dot = false \n\n    // Initialize a boolean\
    \ variable to store whether the file's name starts with a letter \n    // from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z').\n    var contains_letter_a = false\
    \ \n\n    // Initialize a boolean variable to store whether the file's name ends\
    \ with one of \n    // the following: ['txt', 'exe', 'dll']\n    var contains_one_of_these\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name ends with one of \n    // the following: ['txt', 'exe', 'dll']\n    var\
    \ contains_one_of_these = false \n\n    // Initialize a boolean variable to store\
    \ whether the file's name ends with one of \n    // the following: ['txt', 'exe',\
    \ 'dll']\n    var contains_one_of_these = false \n\n    // Initialize a boolean\
    \ variable to store whether the file's name ends with one of \n    // the following:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to store whether the file's name ends with one of \n    //\
    \ the following: ['txt', 'exe', 'dll']\n    var contains_one_of_these = false\
    \ \n\n    // Initialize a boolean variable to store whether the file's name ends\
    \ with one of \n    // the following: ['txt', 'exe', 'dll']\n    var contains_one_of_these\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name ends with one of \n    // the following: ['txt', 'exe', 'dll']\n    var\
    \ contains_one_of_these = false \n\n    // Initialize a boolean variable to store\
    \ whether the file's name ends with one of \n    // the following: ['txt', 'exe',\
    \ 'dll']\n    var contains_one_of_these = false \n\n    // Initialize a boolean\
    \ variable to store whether the file's name ends with one of \n    // the following:\
    \ ['txt', 'exe', 'dll']\n    var contains_one_of_these = false \n\n    // Initialize\
    \ a boolean variable to store whether the file's name ends with one of \n    //\
    \ the following: ['txt', 'exe', 'dll']\n    var contains_one_of_these = false\
    \ \n\n    // Initialize a boolean variable to store whether the file's name ends\
    \ with one of \n    // the following: ['txt', 'exe', 'dll']\n    var contains_one_of_these\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2y7jgidx_test.go:82:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. Check if the file's name contains more than\
    \ three digits ('0'-'9')\n    if len(file_name) > 3 {\n        return \"No\"\n\
    \    }\n\n    // 2. Check if the file's name contains exactly one dot '.'\n  \
    \  if file_name[len(file_name)-1] != '.' {\n        return \"No\"\n    }\n\n \
    \   // 3. Check if the substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if file_name[:len(file_name)-1]\
    \ == \"\" {\n        return \"No\"\n    }\n\n    // 4. Check if the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    dot_pos :=\
    \ strings.IndexByte(file_name, '.')\n    if dot_pos == -1 {\n        return \"\
    No\"\n    }\n    \n    dot_pos := dot_pos + 1\n    dot_pos := strings.IndexByte(file_name[dot_pos:],\
    \ '.')\n    if dot_pos == -1 {\n        return \"No\"\n    }\n    \n    dot_pos\
    \ := dot_pos + 1\n    dot_pos := strings.IndexByte(file_name[dot_pos:], '.')\n\
    \    if dot_pos == -1 {\n        return \"No\"\n    }\n    \n    dot_pos := dot_pos\
    \ + 1\n    dot_pos := strings.IndexByte(file_name[dot_pos:], '.')\n    if dot_pos\
    \ == -1 {\n        return \"No\"\n    }\n    \n    dot_pos := dot_pos + 1\n  \
    \  dot_pos := strings.IndexByte(file_name[dot_pos:], '.')\n    if dot_pos == -1\
    \ {\n        return \"No\"\n    }\n    \n    dot_pos := dot_pos + 1\n    dot_pos\
    \ := strings.IndexByte(file_name[dot_pos:], '.')\n    if dot_pos == -1 {\n   \
    \     return \"No\"\n    }\n    \n    dot_pos := dot_pos + 1\n    dot_pos := strings.IndexByte(file_name[dot_pos:],\
    \ '.')\n    if dot_pos == -1 {\n        return \"No\"\n    }\n    \n    dot_pos\
    \ := dot_pos + 1\n    dot_pos := strings.IndexByte(file_name[dot_pos:], '.')\n\
    \    if dot_pos == -1 {\n        return \"No\"\n    }\n    \n    dot_pos := dot_pos\
    \ + 1\n    dot_pos := strings.IndexByte(file_name[dot_pos:], '.')\n    if dot_pos\
    \ == -1 {\n        return \"No\"\n    }\n    \n    dot_pos := dot_pos + 1\n  \
    \  dot_pos := strings.IndexByte(file_name[dot_pos:], '.')\n    if dot_pos == -1\
    \ {\n        return \"No\"\n    }\n    \n    dot_pos := dot_pos + 1\n    dot_pos\
    \ := strings.IndexByte(file_name[dot_pos:], '.')\n    if dot_pos == -1 {\n   \
    \     return \"\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxhu8lk4v_test.go:100:16: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpon5_rnyu_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpon5_rnyu_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpon5_rnyu_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpon5_rnyu_test.go:63: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpon5_rnyu_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpon5_rnyu_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpon5_rnyu_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpon5_rnyu_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpon5_rnyu_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpon5_rnyu_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpon5_rnyu_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpon5_rnyu_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpon5_rnyu_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpon5_rnyu_test.go:63: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpon5_rnyu_test.go:63: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpon5_rnyu_test.go:63: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpon5_rnyu_test.go:63: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpon5_rnyu_test.go:63: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n\n    // 2. The file's name contains exactly one dot '.'\n    if\
    \ file_name[len(file_name)-1] == '.' {\n        return \"No\"\n    }\n\n    //\
    \ 3. The substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z').\n    if file_name[0:1] != \"\"\
    \ {\n        if file_name[0] < 'a' || file_name[0] > 'z' || file_name[0] < 'A'\
    \ || file_name[0] > 'Z' {\n            return \"No\"\n        }\n    }\n\n   \
    \ // 4. The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    dot_pos := strings.IndexRune(file_name, '.')\n    if dot_pos == -1 {\n  \
    \      return \"No\"\n    }\n    \n    dot_pos_2 := strings.IndexRune(file_name,\
    \ '.', dot_pos+1)\n    if dot_pos_2 == -1 {\n        return \"No\"\n    }\n\n\
    \    if dot_pos_2 > dot_pos {\n        return \"No\"\n    }\n\n    if dot_pos_2\
    \ < dot_pos {\n        return \"No\"\n    }\n\n    dot_pos_3 := strings.IndexRune(file_name,\
    \ '.', dot_pos+2)\n    if dot_pos_3 == -1 {\n        return \"No\"\n    }\n\n\
    \    if dot_pos_3 > dot_pos {\n        return \"No\"\n    }\n\n    if dot_pos_3\
    \ < dot_pos {\n        return \"No\"\n    }\n\n    if dot_pos_3 > dot_pos_2 {\n\
    \        return \"No\"\n    }\n\n    if dot_pos_3 < dot_pos_2 {\n        return\
    \ \"No\"\n    }\n\n    if dot_pos_3 < dot_pos_2 {\n        return \"No\"\n   \
    \ }\n\n    if dot_pos_3 < dot_pos_2 {\n        return \"No\"\n    }\n\n    if\
    \ dot_pos_3 < dot_pos_2 {\n        return \"No\"\n    }\n\n    if dot_pos_3 <\
    \ dot_pos_2 {\n        return \"No\"\n    }\n\n    if dot_pos_3 < dot_pos_2 {\n\
    \        return \"No\"\n    }\n\n    if dot_pos_3 < dot_pos_2 {\n        return\
    \ \"No\"\n    }\n\n    if dot_pos_3 < dot_pos_2 {\n        return \"No\"\n   \
    \ }\n\n    if dot_pos_3 < dot_pos_2 {\n        return \"No\"\n    }\n\n    if\
    \ dot_pos_3 < dot_pos_2 {\n        return \"No\"\n    }\n\n    if dot_pos_3 <\
    \ dot_pos_2 {\n        return \"No\"\n    }\n\n    if dot_pos_3 < dot_pos_2 {\n\
    \        return \"No\"\n    }\n\n    if dot_pos_3 < dot_pos_2 {\n        return\
    \ \"No\"\n    }\n\n    if dot_pos_3 < dot_pos_2 {\n        return \"No\"\n   \
    \ }\n\n    if dot_pos_3 < dot_pos_2 {\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2foe0dj7_test.go:132:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'False'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_parts' to\
    \ an empty string\n    file_name_parts := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_length' to 0\n    file_name_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_part' to an empty string\n    file_name_part := \"\"\n\
    \    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count_limit' to 0\n\
    \    file_name_part_count_limit := 0\n    \n    // Initialize a variable 'file_name_part_count_limit'\
    \ to 0\n    file_name_part_count_limit := 0\n    \n    // Initialize a variable\
    \ 'file_name_part_count_limit' to 0\n    file_name_part_count_limit := 0\n   \
    \ \n    // Initialize a variable 'file_name_part_count_limit' to 0\n    file_name_part_count_limit\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count_limit' to 0\n\
    \    file_name_part_count_limit := 0\n    \n    // Initialize a variable 'file_name_part_count_limit'\
    \ to 0\n    file_name_part_count_limit := 0\n    \n    // Initialize a variable\
    \ 'file_name_part_count_limit' to 0\n    file_name_part_count_limit := 0\n   \
    \ \n    // Initialize a variable 'file_name_part_count_limit' to 0\n    file_name_part_count_limit\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count_limit' to 0\n\
    \    file_name_part_count_limit := 0\n    \n    // Initialize a variable 'file_name_part_count_limit'\
    \ to 0\n    file_name_part_count_limit := 0\n    \n    // Initialize a variable\
    \ 'file_name_part_count_limit' to 0\n    file_name_part_count_limit := 0\n   \
    \ \n    // Initialize a variable 'file_name_part_count_limit' to 0\n    file_name_part_count_limit\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count_limit' to 0\n\
    \    file_name_part_count_limit := 0\n    \n    // Initialize a variable 'file_name_part_count_limit'\
    \ to 0\n    file_name_part_count_limit := 0\n    \n    // Initialize a variable\
    \ 'file_name_part_count_limit' to 0\n    file_name_part_count_limit := 0\n   \
    \ \n    // Initialize a variable 'file_name_part_count_limit' to 0\n    file_name_part_count_limit\
    \ := 0\n    \n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5en78own_test.go:89:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'false'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_part'\
    \ to an empty string\n    file_name_part := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_part_length' to 0\n    file_name_part_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_part_index' to 0\n    file_name_part_index := 0\n    \n\
    \    // Initialize a variable 'file_name_part_count' to 0\n    file_name_part_count\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count_limit' to 0\n\
    \    file_name_part_count_limit := 0\n    \n    // Initialize a variable 'file_name_part_count_limit'\
    \ to 0\n    file_name_part_count_limit := 0\n    \n    // Initialize a variable\
    \ 'file_name_part_count_limit' to 0\n    file_name_part_count_limit := 0\n   \
    \ \n    // Initialize a variable 'file_name_part_count_limit' to 0\n    file_name_part_count_limit\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count_limit' to 0\n\
    \    file_name_part_count_limit := 0\n    \n    // Initialize a variable 'file_name_part_count_limit'\
    \ to 0\n    file_name_part_count_limit := 0\n    \n    // Initialize a variable\
    \ 'file_name_part_count_limit' to 0\n    file_name_part_count_limit := 0\n   \
    \ \n    // Initialize a variable 'file_name_part_count_limit' to 0\n    file_name_part_count_limit\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count_limit' to 0\n\
    \    file_name_part_count_limit := 0\n    \n    // Initialize a variable 'file_name_part_count_limit'\
    \ to 0\n    file_name_part_count_limit := 0\n    \n    // Initialize a variable\
    \ 'file_name_part_count_limit' to 0\n    file_name_part_count_limit := 0\n   \
    \ \n    // Initialize a variable 'file_name_part_count_limit' to 0\n    file_name_part_count_limit\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_count_limit' to 0\n\
    \    file_name_part_count_limit := 0\n    \n    // Initialize a variable 'file_name_part_count_limit'\
    \ to 0\n    file_name_part_count_limit := 0\n    \n    // Initialize a variable\
    \ 'file_name_part_count_limit' to 0\n    file_name_part_count_limit := 0\n   \
    \ \n    // Initialize a variable 'file_name_part_count_limit' to 0\n    file_name_part_count_limit\
    \ := 0\n    \n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy6s_zu41_test.go:89:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to store whether\
    \ the file's name is valid.\n    var is_valid = false\n    \n    // Initialize\
    \ a boolean variable to store whether the file's name contains more than three\
    \ digits.\n    var contains_three_digits = false\n    \n    // Initialize a boolean\
    \ variable to store whether the file's name contains exactly one dot.\n    var\
    \ contains_one_dot = false\n    \n    // Initialize a boolean variable to store\
    \ whether the file's name starts with a latin alphapet letter.\n    var contains_latin_alpha_letter\
    \ = false\n    \n    // Initialize a boolean variable to store whether the file's\
    \ name ends with one of these extensions: \n    // ['txt', 'exe', 'dll']\n   \
    \ var contains_extensions = false\n    \n    // Initialize a boolean variable\
    \ to store whether the file's name contains any of these characters: \n    //\
    \ [' ', '\\t', '\\n', '\\r', '\\f', '\\v']\n    var contains_special_characters\
    \ = false\n    \n    // Initialize a boolean variable to store whether the file's\
    \ name contains any of these characters: \n    // [' ', '\\t', '\\n', '\\r', '\\\
    f', '\\v', ':', ';', '(', ')', '[', ']', '{', '}', '|', '\\\\']\n    var contains_special_characters_2\
    \ = false\n    \n    // Initialize a boolean variable to store whether the file's\
    \ name contains any of these characters: \n    // [' ', '\\t', '\\n', '\\r', '\\\
    f', '\\v', ':', ';', '(', ')', '[', ']', '{', '}', '|', '\\\\', ':', ';', '(',\
    \ ')', '[', ']', '{', '}', '|', '\\\\']\n    var contains_special_characters_3\
    \ = false\n    \n    // Initialize a boolean variable to store whether the file's\
    \ name contains any of these characters: \n    // [' ', '\\t', '\\n', '\\r', '\\\
    f', '\\v', ':', ';', '(', ')', '[', ']', '{', '}', '|', '\\\\', ':', ';', '(',\
    \ ')', '[', ']', '{', '}', '|', '\\\\', ':', ';', '(', ')', '[', ']', '{', '}',\
    \ '|', '\\\\']\n    var contains_special_characters_4 = false\n    \n    // Initialize\
    \ a boolean variable to store whether the file's name contains any of these characters:\
    \ \n    // [' ', '\\t', '\\n', '\\r', '\\f', '\\v', ':', ';', '(', ')', '[', ']',\
    \ '{', '}', '|', '\\\\', ':', ';', '(', ')', '[', ']', '{', '}', '|', '\\\\',\
    \ ':', ';', '(', ')', '[', ']', '{', '}', '\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1jtzy8n_test.go:56:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'.\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_name_length' to\
    \ '0'.\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to '0'.\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '-1'.\n    file_name_dot_position := -1\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '-1'.\n    file_name_dot_position := -1\n    \n\
    \    // Initialize a variable 'file_name_dot_position' to '-1'.\n    file_name_dot_position\
    \ := -1\n    \n    // Initialize a variable 'file_name_dot_position' to '-1'.\n\
    \    file_name_dot_position := -1\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '-1'.\n    file_name_dot_position := -1\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '-1'.\n    file_name_dot_position := -1\n    \n\
    \    // Initialize a variable 'file_name_dot_position' to '-1'.\n    file_name_dot_position\
    \ := -1\n    \n    // Initialize a variable 'file_name_dot_position' to '-1'.\n\
    \    file_name_dot_position := -1\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '-1'.\n    file_name_dot_position := -1\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '-1'.\n    file_name_dot_position := -1\n    \n\
    \    // Initialize a variable 'file_name_dot_position' to '-1'.\n    file_name_dot_position\
    \ := -1\n    \n    // Initialize a variable 'file_name_dot_position' to '-1'.\n\
    \    file_name_dot_position := -1\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '-1'.\n    file_name_dot_position := -1\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '-1'.\n    file_name_dot_position := -1\n    \n\
    \    // Initialize a variable 'file_name_dot_position' to '-1'.\n    file_name_dot_position\
    \ := -1\n    \n    // Initialize a variable 'file_name_dot_position' to '-1'.\n\
    \    file_name_dot_position := -1\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '-1'.\n    file_name_dot_position := -1\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '-1'.\n    file_name_dot_position := -1\n    \n\
    \    // Initialize a variable 'file_name_dot_position' to '-1'.\n    \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoqu5_irg_test.go:87:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to false\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_parts' to\
    \ an empty array\n    file_name_parts := []string{}\n    \n    // Initialize a\
    \ variable 'file_name_length' to 0\n    file_name_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_length' to 0\n    file_name_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name_part' to an empty string\n    file_name_part\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_part_index' to 0\n  \
    \  file_name_part_index := 0\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := 0\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := len(file_name_part)\n    \n    // Initialize\
    \ a variable 'file_name_part_length' to 0\n    file_name_part_length := len(file_name_part)\n\
    \    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := len(file_name_part)\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := len(file_name_part)\n    \n    // Initialize\
    \ a variable 'file_name_part_length' to 0\n    file_name_part_length := len(file_name_part)\n\
    \    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := len(file_name_part)\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := len(file_name_part)\n    \n    // Initialize\
    \ a variable 'file_name_part_length' to 0\n    file_name_part_length := len(file_name_part)\n\
    \    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := len(file_name_part)\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := len(file_name_part)\n    \n    // Initialize\
    \ a variable 'file_name_part_length' to 0\n    file_name_part_length := len(file_name_part)\n\
    \    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := len(file_name_part)\n    \n    // Initialize a variable 'file_name_part_length'\
    \ to 0\n    file_name_part_length := len(file_name_part)\n    \n    // Initialize\
    \ a variable 'file_name_part_length' to 0\n    file_name_part_length := len(file_name_part)\n\
    \    \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl1z2w8oi_test.go:85:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n    \n    // 2. The file's name contains exactly one dot '.'\n  \
    \  if file_name[len(file_name)-1] != '.' {\n        return \"No\"\n    }\n   \
    \ \n    // 3. Substring before the dot should not be empty, and it starts with\
    \ a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n    if file_name[:len(file_name)-1]\
    \ == \"\" {\n        return \"No\"\n    }\n    \n    // 4. Substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n    if file_name[len(file_name)-1]\
    \ not in [\"txt\", \"exe\", \"dll\"] {\n        return \"No\"\n    }\n    \n \
    \   // 5. Return Yes if the file's name is valid.\n    return \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptu3rq1ak_test.go:38:36: expected '';'', found not

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n</cell>\n\
    <text>\nRun the following cell to test your solution.\n\n\n</text>\n<cell>\n#\
    \ Do not modify this cell!\n\n# Test file_name_check\nsolution = file_name_check(\"\
    example.txt\")\nexpected = \"\"\nassert(expected == solution)\n</cell>\n<text>\n\
    Solution\nClick below for a solution.\n\n\n</text>\n<cell>\n# Check your solution\
    \ below:\ndef file_name_check(file_name):\n    \n    # Your code here\n    \n\
    \    return \"\"\n</cell>\n<text>\nPart 2: Write a program that reads a file line\
    \ by line and prints the number of lines in the file.\nThe program should continue\
    \ to read and print lines from the file until the file ends.\n\n</text>\n<text>\n\
    In\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1j5_r0q4_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'false'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp476ttw3__test.go:99:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'False'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_extension' to\
    \ an empty string\n    file_extension := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_length' to 0\n    file_name_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_first_letter' to an empty string\n    file_name_first_letter\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_last_letter' to an empty\
    \ string\n    file_name_last_letter := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_first_letter_length' to 0\n    file_name_first_letter_length := 0\n\
    \    \n    // Initialize a variable 'file_name_last_letter_length' to 0\n    file_name_last_letter_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to\
    \ 0\n    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjfb88vn1_test.go:88:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'valid' to 'true'\n\
    \    var valid bool = true\n\n    // Initialize a variable 'file_name_length'\
    \ to 0\n    var file_name_length int = 0\n\n    // Initialize a variable 'file_name_character'\
    \ to 0\n    var file_name_character int = 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    var file_name_dot_position int = 0\n\n    // Initialize a variable\
    \ 'file_name_dot_position' to 0\n    var file_name_dot_position int = 0\n\n  \
    \  // Initialize a variable 'file_name_dot_position' to 0\n    var file_name_dot_position\
    \ int = 0\n\n    // Initialize a variable 'file_name_dot_position' to 0\n    var\
    \ file_name_dot_position int = 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    var file_name_dot_position int = 0\n\n    // Initialize a variable\
    \ 'file_name_dot_position' to 0\n    var file_name_dot_position int = 0\n\n  \
    \  // Initialize a variable 'file_name_dot_position' to 0\n    var file_name_dot_position\
    \ int = 0\n\n    // Initialize a variable 'file_name_dot_position' to 0\n    var\
    \ file_name_dot_position int = 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    var file_name_dot_position int = 0\n\n    // Initialize a variable\
    \ 'file_name_dot_position' to 0\n    var file_name_dot_position int = 0\n\n  \
    \  // Initialize a variable 'file_name_dot_position' to 0\n    var file_name_dot_position\
    \ int = 0\n\n    // Initialize a variable 'file_name_dot_position' to 0\n    var\
    \ file_name_dot_position int = 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    var file_name_dot_position int = 0\n\n    // Initialize a variable\
    \ 'file_name_dot_position' to 0\n    var file_name_dot_position int = 0\n\n  \
    \  // Initialize a variable 'file_name_dot_position' to 0\n    var file_name_dot_position\
    \ int = 0\n\n    // Initialize a variable 'file_name_dot_position' to 0\n    var\
    \ file_name_dot_position int = 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    var file_name_dot_position int = 0\n\n    // Initialize a variable\
    \ 'file_name_dot_position' to 0\n    var file_name_dot_position int = 0\n\n  \
    \  // Initialize a variable 'file_name_dot_position' to 0\n    var file_name_dot_position\
    \ int = 0\n\n    // Initialize a variable 'file_name_dot_position' to 0\n    var\
    \ file_name_dot_position int = 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    var file_name_dot_position int = 0\n\n    // Initialize a variable\
    \ 'file_name_dot_position' to 0\n    var file_name_dot_position int = 0\n\n  \
    \  // Initialize a variable 'file_name_dot_position' to 0\n    var file_name_dot_position\
    \ \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3pwq8x0_test.go:98:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a variable to store the return value.\n\
    \    result := \"No\"\n    \n    // Initialize a variable to store the file's\
    \ name without extension.\n    file_without_extension := file_name\n    \n   \
    \ // Remove extension from file's name.\n    file_without_extension = strings.TrimSuffix(file_without_extension,\
    \ \".go\")\n    \n    // Initialize a variable to store the file's name without\
    \ the first letter.\n    file_without_first_letter := \"\"\n    \n    // Remove\
    \ the first letter from file's name.\n    file_without_first_letter = strings.TrimPrefix(file_without_extension,\
    \ string(filepath.Separator))\n    \n    // Initialize a variable to store the\
    \ file's name without the last letter.\n    file_without_last_letter := \"\"\n\
    \    \n    // Remove the last letter from file's name.\n    file_without_last_letter\
    \ = strings.TrimSuffix(file_without_first_letter, string(filepath.Separator))\n\
    \    \n    // Initialize a variable to store the file's name without the first\
    \ and last letter.\n    file_without_first_and_last_letter := \"\"\n    \n   \
    \ // Remove the first and last letter from file's name.\n    file_without_first_and_last_letter\
    \ = strings.TrimPrefix(file_without_last_letter, string(filepath.Separator))\n\
    \    \n    // Initialize a variable to store the file's name without the first\
    \ and last letters.\n    file_without_first_and_last_letters := \"\"\n    \n \
    \   // Remove the first and last letters from file's name.\n    file_without_first_and_last_letters\
    \ = strings.TrimPrefix(file_without_first_and_last_letter, string(filepath.Separator))\n\
    \    \n    // Initialize a variable to store the file's name without the first\
    \ and last letters.\n    file_without_first_and_last_letters_2 := \"\"\n    \n\
    \    // Remove the first and last letters from file's name.\n    file_without_first_and_last_letters_2\
    \ = strings.TrimPrefix(file_without_first_and_last_letters, string(filepath.Separator))\n\
    \    \n    // Initialize a variable to store the file's name without the first\
    \ and last letters.\n    file_without_first_and_last_letters_3 := \"\"\n    \n\
    \    // Remove the first and last letters from file's name.\n    file_without_first_and_last_letters_3\
    \ = strings.TrimPrefix(file_without_first_and_last_letters_2, string(filepath.Separator))\n\
    \    \n    // Initialize a variable to store the file's name without the first\
    \ and last letters.\n    file_without_first_and_last_letters_4 := \"\"\n    \n\
    \    // Remove the first and last letters from file's name.\n    file_without_first_and_last_letters_4\
    \ = strings.TrimPrefix(file_without_first_and_last_letters_3, string(filepath.Separator))\n\
    \    \n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphenhwphp_test.go:74:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'valid' to 'false'\n\
    \    valid := false\n    \n    // Initialize a variable 'file_name_length' to\
    \ 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_characters'\
    \ to 0\n    file_name_characters := 0\n    \n    // Initialize a variable 'file_name_characters_length'\
    \ to 0\n    file_name_characters_length := 0\n    \n    // Initialize a variable\
    \ 'file_name_characters_index' to 0\n    file_name_characters_index := 0\n   \
    \ \n    // Initialize a variable 'file_name_characters_index_length' to 0\n  \
    \  file_name_characters_index_length := 0\n    \n    // Initialize a variable\
    \ 'file_name_characters_index_value' to 0\n    file_name_characters_index_value\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_value_length'\
    \ to 0\n    file_name_characters_index_value_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_characters_index_value_characters' to 0\n    file_name_characters_index_value_characters\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_value_characters_length'\
    \ to 0\n    file_name_characters_index_value_characters_length := 0\n    \n  \
    \  // Initialize a variable 'file_name_characters_index_value_characters_index_value'\
    \ to 0\n    file_name_characters_index_value_characters_index_value := 0\n   \
    \ \n    // Initialize a variable 'file_name_characters_index_value_characters_index_value_length'\
    \ to 0\n    file_name_characters_index_value_characters_index_value_length :=\
    \ 0\n    \n    // Initialize a variable 'file_name_characters_index_value_characters_index_value_characters'\
    \ to 0\n    file_name_characters_index_value_characters_index_value_characters\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_value_characters_index_value_characters_length'\
    \ to 0\n    file_name_characters_index_value_characters_index_value_characters_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_value_characters_index_value_characters_index_value'\
    \ to 0\n    file_name_characters_index_value_characters_index_value_characters_index_value\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_value_characters_index_value_characters_index_value_length'\
    \ to 0\n    file_name_characters_index_value_characters_index_value_characters_index_value_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_characters_index_value_characters_index_value_characters_index_value_characters'\
    \ to 0\n    file_name_character\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk4dmgfq7_test.go:72:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpf5d25qvu_test.go:64: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpfmwbqssr_test.go:65: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n    \n    // 2. The file's name contains exactly one dot '.'\n  \
    \  if file_name[len(file_name)-1] != '.' {\n        return \"No\"\n    }\n   \
    \ \n    // 3. Substring before the dot should not be empty, and it starts with\
    \ a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n    if file_name[:len(file_name)-1]\
    \ == \"\" || file_name[:len(file_name)-1][0] < 'a' || file_name[:len(file_name)-1][0]\
    \ > 'z' {\n        return \"No\"\n    }\n    \n    // 4. Substring after the dot\
    \ should be one of these: ['txt', 'exe', 'dll']\n    if file_name[len(file_name)-1]\
    \ != 'txt' && file_name[len(file_name)-1] != 'exe' && file_name[len(file_name)-1]\
    \ != 'dll' {\n        return \"No\"\n    }\n    \n    // 5. Return Yes if the\
    \ file's name is valid\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_e1462b7_test.go:38:39: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'\n\
    \    is_valid := true\n    \n    // Initialize a variable 'dot_position' to '-1'\n\
    \    dot_position := -1\n    \n    // Initialize a variable 'dot_position' to\
    \ '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to '-1'\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfg6ucb1q_test.go:98:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'false'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_extension' to\
    \ an empty string\n    file_extension := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_length' to an empty string\n    file_name_length := \"\"\n    \n\
    \    // Initialize a variable 'file_name_length' to an empty string\n    file_name_length\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_length' to an empty string\n\
    \    file_name_length := \"\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to an empty string\n    file_name_length := \"\"\n    \n    // Initialize a\
    \ variable 'file_name_length' to an empty string\n    file_name_length := \"\"\
    \n    \n    // Initialize a variable 'file_name_length' to an empty string\n \
    \   file_name_length := \"\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to an empty string\n    file_name_length := \"\"\n    \n    // Initialize a\
    \ variable 'file_name_length' to an empty string\n    file_name_length := \"\"\
    \n    \n    // Initialize a variable 'file_name_length' to an empty string\n \
    \   file_name_length := \"\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to an empty string\n    file_name_length := \"\"\n    \n    // Initialize a\
    \ variable 'file_name_length' to an empty string\n    file_name_length := \"\"\
    \n    \n    // Initialize a variable 'file_name_length' to an empty string\n \
    \   file_name_length := \"\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to an empty string\n    file_name_length := \"\"\n    \n    // Initialize a\
    \ variable 'file_name_length' to an empty string\n    file_name_length := \"\"\
    \n    \n    // Initialize a variable 'file_name_length' to an empty string\n \
    \   file_name_length := \"\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to an empty string\n    file_name_length := \"\"\n    \n    // Initialize a\
    \ variable 'file_name_length' to an empty string\n    file_name_length := \"\"\
    \n    \n    // Initialize a variable 'file_name_length' to an empty string\n \
    \   file_name_length := \"\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to an empty string\n    file_name_length := \"\"\n    \n    // Initialize a\
    \ variable 'file_name_length' to an empty string\n    file_name_length := \"\"\
    \n    \n    // Initialize a variable 'file_name_length' to an empty string\n \
    \   file_name_length := \"\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to an empty string\n    file_name_length := \"\"\n    \n    // Initialize a\
    \ variable 'file_name_length' to an empty string\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptlyxr1os_test.go:95:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_name_parts' to\
    \ an empty array\n    file_name_parts := []string{}\n    \n    // Initialize a\
    \ variable 'file_name_length' to 0\n    file_name_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_part_length' to 0\n    file_name_part_length := 0\n  \
    \  \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_value' to an empty\
    \ string\n    file_name_part_value := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_part_index' to 0\n    file_name_part_index := 0\n    \n    // Initialize\
    \ a variable 'file_name_part_value' to an empty string\n    file_name_part_value\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_part_index' to 0\n  \
    \  file_name_part_index := 0\n    \n    // Initialize a variable 'file_name_part_value'\
    \ to an empty string\n    file_name_part_value := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_part_index' to 0\n    file_name_part_index := 0\n    \n\
    \    // Initialize a variable 'file_name_part_value' to an empty string\n    file_name_part_value\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_part_index' to 0\n  \
    \  file_name_part_index := 0\n    \n    // Initialize a variable 'file_name_part_value'\
    \ to an empty string\n    file_name_part_value := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_part_index' to 0\n    file_name_part_index := 0\n    \n\
    \    // Initialize a variable 'file_name_part_value' to an empty string\n    file_name_part_value\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_part_index' to 0\n  \
    \  file_name_part_index := 0\n    \n    // Initialize a variable 'file_name_part_value'\
    \ to an empty string\n    file_name_part_value := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_part_index' to 0\n    file_name_part_index := 0\n    \n\
    \    // Initialize a variable 'file_name_part_value' to an empty string\n    file_name_part_value\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_part_index' to 0\n  \
    \  file_name_part_index := 0\n    \n    // Initialize a variable 'file_name_part_value'\
    \ to an empty string\n    file_name_part_value := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_part_index' to 0\n    file_name_part_index := 0\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpre7ybtyw_test.go:91:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to store whether\
    \ the file's name is valid.\n    var is_valid = false \n\n    // Initialize a\
    \ boolean variable to store whether the file's name is valid.\n    var is_valid_extension\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name is valid.\n    var is_valid_extension_substring = false \n\n    // Initialize\
    \ a boolean variable to store whether the file's name is valid.\n    var is_valid_extension_substring_substring\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name is valid.\n    var is_valid_extension_substring_substring_substring = false\
    \ \n\n    // Initialize a boolean variable to store whether the file's name is\
    \ valid.\n    var is_valid_extension_substring_substring_substring_substring =\
    \ false \n\n    // Initialize a boolean variable to store whether the file's name\
    \ is valid.\n    var is_valid_extension_substring_substring_substring_substring_substring\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name is valid.\n    var is_valid_extension_substring_substring_substring_substring_substring_substring\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name is valid.\n    var is_valid_extension_substring_substring_substring_substring_substring_substring_substring\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name is valid.\n    var is_valid_extension_substring_substring_substring_substring_substring_substring_substring_substring\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name is valid.\n    var is_valid_extension_substring_substring_substring_substring_substring_substring_substring_substring_substring\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name is valid.\n    var is_valid_extension_substring_substring_substring_substring_substring_substring_substring_substring_substring_substring\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name is valid.\n    var is_valid_extension_substring_substring_substring_substring_substring_substring_substring_substring_substring_substring_substring\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name is valid.\n    var is_valid_extension_substring_substring_substring_substring_substring_substring_substring_substring_substring_substring_substring_substring\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name is valid.\n    var is_valid_extension_substring_substring_substring_substring_substring_substring_substring_substring_substring_substring_substring_substring_substring\
    \ = false \n\n    // Initialize a boolean variable to store whether the file's\
    \ name is valid.\n    var is_valid_extension_substring_substring_substring_substring_substring_substring_\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_6m6etb7_test.go:68:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. Check that the file name contains exactly\
    \ one dot ('.').\n    if file_name[0 : len(file_name)-1] != \".\" {\n        return\
    \ \"No\"\n    }\n    \n    // 2. Check that the file's name does not contain more\
    \ than three digits ('0'-'9').\n    if file_name[len(file_name)-3 : len(file_name)]\
    \ != \".\" {\n        return \"No\"\n    }\n    \n    // 3. Check that the file's\
    \ name does not contain any digits ('0'-'9').\n    if file_name[len(file_name)-2\
    \ : len(file_name)] != \".\" {\n        return \"No\"\n    }\n    \n    // 4.\
    \ Check that the file's name does not contain any digits ('0'-'9') before or after\
    \ \n    // the dot ('.').\n    if file_name[len(file_name)-1 : len(file_name)]\
    \ != \".\" {\n        return \"No\"\n    }\n    \n    // 5. Check that the file's\
    \ name does not contain any digits ('0'-'9') before or after \n    // the dot\
    \ ('.').\n    if file_name[len(file_name)-2 : len(file_name)] != \".\" {\n   \
    \     return \"No\"\n    }\n    \n    // 6. Check that the file's name does not\
    \ contain any digits ('0'-'9') before or after \n    // the dot ('.').\n    if\
    \ file_name[len(file_name)-1 : len(file_name)] != \".\" {\n        return \"No\"\
    \n    }\n    \n    // 7. Check that the file's name does not contain any digits\
    \ ('0'-'9') before or after \n    // the dot ('.').\n    if file_name[len(file_name)-3\
    \ : len(file_name)] != \".\" {\n        return \"No\"\n    }\n    \n    // 8.\
    \ Check that the file's name does not contain any digits ('0'-'9') before or after\
    \ \n    // the dot ('.').\n    if file_name[len(file_name)-2 : len(file_name)]\
    \ != \".\" {\n        return \"No\"\n    }\n    \n    // 9. Check that the file's\
    \ name does not contain any digits ('0'-'9') before or after \n    // the dot\
    \ ('.').\n    if file_name[len(file_name)-1 : len(file_name)] != \".\" {\n   \
    \     return \"No\"\n    }\n    \n    // 10. Check that the file's name does not\
    \ contain any digits ('0'-'9') before or after \n    // the dot ('.').\n    if\
    \ file_name[len(file_name)-3 : len(file_name)] != \".\" {\n        return \"No\"\
    \n    }\n    \n    // 11. Check that the file's name does not contain any digits\
    \ ('0'-'9') before or after \n    // the dot ('.').\n    if file_name[len(file_name)-2\
    \ : len(file_name)] != \".\" {\n        return \"No\"\n    }\n    \n    // 12.\
    \ Check that the file's name does not contain any digits ('0'-'9') before or \n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2po42xwa_test.go:86:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to 'true'.\n  \
    \  valid := true\n    \n    // Initialize a variable to hold the file's name.\n\
    \    file_name := file_name\n    \n    // Initialize a variable to hold the file's\
    \ extension.\n    file_extension := \"\"\n    \n    // Initialize a variable to\
    \ hold the file's name.\n    file_name_before_dot := \"\"\n    \n    // Initialize\
    \ a variable to hold the file's name.\n    file_name_after_dot := \"\"\n    \n\
    \    // Initialize a variable to hold the file's name.\n    file_name_before_dot_2\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_after_dot_2\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_before_dot_3\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_after_dot_3\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_before_dot_4\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_after_dot_4\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_before_dot_5\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_after_dot_5\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_before_dot_6\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_after_dot_6\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_before_dot_7\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_after_dot_7\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_before_dot_8\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_after_dot_8\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_before_dot_9\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_after_dot_9\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_before_dot_10\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_after_dot_10\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name_before_dot_11\
    \ := \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn2o9yegj_test.go:93:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpf5d25qvu_test.go:64: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to 'true'.\n  \
    \  valid := true\n    \n    // Initialize a variable to hold the file's name.\n\
    \    file_name := file_name\n    \n    // Initialize a variable to hold the file's\
    \ extension.\n    file_extension := \"\"\n    \n    // Initialize a variable to\
    \ hold the file's name.\n    file_name := file_name\n    \n    // Initialize a\
    \ variable to hold the file's extension.\n    file_extension := \"\"\n    \n \
    \   // Initialize a variable to hold the file's name.\n    file_name := file_name\n\
    \    \n    // Initialize a variable to hold the file's extension.\n    file_extension\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name\
    \ := file_name\n    \n    // Initialize a variable to hold the file's extension.\n\
    \    file_extension := \"\"\n    \n    // Initialize a variable to hold the file's\
    \ name.\n    file_name := file_name\n    \n    // Initialize a variable to hold\
    \ the file's extension.\n    file_extension := \"\"\n    \n    // Initialize a\
    \ variable to hold the file's name.\n    file_name := file_name\n    \n    //\
    \ Initialize a variable to hold the file's extension.\n    file_extension := \"\
    \"\n    \n    // Initialize a variable to hold the file's name.\n    file_name\
    \ := file_name\n    \n    // Initialize a variable to hold the file's extension.\n\
    \    file_extension := \"\"\n    \n    // Initialize a variable to hold the file's\
    \ name.\n    file_name := file_name\n    \n    // Initialize a variable to hold\
    \ the file's extension.\n    file_extension := \"\"\n    \n    // Initialize a\
    \ variable to hold the file's name.\n    file_name := file_name\n    \n    //\
    \ Initialize a variable to hold the file's extension.\n    file_extension := \"\
    \"\n    \n    // Initialize a variable to hold the file's name.\n    file_name\
    \ := file_name\n    \n    // Initialize a variable to hold the file's extension.\n\
    \    file_extension := \"\"\n    \n    // Initialize a variable to hold the file's\
    \ name.\n    file_name := file_name\n    \n    // Initialize a variable to hold\
    \ the file's extension.\n    file_extension := \"\"\n    \n    // Initialize a\
    \ variable to hold the file's name.\n    file_name := file_name\n    \n    //\
    \ Initialize a variable to hold the file's extension.\n    file_extension := \"\
    \"\n    \n    // Initialize a variable to hold the file's name.\n    file_name\
    \ := file_name\n    \n    // Initialize a variable to hold the file's extension.\n\
    \    file_extension := \"\"\n    \n    // Initialize a variable to hold the file's\
    \ name.\n    file_\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6adxj2gw_test.go:105:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'dot_position' to\
    \ 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr58wth1__test.go:107:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a variable to store the result\n \
    \   result := \"No\"\n\n    // Initialize a variable to store the file's name\n\
    \    file_name := file_name\n\n    // Initialize a variable to store the file's\
    \ name length\n    name_length := len(file_name)\n\n    // Initialize a variable\
    \ to store the file's name substring\n    name_substring := \"\"\n\n    // Initialize\
    \ a variable to store the file's name substring length\n    name_substring_length\
    \ := 0\n\n    // Initialize a variable to store the file's name substring before\
    \ the first dot\n    name_substring_before_dot := \"\"\n\n    // Initialize a\
    \ variable to store the file's name substring after the last dot\n    name_substring_after_dot\
    \ := \"\"\n\n    // Initialize a variable to store the file's name substring before\
    \ the first dot length\n    name_substring_before_dot_length := 0\n\n    // Initialize\
    \ a variable to store the file's name substring after the last dot length\n  \
    \  name_substring_after_dot_length := 0\n\n    // Initialize a variable to store\
    \ the file's name substring before the first dot and after last dot\n    name_substring_before_dot_after_dot\
    \ := \"\"\n\n    // Initialize a variable to store the file's name substring before\
    \ the first dot and after last dot length\n    name_substring_before_dot_after_dot_length\
    \ := 0\n\n    // Initialize a variable to store the file's name substring before\
    \ the first dot and after last dot and after first dot\n    name_substring_before_dot_after_dot_first_dot\
    \ := \"\"\n\n    // Initialize a variable to store the file's name substring before\
    \ the first dot and after last dot and after first dot length\n    name_substring_before_dot_after_dot_first_dot_length\
    \ := 0\n\n    // Initialize a variable to store the file's name substring before\
    \ the first dot and after last dot and after first dot and after second dot\n\
    \    name_substring_before_dot_after_dot_first_dot_second_dot := \"\"\n\n    //\
    \ Initialize a variable to store the file's name substring before the first dot\
    \ and after last dot and after first dot and after second dot length\n    name_substring_before_dot_after_dot_first_dot_second_dot_length\
    \ := 0\n\n    // Initialize a variable to store the file's name substring before\
    \ the first dot and after last dot and after first dot and after second dot and\
    \ after third dot\n    name_substring_before_dot_after_dot_first_dot_second_dot_third_dot\
    \ := \"\"\n\n    // Initialize a variable to store the file's name substring before\
    \ the first dot and after last dot and after first dot and after second dot and\
    \ after third dot length\n    name_substring_before_dot_after_dot_first_dot_second_dot_third_dot_length\
    \ := 0\n\n    // Initialize a \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnsw4f5xb_test.go:74:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpf5d25qvu_test.go:64: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'False'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_parts' to\
    \ an empty array\n    file_name_parts := []string{}\n    \n    // Initialize a\
    \ variable 'file_name_length' to 0\n    file_name_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_length' to 0\n    file_name_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name_length' to 0\n    file_name_length\
    \ := len(file_name)\n    \n    // Initialize a variable 'file_name_length' to\
    \ 0\n    file_name_length := len(file_name)\n    \n    // Initialize a variable\
    \ 'file_name_length' to 0\n    file_name_length := len(file_name)\n    \n    //\
    \ Initialize a variable 'file_name_length' to 0\n    file_name_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name_length' to 0\n    file_name_length\
    \ := len(file_name)\n    \n    // Initialize a variable 'file_name_length' to\
    \ 0\n    file_name_length := len(file_name)\n    \n    // Initialize a variable\
    \ 'file_name_length' to 0\n    file_name_length := len(file_name)\n    \n    //\
    \ Initialize a variable 'file_name_length' to 0\n    file_name_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name_length' to 0\n    file_name_length\
    \ := len(file_name)\n    \n    // Initialize a variable 'file_name_length' to\
    \ 0\n    file_name_length := len(file_name)\n    \n    // Initialize a variable\
    \ 'file_name_length' to 0\n    file_name_length := len(file_name)\n    \n    //\
    \ Initialize a variable 'file_name_length' to 0\n    file_name_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name_length' to 0\n    file_name_length\
    \ := len(file_name)\n    \n    // Initialize a variable 'file_name_length' to\
    \ 0\n    file_name_length := len(file_name)\n    \n    // Initialize a variable\
    \ 'file_name_length' to 0\n    file_name_length := len(file_name)\n    \n    //\
    \ Initialize a variable 'file_name_length' to 0\n    file_name_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name_length' to 0\n    file_name_length\
    \ := len(file_name)\n    \n    // Initialize a variable 'file_name_length' to\
    \ 0\n    file_name_length := len(file_name)\n    \n    // Initialize a variable\
    \ 'file_name_length' to 0\n    file_name_length := len(file_name)\n    \n    //\
    \ Initialize a variable 'file_name_length' to 0\n    file_name_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4ufijo_4_test.go:95:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5c3fvxov_test.go:92:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"\
    fmt\"\n    \"strings\"\n)\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxx9ut6ah_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to false\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_parts' to\
    \ an empty array\n    file_name_parts := []string{}\n    \n    // Initialize a\
    \ variable 'file_name_part' to an empty string\n    file_name_part := \"\"\n \
    \   \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp63_wa26k_test.go:92:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpfmwbqssr_test.go:65: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpfmwbqssr_test.go:65: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpfmwbqssr_test.go:65:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'false'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_parts' to\
    \ an empty array\n    file_name_parts := []string{}\n    \n    // Initialize a\
    \ variable 'file_name_length' to 0\n    file_name_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_first_letter' to an empty string\n    file_name_first_letter\
    \ := \"\"\n    \n    // Initialize a variable 'file_name_last_letter' to an empty\
    \ string\n    file_name_last_letter := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_first_letter_length' to 0\n    file_name_first_letter_length := 0\n\
    \    \n    // Initialize a variable 'file_name_last_letter_length' to 0\n    file_name_last_letter_length\
    \ := 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to\
    \ 0\n    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_letter_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_last_letter_position' to 0\n    file_name_last_letter_position :=\
    \ 0\n    \n    // Initialize a variable 'file_name_first_letter_position' to 0\n\
    \    file_name_first_\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx13_wn2y_test.go:87:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to 'true'.\n  \
    \  valid := true\n    \n    // Initialize a variable to hold the file's name.\n\
    \    file_name := file_name\n    \n    // Initialize a variable to hold the file's\
    \ extension.\n    file_extension := \"\"\n    \n    // Initialize a variable to\
    \ hold the file's extension.\n    dot_position := 0\n    \n    // Initialize a\
    \ variable to hold the file's extension.\n    dot_length := 0\n    \n    // Initialize\
    \ a variable to hold the file's extension.\n    dot_dot_position := 0\n    \n\
    \    // Initialize a variable to hold the file's extension.\n    dot_dot_length\
    \ := 0\n    \n    // Initialize a variable to hold the file's extension.\n   \
    \ dot_dot_dot_position := 0\n    \n    // Initialize a variable to hold the file's\
    \ extension.\n    dot_dot_dot_length := 0\n    \n    // Initialize a variable\
    \ to hold the file's extension.\n    dot_dot_dot_dot_position := 0\n    \n   \
    \ // Initialize a variable to hold the file's extension.\n    dot_dot_dot_dot_length\
    \ := 0\n    \n    // Initialize a variable to hold the file's extension.\n   \
    \ dot_dot_dot_dot_dot_position := 0\n    \n    // Initialize a variable to hold\
    \ the file's extension.\n    dot_dot_dot_dot_dot_length := 0\n    \n    // Initialize\
    \ a variable to hold the file's extension.\n    dot_dot_dot_dot_dot_dot_position\
    \ := 0\n    \n    // Initialize a variable to hold the file's extension.\n   \
    \ dot_dot_dot_dot_dot_dot_length := 0\n    \n    // Initialize a variable to hold\
    \ the file's extension.\n    dot_dot_dot_dot_dot_dot_dot_position := 0\n    \n\
    \    // Initialize a variable to hold the file's extension.\n    dot_dot_dot_dot_dot_dot_dot_length\
    \ := 0\n    \n    // Initialize a variable to hold the file's extension.\n   \
    \ dot_dot_dot_dot_dot_dot_dot_dot_position := 0\n    \n    // Initialize a variable\
    \ to hold the file's extension.\n    dot_dot_dot_dot_dot_dot_dot_dot_length :=\
    \ 0\n    \n    // Initialize a variable to hold the file's extension.\n    dot_dot_dot_dot_dot_dot_dot_dot_dot_position\
    \ := 0\n    \n    // Initialize a variable to hold the file's extension.\n   \
    \ dot_dot_dot_dot_dot_dot_dot_dot_dot_length := 0\n    \n    // Initialize a variable\
    \ to hold the file's extension.\n    dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm4annqui_test.go:87:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // Initialize a variable 'dot_position'\
    \ to -1\n    dot_position := -1\n    \n    // \nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd8bmjb5__test.go:107:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_name_length' to\
    \ '0'\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_first_letter'\
    \ to '0'\n    file_name_first_letter := 0\n    \n    // Initialize a variable\
    \ 'file_name_second_letter' to '0'\n    file_name_second_letter := 0\n    \n \
    \   // Initialize a variable 'file_name_third_letter' to '0'\n    file_name_third_letter\
    \ := 0\n    \n    // Initialize a variable 'file_name_fourth_letter' to '0'\n\
    \    file_name_fourth_letter := 0\n    \n    // Initialize a variable 'file_name_fifth_letter'\
    \ to '0'\n    file_name_fifth_letter := 0\n    \n    // Initialize a variable\
    \ 'file_name_sixth_letter' to '0'\n    file_name_sixth_letter := 0\n    \n   \
    \ // Initialize a variable 'file_name_seventh_letter' to '0'\n    file_name_seventh_letter\
    \ := 0\n    \n    // Initialize a variable 'file_name_eighth_letter' to '0'\n\
    \    file_name_eighth_letter := 0\n    \n    // Initialize a variable 'file_name_ninth_letter'\
    \ to '0'\n    file_name_ninth_letter := 0\n    \n    // Initialize a variable\
    \ 'file_name_tenth_letter' to '0'\n    file_name_tenth_letter := 0\n    \n   \
    \ // Initialize a variable 'file_name_eleventh_letter' to '0'\n    file_name_eleventh_letter\
    \ := 0\n    \n    // Initialize a variable 'file_name_twelfth_letter' to '0'\n\
    \    file_name_twelfth_letter := 0\n    \n    // Initialize a variable 'file_name_thirteenth_letter'\
    \ to '0'\n    file_name_thirteenth_letter := 0\n    \n    // Initialize a variable\
    \ 'file_name_fourteenth_letter' to '0'\n    file_name_fourteenth_letter := 0\n\
    \    \n    // Initialize a variable 'file_name_fifteenth_letter' to '0'\n    file_name_fifteenth_letter\
    \ := 0\n    \n    // Initialize a variable 'file_name_sixteenth_letter' to '0'\n\
    \    file_name_sixteenth_letter := 0\n    \n    // Initialize a variable 'file_name_seventeenth_letter'\
    \ to '0'\n    file_name_seventeenth_letter := 0\n    \n    // Initialize a variable\
    \ 'file_name_eighteenth_letter' to '0'\n    file_name_eighteenth_letter := 0\n\
    \    \n    // Initialize a variable 'file_name\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7nva62nq_test.go:83:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to false\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7n_1w7iy_test.go:99:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp9y908rp3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp9y908rp3_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp9y908rp3_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075581
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'false'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8_1t9nmd_test.go:92:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpf5d25qvu_test.go:64: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to 'true'.\n  \
    \  valid := true\n    \n    // Initialize a variable to hold the file's name.\n\
    \    file_name := file_name\n    \n    // Initialize a variable to hold the file's\
    \ extension.\n    file_extension := \"\"\n    \n    // Initialize a variable to\
    \ hold the file's name.\n    file_name := file_name\n    \n    // Initialize a\
    \ variable to hold the file's extension.\n    file_extension := \"\"\n    \n \
    \   // Initialize a variable to hold the file's name.\n    file_name := file_name\n\
    \    \n    // Initialize a variable to hold the file's extension.\n    file_extension\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name.\n    file_name\
    \ := file_name\n    \n    // Initialize a variable to hold the file's extension.\n\
    \    file_extension := \"\"\n    \n    // Initialize a variable to hold the file's\
    \ name.\n    file_name := file_name\n    \n    // Initialize a variable to hold\
    \ the file's extension.\n    file_extension := \"\"\n    \n    // Initialize a\
    \ variable to hold the file's name.\n    file_name := file_name\n    \n    //\
    \ Initialize a variable to hold the file's extension.\n    file_extension := \"\
    \"\n    \n    // Initialize a variable to hold the file's name.\n    file_name\
    \ := file_name\n    \n    // Initialize a variable to hold the file's extension.\n\
    \    file_extension := \"\"\n    \n    // Initialize a variable to hold the file's\
    \ name.\n    file_name := file_name\n    \n    // Initialize a variable to hold\
    \ the file's extension.\n    file_extension := \"\"\n    \n    // Initialize a\
    \ variable to hold the file's name.\n    file_name := file_name\n    \n    //\
    \ Initialize a variable to hold the file's extension.\n    file_extension := \"\
    \"\n    \n    // Initialize a variable to hold the file's name.\n    file_name\
    \ := file_name\n    \n    // Initialize a variable to hold the file's extension.\n\
    \    file_extension := \"\"\n    \n    // Initialize a variable to hold the file's\
    \ name.\n    file_name := file_name\n    \n    // Initialize a variable to hold\
    \ the file's extension.\n    file_extension := \"\"\n    \n    // Initialize a\
    \ variable to hold the file's name.\n    file_name := file_name\n    \n    //\
    \ Initialize a variable to hold the file's extension.\n    file_extension := \"\
    \"\n    \n    // Initialize a variable to hold the file's name.\n    file_name\
    \ := file_name\n    \n    // Initialize a variable to hold the file's extension.\n\
    \    file_extension := \"\"\n    \n    // Initialize a variable to hold the file's\
    \ name.\n    file_\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6adxj2gw_test.go:105:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'False'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_position'\
    \ to 0\n    dot_position := 0\n    \n    // Initialize a \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr1o2cl0j_test.go:107:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075582
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpf5d25qvu_test.go:64: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp300xdhq7_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp300xdhq7_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp300xdhq7_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // 1. There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    if len(file_name) > 3 {\n        return \"\
    No\"\n    }\n\n    // 2. The file's name contains exactly one dot '.'\n    if\
    \ file_name[len(file_name)-1] != '.' {\n        return \"No\"\n    }\n\n    //\
    \ 3. Substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z').\n    if file_name[:len(file_name)-1]\
    \ == \"\" {\n        return \"No\"\n    }\n\n    // 4. Substring after the dot\
    \ should be one of these: ['txt', 'exe', 'dll']\n    dot_pos := strings.IndexRune(file_name,\
    \ '.')\n    if dot_pos == -1 {\n        return \"No\"\n    }\n\n    dot_pos_2\
    \ := strings.IndexRune(file_name, '.', dot_pos+1)\n    if dot_pos_2 == -1 {\n\
    \        return \"No\"\n    }\n\n    dot_pos_3 := strings.IndexRune(file_name,\
    \ '.', dot_pos_2+1)\n    if dot_pos_3 == -1 {\n        return \"No\"\n    }\n\n\
    \    dot_pos_4 := strings.IndexRune(file_name, '.', dot_pos_3+1)\n    if dot_pos_4\
    \ == -1 {\n        return \"No\"\n    }\n\n    dot_pos_5 := strings.IndexRune(file_name,\
    \ '.', dot_pos_4+1)\n    if dot_pos_5 == -1 {\n        return \"No\"\n    }\n\n\
    \    dot_pos_6 := strings.IndexRune(file_name, '.', dot_pos_5+1)\n    if dot_pos_6\
    \ == -1 {\n        return \"No\"\n    }\n\n    dot_pos_7 := strings.IndexRune(file_name,\
    \ '.', dot_pos_6+1)\n    if dot_pos_7 == -1 {\n        return \"No\"\n    }\n\n\
    \    dot_pos_8 := strings.IndexRune(file_name, '.', dot_pos_7+1)\n    if dot_pos_8\
    \ == -1 {\n        return \"No\"\n    }\n\n    dot_pos_9 := strings.IndexRune(file_name,\
    \ '.', dot_pos_8+1)\n    if dot_pos_9 == -1 {\n        return \"No\"\n    }\n\n\
    \    // 5. Substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    dot_pos_10 := strings.IndexRune(file_name, '.', dot_pos_9+1)\n    if dot_pos_10\
    \ == -1 {\n        return \"No\"\n    }\n\n    dot_pos_11 := strings.IndexRune(file_name,\
    \ '.', dot_pos_10+1)\n    if dot_pos_11 == -1 {\n        return \"No\"\n    }\n\
    \n    dot_pos_12 := strings.IndexRune(file_name, '.', dot_pos_11+1)\n    if dot_pos_12\
    \ == -1 {\n        return \"No\"\n    }\n\n    dot_pos_13 := strings.IndexRune(file_name,\
    \ '\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplm258fg__test.go:99:48: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'false'.\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_parts' to\
    \ an empty array.\n    file_name_parts := []string{}\n    \n    // Initialize\
    \ a variable 'file_name_parts_length' to 0.\n    file_name_parts_length := 0\n\
    \    \n    // Initialize a variable 'file_name_parts_length' to 0.\n    file_name_parts_length\
    \ := len(file_name)\n    \n    // Initialize a variable 'file_name_parts_length'\
    \ to 0.\n    file_name_parts_length := len(file_name)\n    \n    // Initialize\
    \ a variable 'file_name_parts_length' to 0.\n    file_name_parts_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name_parts_length' to 0.\n    file_name_parts_length\
    \ := len(file_name)\n    \n    // Initialize a variable 'file_name_parts_length'\
    \ to 0.\n    file_name_parts_length := len(file_name)\n    \n    // Initialize\
    \ a variable 'file_name_parts_length' to 0.\n    file_name_parts_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name_parts_length' to 0.\n    file_name_parts_length\
    \ := len(file_name)\n    \n    // Initialize a variable 'file_name_parts_length'\
    \ to 0.\n    file_name_parts_length := len(file_name)\n    \n    // Initialize\
    \ a variable 'file_name_parts_length' to 0.\n    file_name_parts_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name_parts_length' to 0.\n    file_name_parts_length\
    \ := len(file_name)\n    \n    // Initialize a variable 'file_name_parts_length'\
    \ to 0.\n    file_name_parts_length := len(file_name)\n    \n    // Initialize\
    \ a variable 'file_name_parts_length' to 0.\n    file_name_parts_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name_parts_length' to 0.\n    file_name_parts_length\
    \ := len(file_name)\n    \n    // Initialize a variable 'file_name_parts_length'\
    \ to 0.\n    file_name_parts_length := len(file_name)\n    \n    // Initialize\
    \ a variable 'file_name_parts_length' to 0.\n    file_name_parts_length := len(file_name)\n\
    \    \n    // Initialize a variable 'file_name_parts_length' to 0.\n    file_name_parts_length\
    \ := len(file_name)\n    \n    // Initialize a variable 'file_name_parts_length'\
    \ to 0.\n    file_name_parts_length := len(file_name)\n    \n    // Initialize\
    \ a variable 'file_name_parts_length' to 0.\n    file_name_parts_\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplwjbo363_test.go:84:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpf5d25qvu_test.go:64: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpf5d25qvu_test.go:64: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpf5d25qvu_test.go:64: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable to 'true'.\n  \
    \  valid := true\n    \n    // Initialize a boolean variable to 'false'.\n   \
    \ valid := false\n    \n    // Initialize a variable to hold the file's name without\
    \ its extension.\n    file_name := file_name\n    \n    // Initialize a variable\
    \ to hold the file's extension.\n    extension := \"\"\n    \n    // Initialize\
    \ a variable to hold the file's name without its extension.\n    file_name_without_extension\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ its extension.\n    file_name_without_extension_no_dot := \"\"\n    \n    //\
    \ Initialize a variable to hold the file's name without its extension.\n    file_name_without_extension_no_dot_no_dot\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ its extension.\n    file_name_without_extension_no_dot_no_dot_no_dot := \"\"\
    \n    \n    // Initialize a variable to hold the file's name without its extension.\n\
    \    file_name_without_extension_no_dot_no_dot_no_dot_no_dot := \"\"\n    \n \
    \   // Initialize a variable to hold the file's name without its extension.\n\
    \    file_name_without_extension_no_dot_no_dot_no_dot_no_dot_no_dot := \"\"\n\
    \    \n    // Initialize a variable to hold the file's name without its extension.\n\
    \    file_name_without_extension_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot :=\
    \ \"\"\n    \n    // Initialize a variable to hold the file's name without its\
    \ extension.\n    file_name_without_extension_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ its extension.\n    file_name_without_extension_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ its extension.\n    file_name_without_extension_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ its extension.\n    file_name_without_extension_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ its extension.\n    file_name_without_extension_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_dot_no_\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8hv3t4co_test.go:69:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'dot_position' to\
    \ 0\n    dot_position := 0\n    \n    // Initialize a variable 'dot_count' to\
    \ 0\n    dot_count := 0\n    \n    // Initialize a variable 'dot_string' to '0'\n\
    \    dot_string := \"0\"\n    \n    // Initialize a variable 'dot_length' to 0\n\
    \    dot_length := 0\n    \n    // Initialize a variable 'dot_length' to 0\n \
    \   dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_string'\
    \ to '0'\n    dot_string := file_name\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\n    \n    // Initialize a variable 'dot_length'\
    \ to 0\n    dot_length := len(file_name)\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwccb381t_test.go:102:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return file_name\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpf5d25qvu_test.go:64: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpf5d25qvu_test.go:64: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpf5d25qvu_test.go:64:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n</cell>\n\
    <text>\nRun the cell below to test your function\n\n\n</text>\n<cell>\n# Run this\
    \ cell to test your function\nassert file_name_check(\"example.txt\") == \"Yes\"\
    \nassert file_name_check(\"1example.dll\") == \"No\"\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string representing a file's name, and returns\
    \ the file's extension.\n\nA file's extension is considered to be valid if and\
    \ only if all the following conditions are met:\n- There should not be more than\
    \ three digits ('0'-'9') in the file's name.\n- The file's name contains exactly\
    \ one dot '.'\n- The substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"\
    example.txt\") # => 'txt'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.txt\") # => 'txt'\nfile_name_check(\"1example.exe\") # => 'exe'\nfile_name_check(\"\
    1example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example.txt\") # => 'No' (the name should start with a latin alphapet letter)\n\
    file_name_check(\"example\") # => 'No' (the name should start with a latin alphapet\
    \ letter)\nfile_name_check(\"example\") # => 'No' (the name should start with\
    \ a latin alphapet letter)\nfile_name_check(\"example\") # => 'No' (the name should\
    \ start with a latin alphapet letter)\nfile_name_check(\"example\") # => 'No'\
    \ (the name should start with a latin alphapet letter)\nfile_name_check(\"example\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc5fr_u17_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n</cell>\n\
    <text>\nRun the cell below to test your solution.\n\n\n</text>\n<cell>\n# Do not\
    \ modify this cell!\n\n# Test 1\nfile_name_check(\"example.txt\")\n</cell>\n<cell>\n\
    # Test 2\nfile_name_check(\"1example.dll\")\n</cell>\n<cell>\n# Test 3\nfile_name_check(\"\
    1example.txt\")\n</cell>\n<cell>\n# Test 4\nfile_name_check(\"1example\")\n</cell>\n\
    <cell>\n# Test 5\nfile_name_check(\"1example.txt.exe\")\n</cell>\n<cell>\n# Test\
    \ 6\nfile_name_check(\"1example.txt.exe1\")\n</cell>\n<cell>\n# Test 7\nfile_name_check(\"\
    1example.txt.exe1.dll\")\n</cell>\n<cell>\n# Test 8\nfile_name_check(\"1example.txt.exe1.dll1\"\
    )\n</cell>\n<cell>\n# Test 9\nfile_name_check(\"1example.txt.exe1.dll1.txt\")\n\
    </cell>\n<cell>\n# Test 10\nfile_name_check(\"1example.txt.exe1.dll1.txt1\")\n\
    </cell>\n<cell>\n# Test 11\nfile_name_check(\"1example.txt.exe1.dll1.txt1.exe\"\
    )\n</cell>\n<cell>\n# Test 12\nfile_name_check(\"1example.txt.exe1.dll1.txt1.exe1\"\
    )\n</cell>\n<cell>\n# Test 13\nfile_name_check(\"1example.txt.exe1.dll1.txt1.exe1.dll\"\
    )\n</cell>\n<cell>\n# Test 14\nfile_name_check(\"1example.txt.exe1.dll1.txt1.exe1.dll1\"\
    )\n</cell>\n<cell>\n# Test 15\nfile_name_check(\"1example.txt.exe1.dll1.txt1.exe1.dll1.txt\"\
    )\n</cell>\n<cell>\n# Test 16\nfile_name_check(\"1example.txt.exe1.dll1.txt1.exe1.dll1.txt1\"\
    )\n</cell>\n<cell>\n# Test 17\nfile_name_check(\"1example.txt.exe1.dll1.txt1.exe1.dll1.txt1.exe\"\
    )\n</cell>\n<cell>\n# Test 18\nfile_name_check(\"1example.txt.exe1.dll1.txt1.exe1.\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc7886n1c_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'No'\n\
    \    is_valid := \"No\"\n    \n    // Initialize a variable 'dot_position' to\
    \ 0\n    dot_position := 0\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpznnxf417_test.go:99:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Check that the file name contains exactly one\
    \ dot '.'\n    if file_name[len(file_name)-1] != '.' {\n        return \"No\"\n\
    \    }\n\n    // Check that the file name contains exactly three digits ('0'-'9')\n\
    \    if len(file_name) != 3 {\n        return \"No\"\n    }\n\n    // Check that\
    \ the file's name contains exactly one dot '.'\n    if file_name[0] != '.' {\n\
    \        return \"No\"\n    }\n\n    // Check that the substring before the dot\
    \ should not be empty, and it starts with a letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n    if file_name[0] == '.' {\n        if file_name[1] == '.' {\n\
    \            if file_name[2] != '.' {\n                return \"No\"\n       \
    \     }\n        }\n    }\n\n    // Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    dot_pos := strings.Index(file_name,\
    \ \".\")\n    if dot_pos == -1 {\n        return \"No\"\n    }\n\n    dot_pos\
    \ := dot_pos + 1\n    dot_pos := strings.Index(file_name[dot_pos:], \"txt\")\n\
    \    if dot_pos == -1 {\n        return \"No\"\n    }\n\n    dot_pos := dot_pos\
    \ + 1\n    dot_pos := strings.Index(file_name[dot_pos:], \"exe\")\n    if dot_pos\
    \ == -1 {\n        return \"No\"\n    }\n\n    dot_pos := dot_pos + 1\n    dot_pos\
    \ := strings.Index(file_name[dot_pos:], \"dll\")\n    if dot_pos == -1 {\n   \
    \     return \"No\"\n    }\n\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjcr9wsvi_test.go:47:16: undefined: strings

    /tmp/tmpjcr9wsvi_test.go:52:13: no new variables on left side of :=

    /tmp/tmpjcr9wsvi_test.go:53:13: no new variables on left side of :=

    /tmp/tmpjcr9wsvi_test.go:53:16: undefined: strings

    /tmp/tmpjcr9wsvi_test.go:58:13: no new variables on left side of :=

    /tmp/tmpjcr9wsvi_test.go:59:13: no new variables on left side of :=

    /tmp/tmpjcr9wsvi_test.go:59:16: undefined: strings

    /tmp/tmpjcr9wsvi_test.go:64:13: no new variables on left side of :=

    /tmp/tmpjcr9wsvi_test.go:65:13: no new variables on left side of :=

    /tmp/tmpjcr9wsvi_test.go:65:16: undefined: strings

    /tmp/tmpjcr9wsvi_test.go:65:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'False'\n\
    \    is_valid := false\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n    file_name_character := 0\n    \n    // Initialize a variable 'file_name_character'\
    \ to 0\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphafudt6i_test.go:99:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'False'\n\
    \    is_valid := false\n\n    // Initialize a variable 'file_name_length' to 0\n\
    \    file_name_length := 0\n\n    // Initialize a variable 'file_name_characters'\
    \ to 0\n    file_name_characters := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_position := 0\n\n    // Initialize a variable 'file_name_dot_position'\
    \ to 0\n    file_name_dot_\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf1gkqs4b_test.go:99:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a variable to store the result\n \
    \   result := \"No\"\n    \n    // Initialize a variable to store the file's name\n\
    \    file_name := file_name\n    \n    // Initialize a variable to store the file's\
    \ extension\n    file_extension := \"\"\n    \n    // Initialize a variable to\
    \ store the file's length\n    file_length := 0\n    \n    // Initialize a variable\
    \ to store the file's last character\n    file_last_char := \"\"\n    \n    //\
    \ Initialize a variable to store the file's first character\n    file_first_char\
    \ := \"\"\n    \n    // Initialize a variable to store the file's first character\n\
    \    file_first_char_lower := \"\"\n    \n    // Initialize a variable to store\
    \ the file's first character\n    file_first_char_upper := \"\"\n    \n    //\
    \ Initialize a variable to store the file's first character\n    file_first_char_number\
    \ := \"\"\n    \n    // Initialize a variable to store the file's first character\n\
    \    file_first_char_symbol := \"\"\n    \n    // Initialize a variable to store\
    \ the file's first character\n    file_first_char_symbol := \"\"\n    \n    //\
    \ Initialize a variable to store the file's first character\n    file_first_char_symbol\
    \ := \"\"\n    \n    // Initialize a variable to store the file's first character\n\
    \    file_first_char_symbol := \"\"\n    \n    // Initialize a variable to store\
    \ the file's first character\n    file_first_char_symbol := \"\"\n    \n    //\
    \ Initialize a variable to store the file's first character\n    file_first_char_symbol\
    \ := \"\"\n    \n    // Initialize a variable to store the file's first character\n\
    \    file_first_char_symbol := \"\"\n    \n    // Initialize a variable to store\
    \ the file's first character\n    file_first_char_symbol := \"\"\n    \n    //\
    \ Initialize a variable to store the file's first character\n    file_first_char_symbol\
    \ := \"\"\n    \n    // Initialize a variable to store the file's first character\n\
    \    file_first_char_symbol := \"\"\n    \n    // Initialize a variable to store\
    \ the file's first character\n    file_first_char_symbol := \"\"\n    \n    //\
    \ Initialize a variable to store the file's first character\n    file_first_char_symbol\
    \ := \"\"\n    \n    // Initialize a variable to store the file's first character\n\
    \    file_first_char_symbol := \"\"\n    \n    // Initialize a variable to store\
    \ the file's first character\n    file_first_char_symbol := \"\"\n    \n    //\
    \ Initialize a variable to store the file's first character\n    file_first_char_symbol\
    \ := \"\"\n    \n    // Initialize a variable to store the file's first character\n\
    \    file_first_char_symbol := \"\"\n    \n    // Initialize a variable to store\
    \ the file's first character\n    file_first_char_symbol := \"\"\n    \n    //\
    \ Initialize a vari\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4oy4s3ww_test.go:101:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    \n    return file_name\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgheib89t_test.go:65: expected 'Yes', got 'example.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgheib89t_test.go:65:\
    \ expected 'No', got '1example.dll'\n    --- FAIL: TestFile_Name_Check/test_num__2\
    \ (0.00s)\n        tmpgheib89t_test.go:65: expected 'No', got 's1sdf3.asd'\n \
    \   --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmpgheib89t_test.go:65:\
    \ expected 'Yes', got 'K.dll'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmpgheib89t_test.go:65: expected 'Yes', got 'MY16FILE3.exe'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n        tmpgheib89t_test.go:65:\
    \ expected 'No', got 'His12FILE94.exe'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgheib89t_test.go:65: expected 'No', got '_Y.txt'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgheib89t_test.go:65:\
    \ expected 'No', got '?aREYA.exe'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpgheib89t_test.go:65: expected 'No', got '/this_is_valid.dll'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n        tmpgheib89t_test.go:65:\
    \ expected 'No', got 'this_is_valid.wow'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpgheib89t_test.go:65: expected 'Yes', got 'this_is_valid.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n        tmpgheib89t_test.go:65:\
    \ expected 'No', got 'this_is_valid.txtexe'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgheib89t_test.go:65: expected 'No', got '#this2_i4s_5valid.ten'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgheib89t_test.go:65:\
    \ expected 'No', got '@this1_is6_valid.exe'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmpgheib89t_test.go:65: expected 'No', got 'this_is_12valid.6exe4.txt'\n\
    \    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmpgheib89t_test.go:65:\
    \ expected 'No', got 'all.exe.txt'\n    --- FAIL: TestFile_Name_Check/test_nu"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code goes here\n    \n    return \"\"\n\
    }\n</cell>\n<text>\nRun the cell below to test your function\n\n\n</text>\n<cell>\n\
    # Run this cell to test your function\nprint(file_name_check(\"example.txt\"))\n\
    </cell>\n<text>\nExpected output\nNo\n\n</text>\n<text>\nTask 3: Write a function\
    \ that takes a string representing a file's name, and returns the file's extension.\n\
    The file's extension can be determined from the file's name by removing the last\
    \ three characters from the file's name.\nExamples:\nfile_name_check(\"example.txt\"\
    ) # => 'txt'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.txt\") # => 'txt'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'exe'\nfile_name_check(\"example\") # => 'exe'\nfile_name_check\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx128_mhs_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075583
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn5pyglig_test.go:168:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075579
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4g7dslb4_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4g7dslb4_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4g7dslb4_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgqdjp425_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgqdjp425_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgqdjp425_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075580
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"\
    example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name\
    \ string) string {\n    \n    // Initialize a boolean variable 'is_valid' to 'true'\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_name_length' to\
    \ '0'\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_part'\
    \ to 'file_name'\n    file_name_part := file_name\n    \n    // Initialize a variable\
    \ 'file_name_part_length' to '0'\n    file_name_part_length := len(file_name_part)\n\
    \    \n    // Initialize a variable 'file_name_part_index' to '0'\n    file_name_part_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_char' to '0'\n    file_name_part_char\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_char_length' to '0'\n\
    \    file_name_part_char_length := 0\n    \n    // Initialize a variable 'file_name_part_char_length'\
    \ to '0'\n    file_name_part_char_length := len(file_name_part[file_name_part_index])\n\
    \    \n    // Initialize a variable 'file_name_part_char_length' to '0'\n    file_name_part_char_length\
    \ := len(file_name_part[file_name_part_index])\n    \n    // Initialize a variable\
    \ 'file_name_part_char_length' to '0'\n    file_name_part_char_length := len(file_name_part[file_name_part_index])\n\
    \    \n    // Initialize a variable 'file_name_part_char_length' to '0'\n    file_name_part_char_length\
    \ := len(file_name_part[file_name_part_index])\n    \n    // Initialize a variable\
    \ 'file_name_part_char_length' to '0'\n    file_name_part_char_length := len(file_name_part[file_name_part_index])\n\
    \    \n    // Initialize a variable 'file_name_part_char_length' to '0'\n    file_name_part_char_length\
    \ := len(file_name_part[file_name_part_index])\n    \n    // Initialize a variable\
    \ 'file_name_part_char_length' to '0'\n    file_name_part_char_length := len(file_name_part[file_name_part_index])\n\
    \    \n    // Initialize a variable 'file_name_part_char_length' to '0'\n    file_name_part_char_length\
    \ := len(file_name_part[file_name_part_index])\n    \n    // Initialize a variable\
    \ 'file_name_part_char_length' to '0'\n    file_name_part_char_length := len(file_name_part[file_name_part_index])\n\
    \    \n    // Initialize a variable 'file_name_part_char_length' to '0'\n    file_name_part_char_length\
    \ := len(file_name_part[file_name_part_index])\n    \n    // Initialize a variable\
    \ 'file_name_part_char_length\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiervsfq5_test.go:74:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075583
