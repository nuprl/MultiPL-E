language: go_test.go
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Trim(brackets, \">\")\n    brackets =\
    \ strings.Trim(brackets, \"<\")\n    brackets = strings.Trim(brackets, \">>\"\
    )\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<\")\n    brackets = strings.Trim(brackets, \"<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\n    brackets = strings.Trim(brackets, \"<<<\")\n    brackets = strings.Trim(brackets,\
    \ \"<<<\")\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo_nhj05c_test.go:56:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    return brackets == \"<<><>>\"\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy21v1u2u_test.go:20:16: undefined: strings

    /tmp/tmpy21v1u2u_test.go:21:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, char\
    \ := range brackets {\n        if char == \">\" {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        } else {\n            openingBrackets\
    \ = append(openingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqvlo47za_test.go:23:20: invalid operation: char == ">" (mismatched types
    rune and untyped string)

    /tmp/tmpqvlo47za_test.go:24:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpqvlo47za_test.go:26:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptlovv58g_test.go:53:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        openingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        closingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo0laez1_test.go:22:25: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvo0laez1_test.go:25:25: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvo0laez1_test.go:28:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpvo0laez1_test.go:33:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets[c] = true\n        } else {\n            closingBrackets[c]\
    \ = true\n        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpjua5thtn_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpjua5thtn_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpjua5thtn_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpjua5thtn_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ == 0 {\n        return false\n    }\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \"<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_wyuh_3__test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, c := range brackets {\n        openingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        closingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpfrqe_de3_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpfrqe_de3_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpfrqe_de3_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpfrqe_de3_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpfrqe_de3_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpfrqe_de3_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpfrqe_de3_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpfrqe_de3_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stacks := make([][]bool, len(brackets))\n    for i := range\
    \ brackets {\n        stacks[i] = make([]bool, len(brackets))\n    }\n    stacks[0][0]\
    \ = true\n    stacks[len(brackets)-1][len(brackets)-1] = true\n    for i := range\
    \ brackets {\n        if brackets[i] == '<' {\n            stacks[i][len(brackets)-1]\
    \ = true\n        } else {\n            stacks[i][len(brackets)-1] = false\n \
    \       }\n    }\n    for i := range stacks {\n        for j := range stacks[i]\
    \ {\n            if stacks[i][j] != stacks[i-1][j] {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing({0x51e1ec, 0x2})\n\t\
    /tmp/tmpp82iwpca_test.go:34 +0x267\ncommand-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\
    \t/tmp/tmpp82iwpca_test.go:49 +0x4a\ntesting.tRunner(0xc0000cc4e0, 0x528fc8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb80kwdt6_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]int, len(brackets))\n    closingBrackets := make([]int, len(brackets))\n\
    \    i := 0\n    for _, c := range brackets {\n        if c == '<' {\n       \
    \     openingBrackets[i] = 1\n            i++\n        } else if c == '>' {\n\
    \            closingBrackets[len(openingBrackets)-i-1] = 1\n            i++\n\
    \        } else {\n            return false\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[len(openingBrackets)-i-1] {\n\
    \            return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[len(openingBrackets)-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyh1r3ss_test.go:34:12: c declared but not used

    /tmp/tmpkyh1r3ss_test.go:35:13: invalid operation: operator ! not defined on openingBrackets[len(openingBrackets)
    - i - 1] (variable of type int)

    /tmp/tmpkyh1r3ss_test.go:39:12: c declared but not used

    /tmp/tmpkyh1r3ss_test.go:40:13: invalid operation: operator ! not defined on closingBrackets[len(openingBrackets)
    - i] (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb80kwdt6_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzug0tcuf_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]int, len(brackets))\n    closingBrackets := make([]int, len(brackets))\n\
    \    for i := 0; i < len(brackets); i++ {\n        switch brackets[i] {\n    \
    \    case \"<\":\n            openingBrackets[i] = 1\n        case \"<=\":\n \
    \           openingBrackets[i] = 2\n        case \"=\":\n            openingBrackets[i]\
    \ = 3\n        case \">\":\n            closingBrackets[i] = 1\n        case \"\
    >=\":\n            closingBrackets[i] = 2\n        case \"=\":\n            closingBrackets[i]\
    \ = 3\n        default:\n            return false\n        }\n    }\n    for i\
    \ := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6k1m0thz_test.go:24:14: cannot convert "<" (untyped string constant) to
    byte

    /tmp/tmp6k1m0thz_test.go:26:14: cannot convert "<=" (untyped string constant)
    to byte

    /tmp/tmp6k1m0thz_test.go:28:14: cannot convert "=" (untyped string constant) to
    byte

    /tmp/tmp6k1m0thz_test.go:30:14: cannot convert ">" (untyped string constant) to
    byte

    /tmp/tmp6k1m0thz_test.go:32:14: cannot convert ">=" (untyped string constant)
    to byte

    /tmp/tmp6k1m0thz_test.go:34:14: cannot convert "=" (untyped string constant) to
    byte

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \">\" && c != \"<\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpryh1q30__test.go:21:17: invalid operation: c != ">" (mismatched types
    rune and untyped string)

    /tmp/tmpryh1q30__test.go:21:29: invalid operation: c != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb80kwdt6_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdok8r_l9_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdok8r_l9_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptlovv58g_test.go:53:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\")\n    brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets\
    \ = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>>\", \"\")\n \
    \   brackets = strings.Replace(brackets, \"<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>\", \"\")\n   \
    \ brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp17upfoys_test.go:59:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"<<\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(b\n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphuv4x4_7_test.go:49:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets = append(openingBrackets, c)\n        } else\
    \ {\n            closingBrackets = append(closingBrackets, c)\n        }\n   \
    \ }\n    if len(openingBrackets) != len(closingBrackets) {\n        return false\n\
    \    }\n    for i := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcled5ys4_test.go:23:55: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmpcled5ys4_test.go:25:55: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzug0tcuf_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        switch c\
    \ {\n        case '<':\n            openingBrackets[c] = true\n        case '>':\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7k4208p8_test.go:24:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp7k4208p8_test.go:26:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp7k4208p8_test.go:30:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp7k4208p8_test.go:33:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzug0tcuf_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmpdvp8ex_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075019
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stacks := make([][]bool, len(brackets))\n    for i := 0;\
    \ i < len(brackets); i++ {\n        stacks[i] = make([]bool, len(brackets))\n\
    \    }\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<'\
    \ {\n            stacks[i][0]++\n        } else if brackets[i] == '>' {\n    \
    \        stacks[i][1]++\n        } else {\n            return false\n        }\n\
    \    }\n    for i := 0; i < len(brackets); i++ {\n        if stacks[i][0] != stacks[i][1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsjp_dkxs_test.go:25:13: invalid operation: stacks[i][0]++ (non-numeric
    type bool)

    /tmp/tmpsjp_dkxs_test.go:27:13: invalid operation: stacks[i][1]++ (non-numeric
    type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    \nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph1k27l7f_test.go:55:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075019
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb80kwdt6_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets = append(openingBrackets, c)\n        } else\
    \ {\n            closingBrackets = append(closingBrackets, c)\n        }\n   \
    \ }\n    if len(openingBrackets) != len(closingBrackets) {\n        return false\n\
    \    }\n    for i := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcled5ys4_test.go:23:55: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmpcled5ys4_test.go:25:55: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == '<' {\n            openingBrackets[char] = true\n        } else {\n     \
    \       closingBrackets[char] = true\n        }\n    }\n    for _, char := range\
    \ brackets {\n        if !openingBrackets[char] {\n            return false\n\
    \        }\n    }\n    for _, char := range brackets {\n        if !closingBrackets[char]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwsdg_ha1_test.go:23:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpwsdg_ha1_test.go:25:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpwsdg_ha1_test.go:29:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpwsdg_ha1_test.go:34:29: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == '<' {\n            openingBrackets[char] = true\n        } else {\n     \
    \       closingBrackets[char] = true\n        }\n    }\n    for _, char := range\
    \ brackets {\n        if !openingBrackets[char] {\n            return false\n\
    \        }\n    }\n    for _, char := range brackets {\n        if !closingBrackets[char]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwsdg_ha1_test.go:23:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpwsdg_ha1_test.go:25:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpwsdg_ha1_test.go:29:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpwsdg_ha1_test.go:34:29: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    openingBrackets\
    \ := make([]int, len(brackets))\n    closingBrackets := make([]int, len(brackets))\n\
    \    for i := range brackets {\n        if brackets[i] == '<' {\n            openingBrackets[i]\
    \ = 1\n        } else {\n            openingBrackets[i] = 0\n        }\n    }\n\
    \    for i := range brackets {\n        if brackets[i] == '>' {\n            closingBrackets[i]\
    \ = 1\n        } else {\n            closingBrackets[i] = 0\n        }\n    }\n\
    \    for i := range openingBrackets {\n        if openingBrackets[i] == closingBrackets[i]\
    \ {\n            continue\n        }\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpt6vep4gd_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpt6vep4gd_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpt6vep4gd_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpt6vep4gd_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpt6vep4gd_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__8 (0.00s)\n        tmpt6vep4gd_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzug0tcuf_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpahyz_hek_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpahyz_hek_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \"><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbjoi4q2e_test.go:50:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075019
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdok8r_l9_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzug0tcuf_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n \
    \   brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n \
    \   brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", \nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj0mxrmjx_test.go:53:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfwfotvxi_test.go:53:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == '<' {\n            openingBrackets[char] = true\n        } else {\n     \
    \       closingBrackets[char] = true\n        }\n    }\n    for _, char := range\
    \ brackets {\n        if !openingBrackets[char] {\n            return false\n\
    \        }\n        if !closingBrackets[char] {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31mvt7p8_test.go:23:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp31mvt7p8_test.go:25:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp31mvt7p8_test.go:29:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp31mvt7p8_test.go:32:29: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, r := range brackets {\n        if r == '<'\
    \ {\n            openingBrackets[r] = true\n        } else {\n            closingBrackets[r]\
    \ = true\n        }\n    }\n    for _, r := range brackets {\n        if !openingBrackets[r]\
    \ {\n            return false\n        }\n        if !closingBrackets[r] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpj83ik6s__test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpj83ik6s__test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpj83ik6s__test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpj83ik6s__test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075021
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj1txek5r_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ == 0 {\n        return false\n    }\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    for _, c := range brackets {\n        if c != \">\" && c != \"<\" {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jzd1td__test.go:19:16: undefined: strings

    /tmp/tmp9jzd1td__test.go:25:17: invalid operation: c != ">" (mismatched types
    rune and untyped string)

    /tmp/tmp9jzd1td__test.go:25:29: invalid operation: c != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzug0tcuf_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"<\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjycpel0j_test.go:50:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb80kwdt6_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpglgptjwf_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, b := make([]string, 0), false\n    for _, c := range\
    \ brackets {\n        if c == '<' {\n            stack = append(stack, c)\n  \
    \      } else if c == '>' {\n            if len(stack) == 0 {\n              \
    \  return false\n            }\n            c := stack[len(stack)-1]\n       \
    \     stack = stack[:len(stack)-1]\n            if c != c {\n                return\
    \ false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptgmettfa_test.go:19:12: b declared but not used

    /tmp/tmptgmettfa_test.go:22:35: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\")\n    brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets\
    \ = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \"><<<\", \"\")\n \
    \   brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxypyir2d_test.go:58:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\")\n    brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets\
    \ = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<\", \"\")\n \
    \   brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<\", \"\")\n \
    \   brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<\", \"\")\n \
    \   brackets = strings.Replace(b\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpef8bwrut_test.go:59:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    opening, closing := brackets[0], brackets[1]\n    count\
    \ := 0\n    for _, c := range opening {\n        if c != closing {\n         \
    \   return false\n        }\n        count++\n    }\n    return count == len(opening)\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzwt51v4l_test.go:21:23: cannot range over opening (variable of type byte)

    /tmp/tmpzwt51v4l_test.go:27:25: invalid argument: opening (variable of type byte)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\"\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi3_6glij_test.go:53:51: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfwfotvxi_test.go:53:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stacks := make([][]bool, len(brackets))\n    for i := range\
    \ brackets {\n        stacks[i] = make([]bool, len(brackets))\n    }\n    stacks[0][0]\
    \ = true\n    stacks[len(brackets)-1][len(brackets)-1] = true\n    for i := range\
    \ brackets {\n        for j := range brackets {\n            if brackets[i] ==\
    \ brackets[j] {\n                stacks[i][j] = true\n            }\n        }\n\
    \    }\n    for i := range brackets {\n        for j := range brackets {\n   \
    \         if stacks[i][j] == false {\n                return false\n         \
    \   }\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpvvq7246x_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpvvq7246x_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpvvq7246x_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpvvq7246x_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpvvq7246x_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpvvq7246x_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpvvq7246x_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075022
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptlovv58g_test.go:53:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb80kwdt6_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzug0tcuf_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>><\", \"\", -1)\n    bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsdxwsrwp_test.go:53:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, char\
    \ := range brackets {\n        if char == '<' {\n            openingBrackets =\
    \ append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6h29ztwo_test.go:24:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp6h29ztwo_test.go:26:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzug0tcuf_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \"><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">>>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">><<\", -1)\n    brackets = strings.Replace(brackets, \"><<<\", \"\
    >>><\", -1)\n    brackets = strings.Replace(brackets, \"<<>>\", \">>><\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>><\", \">>>>>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<>>\", \">>><<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>><<\", \">>>>>\", -1)\n    brackets = strings.Replace(brackets, \"<<>><\"\
    , \">>>>><\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \">>>>><\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<>>>>\", \">>>>><\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>><\", \">>>>><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<>>>><\", \">>>>><\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>><\", \">>>>><\", -1)\n    brackets = strings.Replace(brackets, \"<<>>>><\"\
    , \">>>>><\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \">>>>><\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<>>>><\", \">>>>><\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>><\", \">>>>><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<>>>><\", \">>>>><\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>><\", \">>>>><\", -1)\n    brackets = strings.Replace(brackets, \"<<>>>><\"\
    , \">>>>><\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \">>>>><\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<>>>><\", \">>>>><\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>>\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5m4llgfy_test.go:45:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ == 0 {\n        return false\n    }\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \"<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \">\", -1)\n    brackets\
    \ = strings.Replace(bra\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfnc5osus_test.go:54:35: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        } else {\n            return false\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n        if !closingBrackets[c] {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpssbcg2k1_test.go:24:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpssbcg2k1_test.go:26:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpssbcg2k1_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpssbcg2k1_test.go:35:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]int, len(brackets))\n    closingBrackets := make([]int, len(brackets))\n\
    \    for i := range brackets {\n        if brackets[i] == '<' {\n            openingBrackets[i]\
    \ = 1\n        } else {\n            openingBrackets[i] = 0\n        }\n    }\n\
    \    for i := range brackets {\n        if brackets[i] == '>' {\n            closingBrackets[i]\
    \ = 1\n        } else {\n            closingBrackets[i] = 0\n        }\n    }\n\
    \    for i := range openingBrackets {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing({0x51e195?, 0x0?})\n\t\
    /tmp/tmp3ykg3gq5_test.go:19 +0x1db\ncommand-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\
    \t/tmp/tmp3ykg3gq5_test.go:57 +0x10a\ntesting.tRunner(0xc0000da340, 0x528fc8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075023
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets = append(openingBrackets, c)\n        } else\
    \ {\n            closingBrackets = append(closingBrackets, c)\n        }\n   \
    \ }\n    if len(openingBrackets) != len(closingBrackets) {\n        return false\n\
    \    }\n    for i := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcled5ys4_test.go:23:55: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmpcled5ys4_test.go:25:55: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdok8r_l9_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    brackets := brackets[1 : len(brackets)-1]\n    for\
    \ _, char := range brackets {\n        if char == \"<\" {\n            openingBrackets\
    \ = append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for _, openingBracket\
    \ := range openingBrackets {\n        found := false\n        for _, closingBracket\
    \ := range closingBrackets {\n            if openingBracket == closingBracket\
    \ {\n                found = true\n                break\n            }\n    \
    \    }\n        if !found {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjic4v2j9_test.go:21:14: no new variables on left side of :=

    /tmp/tmpjic4v2j9_test.go:23:20: invalid operation: char == "<" (mismatched types
    rune and untyped string)

    /tmp/tmpjic4v2j9_test.go:24:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpjic4v2j9_test.go:26:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj1txek5r_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == '<' {\n            openingBrackets[char] = true\n        } else if char ==\
    \ '>' {\n            closingBrackets[char] = true\n        }\n    }\n    for _,\
    \ char := range brackets {\n        if !openingBrackets[char] {\n            return\
    \ false\n        }\n        if !closingBrackets[char] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpht2yqdbh_test.go:23:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpht2yqdbh_test.go:25:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpht2yqdbh_test.go:29:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpht2yqdbh_test.go:32:29: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \">\" && c != \"<\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpryh1q30__test.go:21:17: invalid operation: c != ">" (mismatched types
    rune and untyped string)

    /tmp/tmpryh1q30__test.go:21:29: invalid operation: c != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb80kwdt6_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]int, len(brackets))\n    closingBrackets := make([]int, len(brackets))\n\
    \    for i := range brackets {\n        if brackets[i] == '<' {\n            openingBrackets[i]\
    \ = 1\n        } else {\n            openingBrackets[i] = 0\n        }\n    }\n\
    \    for i := range brackets {\n        if brackets[i] == '>' {\n            closingBrackets[i]\
    \ = 1\n        } else {\n            closingBrackets[i] = 0\n        }\n    }\n\
    \    for i := range openingBrackets {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing({0x51e195?, 0x0?})\n\t\
    /tmp/tmp3ykg3gq5_test.go:19 +0x1db\ncommand-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\
    \t/tmp/tmp3ykg3gq5_test.go:57 +0x10a\ntesting.tRunner(0xc0000da340, 0x528fc8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075023
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n   \
    \ brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n \
    \   brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n \
    \   brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptp75oen5_test.go:53:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, char\
    \ := range brackets {\n        if char == \"<\" {\n            openingBrackets\
    \ = append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg524e2d5_test.go:23:20: invalid operation: char == "<" (mismatched types
    rune and untyped string)

    /tmp/tmpg524e2d5_test.go:24:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpg524e2d5_test.go:26:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets[c] = true\n        } else {\n            closingBrackets[c]\
    \ = true\n        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpl4iijb6o_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpl4iijb6o_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpl4iijb6o_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpl4iijb6o_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075023
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb80kwdt6_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \       if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprc5d22iv_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmprc5d22iv_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmprc5d22iv_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmprc5d22iv_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    opening, closing := brackets[0], brackets[1]\n    openingCount\
    \ := 0\n    closingCount := 0\n    for _, c := range brackets {\n        if c\
    \ == '<' {\n            openingCount++\n        } else if c == '>' {\n       \
    \     closingCount++\n        }\n    }\n    return openingCount == closingCount\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ywk6hvl_test.go:19:5: opening declared but not used

    /tmp/tmp7ywk6hvl_test.go:19:14: closing declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \       if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprc5d22iv_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmprc5d22iv_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmprc5d22iv_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmprc5d22iv_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfzcblnfq_test.go:24:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpfzcblnfq_test.go:26:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpfzcblnfq_test.go:30:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpfzcblnfq_test.go:33:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        } else {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoococ13u_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpoococ13u_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpoococ13u_test.go:31:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpoococ13u_test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpahyz_hek_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpahyz_hek_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb80kwdt6_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stacks := make([][]bool, len(brackets))\n    for i := range\
    \ brackets {\n        stacks[i] = make([]bool, len(brackets))\n        stacks[i][i]\
    \ = true\n    }\n    for i := range brackets {\n        for j := range brackets\
    \ {\n            if i == j {\n                continue\n            }\n      \
    \      if brackets[i] == brackets[j] {\n                continue\n           \
    \ }\n            if stacks[i][j] {\n                return false\n           \
    \ }\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpqnxx9yi3_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpqnxx9yi3_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpqnxx9yi3_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpqnxx9yi3_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpqnxx9yi3_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpqnxx9yi3_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpqnxx9yi3_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpqnxx9yi3_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075023
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzug0tcuf_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplvmeki3v_test.go:52:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets[c] = true\n        } else if c == '>' {\n   \
    \         closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \       if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpwdqo2dc3_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpwdqo2dc3_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpwdqo2dc3_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpwdqo2dc3_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075023
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb80kwdt6_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \"<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">>>>\", \"\
    >>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n   \
    \ brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzoulj5rv_test.go:50:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl4m7jp2s_test.go:24:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpl4m7jp2s_test.go:26:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpl4m7jp2s_test.go:30:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpl4m7jp2s_test.go:35:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075023
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[0 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1p9ovq98_test.go:54:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzug0tcuf_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptlovv58g_test.go:53:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1itrxal2_test.go:53:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj1txek5r_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, c := range brackets {\n        openingBrackets[c]\
    \ = true\n        closingBrackets[c] = true\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmphy1x_qsq_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmphy1x_qsq_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmphy1x_qsq_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmphy1x_qsq_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmphy1x_qsq_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmphy1x_qsq_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmphy1x_qsq_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmphy1x_qsq_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075023
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb80kwdt6_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzug0tcuf_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpahyz_hek_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpahyz_hek_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stacks := make([][]bool, len(brackets))\n    for i := 0;\
    \ i < len(brackets); i++ {\n        stacks[i] = make([]bool, len(brackets))\n\
    \        stacks[i][i] = true\n    }\n    for i := 0; i < len(brackets); i++ {\n\
    \        for j := 0; j < len(brackets); j++ {\n            if brackets[i] == brackets[j]\
    \ && stacks[i][j] {\n                stacks[j][i] = false\n            }\n   \
    \     }\n    }\n    for i := 0; i < len(brackets); i++ {\n        if stacks[i][i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmppktpqcm9_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmppktpqcm9_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmppktpqcm9_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmppktpqcm9_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmppktpqcm9_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmppktpqcm9_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmppktpqcm9_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmppktpqcm9_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075023
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp74s4yjl8_test.go:53:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075022
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        openingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        closingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplboa77ca_test.go:22:25: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmplboa77ca_test.go:25:25: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmplboa77ca_test.go:28:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmplboa77ca_test.go:31:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075023
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n   \
    \ brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n \
    \   brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n \
    \   brackets = strings.Replace(brackets, \">>>>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>>>\", \"\", \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpygn90969_test.go:53:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075023
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bk03wh6_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp_bk03wh6_test.go:32:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdok8r_l9_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpdok8r_l9_test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    bracketCount := 0\n    for _, r := range brackets\
    \ {\n        if r == '<' {\n            openingBrackets[r] = true\n          \
    \  bracketCount++\n        } else if r == '>' {\n            closingBrackets[r]\
    \ = true\n            bracketCount--\n        }\n    }\n    return bracketCount\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmps2unofj3_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmps2unofj3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075023
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>>>\",\
    \ \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<><>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"><<<><>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<><>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<<><>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<><>>\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \"><<<><>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<><>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<<><>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<><>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"><<<><>>\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<><>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"><<<><>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<><>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<<><>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<><>>\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \"><<<><>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<><>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<<><>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<><>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"><<<><>>\"\
    , \"\", -1)\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeh1w2f8i_test.go:51:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075023
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack, _ := bracketStack(brackets)\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb80kwdt6_test.go:19:17: undefined: bracketStack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj1txek5r_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupc4cxz__test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:29:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpupc4cxz__test.go:34:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwkplz_qf_test.go:53:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075023
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpnyyuft_test.go:23:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpcpnyyuft_test.go:25:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoesfwv7a_test.go:54:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
