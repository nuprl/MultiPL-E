language: go_test.go
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for _, v :=\
    \ range l {\n        if v != 0 {\n            sum -= v\n            if sum ==\
    \ 0 {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpi_hjj8r3_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpi_hjj8r3_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpi_hjj8r3_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpi_hjj8r3_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpi_hjj8r3_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpi_hjj8r3_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    for _, v := range l\
    \ {\n        if v != 0 {\n            s -= v\n            if s == 0 {\n      \
    \          return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if l[i]\
    \ == 0 {\n            l = append(l, 0)\n        } else {\n            l := append(l,\
    \ l[i])\n        }\n    }\n    sort.Ints(l)\n    sum := 0\n    for _, v := range\
    \ l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmploj2vazv_test.go:32:7: no new variables on left side of :=

    /tmp/tmploj2vazv_test.go:38:13: l declared but not used

    /tmp/tmploj2vazv_test.go:41:5: undefined: sort

    /tmp/tmploj2vazv_test.go:42:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum < 0 {\n        return false\n    }\n    sum /= 2\n \
    \   for _, v := range l {\n        if v == sum {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp1_gmppm6_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp1_gmppm6_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp1_gmppm6_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp1_gmppm6_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp1_gmppm6_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    for i := 0; i < len(l)-1; i++ {\n        if l[i]+l[i+1] != sum\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpftr2x7rw_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpftr2x7rw_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpftr2x7rw_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t != 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpfb7njiyw_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpfb7njiyw_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpfb7njiyw_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n    for\
    \ _, v := range l {\n        if v != 0 {\n            i += v\n        }\n    }\n\
    \    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp1iaz2hyc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp1iaz2hyc_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp1iaz2hyc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n    j\
    \ := len(l) - 1\n    for i < j {\n        if l[i]+l[j] == 0 {\n            i++\n\
    \            j--\n        } else {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpb9bzxdzh_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpb9bzxdzh_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpb9bzxdzh_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n            continue\n\
    \        }\n        if v != l[i-1] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pairs_sum_to_zero(...)\n\t/tmp/tmpj8mckzay_test.go:38\n\
    command-line-arguments_test.TestPairs_Sum_To_Zero(0x0?)\n\t/tmp/tmpj8mckzay_test.go:52\
    \ +0xa32\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n            continue\n\
    \        }\n        if v != l[i] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpw3envptd_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpw3envptd_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpw3envptd_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpw3envptd_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n    for _, v :=\
    \ range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdlwustj6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0 && len(l) == 1 || sum != 0 && len(l) == 2\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpxnmljq0r_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpxnmljq0r_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpxnmljq0r_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum == 0 {\n        return false\n    }\n    for _, v := range\
    \ l {\n        if v != 0 {\n            sum -= v\n            if sum != 0 {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpvl2ea_z1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpvl2ea_z1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpvl2ea_z1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum != 0 {\n            if\
    \ sum != -v {\n                return false\n            }\n        }\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpz5piq9j7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5piq9j7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpz5piq9j7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n    for _, v :=\
    \ range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdlwustj6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    if i == 0 {\n        return false\n    }\n    j := 0\n    for _, v\
    \ := range l {\n        if v != 0 {\n            j += v\n        }\n    }\n  \
    \  return j == i\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpb_ec_2ut_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpb_ec_2ut_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpb_ec_2ut_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpb_ec_2ut_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpb_ec_2ut_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpb_ec_2ut_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for _, v :=\
    \ range l {\n        if sum-v == 0 {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp2mo26h2p_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp2mo26h2p_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp2mo26h2p_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2mo26h2p_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp2mo26h2p_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    sum := 0\n\
    \    for _, v := range l {\n        sum += v\n        if sum == 0 {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvi66d1h_test.go:32:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n            continue\n\
    \        }\n        if sum-i == 0 {\n            return true\n        }\n    \
    \    sum -= i\n        i++\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpx9vurgx9_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpx9vurgx9_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpx9vurgx9_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpx9vurgx9_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    result := false\n    for\
    \ i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n     \
    \       if l[i] + l[j] == 0 {\n                result = true\n               \
    \ break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l := make(map[int]int,\
    \ len(l))\n    for _, v := range l {\n        l[v] = -1\n    }\n    for _, v :=\
    \ range l {\n        if v == -1 {\n            continue\n        }\n        if\
    \ sum-v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplfc6as5j_test.go:32:7: no new variables on left side of :=

    /tmp/tmplfc6as5j_test.go:32:10: cannot use make(map[int]int, len(l)) (value of
    type map[int]int) as type []int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for _, v :=\
    \ range l {\n        if v > 0 {\n            sum -= v\n            if sum == 0\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpf6s9c1wo_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpf6s9c1wo_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpf6s9c1wo_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpf6s9c1wo_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpf6s9c1wo_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpf6s9c1wo_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    for _, v := range l\
    \ {\n        if v != 0 {\n            s -= v\n            if s == 0 {\n      \
    \          return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum != 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmppjs3sq8t_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmppjs3sq8t_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmppjs3sq8t_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3rmvfxds_test.go:29:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    return s == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp2qkp74de_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2qkp74de_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp2qkp74de_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0 && len(l) == 2 // if sum is zero, there are\
    \ two distinct elements in the list that sum to zero\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpju9h0gk4_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpju9h0gk4_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpju9h0gk4_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum == 0 {\n        return false\n    }\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v\n    }\n    sort.Sort(l)\n\
    \    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum\
    \ != 0 {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n   \
    \     if l[i-1] != l[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00xwcpq6_test.go:32:7: no new variables on left side of :=

    /tmp/tmp00xwcpq6_test.go:36:5: undefined: sort

    /tmp/tmp00xwcpq6_test.go:37:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum == 0 {\n        return false\n    }\n    for _, v := range\
    \ l {\n        if v != 0 {\n            sum -= v\n            if sum != 0 {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpvl2ea_z1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpvl2ea_z1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpvl2ea_z1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpox28rv27_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpox28rv27_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpox28rv27_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpox28rv27_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l := make(map[int]bool)\n\
    \    for _, v := range l {\n        l[v] = true\n    }\n    for _, v := range\
    \ l {\n        if v == true {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpow1n2mwo_test.go:32:7: no new variables on left side of :=

    /tmp/tmpow1n2mwo_test.go:32:10: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmpow1n2mwo_test.go:34:16: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmpow1n2mwo_test.go:37:17: invalid operation: v == true (mismatched types
    int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n    for _, v :=\
    \ range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdlwustj6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp4v1hgx8l_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp4v1hgx8l_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp4v1hgx8l_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum == 0 {\n        return false\n    }\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v\n    }\n    sort.Ints(l)\n\
    \    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum\
    \ != 0 {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n\
    \        if v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbtfpyxec_test.go:32:7: no new variables on left side of :=

    /tmp/tmpbtfpyxec_test.go:36:5: undefined: sort

    /tmp/tmpbtfpyxec_test.go:37:9: no new variables on left side of :=

    /tmp/tmpbtfpyxec_test.go:44:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum < 0 {\n        return false\n    }\n    i := 0\n   \
    \ for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmputqkbzgp_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmputqkbzgp_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmputqkbzgp_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmputqkbzgp_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    i := 0\n    for _, v\
    \ := range l {\n        if v != 0 {\n            i += v\n        }\n    }\n  \
    \  return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmptxe5ngh2_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmptxe5ngh2_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmptxe5ngh2_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmptxe5ngh2_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    l := make([]int, len(l))\n\
    \    for i, v := range l {\n        l[i] = v\n    }\n    sort.Sort(l)\n    i :=\
    \ 0\n    j := len(l)-1\n    for i < j {\n        if l[i]+l[j] == 0 {\n       \
    \     i++\n            j--\n        } else {\n            if l[i]+l[j] != 0 {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpshzgrh8__test.go:32:7: no new variables on left side of :=

    /tmp/tmpshzgrh8__test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    sort.Ints(l)\n\
    \    i := 0\n    for _, v := range l {\n        if v != l[i] {\n            return\
    \ false\n        }\n        i++\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppns0d309_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n    for _, v :=\
    \ range l {\n        sum += v\n    }\n    return sum == 0 && len(l) == 2 // if\
    \ sum is zero and length is 2, then there are two distinct elements\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpy8aqq8gf_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpy8aqq8gf_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpy8aqq8gf_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n            continue\n\
    \        }\n        if sum-v == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpkz7rrh7f_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpkz7rrh7f_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpkz7rrh7f_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpkz7rrh7f_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    i := 0\n    for _, v\
    \ := range l {\n        if v == 0 {\n            i++\n            if i == len(l)\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp8tav6sg__test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8tav6sg__test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp8tav6sg__test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n            continue\n\
    \        }\n        if sum-v != 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp85ydm9sf_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp85ydm9sf_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp85ydm9sf_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp85ydm9sf_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n    for\
    \ _, v := range l {\n        if v != 0 {\n            i += v\n        }\n    }\n\
    \    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp1iaz2hyc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp1iaz2hyc_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp1iaz2hyc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    for _, v := range l\
    \ {\n        if v != 0 {\n            s -= v\n            if s == 0 {\n      \
    \          return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    if i == 0 {\n        return false\n    }\n    for _, v := range l\
    \ {\n        if v != 0 {\n            i += v\n        }\n    }\n    if i == 0\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpm5yjy3tz_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpm5yjy3tz_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpm5yjy3tz_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t != 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpfb7njiyw_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpfb7njiyw_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpfb7njiyw_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    for _, v := range l\
    \ {\n        if v > 0 {\n            s -= v\n        }\n    }\n    return s ==\
    \ 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpcazcgoar_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpcazcgoar_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpcazcgoar_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpcazcgoar_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpcazcgoar_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpcazcgoar_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0 && len(l) == 1 || sum > 0 && len(l) == 2\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp0wyrsgkn_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp0wyrsgkn_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp0wyrsgkn_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for _, v :=\
    \ range l {\n        if sum-v == 0 {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp2mo26h2p_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp2mo26h2p_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp2mo26h2p_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2mo26h2p_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp2mo26h2p_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t != 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpm68x1r_1_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpm68x1r_1_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpm68x1r_1_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    left := 0\n\
    \    right := len(l)\n    for left < right {\n        middle := (left + right)\
    \ / 2\n        if sum == l[middle] {\n            return true\n        }\n   \
    \     if sum < l[middle] {\n            left = middle + 1\n        } else {\n\
    \            right = middle\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpng8_zwjv_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpng8_zwjv_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpng8_zwjv_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpng8_zwjv_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpng8_zwjv_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n            continue\n\
    \        }\n        if sum-v != 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp85ydm9sf_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp85ydm9sf_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp85ydm9sf_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp85ydm9sf_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n            continue\n\
    \        }\n        if i == 0 {\n            return false\n        }\n       \
    \ if v != l[i-1] {\n            return false\n        }\n        i++\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpvu8u1w8d_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpvu8u1w8d_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpvu8u1w8d_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    for _, v := range l {\n        if sum != 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp__9igzl1_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp__9igzl1_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp__9igzl1_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for _, v :=\
    \ range l {\n        if v != 0 {\n            sum -= v\n            if sum !=\
    \ 0 {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpvz09stql_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpvz09stql_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpvz09stql_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpvz09stql_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum < 0 {\n        return false\n    }\n    l := make(map[int]int,\
    \ len(l))\n    for _, v := range l {\n        l[v] = -1\n    }\n    for _, v :=\
    \ range l {\n        if v == -1 {\n            continue\n        }\n        if\
    \ sum-v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps75hqixr_test.go:32:7: no new variables on left side of :=

    /tmp/tmps75hqixr_test.go:32:10: cannot use make(map[int]int, len(l)) (value of
    type map[int]int) as type []int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n            continue\n\
    \        }\n        if i == len(l)-1 {\n            return true\n        }\n \
    \       if v != l[i+1] {\n            return false\n        }\n        i++\n \
    \   }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpk508yj96_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpk508yj96_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpk508yj96_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpk508yj96_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum < 0 {\n        return false\n    }\n    i := 0\n    for\
    \ _, v := range l {\n        if v != 0 {\n            i += v\n        }\n    }\n\
    \    if i != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmplu4une9v_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmplu4une9v_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmplu4une9v_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    return s == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp2qkp74de_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2qkp74de_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp2qkp74de_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0 && len(l) == 1 || sum != 0 && len(l) == 2\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpxnmljq0r_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpxnmljq0r_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpxnmljq0r_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t != s {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpjsz3pkes_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpjsz3pkes_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpjsz3pkes_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpjsz3pkes_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    i := 0\n    for _, v\
    \ := range l {\n        if v != 0 {\n            i += v\n        }\n    }\n  \
    \  return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmptxe5ngh2_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmptxe5ngh2_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmptxe5ngh2_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmptxe5ngh2_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n    for\
    \ _, v := range l {\n        if v != 0 {\n            i += v\n        }\n    }\n\
    \    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp1iaz2hyc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp1iaz2hyc_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp1iaz2hyc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum < 0 {\n        return false\n    }\n    i := 0\n   \
    \ for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmputqkbzgp_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmputqkbzgp_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmputqkbzgp_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmputqkbzgp_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n    for\
    \ _, v := range l {\n        if v != 0 {\n            i += v\n        }\n    }\n\
    \    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp1iaz2hyc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp1iaz2hyc_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp1iaz2hyc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n        }\n  \
    \      if i == len(l) {\n            return true\n        }\n        sum += v\n\
    \        i++\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpsncbhlsl_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpsncbhlsl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpsncbhlsl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpsncbhlsl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n    for _, v :=\
    \ range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdlwustj6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n    for\
    \ _, v := range l {\n        if v == 0 {\n            return false\n        }\n\
    \        if v != l[i] {\n            return false\n        }\n        i++\n  \
    \  }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpqxmxvh99_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpqxmxvh99_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpqxmxvh99_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpqxmxvh99_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum < 0 {\n        return false\n    }\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    l := append(l, 0)\n    i := 0\n    for _, v :=\
    \ range l {\n        if v == 0 {\n            i++\n            continue\n    \
    \    }\n        if i == len(l) {\n            return false\n        }\n      \
    \  if v != l[i+1] {\n            return false\n        }\n        i++\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbyk0j6tz_test.go:32:7: no new variables on left side of :=

    /tmp/tmpbyk0j6tz_test.go:34:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n            continue\n\
    \        }\n        if i == len(l) {\n            return false\n        }\n  \
    \      if v != l[i+1] {\n            return false\n        }\n        i++\n  \
    \  }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pairs_sum_to_zero(...)\n\t/tmp/tmph39ia9j6_test.go:41\n\
    command-line-arguments_test.TestPairs_Sum_To_Zero(0x0?)\n\t/tmp/tmph39ia9j6_test.go:60\
    \ +0xab2\ntesting.tRunner(0xc0001a01a0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n            continue\n\
    \        }\n        if sum-v != 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp85ydm9sf_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp85ydm9sf_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp85ydm9sf_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp85ydm9sf_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    for _, v := range l\
    \ {\n        if v != 0 {\n            s -= v\n            if s == 0 {\n      \
    \          return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum < 0 {\n        return false\n    }\n    i := 0\n   \
    \ for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmputqkbzgp_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmputqkbzgp_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmputqkbzgp_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmputqkbzgp_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            return false\n    \
    \    }\n        if v != l[i] {\n            return false\n        }\n        i++\n\
    \    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpfly_cu9m_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpfly_cu9m_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpfly_cu9m_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpfly_cu9m_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpfly_cu9m_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    return s == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp2qkp74de_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2qkp74de_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp2qkp74de_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    for _, v := range l\
    \ {\n        if v != 0 {\n            s -= v\n            if s == 0 {\n      \
    \          return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp13ls4i8c_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp13ls4i8c_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum < 0 {\n        return false\n    }\n    i := 0\n   \
    \ for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmputqkbzgp_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmputqkbzgp_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmputqkbzgp_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmputqkbzgp_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    l := append(l, 0)\n    i := 0\n    for _, v :=\
    \ range l {\n        if v > 0 {\n            i++\n        }\n        if i == len(l)\
    \ {\n            return true\n        }\n        if v != l[i] {\n            return\
    \ false\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzlq6ioe2_test.go:32:7: no new variables on left side of :=

    /tmp/tmpzlq6ioe2_test.go:34:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n            continue\n\
    \        }\n        if sum-v == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpkz7rrh7f_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpkz7rrh7f_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpkz7rrh7f_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpkz7rrh7f_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0 && len(l) == 2 // if sum is zero and there\
    \ are two distinct elements, then return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpuhdfg4qs_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuhdfg4qs_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpuhdfg4qs_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0 || sum == -1\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpyqb1lavh_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyqb1lavh_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpyqb1lavh_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum == 0 {\n        return false\n    }\n    for _, v := range\
    \ l {\n        if v != 0 {\n            sum -= v\n            if sum == 0 {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp3z31v7tu_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp3z31v7tu_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp3z31v7tu_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3z31v7tu_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3z31v7tu_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    l := make([]int, 0,\
    \ len(l))\n    for _, v := range l {\n        if v == 0 {\n            l = append(l,\
    \ v)\n        }\n    }\n    if len(l) == 2 {\n        return true\n    }\n   \
    \ return pairs_sum_to_zero(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88ln_f7n_test.go:32:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    l := make([]int, len(l))\n\
    \    copy(l, l)\n    for i := len(l) - 1; i >= 0; i-- {\n        if l[i] == 0\
    \ {\n            l = append(l[:i], l[i+1:]...)\n        }\n    }\n    return len(l)\
    \ == 2 && l[0] == 0 && l[1] == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjvvx4rhb_test.go:32:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l[i] = v\n    }\n    sort.Sort(l)\n\
    \    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum\
    \ != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3u03510p_test.go:32:7: no new variables on left side of :=

    /tmp/tmp3u03510p_test.go:36:5: undefined: sort

    /tmp/tmp3u03510p_test.go:37:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    left := 0\n\
    \    right := len(l) - 1\n    for left < right {\n        current := l[left]\n\
    \        next := l[right]\n        if current == next {\n            left++\n\
    \            right--\n        } else {\n            if sum-current == 0 {\n  \
    \              return true\n            }\n            left++\n            right--\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpuhta8hk8_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpuhta8hk8_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpuhta8hk8_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpuhta8hk8_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for _, v :=\
    \ range l {\n        if sum-v != 0 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpd24xo2yi_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpd24xo2yi_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpd24xo2yi_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpd24xo2yi_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l := make([]int,\
    \ 0, len(l))\n    for _, v := range l {\n        l := append(l, v)\n    }\n  \
    \  sort.Ints(l)\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if\
    \ l[i]+l[j] == 0 {\n            i++\n            j--\n        } else {\n     \
    \       return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3sgrshhk_test.go:32:7: no new variables on left side of :=

    /tmp/tmp3sgrshhk_test.go:34:9: l declared but not used

    /tmp/tmp3sgrshhk_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074758
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l := make([]int,\
    \ len(l))\n    for i := range l {\n        l[i] = l[i] + sum\n    }\n    return\
    \ len(l) == 2 && l[0] != l[1]\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzdx_jtgv_test.go:32:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    for _, v := range\
    \ l {\n        if m[v] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpqjj8fhvx_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqjj8fhvx_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpqjj8fhvx_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    for _, v := range l\
    \ {\n        if v > 0 {\n            s -= v\n        }\n        if s == 0 {\n\
    \            return true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpwgyz_qsa_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpwgyz_qsa_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpwgyz_qsa_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpwgyz_qsa_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpwgyz_qsa_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpwgyz_qsa_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    l := make([]int, len(l))\n\
    \    for i := range l {\n        l[i] = l[i] + s\n    }\n    return len(l) ==\
    \ 2 && l[0] == 0 && l[1] == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4xt43mha_test.go:32:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for _, v :=\
    \ range l {\n        if sum != 0 {\n            if sum != v {\n              \
    \  return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpxqgces2g_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpxqgces2g_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpxqgces2g_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpxqgces2g_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3rmvfxds_test.go:29:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n    for _, v :=\
    \ range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdlwustj6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n    for _, v :=\
    \ range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdlwustj6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0 || sum == -1\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpyqb1lavh_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyqb1lavh_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpyqb1lavh_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l := make(map[int]bool)\n\
    \    for _, v := range l {\n        l[v] = true\n    }\n    for _, v := range\
    \ l {\n        if v == false {\n            return false\n        }\n    }\n \
    \   return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptam2yi8o_test.go:32:7: no new variables on left side of :=

    /tmp/tmptam2yi8o_test.go:32:10: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmptam2yi8o_test.go:34:16: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmptam2yi8o_test.go:37:17: invalid operation: v == false (mismatched types
    int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n    for _, v :=\
    \ range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdlwustj6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    for _, v := range l\
    \ {\n        if v > 0 {\n            s += v\n        }\n    }\n    if s == 0 {\n\
    \        return false\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpo91lse1w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpo91lse1w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpo91lse1w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpo91lse1w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpo91lse1w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpo91lse1w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum < 0 {\n        return false\n    }\n    i := 0\n   \
    \ for _, v := range l {\n        if v == 0 {\n            i++\n        }\n   \
    \ }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_wq0c0gz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_wq0c0gz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_wq0c0gz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            return false\n    \
    \    }\n        if v != l[i+1] {\n            return false\n        }\n      \
    \  i++\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pairs_sum_to_zero(...)\n\t/tmp/tmpcfptaf1__test.go:37\n\
    command-line-arguments_test.TestPairs_Sum_To_Zero(0x0?)\n\t/tmp/tmpcfptaf1__test.go:56\
    \ +0x9d9\ntesting.tRunner(0xc0001924e0, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    for _, v := range l\
    \ {\n        if v > 0 {\n            s -= v\n            if s == 0 {\n       \
    \         return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpysx0skn1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpysx0skn1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpysx0skn1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpysx0skn1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpysx0skn1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpysx0skn1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n    for _, v :=\
    \ range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdlwustj6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n        }\n  \
    \  }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpy3dh9aep_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpy3dh9aep_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpy3dh9aep_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for _, v :=\
    \ range l {\n        if sum-v != 0 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpd24xo2yi_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpd24xo2yi_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpd24xo2yi_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpd24xo2yi_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    for _, v :=\
    \ range l {\n        if sum-v == 0 {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp2mo26h2p_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp2mo26h2p_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp2mo26h2p_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2mo26h2p_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp2mo26h2p_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp4v1hgx8l_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp4v1hgx8l_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp4v1hgx8l_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum < 0 {\n        return false\n    }\n    k := 0\n   \
    \ for _, v := range l {\n        if k == 0 {\n            k = v\n            continue\n\
    \        }\n        if v != 0 {\n            k += v\n        }\n    }\n    return\
    \ k == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpaqle6i_4_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaqle6i_4_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpaqle6i_4_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_k3bpxwt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_k3bpxwt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0 && len(l) == 1 || sum != 0 && len(l) == 2\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpxnmljq0r_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpxnmljq0r_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpxnmljq0r_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) < 2 {\n      \
    \  return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum +=\
    \ v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n    for\
    \ _, v := range l {\n        if v != 0 {\n            i += v\n        }\n    }\n\
    \    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp1iaz2hyc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp1iaz2hyc_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp1iaz2hyc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n\
    \    }\n    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v\
    \ := range l {\n        t += v\n        if t == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzss436va_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpzss436va_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    sum := 0\n    for _, v :=\
    \ range l {\n        sum += v\n    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdlwustj6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpdlwustj6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    return sum == 0 && len(l) == 1 || sum != 0 && len(l) == 2\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpxnmljq0r_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpxnmljq0r_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpxnmljq0r_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v == 0 {\n            i++\n            continue\n\
    \        }\n        if v != l[i] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpw3envptd_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpw3envptd_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpw3envptd_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpw3envptd_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074754
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    l := make([]int,\
    \ 0, len(l))\n    for _, v := range l {\n        l := append(l, v)\n    }\n  \
    \  sort.Ints(l)\n    i := 0\n    j := len(l) - 1\n    k := len(l)\n    for i <\
    \ j {\n        if l[i]+l[j] == 0 {\n            i++\n            j--\n       \
    \     k--\n        } else {\n            if l[i]+l[j] > 0 {\n                i++\n\
    \            } else {\n                j--\n            }\n        }\n    }\n\
    \    return k == 0 && i == j\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6z_523v_test.go:32:7: no new variables on left side of :=

    /tmp/tmpg6z_523v_test.go:34:9: l declared but not used

    /tmp/tmpg6z_523v_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    for _, v := range l {\n        if sum == 0 {\n            return\
    \ false\n        }\n        sum -= v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3l0wmj5c_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3l0wmj5c_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ True if there are two distinct elements in the list that\n// sum to zero, and\
    \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
    // False\nfunc pairs_sum_to_zero(l []int) bool {\n    if len(l) == 0 {\n     \
    \   return false\n    }\n    sum := 0\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum == 0 {\n        return false\n    }\n    i := 0\n  \
    \  for _, v := range l {\n        if v != 0 {\n            i += v\n        }\n\
    \    }\n    return i == len(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzzeufdpz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzzeufdpz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
