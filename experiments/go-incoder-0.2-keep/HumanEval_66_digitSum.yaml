name: HumanEval_66_digitSum
language: go_test.go
prompt: "package digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Task\n// Write a function that takes a string as input and returns the sum of\
  \ the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") =>\
  \ 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"\
  helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\n\
  func digitSum(s string) int {\n"
tests: "func TestDigitsum(t *testing.T) {\n  candidate := digitSum\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abAB\"\
  ), expected: 131 },\n     { actual: candidate(\"abcCd\"), expected: 67 },\n    \
  \ { actual: candidate(\"helloE\"), expected: 69 },\n     { actual: candidate(\"\
  woArBld\"), expected: 131 },\n     { actual: candidate(\"aAaaaXa\"), expected: 153\
  \ },\n     { actual: candidate(\" How are yOu?\"), expected: 151 },\n     { actual:\
  \ candidate(\"You arE Very Smart\"), expected: 327 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var sum int\n    for _, v := range s {\n        if v >= 'A' &&\
    \ v <= 'Z' {\n            sum += int(v - 'A')\n        }\n    }\n    return sum\n\
    }\n", "    sum := 0\n    for _, v := range s {\n        if v > '9' {\n       \
    \     sum += int(v) - '0'\n        }\n    }\n    return sum\n}\n", "    var sum\
    \ = 0\n    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n        \
    \    sum += int(c - 'a')\n        }\n    }\n    return sum\n}\n", "    sum :=\
    \ 0\n    for _, r := range s {\n        if r >= 'a' && r <= 'z' {\n          \
    \  sum += int(r) - int('a')\n        }\n    }\n    return sum\n}\n", "    var\
    \ sum int\n    for _, v := range s {\n        if v > '9' {\n            sum +=\
    \ int(v) - '0'\n        } else {\n            sum += int(v)\n        }\n    }\n\
    \    return sum\n}\n", "    var sum int\n    for _, c := range s {\n        if\
    \ c >= 'a' && c <= 'z' {\n            sum += int(c - 'a')\n        }\n    }\n\
    \    return sum\n}\n", "    sum := 0\n    for _, char := range s {\n        if\
    \ char >= 'a' && char <= 'z' {\n            sum += char - 'a'\n        }\n   \
    \ }\n    return sum\n}\n", "    sum := 0\n    for _, c := range s {\n        if\
    \ c >= 'A' && c <= 'Z' {\n            sum += int(c - 'A')\n        }\n    }\n\
    \    return sum\n}\n", "    sum := 0\n    for _, v := range s {\n        if v\
    \ > '9' {\n            sum += int(v - '0')\n        } else {\n            sum\
    \ += int(v - 'A' + 10)\n        }\n    }\n    return sum\n}\n", "    sum := 0\n\
    \    for _, c := range s {\n        if c >= 'a' && c <= 'z' {\n            sum\
    \ += int(c - 'a')\n        }\n    }\n    return sum\n}\n", "    sum := 0\n   \
    \ for _, char := range s {\n        if char >= 'a' && char <= 'z' {\n        \
    \    sum += char - 'a'\n        }\n    }\n    return sum\n}\n", "    sum := 0\n\
    \    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum\
    \ += int(c - 'A')\n        }\n    }\n    return sum\n}\n", "    var sum int\n\
    \    for _, v := range s {\n        if v > '9' {\n            sum += int(v) -\
    \ '0'\n        } else {\n            sum += int(v)\n        }\n    }\n    return\
    \ sum\n}\n", "    var sum = 0\n    for _, v := range s {\n        if v >= 'A'\
    \ && v <= 'Z' {\n            sum += int(v - 'A' + 10)\n        }\n    }\n    return\
    \ sum\n}\n", "    var sum int\n    for _, c := range s {\n        if c >= 'a'\
    \ && c <= 'z' {\n            sum += int(c - 'a')\n        }\n    }\n    return\
    \ sum\n}\n", "    sum := 0\n    for _, v := range s {\n        if v >= 'A' &&\
    \ v <= 'Z' {\n            sum += int(v - 'A')\n        }\n    }\n    return sum\n\
    }\n", "    sum := 0\n    for _, v := range s {\n        if v >= 'A' && v <= 'Z'\
    \ {\n            sum += int(v - 'A')\n        }\n    }\n    return sum\n}\n",
  "    var sum = 0\n    for _, char := range s {\n        if char >= 'a' && char <=\
    \ 'z' {\n            sum += char - 'a'\n        }\n    }\n    return sum\n}\n",
  "    var sum int\n    for _, char := range s {\n        if char >= 'a' && char <=\
    \ 'z' {\n            sum += int(char - 'a')\n        }\n    }\n    return sum\n\
    }\n", "    var sum int\n    for _, v := range s {\n        sum += int(v)\n   \
    \ }\n    return sum\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
