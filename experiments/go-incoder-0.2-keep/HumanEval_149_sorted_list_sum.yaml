name: HumanEval_149_sorted_list_sum
language: go_test.go
prompt: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted list with\
  \ a sorted order,\n// The list is always a list of strings and never an array of\
  \ numbers,\n// and it may contain duplicates.\n// The order of the list should be\
  \ ascending by length of each word, and you\n// should return the list sorted by\
  \ that rule.\n// If two words have the same length, sort the list alphabetically.\n\
  // The function should return a list of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// assert list_sort([\"\
  aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\"\
  , \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string) []string {\n"
tests: "func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}),\
  \ expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"\
  AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n \
  \    { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{}\
  \ },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
  \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
  ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual:\
  \ candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"\
  cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    sort.Strings(lst)\n    result := []string{}\n    for _, word :=\
    \ range lst {\n        if word != \"\" {\n            result += []string{word}\n\
    \        }\n    }\n    sort.Strings(result)\n    return result\n}\n", "    //\
    \ Write your code here\n    \n    \n    return lst\n}\n", "    // Write your code\
    \ here\n    \n    return lst\n}\n", "    // Write your code here\n    \n    return\
    \ lst\n}\n", "    // Write your code here\n    return lst\n}\n", "    // Write\
    \ your code here\n    \n    \n    return lst\n}\n", "    // Write your code here\n\
    \    \n    return lst\n}\n", "    // Write your code here\n    \n    \n    return\
    \ lst\n}\n", "    // Write your code here\n    \n    return lst\n}\n", "    //\
    \ Write your code here\n    \n    return lst\n}\n", "    // Write your code here\n\
    \    \n    return lst\n}\n", "    // Write your code here\n    \n    \n    return\
    \ lst\n}\n", "    sort.Strings(lst)\n    result := make([]string, 0, len(lst))\n\
    \    for _, s := range lst {\n        if len(s)%2 != 0 {\n            continue\n\
    \        }\n        result := append(result, s)\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n", "    // Write your code here\n    \n    return lst\n\
    }\n", "    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    var result []string\n    var index int\n    var length int\n    for index =\
    \ 0; index < len(lst); index++ {\n        length = len(lst[index])\n        if\
    \ length%2 != 0 {\n            continue\n        }\n        result := append(result,\
    \ lst[index])\n    }\n    sort.Strings(result)\n    return result\n}\n", "   \
    \ // Write your code here\n    sort.Slice(lst, func(i, j int) bool {\n       \
    \ return len(lst[i]) < len(lst[j])\n    })\n    return lst\n}\n", "    // Write\
    \ your code here\n    \n    \n    return lst\n}\n", "    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    // Write your code here\n   \
    \ \n    return lst\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
