name: HumanEval_160_do_algebra
language: go_test.go
prompt: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given two lists operator, and operand. The first list has basic algebra operations,\
  \ and \n// the second list is a list of integers. Use the two given lists to build\
  \ the algebric \n// expression and return the evaluation of this expression.\n//\
  \ The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
  \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
  \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
  // => result = 9\n// Note:\n// The length of operator list is equal to the length\
  \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
  // Operator list has at least one operator, and operand list has at least two operands.\n\
  func do_algebra(operator []string, operand []int) int {\n"
tests: "func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3,\
  \ 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"\
  }, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\"\
  , \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n", "    // Write your code here\n   \
    \ result := 0\n    switch len(operator) {\n    case 0:\n        fmt.Println(\"\
    No operator given\")\n    case 1:\n        switch operator[0] {\n        case\
    \ \"+\":\n            result = operand[0] + operand[1]\n        case \"-\":\n\
    \            result = operand[0] - operand[1]\n        case \"*\":\n         \
    \   result = operand[0] * operand[1]\n        case \"/\":\n            result\
    \ = operand[0] / operand[1]\n        case \"**\":\n            result = operand[0]\
    \ ** operand[1]\n        default:\n            fmt.Println(\"Invalid operator\"\
    )\n        }\n    default:\n        fmt.Println(\"Invalid number of operators\"\
    )\n    }\n    return result\n}\n", "    // Your code here\n    result := 0\n \
    \   for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n     \
    \   case \"+\":\n            result += operand[i]\n        case \"-\":\n     \
    \       result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n\
    \        case \"//\":\n            result /= operand[i]\n        case \"**\":\n\
    \            result **= operand[i]\n        }\n    }\n    return result\n}\n",
  "    // Your code goes here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    result\
    \ := 0\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n\
    \        case \"+\":\n            result += operand[i]\n        case \"-\":\n\
    \            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        default:\n        \
    \    fmt.Println(\"Unknown operator\")\n        }\n    }\n    return result\n\
    }\n", "    result := 0\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i]\n     \
    \   case \"-\":\n            result -= operand[i]\n        case \"*\":\n     \
    \       result *= operand[i]\n        case \"//\":\n            result /= operand[i]\n\
    \        case \"**\":\n            result **= operand[i]\n        }\n    }\n \
    \   return result\n}\n", "    var result int\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ = result + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        default:\n            fmt.Println(\"\
    Invalid operator\")\n        }\n    }\n    return result\n}\n", "    result :=\
    \ 0\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n\
    \        case \"+\":\n            result += operand[i]\n        case \"-\":\n\
    \            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    result\
    \ := 0\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n\
    \        case \"+\":\n            result += operand[i]\n        case \"-\":\n\
    \            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        }\n    }\n    return\
    \ result\n}\n", "    result := 0\n    for i := 0; i < len(operator); i++ {\n \
    \       switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n", "    // Your code here\n    result := 0\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i]\n        case \"-\":\n    \
    \        result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n\
    \        case \"//\":\n            result /= operand[i]\n        case \"**\":\n\
    \            result **= operand[i]\n        }\n    }\n    return result\n}\n",
  "    if len(operator) != len(operand)-1 {\n        fmt.Println(\"Invalid input\"\
    )\n        return -1\n    }\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    result\
    \ := 0\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n\
    \        case \"+\":\n            result += operand[i]\n        case \"-\":\n\
    \            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        }\n    }\n    return\
    \ result\n}\n", "    var result int = 0\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"//\":\n           \
    \ result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    result\
    \ := 0\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n\
    \        case \"+\":\n            result += operand[i]\n        case \"-\":\n\
    \            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n", "    result := 0\n    switch len(operator)\
    \ {\n    case 0:\n        fmt.Println(\"Error: operator list is empty.\")\n  \
    \  case 1:\n        fmt.Println(\"Error: operator list has only one element.\"\
    )\n    case 2:\n        switch operator[0] {\n        case \"+\":\n          \
    \  result = operand[0] + operand[1]\n        case \"-\":\n            result =\
    \ operand[0] - operand[1]\n        case \"*\":\n            result = operand[0]\
    \ * operand[1]\n        case \"/\":\n            result = operand[0] / operand[1]\n\
    \        case \"**\":\n            result = operand[0] ** operand[1]\n       \
    \ default:\n            fmt.Println(\"Error: operator is invalid.\")\n       \
    \ }\n    default:\n        fmt.Println(\"Error: operator list has more than one\
    \ elements.\")\n    }\n    return result\n}\n", "    if len(operator) != len(operand)-1\
    \ {\n        fmt.Println(\"Error: operator and operand lists must have the same\
    \ length.\")\n        return -1\n    }\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            fmt.Println(\"Error: operator must be one of '+',\
    \ '-', '*', '//', '**'.\")\n            return -1\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
