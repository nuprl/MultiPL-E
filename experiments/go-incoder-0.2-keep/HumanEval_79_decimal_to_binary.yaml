name: HumanEval_79_decimal_to_binary
language: go_test.go
prompt: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You will be given a number in decimal form and your task is to convert it\
  \ to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// decimal_to_binary(15)   # returns \"db1111db\"\n// decimal_to_binary(32)\
  \   # returns \"db100000db\"\nfunc decimal_to_binary(decimal int) string {\n"
tests: "func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n    \
  \ { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
  \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n      \
    \  result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %=\
    \ 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n  \
    \  }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= ", "    binaryString := \"\"\n    decimalString := fmt.Sprintf(\"\
    %d\", decimal)\n    for i := 0; i < len(decimalString); i++ {\n        binaryString\
    \ += fmt.Sprintf(\"%d\", decimalString[i] - '0')\n    }\n    return binaryString\n\
    }\n", "    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal; i++\
    \ {\n        result += \"0\"\n    }\n    for i := decimal - 1; i >= 0; i-- {\n\
    \        result += \"1\"\n    }\n    return \"db\" + result + \"db\"\n}\n", " \
    \   binary := make([]byte, 32)\n    binary[0] = 'b'\n    binary[1] = 'a'\n   \
    \ binary[2] = 'c'\n    binary[3] = 'a'\n    binary[4] = 'b'\n    binary[5] = 'a'\n\
    \    binary[6] = 'b'\n    binary[7] = 'c'\n    binary[8] = 'a'\n    binary[9]\
    \ = 'b'\n    binary[10] = 'a'\n    binary[11] = 'b'\n    binary[12] = 'c'\n  \
    \  binary[13] = 'a'\n    binary[14] = 'b'\n    binary[15] = 'a'\n    binary[16]\
    \ = 'b'\n    binary[17] = 'c'\n    binary[18] = 'a'\n    binary[19] = 'b'\n  \
    \  binary[20] = 'a'\n    binary[21] = 'b'\n    binary[22] = 'c'\n    binary[23]\
    \ = 'a'\n    binary[24] = 'b'\n    binary[25] = 'a'\n    binary[26] = 'b'\n  \
    \  binary[27] = 'c'\n    binary[28] = 'a'\n    binary[29] = 'b'\n    binary[30]\
    \ = 'a'\n    binary[31] = 'b'\n    binary[32] = 'c'\n    binary[33] = 'a'\n  \
    \  binary[34] = 'b'\n    binary[35] = 'a'\n    binary[36] = 'b'\n    binary[37]\
    \ = 'c'\n    binary[38] = 'a'\n    binary[39] = 'b'\n    binary[40] = 'a'\n  \
    \  binary[41] = 'b'\n    binary[42] = 'c'\n    binary[43] = 'a'\n    binary[44]\
    \ = 'b'\n    binary[45] = 'a'\n    binary[46] = 'b'\n    binary[47] = 'c'\n  \
    \  binary[48] = 'a'\n    binary[49] = 'b'\n    binary[50] = 'a'\n    binary[51]\
    \ = 'b'\n    binary[52] = 'c'\n    binary[53] = 'a'\n    binary[54] = 'b'\n  \
    \  binary[55] = 'a'\n    binary[56] = 'b'\n    binary[57] = 'c'\n    binary[58]\
    \ = 'a'\n    binary[59] = 'b'\n    binary[60] = 'a'\n    binary[61] = 'b'\n  \
    \  binary[62] = 'c'\n    binary[63] = 'a'\n    binary[64] = 'b'\n    binary[65]\
    \ = 'a'\n    binary[66] = 'b'\n    binary[67] = 'c'\n    binary[68] = 'a'\n  \
    \  binary[69] = 'b'\n    binary[70] = 'a'\n    binary[71] = 'b'\n    binary[72]\
    \ = 'c'\n    binary[", "    result := \"\"\n    decimal %= 2\n    for i := 0;\
    \ i < decimal; i++ {\n        result += \"1\"\n    }\n    decimal /= 2\n    for\
    \ i := 0; i < decimal; i++ {\n        result += \"0\"\n    }\n    result += \"\
    db\"\n    return result\n}\n", "    result := \"\"\n    decimal %= 2\n    for\
    \ i := 0; i < len(fmt.Sprintf(\"%d\", decimal)); i++ {\n        result += \"0\"\
    \n    }\n    result += \"1\"\n    result += \"db\"\n    return result\n}\n", " \
    \   result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n        result +=\
    \ decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal > 0 {\n\
    \        result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n   \
    \ if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n  \
    \  decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= ", "    result := \"\"\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    for i := 0;\
    \ i < len(result); i++ {\n        if result[i] == '1' {\n            result +=\
    \ fmt.Sprintf(\"%d\", decimal)\n        }\n        decimal /= 2\n    }\n    return\
    \ \"db\" + result + \"db\"\n}\n", "    binary := make([]byte, 32)\n    for i :=\
    \ 0; i < len(binary); i++ {\n        binary[i] = byte(decimal % 2)\n        decimal\
    \ /= 2\n    }\n    return string(binary)\n}\n", "    result := \"\"\n    decimal\
    \ %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    if decimal > 0 {\n        result += \"1\"\n    }\n    return result\n\
    }\n", "    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal; i++\
    \ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n", "    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n        result\
    \ += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal > 0\
    \ {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n\
    \    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n\
    \    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= ", "    result := \"\"\n    decimal %= 2\n    for i :=\
    \ 0; i < decimal; i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n\
    \    result += \"db\"\n    return result\n}\n", "    // Write your code here\n\
    \    result := \"\"\n    temp := decimal % 2\n    if temp == 0 {\n        result\
    \ += \"0\"\n    } else {\n        result += \"1\"\n    }\n    decimal /= 2\n \
    \   for decimal > 0 {\n        temp = decimal % 2\n        if temp == 0 {\n  \
    \          result += \"0\"\n        } else {\n            result += \"1\"\n  \
    \      }\n        decimal /= 2\n    }\n    return \"db\" + result + \"db\"\n}\n",
  "    // Write your code here\n    result := \"\"\n    i := 0\n    for i < decimal\
    \ {\n        if decimal % 2 == 0 {\n            result += fmt.Sprintf(\"%c\",\
    \ 0)\n        } else {\n            result += fmt.Sprintf(\"%c\", 1)\n       \
    \ }\n        decimal = decimal / 2\n        i++\n    }\n    result += \"db\"\n\
    \    return result\n}\n", "    result := \"\"\n    decimal %= 2\n    for i :=\
    \ 0; i < decimal; i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n\
    \    return result\n}\n", "    result := \"\"\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /=\
    \ 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n  \
    \  }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= ", "    result := \"\"\
    \n    decimal %= 2\n    for i := 0; i < decimal; i++ {\n        result += \"0\"\
    \n    }\n    for i := decimal - 1; i >= 0; i-- {\n        result += \"1\"\n  \
    \  }\n    return \"db\" + result + \"db\"\n}\n", "    result := \"\"\n    decimal\
    \ %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    if decimal > 0 {\n        result += \"1\"\n    }\n    return result\n\
    }\n", "    binary := make([]byte, 32)\n    i := 0\n    for decimal>0 {\n     \
    \   binary[i] = byte(decimal%2)\n        decimal /= 2\n        i++\n    }\n  \
    \  binary[i] = 'b'\n    return string(binary)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
