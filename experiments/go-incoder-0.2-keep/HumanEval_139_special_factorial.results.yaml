language: go_test.go
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"Error: Negative factorial not allowed\"\
    )\n    }\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1muqpfhs_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1muqpfhs_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1muqpfhs_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"Error: Negative factorial not allowed\"\
    )\n        return -1\n    }\n    result := 1\n    for i := 1; i <= n; i++ {\n\
    \        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp2sznxhyu_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp2sznxhyu_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp2sznxhyu_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0j766yjf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    result := 1\n    for i := 1; i\
    \ <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp3ztkup5i_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp3ztkup5i_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp3ztkup5i_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    result := 1\n    for i := 1; i\
    \ <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp3ztkup5i_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp3ztkup5i_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp3ztkup5i_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return n\n    }\n    return special_factorial(n - 1)\
    \ * n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpop7dw7rn_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpop7dw7rn_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpop7dw7rn_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpop7dw7rn_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1ro9m3e1_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1ro9m3e1_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1ro9m3e1_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp1ro9m3e1_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0j766yjf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1ro9m3e1_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1ro9m3e1_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1ro9m3e1_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp1ro9m3e1_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1ro9m3e1_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1ro9m3e1_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1ro9m3e1_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp1ro9m3e1_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return n\n    }\n    return n * special_factorial(n -\
    \ 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpaukd0gzm_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpaukd0gzm_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpaukd0gzm_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpaukd0gzm_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1ro9m3e1_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1ro9m3e1_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1ro9m3e1_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp1ro9m3e1_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"The factorial of a negative number is not\
    \ defined.\")\n        return -1\n    }\n    result := 1\n    for i := 1; i <=\
    \ n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpx1bym5on_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpx1bym5on_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpx1bym5on_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n*special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpio3lg9w3_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpio3lg9w3_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpio3lg9w3_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"Error: Negative factorials are not allowed\"\
    )\n        return -1\n    }\n    result := 1\n    for i := 1; i <= n; i++ {\n\
    \        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpom96dl41_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpom96dl41_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpom96dl41_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"Error: Negative factorial not allowed\"\
    )\n        return -1\n    }\n    if n == 0 {\n        return 1\n    }\n    return\
    \ n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp2kt3ntuz_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp2kt3ntuz_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp2kt3ntuz_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n*special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpio3lg9w3_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpio3lg9w3_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpio3lg9w3_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"Error: Negative factorial not allowed\"\
    )\n        return -1\n    }\n    if n == 0 {\n        return 1\n    }\n    return\
    \ n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp2kt3ntuz_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp2kt3ntuz_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp2kt3ntuz_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 1 {\n        return 1\n\
    \    }\n    return n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpy5be6f5k_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpy5be6f5k_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpy5be6f5k_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"Error: Negative numbers are not allowed\"\
    )\n    }\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpj2vqgjmq_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpj2vqgjmq_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpj2vqgjmq_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1ro9m3e1_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1ro9m3e1_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1ro9m3e1_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp1ro9m3e1_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return n\n    }\n    return n * special_factorial(n -\
    \ 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpaukd0gzm_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpaukd0gzm_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpaukd0gzm_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpaukd0gzm_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073725
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
