name: HumanEval_70_strange_sort_list
language: go_test.go
prompt: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1,\
  \ 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([])\
  \ == []\nfunc strange_sort_list(lst []int) []int {\n"
tests: "func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
  \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
  \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
  \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
  \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
  \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4,\
  \ 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5,\
  \ 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111}\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    min += 1\n    max -= 1\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i]\
    \ = min\n        if i == len(lst)-1 {\n            result[i] = max\n        }\
    \ else {\n            result[i+1] = max\n        }\n    }\n    return result\n\
    }\n", "    if len(lst) == 0 {\n        return []\n    }\n    min := lst[0]\n \
    \   max := lst[0]\n    for _, v := range lst {\n        if v < min {\n       \
    \     min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n    lst = append([]int{min, max}, lst...)\n    return lst\n}\n", "   \
    \ if len(lst) <= 1 {\n        return lst\n    }\n\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \n    result := make([]int, 0, len(lst))\n    for _, v := range lst {\n      \
    \  if v == min {\n            result = append(result, max)\n        } else {\n\
    \            result = append(result, v)\n        }\n    }\n\n    return strange_sort_list(result)\n\
    }\n", "    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n   \
    \     if v < min {\n            min = v\n        }\n        if v > max {\n   \
    \         max = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n\
    \    return lst\n}\n", "    if len(lst) == 0 {\n        return []\n    }\n   \
    \ min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ strange_sort_list(lst)\n}\n", "    min := lst[0]\n    max := lst[0]\n    for\
    \ _, v := range lst {\n        if v < min {\n            min = v\n        }\n\
    \        if v > max {\n            max = v\n        }\n    }\n    lst = append([]int{min,\
    \ max}, lst...)\n    return lst\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    lst = append([]int{min}, lst...)\n\
    \    lst = append([]int{max}, lst...)\n    return lst\n}\n", "    if len(lst)\
    \ == 0 {\n        return []\n    }\n    min := lst[0]\n    max := lst[0]\n   \
    \ for _, v := range lst {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n    result :=\
    \ []int{}\n    for _, v := range lst {\n        if v == min {\n            result\
    \ = append(result, v)\n        }\n        if v == max {\n            result =\
    \ append(result, v)\n        }\n    }\n    for _, v := range result {\n      \
    \  result = append(result, v)\n    }\n    return result\n}\n", "    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    lst = append([]int{min, max}, lst...)\n    return lst\n}\n", " \
    \   var result []int\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = append(result, v)\n        }\n  \
    \      if v == max {\n            result = append(result, v)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ v)\n        }\n        if v == max {\n            result = append(result, v)\n\
    \        }\n    }\n    for _, v := range lst {\n        if v == min {\n      \
    \      result = append(result, v)\n        }\n        if v == max {\n        \
    \    result = append(result, v)\n        }\n    }\n    for _, v := range lst {\n\
    \        if v == min {\n            result = ", "    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n\
    \    return lst\n}\n", "    min := lst[0]\n    max := lst[0]\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    lst = append([]int{min,\
    \ max}, lst...)\n    return lst\n}\n", "    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            result[i] = min\n        } else {\n            result[i]\
    \ = max\n        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n\
    \        return []\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v\
    \ := range lst {\n        if v < min {\n            min = v\n        }\n     \
    \   if v > max {\n            max = v\n        }\n    }\n    lst = append([]int{min,\
    \ max}, lst...)\n    return strange_sort_list(lst)\n}\n", "    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    lst = append([]int{min, max}, lst...)\n    return lst\n}\n", " \
    \   var result []int\n    var min int\n    var max int\n    for _, v := range\
    \ lst {\n        if min == 0 {\n            min = v\n        }\n        if v <\
    \ min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    for _, v := range lst {\n        if v == min {\n\
    \            result = append(result, min)\n        }\n        if v == max {\n\
    \            result = append(result, max)\n        }\n    }\n    for _, v := range\
    \ lst {\n        if v == min {\n            result = append(result, min)\n   \
    \     }\n        if v == max {\n            result = append(result, max)\n   \
    \     }\n    }\n    for _, v := range lst {\n        if v == min {\n         \
    \   result = append(result, min)\n        }\n        if v == max {\n         \
    \   result = append(result, max)\n        }\n    }\n    for _, v := range lst\
    \ {\n        if v == min {\n            result = append(result, min)\n       \
    \ }\n        if v == max {\n            result = append(result, max)\n       \
    \ }\n    }\n    for _, v := range lst {\n        if v == min {\n            result\
    \ = append(result, min)\n        }\n        if v == max {\n            result\
    \ = append(result, max)\n        }\n    }\n    for _, v := range lst {\n     \
    \   if v == min {\n            result = append(result, min)\n        }\n     \
    \   if v == max {\n            result = append(result, max)\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ min)\n        }\n        if v == max {\n            result = append(result,\
    \ max)\n        }\n    }\n    for _, v := range lst {\n        if v == min {\n\
    \            result = append(result, min)\n        }\n        if v == max {\n\
    \            result = append(result, max)\n        }\n    }\n    for _, v := range\
    \ lst {\n        if v == min {\n            result = append(result, min)\n   \
    \     }\n        if v == max {\n            result = append(result, max)\n   \
    \     }\n    }\n    for _, v := range lst {\n        if v == min {\n         \
    \   result = append(result, min)\n        }\n        if v == max {\n         \
    \   result = append(result, max)\n        }\n    }\n    for _, v := range lst\
    \ {\n        if v == min {\n            result = append(result, min)\n       \
    \ }\n        if v == max {\n            result = append(result, max)\n       \
    \ }\n    }\n    for _, v := range lst {\n        if v == min {\n            result\
    \ = append(result, min)\n        }\n        if v == max {\n            result\
    \ = append(result, max)\n        }\n    }\n    for _, v := range lst {\n", " \
    \   if len(lst) == 0 {\n        return lst\n    }\n\n    // Find the minimum value\n\
    \    min := lst[0]\n    for _, val := range lst {\n        if val < min {\n  \
    \          min = val\n        }\n    }\n\n    // Find the maximum value\n    max\
    \ := lst[0]\n    for _, val := range lst {\n        if val > max {\n         \
    \   max = val\n        }\n    }\n\n    // Sort list from min to max\n    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n\
    \n    // Return sorted list\n    return lst\n}\n", "    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n  \
    \      result[i] = min + i*((max-min)/len(lst))\n    }\n    return result\n}\n",
  "    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n", "    min := lst[0]\n    max := lst[0]\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    result := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        result[i] = min + i*((max-min)/len(lst))\n\
    \    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
