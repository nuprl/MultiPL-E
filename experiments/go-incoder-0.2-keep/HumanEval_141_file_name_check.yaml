name: HumanEval_141_file_name_check
language: go_test.go
prompt: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Create a function which takes a string representing a file's name, and returns\n\
  // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's\
  \ name is considered to be valid if and only if all the following conditions \n\
  // are met:\n// - There should not be more than three digits ('0'-'9') in the file's\
  \ name.\n// - The file's name contains exactly one dot '.'\n// - The substring before\
  \ the dot should not be empty, and it starts with a letter from \n// the latin alphapet\
  \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
  \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
  \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with\
  \ a latin alphapet letter)\nfunc file_name_check(file_name string) string {\n"
tests: "func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\"\
  \ },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
  \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"K.dll\"\
  ), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
  \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n\
  \     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
  ?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"\
  ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected:\
  \ \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\"\
  \ },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n\
  \     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n    \
  \ { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
  \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
  \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"I563_No.exe\"\
  ), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"), expected:\
  \ \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected: \"Yes\"\
  \ },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n     {\
  \ actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual: candidate(\"\
  final..txt\"), expected: \"No\" },\n     { actual: candidate(\"final132\"), expected:\
  \ \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"), expected: \"No\" },\n\
  \     { actual: candidate(\".txt\"), expected: \"No\" },\n     { actual: candidate(\"\
  s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    \n    // Your code here\n    \n    return \"\"\n}\n", "    // Your\
    \ code here\n    \n    return \"\"\n}\n", "    \n    // Initialize a boolean variable\
    \ to 'false'\n    valid := false\n    \n    // Initialize a variable to hold the\
    \ file's name without extension\n    file_name_without_extension := file_name\n\
    \    \n    // Initialize a variable to hold the file's extension\n    file_name_extension\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension\n    file_name_without_extension := file_name\n    \n    // Initialize\
    \ a variable to hold the file's extension\n    file_name_extension := \"\"\n \
    \   \n    // Initialize a variable to hold the file's name without extension\n\
    \    file_name_without_extension := file_name\n    \n    // Initialize a variable\
    \ to hold the file's extension\n    file_name_extension := \"\"\n    \n    //\
    \ Initialize a variable to hold the file's name without extension\n    file_name_without_extension\
    \ := file_name\n    \n    // Initialize a variable to hold the file's extension\n\
    \    file_name_extension := \"\"\n    \n    // Initialize a variable to hold the\
    \ file's name without extension\n    file_name_without_extension := file_name\n\
    \    \n    // Initialize a variable to hold the file's extension\n    file_name_extension\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension\n    file_name_without_extension := file_name\n    \n    // Initialize\
    \ a variable to hold the file's extension\n    file_name_extension := \"\"\n \
    \   \n    // Initialize a variable to hold the file's name without extension\n\
    \    file_name_without_extension := file_name\n    \n    // Initialize a variable\
    \ to hold the file's extension\n    file_name_extension := \"\"\n    \n    //\
    \ Initialize a variable to hold the file's name without extension\n    file_name_without_extension\
    \ := file_name\n    \n    // Initialize a variable to hold the file's extension\n\
    \    file_name_extension := \"\"\n    \n    // Initialize a variable to hold the\
    \ file's name without extension\n    file_name_without_extension := file_name\n\
    \    \n    // Initialize a variable to hold the file's extension\n    file_name_extension\
    \ := \"\"\n    \n    // Initialize a variable to hold the file's name without\
    \ extension\n    file_name_without_extension := file_name\n    \n    // Initialize\
    \ a variable to hold the file's extension\n    file_name_extension := \"\"\n \
    \   \n    // Initialize a variable to hold the file's name without extension\n\
    \    file_name_without_extension := file_name\n    \n    // Initialize a variable\
    \ to hold the file's extension\n    file_name_extension := \"\"\n    \n    //\
    \ Initialize a variable to hold the file's name without extension\n    file_name_without_extension\
    \ := file_name", "    \n    // Initialize a boolean variable 'is_valid' to 'true'.\n\
    \    is_valid := true\n    \n    // Initialize a variable 'file_name_length' to\
    \ '0'.\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_char'\
    \ to '0'.\n    file_name_char := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    file_name_dot_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    file_name_dot_position := 0\n    \n  \
    \  // Initialize a variable 'file_name_dot_position' to '0'.\n    file_name_dot_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n\
    \    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    file_name_dot_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    file_name_dot_position := 0\n    \n  \
    \  // Initialize a variable 'file_name_dot_position' to '0'.\n    file_name_dot_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n\
    \    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    file_name_dot_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    file_name_dot_position := 0\n    \n  \
    \  // Initialize a variable 'file_name_dot_position' to '0'.\n    file_name_dot_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n\
    \    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    file_name_dot_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    file_name_dot_position := 0\n    \n  \
    \  // Initialize a variable 'file_name_dot_position' to '0'.\n    file_name_dot_position\
    \ := 0\n    \n    // Initialize a variable 'file_name_dot_position' to '0'.\n\
    \    file_name_dot_position := 0\n    \n    // Initialize a variable 'file_name_dot_position'\
    \ to '0'.\n    file_name_dot_position := 0\n    \n    // Initialize a variable\
    \ 'file_name_dot_position' to '0'.\n    file_name_dot_position := 0\n    \n  \
    \  // Initialize a variable 'file_name_dot_position' to '0'.\n    ", "    // Your\
    \ code here\n    \n    return file_name\n}\n", "    \n    // Your code here\n\
    \    \n    return \"\"\n}\n", "    \n    // Initialize a boolean variable 'is_valid'\
    \ to 'true'.\n    is_valid := true\n    \n    // Initialize a variable 'file_extension'\
    \ to an empty string.\n    file_extension := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_length' to 0.\n    file_name_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_character' to 0.\n    file_name_character := 0\n    \n\
    \    // Initialize a variable 'dot_position' to 0.\n    dot_position := 0\n  \
    \  \n    // Initialize a variable 'dot_position' to 0.\n    dot_position := 0\n\
    \    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position :=\
    \ 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // Initialize a variable 'dot_position' to 0.\n    dot_position\
    \ := 0\n    \n    // ", "    // Your code here\n    \n    return \"\"\n}\n", " \
    \   \n    // Initialize a boolean variable 'is_valid' to 'False'\n    is_valid\
    \ := false\n    \n    // Initialize a variable 'file_name_parts' to a slice of\
    \ strings with length 3\n    file_name_parts := make([]string, 3)\n    \n    //\
    \ Initialize a variable 'file_name_parts_index' to 0\n    file_name_parts_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_parts_length' to 0\n   \
    \ file_name_parts_length := 0\n    \n    // Initialize a variable 'file_name_parts_string'\
    \ to an empty string\n    file_name_parts_string := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_parts_string_index' to 0\n    file_name_parts_string_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_parts_string_length' to\
    \ 0\n    file_name_parts_string_length := 0\n    \n    // Initialize a variable\
    \ 'file_name_parts_string_length' to 0\n    file_name_parts_string_length := 0\n\
    \    \n    // Initialize a variable 'file_name_parts_string' to an empty string\n\
    \    file_name_parts_string := \"\"\n    \n    // Initialize a variable 'file_name_parts_string_index'\
    \ to 0\n    file_name_parts_string_index := 0\n    \n    // Initialize a variable\
    \ 'file_name_parts_string_length' to 0\n    file_name_parts_string_length := 0\n\
    \    \n    // Initialize a variable 'file_name_parts_string_length' to 0\n   \
    \ file_name_parts_string_length := 0\n    \n    // Initialize a variable 'file_name_parts_string'\
    \ to an empty string\n    file_name_parts_string := \"\"\n    \n    // Initialize\
    \ a variable 'file_name_parts_string_index' to 0\n    file_name_parts_string_index\
    \ := 0\n    \n    // Initialize a variable 'file_name_parts_string_length' to\
    \ 0\n    file_name_parts_string_length := 0\n    \n    // Initialize a variable\
    \ 'file_name_parts_string_length' to 0\n    file_name_parts_string_length := 0\n\
    \    \n    // Initialize a variable 'file_name_parts_string' to an empty string\n\
    \    file_name_parts_string := \"\"\n    \n    // Initialize a variable 'file_name_parts_string_index'\
    \ to 0\n    file_name_parts_string_index := 0\n    \n    // Initialize a variable\
    \ 'file_name_parts_string_length' to 0\n    file_name_parts_string_length := 0\n\
    \    \n    // Initialize a variable 'file_name_parts_string_length' to 0\n   \
    \ file_name_parts_string_length := ", "    // Your code here\n    \n    return\
    \ file_name\n}\n", "    // Your code here\n    \n    return \"\"\n}\n", "    //\
    \ Your code here\n    \n    return \"\"\n}\n", "    \n    // Your code here\n\
    \    \n    return \"\"\n}\n</cell>\n<text>\nRun the cell below to test your solution.\n\
    \n\n</text>\n<cell>\n# Do not modify this cell!\n\n# Test 1\nfile_name_check(\"\
    example.txt\")\n</cell>\n<cell>\n# Test 2\nfile_name_check(\"1example.dll\")\n\
    </cell>\n<cell>\n# Test 3\nfile_name_check(\"example\")\n</cell>\n<cell>\n# Test\
    \ 4\nfile_name_check(\"1example\")\n</cell>\n<cell>\n# Test 5\nfile_name_check(\"\
    1example.txt\")\n</cell>\n<cell>\n# Test 6\nfile_name_check(\"example.txt\")\n\
    </cell>\n<cell>\n# Test 7\nfile_name_check(\"example\")\n</cell>\n<cell>\n# Test\
    \ 8\nfile_name_check(\"1example\")\n</cell>\n<cell>\n# Test 9\nfile_name_check(\"\
    1example.txt\")\n</cell>\n<cell>\n# Test 10\nfile_name_check(\"example.txt\")\n\
    </cell>\n<cell>\n# Test 11\nfile_name_check(\"example\")\n</cell>\n<cell>\n# Test\
    \ 12\nfile_name_check(\"1example\")\n</cell>\n<cell>\n# Test 13\nfile_name_check(\"\
    1example.txt\")\n</cell>\n<cell>\n# Test 14\nfile_name_check(\"example.txt\")\n\
    </cell>\n<cell>\n# Test 15\nfile_name_check(\"example\")\n</cell>\n<cell>\n# Test\
    \ 16\nfile_name_check(\"1example\")\n</cell>\n<cell>\n# Test 17\nfile_name_check(\"\
    1example.txt\")\n</cell>\n<cell>\n# Test 18\nfile_name_check(\"example.txt\")\n\
    </cell>\n<cell>\n# Test 19\nfile_name_check(\"example\")\n</cell>\n<cell>\n# Test\
    \ 20\nfile_name_check(\"1example\")\n</cell>\n<cell>\n# Test 21\nfile_name_check(\"\
    1example.txt\")\n</cell>\n<cell>\n# Test 22\nfile_name_check(\"example.txt\")\n\
    </cell>\n<cell>\n# Test 23\nfile_name_check(\"example\")\n</cell>\n<cell>\n# Test\
    \ 24\nfile_name_check(\"1example\")", "    // Your code here\n    \n    return\
    \ \"\"\n}\n", "    // Your code here\n    \n    return \"\"\n}\n", "    // Your\
    \ code here\n    \n    return \"\"\n}\n", "    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    // ",
  "    \n    // 1. There should not be more than three digits ('0'-'9') in the file's\
    \ name.\n    if len(file_name) > 3 {\n        return \"No\"\n    }\n    \n   \
    \ // 2. The file's name contains exactly one dot '.'\n    if file_name[len(file_name)-1]\
    \ == '.' {\n        return \"No\"\n    }\n    \n    // 3. The substring before\
    \ the dot should not be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n    if file_name[:len(file_name)-1] == \"\" {\n    \
    \    return \"No\"\n    }\n    \n    // 4. The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    valid_extensions := []string{\"\
    txt\", \"exe\", \"dll\"}\n    \n    // 5. Check whether the file's name contains\
    \ one of the valid extensions.\n    for _, extension := range valid_extensions\
    \ {\n        if file_name[len(file_name)-len(extension):] == extension {\n   \
    \         return \"Yes\"\n        }\n    }\n    \n    return \"No\"\n}\n", " \
    \   \n    // Initialize a boolean variable 'is_valid' to false\n    is_valid :=\
    \ false\n    \n    // Initialize a variable 'file_name_parts' to an empty array\n\
    \    file_name_parts := []string{}\n    \n    // Initialize a variable 'file_name_length'\
    \ to 0\n    file_name_length := 0\n    \n    // Initialize a variable 'file_name_part'\
    \ to an empty string\n    file_name_part := \"\"\n    \n    // Initialize a variable\
    \ 'file_name_part_length' to 0\n    file_name_part_length := 0\n    \n    // Initialize\
    \ a variable 'file_name_part_index' to 0\n    file_name_part_index := 0\n    \n\
    \    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_length_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_index' to 0\n    file_name_part_index_check\
    \ := 0\n    \n    // Initialize a variable 'file_name_part_length' to 0\n    file_name_part_",
  "    // Your code here\n    \n    return file_name\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
