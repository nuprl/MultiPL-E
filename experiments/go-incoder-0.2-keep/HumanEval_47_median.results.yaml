language: go_test.go
name: HumanEval_47_median
results:
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe3vzxu3h_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpe3vzxu3h_test.go:18:16: cannot use (l[(length - 1) / 2] + l[length / 2])
    / 2 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ float64(l[n/2] + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2azriatr_test.go:17:5: undefined: sort

    /tmp/tmp2azriatr_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4ngj85j_test.go:17:5: undefined: sort

    /tmp/tmpq4ngj85j_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpq4ngj85j_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[0:middle]\n    right := l[middle:]\n\
    \    median := (left + right) / 2\n    return median\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8yj_92ns_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp8yj_92ns_test.go:21:16: invalid operation: operator + not defined on left
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjri0eb6v_test.go:17:5: undefined: sort

    /tmp/tmpjri0eb6v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpjri0eb6v_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[0:middle]\n    right := l[middle:]\n\
    \    median := (left + right) / 2\n    return median\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8yj_92ns_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp8yj_92ns_test.go:21:16: invalid operation: operator + not defined on left
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    middle\
    \ := (n+1)/2\n    return float64(l[middle-1] + l[middle])/2\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsuqseraa_test.go:15:16: undefined: math

    /tmp/tmpsuqseraa_test.go:17:5: undefined: sort

    /tmp/tmpsuqseraa_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpab65xah7_test.go:17:5: undefined: sort

    /tmp/tmpab65xah7_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpab65xah7_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    return median(l, middle)\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgul4e14m_test.go:16:16:\
    \ cannot use l[(length - 1) / 2] (variable of type int) as type float64 in return\
    \ statement\n/tmp/tmpgul4e14m_test.go:19:22: too many arguments in call to median\n\
    \thave ([]int, int)\n\twant ([]int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    return l[middle]\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprg8jc_1i_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmprg8jc_1i_test.go:19:12: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ivf4f0v_test.go:15:16: undefined: math

    /tmp/tmp8ivf4f0v_test.go:17:5: undefined: sort

    /tmp/tmp8ivf4f0v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp8ivf4f0v_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjri0eb6v_test.go:17:5: undefined: sort

    /tmp/tmpjri0eb6v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpjri0eb6v_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ ((l[n-1] + l[n/2]) / 2)\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2uqjgkfz_test.go:17:5: undefined: sort

    /tmp/tmp2uqjgkfz_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp2uqjgkfz_test.go:22:12: cannot use ((l[n - 1] + l[n / 2]) / 2) (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return ((l[n/2]\
    \ + l[n/2]) / 2)\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2bzg16ab_test.go:17:5: undefined: sort

    /tmp/tmp2bzg16ab_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp2bzg16ab_test.go:22:12: cannot use ((l[n / 2] + l[n / 2]) / 2) (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    return l[middle]\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprg8jc_1i_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmprg8jc_1i_test.go:19:12: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk7nfq16h_test.go:17:5: undefined: sort

    /tmp/tmpk7nfq16h_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpk7nfq16h_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.IntSlice(l))\n\
    \    length := len(l)\n    if length % 2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return (l[length-1] + l[length/2]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprgp7srci_test.go:17:5: undefined: sort

    /tmp/tmprgp7srci_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmprgp7srci_test.go:22:12: cannot use (l[length - 1] + l[length / 2]) / 2
    (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_fo_jga_test.go:17:5: undefined: sort

    /tmp/tmpp_fo_jga_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpp_fo_jga_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    middle\
    \ := n / 2\n    return float64(l[middle-1] + l[middle])/2\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoeazkqbh_test.go:15:16: undefined: math

    /tmp/tmpoeazkqbh_test.go:17:5: undefined: sort

    /tmp/tmpoeazkqbh_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    return\
    \ l[len(l)/2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyh61w49j_test.go:17:5: undefined: sort

    /tmp/tmpyh61w49j_test.go:18:12: cannot use l[len(l) / 2] (variable of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.IntSlice(l))\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu29a5eu5_test.go:17:5: undefined: sort

    /tmp/tmpu29a5eu5_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpu29a5eu5_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    if length % 2 == 0 {\n        return l[(length-1)/2]\n    }\n\
    \    return (l[(length-1)/2] + l[(length-1)/2]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaju83qjo_test.go:17:5: undefined: sort

    /tmp/tmpaju83qjo_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpaju83qjo_test.go:22:12: cannot use (l[(length - 1) / 2] + l[(length -
    1) / 2]) / 2 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpab65xah7_test.go:17:5: undefined: sort

    /tmp/tmpab65xah7_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpab65xah7_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    }\n    return (l[middle-1] + l[middle]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5bpbg6js_test.go:17:5: undefined: sort

    /tmp/tmp5bpbg6js_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmp5bpbg6js_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbgynvoa_test.go:15:16: undefined: math

    /tmp/tmppbgynvoa_test.go:17:5: undefined: sort

    /tmp/tmppbgynvoa_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmppbgynvoa_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    n\
    \ := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    }\n    return (l[middle-1] + l[middle]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyr4hr2h_test.go:17:5: undefined: sort

    /tmp/tmpxyr4hr2h_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmpxyr4hr2h_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    return l[middle]\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprg8jc_1i_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmprg8jc_1i_test.go:19:12: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    length := len(l)\n    middle := length / 2\n    if length%2 == 0 {\n    \
    \    return l[middle]\n    }\n    return (l[middle-1] + l[middle]) / 2\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqy8wkvrk_test.go:17:5: undefined: sort

    /tmp/tmpqy8wkvrk_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmpqy8wkvrk_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8h70y8_p_test.go:17:5: undefined: sort

    /tmp/tmp8h70y8_p_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp8h70y8_p_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return (l[length/2] + l[length/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpddlbehp4_test.go:17:5: undefined: sort

    /tmp/tmpddlbehp4_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpddlbehp4_test.go:22:12: cannot use (l[length / 2] + l[length / 2 - 1])
    / 2 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprotop7ba_test.go:17:5: undefined: sort

    /tmp/tmprotop7ba_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmprotop7ba_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt0ebuzyh_test.go:15:16: undefined: math

    /tmp/tmpt0ebuzyh_test.go:17:5: undefined: sort

    /tmp/tmpt0ebuzyh_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpt0ebuzyh_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjri0eb6v_test.go:17:5: undefined: sort

    /tmp/tmpjri0eb6v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpjri0eb6v_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzq5wmgb9_test.go:17:5: undefined: sort

    /tmp/tmpzq5wmgb9_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpzq5wmgb9_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    } else {\n        return (l[middle-1] + l[middle]) / 2\n    }\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptoj_14nn_test.go:17:5: undefined: sort

    /tmp/tmptoj_14nn_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmptoj_14nn_test.go:23:16: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7fqb8zdr_test.go:17:5: undefined: sort

    /tmp/tmp7fqb8zdr_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp7fqb8zdr_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    sort.Sort(IntSlice(l))\n    if len(l) == 0 {\n        return math.NaN()\n\
    \    }\n    length := len(l)\n    middle := length/2\n    if length%2 == 0 {\n\
    \        return l[middle]\n    }\n    return (l[middle-1] + l[middle])/2\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl77u3x9g_test.go:14:5: undefined: sort

    /tmp/tmpl77u3x9g_test.go:14:15: undefined: IntSlice

    /tmp/tmpl77u3x9g_test.go:16:16: undefined: math

    /tmp/tmpl77u3x9g_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmpl77u3x9g_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    if length%2 == 1 {\n        return l[middle]\n\
    \    }\n    return median(l, middle)\n}\n\nfunc TestMedian(t *testing.T) {\n \
    \ candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3zpbd2wr_test.go:16:16:\
    \ cannot use l[(length - 1) / 2] (variable of type int) as type float64 in return\
    \ statement\n/tmp/tmp3zpbd2wr_test.go:20:16: cannot use l[middle] (variable of\
    \ type int) as type float64 in return statement\n/tmp/tmp3zpbd2wr_test.go:22:22:\
    \ too many arguments in call to median\n\thave ([]int, int)\n\twant ([]int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Ints(l)\n\
    \    return l[len(l)/2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7vlxos5u_test.go:15:16: undefined: math

    /tmp/tmp7vlxos5u_test.go:17:5: undefined: sort

    /tmp/tmp7vlxos5u_test.go:18:12: cannot use l[len(l) / 2] (variable of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8kuaptu_test.go:15:16: undefined: math

    /tmp/tmpy8kuaptu_test.go:17:5: undefined: sort

    /tmp/tmpy8kuaptu_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpy8kuaptu_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[:middle]\n    right := l[middle:]\n\
    \    medianLeft := median(left)\n    medianRight := median(right)\n    if medianLeft\
    \ < medianRight {\n        return medianLeft\n    } else {\n        return medianRight\n\
    \    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2q0tm179_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt0ebuzyh_test.go:15:16: undefined: math

    /tmp/tmpt0ebuzyh_test.go:17:5: undefined: sort

    /tmp/tmpt0ebuzyh_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpt0ebuzyh_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    return\
    \ l[len(l)-1]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpavst1j16_test.go:17:5: undefined: sort

    /tmp/tmpavst1j16_test.go:18:12: cannot use l[len(l) - 1] (variable of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    if length%2 == 1 {\n        return l[middle]\n\
    \    }\n    middle -= 1\n    return l[middle] + median(l[middle:length-1])\n}\n\
    \nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_79t9l30_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp_79t9l30_test.go:20:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmp_79t9l30_test.go:23:12: invalid operation: l[middle] + median(l[middle:length
    - 1]) (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    return l[middle]\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprg8jc_1i_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmprg8jc_1i_test.go:19:12: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzwyoa3vy_test.go:17:5: undefined: sort

    /tmp/tmpzwyoa3vy_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpzwyoa3vy_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2.0 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   middle := length/2\n    return float64(l[middle-1]) + float64(l[middle])/2\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvoir8pde_test.go:17:5: undefined: sort

    /tmp/tmpvoir8pde_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    middle := length/2\n    if length%2 == 0 {\n        return l[middle]\n\
    \    }\n    return (l[middle-1] + l[middle])/2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94k0rnd4_test.go:17:5: undefined: sort

    /tmp/tmp94k0rnd4_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmp94k0rnd4_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8kuaptu_test.go:15:16: undefined: math

    /tmp/tmpy8kuaptu_test.go:17:5: undefined: sort

    /tmp/tmpy8kuaptu_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpy8kuaptu_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return (l[length-1] + l[length/2]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l4vl2hj_test.go:17:5: undefined: sort

    /tmp/tmp9l4vl2hj_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp9l4vl2hj_test.go:22:12: cannot use (l[length - 1] + l[length / 2]) / 2
    (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[0:middle]\n    right := l[middle:]\n\
    \    leftMedian := median(left)\n    rightMedian := median(right)\n    if leftMedian\
    \ > rightMedian {\n        return left\n    } else {\n        return right\n \
    \   }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzk45yxht_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpzk45yxht_test.go:24:16: cannot use left (variable of type []int) as type
    float64 in return statement

    /tmp/tmpzk45yxht_test.go:26:16: cannot use right (variable of type []int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    middle\
    \ := (n+1)/2\n    return float64(l[middle-1] + l[middle])/2\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsazegzz_test.go:17:5: undefined: sort

    /tmp/tmptsazegzz_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjri0eb6v_test.go:17:5: undefined: sort

    /tmp/tmpjri0eb6v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpjri0eb6v_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8h70y8_p_test.go:17:5: undefined: sort

    /tmp/tmp8h70y8_p_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp8h70y8_p_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpab65xah7_test.go:17:5: undefined: sort

    /tmp/tmpab65xah7_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpab65xah7_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    middle := length/2\n    if length%2 == 0 {\n        return l[middle]\n\
    \    }\n    return (l[middle-1] + l[middle])/2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94k0rnd4_test.go:17:5: undefined: sort

    /tmp/tmp94k0rnd4_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmp94k0rnd4_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbgynvoa_test.go:15:16: undefined: math

    /tmp/tmppbgynvoa_test.go:17:5: undefined: sort

    /tmp/tmppbgynvoa_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmppbgynvoa_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(sort.IntSlice(l))\n\
    \    length := len(l)\n    middle := length / 2\n    if length%2 == 0 {\n    \
    \    return l[middle]\n    } else {\n        return (l[middle-1] + l[middle])\
    \ / 2\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcemquge_test.go:15:16: undefined: math

    /tmp/tmpqcemquge_test.go:17:5: undefined: sort

    /tmp/tmpqcemquge_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmpqcemquge_test.go:23:16: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    half := n / 2\n    if n%2 == 0 {\n        return l[half]\n  \
    \  }\n    return (l[half-1] + l[half]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprqywrdmc_test.go:17:5: undefined: sort

    /tmp/tmprqywrdmc_test.go:21:16: cannot use l[half] (variable of type int) as type
    float64 in return statement

    /tmp/tmprqywrdmc_test.go:23:12: cannot use (l[half - 1] + l[half]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    sort.Sort(sort.IntSlice(l))\n    if len(l) == 0 {\n        return 0.0\n\
    \    }\n    length := len(l)\n    middle := length / 2\n    if length%2 == 0 {\n\
    \        return l[middle]\n    } else {\n        return (l[middle-1] + l[middle])\
    \ / 2\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgbfwiq31_test.go:14:5: undefined: sort

    /tmp/tmpgbfwiq31_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmpgbfwiq31_test.go:23:16: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpab65xah7_test.go:17:5: undefined: sort

    /tmp/tmpab65xah7_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpab65xah7_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   return (l[length-1] + l[length/2]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcd6fq86f_test.go:17:5: undefined: sort

    /tmp/tmpcd6fq86f_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpcd6fq86f_test.go:22:12: cannot use (l[length - 1] + l[length / 2]) / 2
    (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    middle\
    \ := (n+1)/2\n    return float64(l[middle-1]) + float64(l[middle])/2\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc14k3f5u_test.go:15:16: undefined: math

    /tmp/tmpc14k3f5u_test.go:17:5: undefined: sort

    /tmp/tmpc14k3f5u_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt0ebuzyh_test.go:15:16: undefined: math

    /tmp/tmpt0ebuzyh_test.go:17:5: undefined: sort

    /tmp/tmpt0ebuzyh_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpt0ebuzyh_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8h70y8_p_test.go:17:5: undefined: sort

    /tmp/tmp8h70y8_p_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp8h70y8_p_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   return (l[(length-1)/2] + l[(length-1)/2]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfu_vsxct_test.go:17:5: undefined: sort

    /tmp/tmpfu_vsxct_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpfu_vsxct_test.go:22:12: cannot use (l[(length - 1) / 2] + l[(length -
    1) / 2]) / 2 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    }\n    return (l[middle-1] + l[middle]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0wg4_nco_test.go:17:5: undefined: sort

    /tmp/tmp0wg4_nco_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmp0wg4_nco_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ ((l[n/2] + l[n/2-1]) / 2)\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvqu4e9q_test.go:17:5: undefined: sort

    /tmp/tmpcvqu4e9q_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpcvqu4e9q_test.go:22:12: cannot use ((l[n / 2] + l[n / 2 - 1]) / 2) (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    sort.Sort(sort.IntSlice(l))\n    if len(l) == 0 {\n        return 0.0\n\
    \    }\n    length := len(l)\n    middle := length / 2\n    if length%2 == 0 {\n\
    \        return l[middle]\n    }\n    return float64(l[middle-1] + l[middle])\
    \ / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxxdyabsj_test.go:14:5: undefined: sort

    /tmp/tmpxxdyabsj_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzwyoa3vy_test.go:17:5: undefined: sort

    /tmp/tmpzwyoa3vy_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpzwyoa3vy_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2.0 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpioph6gcm_test.go:17:5: undefined: sort

    /tmp/tmpioph6gcm_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpioph6gcm_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    middle\
    \ := n / 2\n    return float64(l[middle-1] + l[middle])/2\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoeazkqbh_test.go:15:16: undefined: math

    /tmp/tmpoeazkqbh_test.go:17:5: undefined: sort

    /tmp/tmpoeazkqbh_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[0:middle]\n    right := l[middle:]\n\
    \    medianLeft := median(left)\n    medianRight := median(right)\n    return\
    \ median([]int{medianLeft, medianRight})\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjtb0j18__test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpjtb0j18__test.go:23:25: cannot use medianLeft (variable of type float64)
    as type int in array or slice literal

    /tmp/tmpjtb0j18__test.go:23:37: cannot use medianRight (variable of type float64)
    as type int in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    } else {\n        return (l[middle-1] + l[middle]) / 2\n    }\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptoj_14nn_test.go:17:5: undefined: sort

    /tmp/tmptoj_14nn_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmptoj_14nn_test.go:23:16: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    return l[middle]\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprg8jc_1i_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmprg8jc_1i_test.go:19:12: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ l[n/2] + median(l[0 : n/2-1])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl9_m12fb_test.go:17:5: undefined: sort

    /tmp/tmpl9_m12fb_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpl9_m12fb_test.go:22:12: invalid operation: l[n / 2] + median(l[0:n / 2
    - 1]) (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[0:middle]\n    right := l[middle:]\n\
    \    median := (left + right) / 2\n    return median\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8yj_92ns_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp8yj_92ns_test.go:21:16: invalid operation: operator + not defined on left
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := []int{}\n    right := []int{}\n  \
    \  for i := 0; i < middle; i++ {\n        left = append(left, l[i])\n    }\n \
    \   for i := middle + 1; i < length; i++ {\n        right = append(right, l[i])\n\
    \    }\n    left := append(left, l[middle])\n    right := append(right, l[middle])\n\
    \    return float64(median(left))+float64(median(right))\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wkvi8qz_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp7wkvi8qz_test.go:27:10: no new variables on left side of :=

    /tmp/tmp7wkvi8qz_test.go:28:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    }\n    return (l[middle-1] + l[middle]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5bpbg6js_test.go:17:5: undefined: sort

    /tmp/tmp5bpbg6js_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmp5bpbg6js_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[0:middle]\n    right := l[middle:]\n\
    \    left := median(left)\n    right := median(right)\n    return float64(left+right)/float64(length)\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8jmkz866_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp8jmkz866_test.go:21:10: no new variables on left side of :=

    /tmp/tmp8jmkz866_test.go:21:13: cannot use median(left) (value of type float64)
    as type []int in assignment

    /tmp/tmp8jmkz866_test.go:22:11: no new variables on left side of :=

    /tmp/tmp8jmkz866_test.go:22:14: cannot use median(right) (value of type float64)
    as type []int in assignment

    /tmp/tmp8jmkz866_test.go:23:20: invalid operation: operator + not defined on left
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt0ebuzyh_test.go:15:16: undefined: math

    /tmp/tmpt0ebuzyh_test.go:17:5: undefined: sort

    /tmp/tmpt0ebuzyh_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpt0ebuzyh_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length <= 1 {\n        return l[0]\n    }\n\
    \    middle := length / 2\n    left := make([]int, middle)\n    right := make([]int,\
    \ middle)\n    for i := 0; i < middle; i++ {\n        left[i] = l[i]\n    }\n\
    \    for i := middle + 1; i < length; i++ {\n        right[i-1] = l[i]\n    }\n\
    \    result := 0.0\n    for i := 0; i < middle; i++ {\n        result += left[i]\
    \ + right[i]\n    }\n    return result / 2.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbkott_bg_test.go:16:16: cannot use l[0] (variable of type int) as type
    float64 in return statement

    /tmp/tmpbkott_bg_test.go:29:9: invalid operation: result += left[i] + right[i]
    (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe3vzxu3h_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpe3vzxu3h_test.go:18:16: cannot use (l[(length - 1) / 2] + l[length / 2])
    / 2 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    return l[middle]\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsifnpeyk_test.go:15:16: undefined: math

    /tmp/tmpsifnpeyk_test.go:17:5: undefined: sort

    /tmp/tmpsifnpeyk_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpsifnpeyk_test.go:23:12: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_fo_jga_test.go:17:5: undefined: sort

    /tmp/tmpp_fo_jga_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpp_fo_jga_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.IntSlice(l))\n\
    \    n := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    }\n    return (l[middle-1] + l[middle]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpehe08m15_test.go:17:5: undefined: sort

    /tmp/tmpehe08m15_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmpehe08m15_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7fqb8zdr_test.go:17:5: undefined: sort

    /tmp/tmp7fqb8zdr_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp7fqb8zdr_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7fqb8zdr_test.go:17:5: undefined: sort

    /tmp/tmp7fqb8zdr_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp7fqb8zdr_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcun8bhj_test.go:15:16: undefined: math

    /tmp/tmpqcun8bhj_test.go:17:5: undefined: sort

    /tmp/tmpqcun8bhj_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpqcun8bhj_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[0:middle]\n    right := l[middle:]\n\
    \    return median(left) + median(right)\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4fen6xtr_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[0:middle]\n    right := l[middle:]\n\
    \    return median(left) + median(right)\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4fen6xtr_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    length := len(l)\n    middle := length / 2\n    if length%2 == 0 {\n    \
    \    return l[middle]\n    }\n    return (l[middle-1] + l[middle]) / 2\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpma_jocif_test.go:17:5: undefined: sort

    /tmp/tmpma_jocif_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmpma_jocif_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[0:middle]\n    right := l[middle:]\n\
    \    median := (left + right) / 2\n    return median\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8yj_92ns_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp8yj_92ns_test.go:21:16: invalid operation: operator + not defined on left
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.IntSlice(l))\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3rr210oj_test.go:17:5: undefined: sort

    /tmp/tmp3rr210oj_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp3rr210oj_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(sort.IntSlice(l))\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp77lseb9z_test.go:17:5: undefined: sort

    /tmp/tmp77lseb9z_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp77lseb9z_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.IntSlice(l))\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz22xi29d_test.go:17:5: undefined: sort

    /tmp/tmpz22xi29d_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpz22xi29d_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_fo_jga_test.go:17:5: undefined: sort

    /tmp/tmpp_fo_jga_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpp_fo_jga_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxjuopl0x_test.go:17:5: undefined: sort

    /tmp/tmpxjuopl0x_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpxjuopl0x_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcun8bhj_test.go:15:16: undefined: math

    /tmp/tmpqcun8bhj_test.go:17:5: undefined: sort

    /tmp/tmpqcun8bhj_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpqcun8bhj_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   return l[(length-1)/2] + l[length/2-1]\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7n8c6kz7_test.go:17:5: undefined: sort

    /tmp/tmp7n8c6kz7_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp7n8c6kz7_test.go:22:12: cannot use l[(length - 1) / 2] + l[length / 2
    - 1] (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    }\n    return (l[middle-1] + l[middle]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5bpbg6js_test.go:17:5: undefined: sort

    /tmp/tmp5bpbg6js_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmp5bpbg6js_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ivf4f0v_test.go:15:16: undefined: math

    /tmp/tmp8ivf4f0v_test.go:17:5: undefined: sort

    /tmp/tmp8ivf4f0v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp8ivf4f0v_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return l[(length-1)/2] + l[length/2]/2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgir69xsz_test.go:17:5: undefined: sort

    /tmp/tmpgir69xsz_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpgir69xsz_test.go:22:12: cannot use l[(length - 1) / 2] + l[length / 2]
    / 2 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ l[n/2] + l[n/2-1]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp42bf9wo2_test.go:17:5: undefined: sort

    /tmp/tmp42bf9wo2_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp42bf9wo2_test.go:22:12: cannot use l[n / 2] + l[n / 2 - 1] (value of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    if length % 2 == 0 {\n        return l[(length-1)/2]\n    }\n\
    \    return ((l[(length-1)/2] + l[(length-1)/2]) / 2)\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiuoa4quy_test.go:17:5: undefined: sort

    /tmp/tmpiuoa4quy_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpiuoa4quy_test.go:22:12: cannot use ((l[(length - 1) / 2] + l[(length -
    1) / 2]) / 2) (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7bk33gcp_test.go:15:16: undefined: math

    /tmp/tmp7bk33gcp_test.go:17:5: undefined: sort

    /tmp/tmp7bk33gcp_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp7bk33gcp_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcun8bhj_test.go:15:16: undefined: math

    /tmp/tmpqcun8bhj_test.go:17:5: undefined: sort

    /tmp/tmpqcun8bhj_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpqcun8bhj_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    if length%2 == 1 {\n        return l[middle]\n\
    \    }\n    median := l[middle]\n    left := make([]int, middle)\n    right :=\
    \ make([]int, middle)\n    for i := 0; i < middle; i++ {\n        left[i] = l[i]\n\
    \    }\n    for i := middle + 1; i < length; i++ {\n        right[i-1] = l[i]\n\
    \    }\n    return medianOfTwoSortedArrays(left, right)\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9kzolgyp_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp9kzolgyp_test.go:20:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmp9kzolgyp_test.go:22:5: median declared but not used

    /tmp/tmp9kzolgyp_test.go:31:12: undefined: medianOfTwoSortedArrays

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjri0eb6v_test.go:17:5: undefined: sort

    /tmp/tmpjri0eb6v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpjri0eb6v_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    sort.Sort(sort.IntSlice(l))\n    if len(l) == 0 {\n        return math.NaN()\n\
    \    }\n    middle := len(l) / 2\n    if middle == 0 {\n        return l[0]\n\
    \    }\n    if middle == 1 {\n        return l[1]\n    }\n    if middle == len(l)\
    \ {\n        return l[len(l)-1]\n    }\n    switch {\n    case l[middle] > l[middle-1]:\n\
    \        return median(append(l[:middle], l[middle+1:]...))\n    case l[middle]\
    \ < l[middle-1]:\n        return median(append(l[middle:], l[:middle-1]...))\n\
    \    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcjy2kt4t_test.go:14:5: undefined: sort

    /tmp/tmpcjy2kt4t_test.go:16:16: undefined: math

    /tmp/tmpcjy2kt4t_test.go:20:16: cannot use l[0] (variable of type int) as type
    float64 in return statement

    /tmp/tmpcjy2kt4t_test.go:23:16: cannot use l[1] (variable of type int) as type
    float64 in return statement

    /tmp/tmpcjy2kt4t_test.go:26:16: cannot use l[len(l) - 1] (variable of type int)
    as type float64 in return statement

    /tmp/tmpcjy2kt4t_test.go:34:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    }\n    return (l[middle-1] + l[middle]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5bpbg6js_test.go:17:5: undefined: sort

    /tmp/tmp5bpbg6js_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmp5bpbg6js_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    m := n / 2\n    if n % 2 == 0 {\n        return l[m]\n    }\n\
    \    return (l[m] + l[m+1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6m3k96u_test.go:17:5: undefined: sort

    /tmp/tmpo6m3k96u_test.go:21:16: cannot use l[m] (variable of type int) as type
    float64 in return statement

    /tmp/tmpo6m3k96u_test.go:23:12: cannot use (l[m] + l[m + 1]) / 2 (value of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpab65xah7_test.go:17:5: undefined: sort

    /tmp/tmpab65xah7_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpab65xah7_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[length/2] + l[length/2-1])/2)\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg6i8i408_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpg6i8i408_test.go:18:12: cannot use ((l[length / 2] + l[length / 2 - 1])
    / 2) (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjri0eb6v_test.go:17:5: undefined: sort

    /tmp/tmpjri0eb6v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpjri0eb6v_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjri0eb6v_test.go:17:5: undefined: sort

    /tmp/tmpjri0eb6v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpjri0eb6v_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ivf4f0v_test.go:15:16: undefined: math

    /tmp/tmp8ivf4f0v_test.go:17:5: undefined: sort

    /tmp/tmp8ivf4f0v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp8ivf4f0v_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   return (l[(length-1)/2] + l[length/2]) / 2.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9xfxe1zx_test.go:17:5: undefined: sort

    /tmp/tmp9xfxe1zx_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp9xfxe1zx_test.go:22:12: cannot use (l[(length - 1) / 2] + l[length / 2])
    / 2.0 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpab65xah7_test.go:17:5: undefined: sort

    /tmp/tmpab65xah7_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpab65xah7_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpids6hwim_test.go:17:5: undefined: sort

    /tmp/tmpids6hwim_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpids6hwim_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.IntSlice(l))\n\
    \    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return (l[(length-1)/2] + l[(length-1)/2]) / 2\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprsiwlwyt_test.go:17:5: undefined: sort

    /tmp/tmprsiwlwyt_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmprsiwlwyt_test.go:22:12: cannot use (l[(length - 1) / 2] + l[(length -
    1) / 2]) / 2 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_fo_jga_test.go:17:5: undefined: sort

    /tmp/tmpp_fo_jga_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpp_fo_jga_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ ((l[n/2] + l[n/2-1]) / 2)\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9kp6ghcp_test.go:15:16: undefined: math

    /tmp/tmp9kp6ghcp_test.go:17:5: undefined: sort

    /tmp/tmp9kp6ghcp_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp9kp6ghcp_test.go:22:12: cannot use ((l[n / 2] + l[n / 2 - 1]) / 2) (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpab65xah7_test.go:17:5: undefined: sort

    /tmp/tmpab65xah7_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpab65xah7_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   return (l[(length-1)/2] + l[length/2]) / 2.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9xfxe1zx_test.go:17:5: undefined: sort

    /tmp/tmp9xfxe1zx_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp9xfxe1zx_test.go:22:12: cannot use (l[(length - 1) / 2] + l[length / 2])
    / 2.0 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4u18pjfo_test.go:17:5: undefined: sort

    /tmp/tmp4u18pjfo_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp4u18pjfo_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjri0eb6v_test.go:17:5: undefined: sort

    /tmp/tmpjri0eb6v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpjri0eb6v_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   return (l[length/2] + l[length/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjqy0q15t_test.go:17:5: undefined: sort

    /tmp/tmpjqy0q15t_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpjqy0q15t_test.go:22:12: cannot use (l[length / 2] + l[length / 2 - 1])
    / 2 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_fo_jga_test.go:17:5: undefined: sort

    /tmp/tmpp_fo_jga_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpp_fo_jga_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt0ebuzyh_test.go:15:16: undefined: math

    /tmp/tmpt0ebuzyh_test.go:17:5: undefined: sort

    /tmp/tmpt0ebuzyh_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpt0ebuzyh_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjri0eb6v_test.go:17:5: undefined: sort

    /tmp/tmpjri0eb6v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpjri0eb6v_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(sort.IntSlice(l))\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcih0p6jc_test.go:15:16: undefined: math

    /tmp/tmpcih0p6jc_test.go:17:5: undefined: sort

    /tmp/tmpcih0p6jc_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpcih0p6jc_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[0:middle]\n    right := l[middle:]\n\
    \    median := (left + right) / 2\n    return median\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8yj_92ns_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp8yj_92ns_test.go:21:16: invalid operation: operator + not defined on left
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := make([]int, middle)\n    right :=\
    \ make([]int, middle)\n    for i := 0; i < middle; i++ {\n        left[i] = l[i]\n\
    \    }\n    for i := middle + 1; i < length; i++ {\n        right[i-1] = l[i]\n\
    \    }\n    leftLength := len(left)\n    rightLength := len(right)\n    if leftLength\
    \ > rightLength {\n        return median(left)\n    }\n    return median(right)\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplc5v5d0b_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[:middle]\n    right := l[middle:]\n\
    \    leftMedian := median(left)\n    rightMedian := median(right)\n    if leftMedian\
    \ > rightMedian {\n        return left\n    } else {\n        return right\n \
    \   }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgen__a90_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpgen__a90_test.go:24:16: cannot use left (variable of type []int) as type
    float64 in return statement

    /tmp/tmpgen__a90_test.go:26:16: cannot use right (variable of type []int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprotop7ba_test.go:17:5: undefined: sort

    /tmp/tmprotop7ba_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmprotop7ba_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    n := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd91dwby1_test.go:17:5: undefined: sort

    /tmp/tmpd91dwby1_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpd91dwby1_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := []int{}\n    right := []int{}\n  \
    \  for i := 0; i < middle; i++ {\n        left = append(left, l[i])\n    }\n \
    \   for i := middle + 1; i < length; i++ {\n        right = append(right, l[i])\n\
    \    }\n    return median(left) + median(right)\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnja6gggj_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbgynvoa_test.go:15:16: undefined: math

    /tmp/tmppbgynvoa_test.go:17:5: undefined: sort

    /tmp/tmppbgynvoa_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmppbgynvoa_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[length/2] + l[length/2-1]) / 2\n    }\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo02pd71f_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpo02pd71f_test.go:18:16: cannot use (l[length / 2] + l[length / 2 - 1])
    / 2 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjri0eb6v_test.go:17:5: undefined: sort

    /tmp/tmpjri0eb6v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpjri0eb6v_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    length := len(l)\n    middle := length / 2\n    if length%2 == 0 {\n    \
    \    return l[middle]\n    }\n    return (l[middle-1] + l[middle]) / 2\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp78z8gi_test.go:15:16: undefined: math

    /tmp/tmpxp78z8gi_test.go:17:5: undefined: sort

    /tmp/tmpxp78z8gi_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmpxp78z8gi_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    n := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    } else {\n        return (l[middle-1] + l[middle]) / 2\n    }\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppii1va62_test.go:17:5: undefined: sort

    /tmp/tmppii1va62_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmppii1va62_test.go:23:16: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt0ebuzyh_test.go:15:16: undefined: math

    /tmp/tmpt0ebuzyh_test.go:17:5: undefined: sort

    /tmp/tmpt0ebuzyh_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpt0ebuzyh_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    return l[middle]\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprg8jc_1i_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmprg8jc_1i_test.go:19:12: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprotop7ba_test.go:17:5: undefined: sort

    /tmp/tmprotop7ba_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmprotop7ba_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzq5wmgb9_test.go:17:5: undefined: sort

    /tmp/tmpzq5wmgb9_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpzq5wmgb9_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[length-1] + l[length/2]) / 2)\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7p5p3grr_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp7p5p3grr_test.go:18:12: cannot use ((l[length - 1] + l[length / 2]) /
    2) (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return (l[(length-1)/2] + l[length/2]) / 2.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3rvrhrbm_test.go:17:5: undefined: sort

    /tmp/tmp3rvrhrbm_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmp3rvrhrbm_test.go:22:12: cannot use (l[(length - 1) / 2] + l[length / 2])
    / 2.0 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpab65xah7_test.go:17:5: undefined: sort

    /tmp/tmpab65xah7_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpab65xah7_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprotop7ba_test.go:17:5: undefined: sort

    /tmp/tmprotop7ba_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmprotop7ba_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzwyoa3vy_test.go:17:5: undefined: sort

    /tmp/tmpzwyoa3vy_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpzwyoa3vy_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2.0 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpab65xah7_test.go:17:5: undefined: sort

    /tmp/tmpab65xah7_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpab65xah7_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Ints(l)\n\
    \    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return (l[length/2] + l[length/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpegpm3ctk_test.go:15:16: undefined: math

    /tmp/tmpegpm3ctk_test.go:17:5: undefined: sort

    /tmp/tmpegpm3ctk_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpegpm3ctk_test.go:22:12: cannot use (l[length / 2] + l[length / 2 - 1])
    / 2 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.IntSlice(l))\n\
    \    n := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31d3cfh5_test.go:17:5: undefined: sort

    /tmp/tmp31d3cfh5_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp31d3cfh5_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2-1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ivf4f0v_test.go:15:16: undefined: math

    /tmp/tmp8ivf4f0v_test.go:17:5: undefined: sort

    /tmp/tmp8ivf4f0v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp8ivf4f0v_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    return l[len(l)/2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplauk56z__test.go:15:16: undefined: math

    /tmp/tmplauk56z__test.go:17:5: undefined: sort

    /tmp/tmplauk56z__test.go:18:12: cannot use l[len(l) / 2] (variable of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    middle\
    \ := n/2\n    return float64(l[middle-1] + l[middle])/2\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp71cz89gr_test.go:15:16: undefined: math

    /tmp/tmp71cz89gr_test.go:17:5: undefined: sort

    /tmp/tmp71cz89gr_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    middle\
    \ := n / 2\n    return l[middle]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcfn1hz3h_test.go:15:16: undefined: math

    /tmp/tmpcfn1hz3h_test.go:17:5: undefined: sort

    /tmp/tmpcfn1hz3h_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpcfn1hz3h_test.go:23:12: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    return l[middle]\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprg8jc_1i_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmprg8jc_1i_test.go:19:12: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    }\n    return (l[middle-1] + l[middle]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5bpbg6js_test.go:17:5: undefined: sort

    /tmp/tmp5bpbg6js_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmp5bpbg6js_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjri0eb6v_test.go:17:5: undefined: sort

    /tmp/tmpjri0eb6v_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpjri0eb6v_test.go:22:12: cannot use (l[n / 2] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    }\n    return (l[middle-1] + l[middle]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4_6cznj4_test.go:17:5: undefined: sort

    /tmp/tmp4_6cznj4_test.go:21:16: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    /tmp/tmp4_6cznj4_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    left := l[0:middle]\n    right := l[middle:]\n\
    \    leftMedian := median(left)\n    rightMedian := median(right)\n    if leftMedian\
    \ > rightMedian {\n        return left\n    } else {\n        return right\n \
    \   }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzk45yxht_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpzk45yxht_test.go:24:16: cannot use left (variable of type []int) as type
    float64 in return statement

    /tmp/tmpzk45yxht_test.go:26:16: cannot use right (variable of type []int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073411
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4u18pjfo_test.go:17:5: undefined: sort

    /tmp/tmp4u18pjfo_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp4u18pjfo_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    return l[len(l)/2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplauk56z__test.go:15:16: undefined: math

    /tmp/tmplauk56z__test.go:17:5: undefined: sort

    /tmp/tmplauk56z__test.go:18:12: cannot use l[len(l) / 2] (variable of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcftu4xfx_test.go:17:5: undefined: sort

    /tmp/tmpcftu4xfx_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpcftu4xfx_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Sort(l)\n\
    \    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return (l[(length-1)/2] + l[(length-1)/2]) / 2\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpds70xt1d_test.go:17:5: undefined: sort

    /tmp/tmpds70xt1d_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpds70xt1d_test.go:22:12: cannot use (l[(length - 1) / 2] + l[(length -
    1) / 2]) / 2 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_e22sc_h_test.go:15:16: undefined: math

    /tmp/tmp_e22sc_h_test.go:17:5: undefined: sort

    /tmp/tmp_e22sc_h_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmp_e22sc_h_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l[len(l)/2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_eq4d_s5_test.go:17:5: undefined: sort

    /tmp/tmp_eq4d_s5_test.go:18:12: cannot use l[len(l) / 2] (variable of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    return l[middle]\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprg8jc_1i_test.go:16:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmprg8jc_1i_test.go:19:12: cannot use l[middle] (variable of type int) as
    type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   return (l[length-1] + l[length/2]) / 2\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcd6fq86f_test.go:17:5: undefined: sort

    /tmp/tmpcd6fq86f_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpcd6fq86f_test.go:22:12: cannot use (l[length - 1] + l[length / 2]) / 2
    (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073413
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   middle := length/2\n    return (l[middle-1] + l[middle])/2\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu1grbafq_test.go:17:5: undefined: sort

    /tmp/tmpu1grbafq_test.go:20:16: cannot use l[(length - 1) / 2] (variable of type
    int) as type float64 in return statement

    /tmp/tmpu1grbafq_test.go:23:12: cannot use (l[middle - 1] + l[middle]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Sort(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2 - 1]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbgynvoa_test.go:15:16: undefined: math

    /tmp/tmppbgynvoa_test.go:17:5: undefined: sort

    /tmp/tmppbgynvoa_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmppbgynvoa_test.go:22:12: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (value
    of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n//\
    \ 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunc median(l []int) float64\
    \ {\n    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Sort(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke32v3jl_test.go:17:5: undefined: sort

    /tmp/tmpke32v3jl_test.go:20:16: cannot use l[n / 2] (variable of type int) as
    type float64 in return statement

    /tmp/tmpke32v3jl_test.go:22:12: cannot use (l[n - 1] + l[n / 2]) / 2 (value of
    type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073409
