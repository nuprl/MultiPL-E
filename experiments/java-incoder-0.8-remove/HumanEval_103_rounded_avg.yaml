completions: []
language: java
name: HumanEval_103_rounded_avg
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given two positive integers n and m, and your task\
  \ is to compute the\n    // average of the integers from n through m (including\
  \ n and m). \n    // Round the answer to the nearest integer and convert that to\
  \ binary.\n    // If n is greater than m, return -1.\n    // Example:\n    public\
  \ static Union_String_int roundedAvg(int n, int m) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(roundedAvg((1),\
  \ (5)).equals((Union_String_int(\"0b11\"))));\n    assert(roundedAvg((7), (13)).equals((Union_String_int(\"\
  0b1010\"))));\n    assert(roundedAvg((964), (977)).equals((Union_String_int(\"0b1111001010\"\
  ))));\n    assert(roundedAvg((996), (997)).equals((Union_String_int(\"0b1111100100\"\
  ))));\n    assert(roundedAvg((560), (851)).equals((Union_String_int(\"0b1011000010\"\
  ))));\n    assert(roundedAvg((185), (546)).equals((Union_String_int(\"0b101101110\"\
  ))));\n    assert(roundedAvg((362), (496)).equals((Union_String_int(\"0b110101101\"\
  ))));\n    assert(roundedAvg((350), (902)).equals((Union_String_int(\"0b1001110010\"\
  ))));\n    assert(roundedAvg((197), (233)).equals((Union_String_int(\"0b11010111\"\
  ))));\n    assert(roundedAvg((7), (5)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5),\
  \ (1)).equals((Union_String_int(-1))));\n    assert(roundedAvg((5), (5)).equals((Union_String_int(\"\
  0b101\"))));\n    }\n\n}\n"
