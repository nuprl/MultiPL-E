completions: []
language: java
name: HumanEval_88_sort_array
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array of non-negative integers, return a copy of\
  \ the given array after sorting,\n    // you will sort the given array in ascending\
  \ order if the sum( first index value, last index value) is odd,\n    // or sort\
  \ it in descending order if the sum( first index value, last index value) is even.\n\
  \    // Note:\n    // * don't change the given array.\n    // Examples:\n    public\
  \ static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(sortArray((new\
  \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
  \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
  \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
  \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
  \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)21,\
  \ (int)14, (int)23, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)23,\
  \ (int)21, (int)14, (int)11)))));\n    }\n\n}\n"
