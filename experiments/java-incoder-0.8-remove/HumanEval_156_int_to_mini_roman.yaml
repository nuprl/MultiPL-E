completions: []
language: java
name: HumanEval_156_int_to_mini_roman
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num\
  \ <= 1000\n    // Examples:\n    public static String intToMiniRoman(int number)\
  \ {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(intToMiniRoman((19)).equals((\"\
  xix\")));\n    assert(intToMiniRoman((152)).equals((\"clii\")));\n    assert(intToMiniRoman((251)).equals((\"\
  ccli\")));\n    assert(intToMiniRoman((426)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500)).equals((\"\
  d\")));\n    assert(intToMiniRoman((1)).equals((\"i\")));\n    assert(intToMiniRoman((4)).equals((\"\
  iv\")));\n    assert(intToMiniRoman((43)).equals((\"xliii\")));\n    assert(intToMiniRoman((90)).equals((\"\
  xc\")));\n    assert(intToMiniRoman((94)).equals((\"xciv\")));\n    assert(intToMiniRoman((532)).equals((\"\
  dxxxii\")));\n    assert(intToMiniRoman((900)).equals((\"cm\")));\n    assert(intToMiniRoman((994)).equals((\"\
  cmxciv\")));\n    assert(intToMiniRoman((1000)).equals((\"m\")));\n    }\n\n}\n"
