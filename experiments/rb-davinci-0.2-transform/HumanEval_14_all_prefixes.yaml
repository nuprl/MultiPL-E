name: HumanEval_14_all_prefixes
language: rb
prompt: "# Return list of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes.call(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\ndef all_prefixes(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
  \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\"\
  ))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"],\
  \ candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
  WWW\"))\n  end\nend\n"
completions: ["  (1..string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  (1..string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  (1..string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map{|i|\
    \ string[0..i-1]}\nend", "  (1..string.length).map { |i| string[0, i] }\nend",
  "  (1..string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  (1..string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  (1..string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
