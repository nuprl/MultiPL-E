name: HumanEval_43_pairs_sum_to_zero
language: rb
prompt: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns True\
  \ if there are two distinct elements in the list that\n# sum to zero, and False\
  \ otherwise.\n# >>> pairs_sum_to_zero.call([1, 3, 5, 0])\n# false\n# >>> pairs_sum_to_zero.call([1,\
  \ 3, -2, 1])\n# false\n# >>> pairs_sum_to_zero.call([1, 2, 3, 7])\n# false\n# >>>\
  \ pairs_sum_to_zero.call([2, 4, -5, 3, 5, 7])\n# true\n# >>> pairs_sum_to_zero.call([1])\n\
  # false\ndef pairs_sum_to_zero(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
  \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
  \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
  \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5,\
  \ 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
  \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
  \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))\n\
  \    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\nend\n"
completions: ["  # TODO: implement me\nend", "  l.each_with_index do |num, i|\n  \
    \  l.each_with_index do |num2, j|\n      if num + num2 == 0 && i != j\n      \
    \  return true\n      end\n    end\n  end\n  return false\nend", "  # your code\
    \ here\nend", "  l.each_with_index do |num1, i|\n    l.each_with_index do |num2,\
    \ j|\n      if i != j && num1 + num2 == 0\n        return true\n      end\n  \
    \  end\n  end\n  return false\nend", "  # TODO: implement this function\nend",
  "  l.each_with_index do |num1, i|\n    l.each_with_index do |num2, j|\n      return\
    \ true if num1 + num2 == 0 && i != j\n    end\n  end\n  false\nend", "  l.each\
    \ do |i|\n    l.each do |j|\n      if i != j && i + j == 0\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "  l.each_with_index do |x,\
    \ i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n       \
    \ return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if x + y == 0 && i != j\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # YOUR\
    \ CODE HERE\nend", "  # your code here\nend", "  l.each_with_index do |num1, index1|\n\
    \    l.each_with_index do |num2, index2|\n      if index1 != index2 && num1 +\
    \ num2 == 0\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  # your code here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  # TODO: implement this function\n  #\
    \ return true if there are two distinct elements in the list that\n  # sum to\
    \ zero, and false otherwise\n  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  # YOUR CODE HERE\nend", "  # your code\
    \ here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n\
    \      if i != j && x + y == 0\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do\
    \ |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  # your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
