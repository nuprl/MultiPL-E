name: HumanEval_43_pairs_sum_to_zero
language: rb
prompt: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns True\
  \ if there are two distinct elements in the list that\n# sum to zero, and False\
  \ otherwise.\n# >>> pairs_sum_to_zero.call([1, 3, 5, 0])\n# false\n# >>> pairs_sum_to_zero.call([1,\
  \ 3, -2, 1])\n# false\n# >>> pairs_sum_to_zero.call([1, 2, 3, 7])\n# false\n# >>>\
  \ pairs_sum_to_zero.call([2, 4, -5, 3, 5, 7])\n# true\n# >>> pairs_sum_to_zero.call([1])\n\
  # false\ndef pairs_sum_to_zero(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
  \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
  \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
  \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5,\
  \ 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
  \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
  \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))\n\
  \    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\nend\n"
completions: ["  # TODO: implement me\nend", "  l.each_with_index do |num, i|\n  \
    \  l.each_with_index do |num2, j|\n      if num + num2 == 0 && i != j\n      \
    \  return true\n      end\n    end\n  end\n  return false\nend", "  # your code\
    \ here\nend", "  l.each_with_index do |num1, i|\n    l.each_with_index do |num2,\
    \ j|\n      if i != j && num1 + num2 == 0\n        return true\n      end\n  \
    \  end\n  end\n  return false\nend", "  # TODO: implement this function\nend",
  "  l.each_with_index do |num1, i|\n    l.each_with_index do |num2, j|\n      return\
    \ true if num1 + num2 == 0 && i != j\n    end\n  end\n  false\nend", "  l.each\
    \ do |i|\n    l.each do |j|\n      if i != j && i + j == 0\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "  l.each_with_index do |x,\
    \ i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n       \
    \ return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if x + y == 0 && i != j\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # YOUR\
    \ CODE HERE\nend", "  # your code here\nend", "  l.each_with_index do |num1, index1|\n\
    \    l.each_with_index do |num2, index2|\n      if index1 != index2 && num1 +\
    \ num2 == 0\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  # your code here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  # TODO: implement this function\n  #\
    \ return true if there are two distinct elements in the list that\n  # sum to\
    \ zero, and false otherwise\n  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  # YOUR CODE HERE\nend", "  # your code\
    \ here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n\
    \      if i != j && x + y == 0\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do\
    \ |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  # your code here\nend", "  # your code here\n\
    end", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if\
    \ i != j && x + y == 0\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  # your code here\nend", "  l.each_with_index do |num, index|\n\
    \    l.each_with_index do |num2, index2|\n      if index2 > index\n        return\
    \ true if num + num2 == 0\n      end\n    end\n  end\n  false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  # YOUR CODE HERE\nend", "  # your code here\n\
    end", "  # TODO: implement me\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  l.each_with_index do |num, i|\n  \
    \  l.each_with_index do |num2, j|\n      if i != j && num + num2 == 0\n      \
    \  return true\n      end\n    end\n  end\n  return false\nend", "  i = 0\n  while\
    \ i < l.length\n    j = i + 1\n    while j < l.length\n      if l[i] + l[j] ==\
    \ 0\n        return true\n      end\n      j += 1\n    end\n    i += 1\n  end\n\
    \  return false\nend", "  # TODO: implement this function\nend", "  # your code\
    \ here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n\
    \      return true if x + y == 0 && i != j\n    end\n  end\n  false\nend", " \
    \ # TODO: implement this method\n  l.each_with_index do |e, i|\n    l.each_with_index\
    \ do |e2, j|\n      if e + e2 == 0 && i != j\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  # your code here\nend", "  # TODO: implement\
    \ this function\n  # return true if there are two distinct elements in the list\
    \ that\n  # sum to zero, and false otherwise.\n  # Hint: you can use the `in?`\
    \ method to check if an element is in a list.\n  #       for example, `1.in?([1,\
    \ 2, 3])` returns `true`.\n  #       `4.in?([1, 2, 3])` returns `false`.\n  #\
    \ Hint: you can use the `each_with_index` method to iterate over a list\n  # \
    \      and get the index of each element.\n  #       for example, `[1, 2, 3].each_with_index\
    \ do |e, i| puts i end`\n  #       prints out `0`, then `1`, then `2`.\n  # Hint:\
    \ you can use the `each` method to iterate over a list\n  #       and get each\
    \ element.\n  #       for example, `[1, 2, 3].each do |e| puts e end`\n  #   \
    \    prints out `1`, then `2`, then `3`.\n  # Hint: you can use the `each_with_index`\
    \ method to iterate over a list\n  #       and get the index of each element.\n\
    \  #       for example, `[1, 2, 3].each_with_index do |e, i| puts i end`\n  #\
    \       prints out `0`, then `1`, then `2`.\n  # Hint: you can use the `each`\
    \ method to iterate over a list\n  #       and get each element.\n  #       for\
    \ example, `[1, 2, 3].each do |e| puts e end`\n  #       prints out `1`, then\
    \ `2`, then `3`.\n  # Hint: you can use the `each_with_index` method to iterate\
    \ over a list\n  #       and get the index of each element.\n  #       for example,\
    \ `[1, 2, 3].each_with_index do |e, i| puts i end`\n  #       prints out `0`,\
    \ then `1`, then `2`.\n  # Hint: you can use the `each` method to iterate over",
  "  # your code here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  l.each_with_index do |num, index|\n \
    \   l.each_with_index do |num2, index2|\n      if index2 > index && num + num2\
    \ == 0\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  l.each_with_index do |num, i|\n    l.each_with_index do |num2, j|\n      if i\
    \ != j && num + num2 == 0\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  # your code here\nend", "  # Write your code here.\nend", " \
    \ l.each_with_index do |num, index|\n    l.each_with_index do |num2, index2|\n\
    \      if index != index2 && num + num2 == 0\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  l.each_with_index do |num, i|\n    l.each_with_index\
    \ do |num2, j|\n      if i != j && num + num2 == 0\n        return true\n    \
    \  end\n    end\n  end\n  return false\nend", "  l.each do |x|\n    l.each do\
    \ |y|\n      if x != y && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n\
    \      return true if i != j && x + y == 0\n    end\n  end\n  false\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  l.each_with_index do |x,\
    \ i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n       \
    \ return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      return true if (x + y == 0)\
    \ && (i != j)\n    end\n  end\n  false\nend", "  for i in 0..l.length-1\n    for\
    \ j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return true\n     \
    \ end\n    end\n  end\n  return false\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  l.each do |x|\n    l.each do\
    \ |y|\n      if x != y && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  # your code here\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "  l.each_with_index do |num1,\
    \ index1|\n    l.each_with_index do |num2, index2|\n      if index1 != index2\
    \ && num1 + num2 == 0\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n\
    \      if i != j && x + y == 0\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  # TODO: implement this function\nend", "  # your code\
    \ here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n\
    \      if x + y == 0 && i != j\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do\
    \ |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  # YOUR CODE HERE\nend", "  l.each_with_index\
    \ do |e, i|\n    l.each_with_index do |e2, j|\n      if i != j && e + e2 == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # TODO:\
    \ implement this function\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  l.each_with_index do |e, i|\n    l.each_with_index\
    \ do |e2, j|\n      if i != j && e + e2 == 0\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  # TODO: implement me\nend", "  # your\
    \ code here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      return true if x + y == 0 && i != j\n    end\n  end\n  false\n\
    end", "  l.each_with_index do |num, i|\n    l.each_with_index do |num2, j|\n \
    \     if i != j && num + num2 == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  l.each_with_index do |num, i|\n    l.each_with_index\
    \ do |num2, j|\n      if i != j && num + num2 == 0\n        return true\n    \
    \  end\n    end\n  end\n  return false\nend", "  # TODO: implement this function\n\
    \  # if l.length < 2\n  #   return false\n  # end\n  #\n  # l.each do |i|\n  #\
    \   l.each do |j|\n  #     if i + j == 0 && i != j\n  #       return true\n  #\
    \     end\n  #   end\n  # end\n  #\n  # return false", "  l.each_with_index do\
    \ |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n   \
    \     return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  l.each do |x|\n    l.each do\
    \ |y|\n      if x != y && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  l.each_with_index do |num, index|\n    l.each_with_index\
    \ do |num2, index2|\n      if index != index2\n        if num + num2 == 0\n  \
    \        return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if\
    \ i != j && x + y == 0\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  l.each_with_index do |num, i|\n    l.each_with_index do |num2,\
    \ j|\n      if i != j && num + num2 == 0\n        return true\n      end\n   \
    \ end\n  end\n  return false\nend", "  l.each_with_index do |num, i|\n    l.each_with_index\
    \ do |num2, j|\n      if i != j && num + num2 == 0\n        return true\n    \
    \  end\n    end\n  end\n  return false\nend", "  l.each_with_index do |num, i|\n\
    \    l.each_with_index do |num2, j|\n      if i != j && num + num2 == 0\n    \
    \    return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |n, i|\n    l.each_with_index do |m, j|\n      if i != j && n + m == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  # TODO: implement this function\nend", "  # TODO: implement\
    \ this function\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do\
    \ |y, j|\n      return true if x + y == 0 && i != j\n    end\n  end\n  false\n\
    end", "  # TODO: implement this function\n  l.each do |i|\n    l.each do |j|\n\
    \      if i + j == 0\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  if l.length < 2\n    return false\n  end\n  l.each do |i|\n\
    \    l.each do |j|\n      if i != j && i + j == 0\n        return true\n     \
    \ end\n    end\n  end\n  return false\nend", "  # TODO: implement this function\n\
    end", "  # TODO: implement this function\n  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  l.each_with_index do |num, index|\n \
    \   l.each_with_index do |num2, index2|\n      if index != index2 && num + num2\
    \ == 0\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if i != j\
    \ && x + y == 0\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  # TODO: implement this function\n  # Hint: use the any? function\n  #\
    \ Hint: use the any? function\n  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  # TODO: implement this function\n  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  l.each_with_index do |e, i|\n    l.each_with_index do |e2,\
    \ j|\n      if i != j && e + e2 == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  l.each do |x|\n    l.each do |y|\n      if x\
    \ != y && x + y == 0\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  # your code here\nend", "  # your code here\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  # TODO: implement me\nend", "  # your\
    \ code here\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |e, i|\n    l.each_with_index do |e2, j|\n      if i != j && e + e2 == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  # TODO: implement this function\nend", "  l.each_with_index\
    \ do |num, i|\n    l.each_with_index do |num2, j|\n      if i != j && num + num2\
    \ == 0\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if i != j\
    \ && x + y == 0\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  # your code here\nend", "  l.each_with_index do |num, index|\n    l.each_with_index\
    \ do |num2, index2|\n      if index != index2\n        if num + num2 == 0\n  \
    \        return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if\
    \ i != j && x + y == 0\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  # your code here\nend", "  l.each_with_index do |x, i|\n   \
    \ l.each_with_index do |y, j|\n      return true if x + y == 0 && i != j\n   \
    \ end\n  end\n  false\nend", "  # TODO: implement me\nend", "  # your code here\n\
    end", "  # your code here\nend", "  l.each_with_index do |num, i|\n    l.each_with_index\
    \ do |num2, j|\n      if i != j && num + num2 == 0\n        return true\n    \
    \  end\n    end\n  end\n  return false\nend", "  # TODO: implement this function\n\
    end", "  # your code here\nend", "  # your code here\nend", "  l.each_with_index\
    \ do |e, i|\n    l.each_with_index do |f, j|\n      if i != j && e + f == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  l.each_with_index do |x, i|\n\
    \    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  # your code here\nend", "  if l.length < 2\n\
    \    return false\n  end\n  l.each_with_index do |e, i|\n    l.each_with_index\
    \ do |f, j|\n      if i != j and e + f == 0\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # YOUR CODE HERE\n  # l.each_with_index\
    \ do |x,i|\n  #   l.each_with_index do |y,j|\n  #     if (x+y == 0) && (i != j)\n\
    \  #       return true\n  #     end\n  #   end\n  # end\n  # return false\n  l.each_with_index\
    \ do |x,i|\n    l.each_with_index do |y,j|\n      if (x+y == 0) && (i != j)\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  l.each_with_index do |num1, i|\n    l.each_with_index\
    \ do |num2, j|\n      if num1 + num2 == 0 && i != j\n        return true\n   \
    \   end\n    end\n  end\n  return false\nend", "  l.each_with_index do |num1,\
    \ i|\n    l.each_with_index do |num2, j|\n      if i != j && num1 + num2 == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |n, i|\n    l.each_with_index do |m, j|\n      if n + m == 0 && i != j\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |num, i|\n    l.each_with_index do |num2, j|\n      if i != j && num + num2\
    \ == 0\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      return true\
    \ if x + y == 0 && i != j\n    end\n  end\n  false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if i != j && x + y == 0\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  l.each_with_index do |num, i|\n    l.each_with_index\
    \ do |num2, j|\n      if i != j && num + num2 == 0\n        return true\n    \
    \  end\n    end\n  end\n  return false\nend", "  # your code here\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      return true if x + y == 0\
    \ && i != j\n    end\n  end\n  false\nend", "  l.each_with_index do |x, i|\n \
    \   l.each_with_index do |y, j|\n      if i != j && x + y == 0\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |e, i|\n    l.each_with_index do |e2, j|\n      if i != j && e + e2 == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  if l.length == 0\n    return false\n  end\n  l.each\
    \ do |x|\n    if l.include?(-x) && x != 0\n      return true\n    end\n  end\n\
    \  return false\nend", "  l.each_with_index do |num, index|\n    l.each_with_index\
    \ do |num2, index2|\n      if num + num2 == 0 && index != index2\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |e, i|\n    l.each_with_index do |e2, j|\n      if i != j && e + e2 == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if x + y == 0 && i != j\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y,\
    \ j|\n      if (x + y == 0) && (i != j)\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  l.each_with_index do |num, index|\n    l.each_with_index\
    \ do |num2, index2|\n      if index != index2 && num + num2 == 0\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # TODO:\
    \ implement this function\nend", "  l.each_with_index do |num, index|\n    l.each_with_index\
    \ do |num2, index2|\n      if index != index2 && num + num2 == 0\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # TODO: implement me\nend", "  l.each_with_index\
    \ do |num, i|\n    l.each_with_index do |num2, j|\n      if i != j && num + num2\
    \ == 0\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  # YOUR CODE HERE\nend", "  # TODO: implement\
    \ this function\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
