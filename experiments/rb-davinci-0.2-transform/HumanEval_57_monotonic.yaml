name: HumanEval_57_monotonic
language: rb
prompt: "# Return True is list elements are monotonically increasing or decreasing.\n\
  # >>> monotonic.call([1, 2, 4, 20])\n# true\n# >>> monotonic.call([1, 20, 4, 10])\n\
  # false\n# >>> monotonic.call([4, 1, 0, -10])\n# true\ndef monotonic(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
  \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2,\
  \ 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
  \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
  \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
  \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
  \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
  end\n"
completions: ["  return true if l.length < 2\n  return l[0] < l[1] ? monotonic_increasing(l)\
    \ : monotonic_decreasing(l)\nend", "  l.each_cons(2).all? { |a, b| a < b } ||\
    \ l.each_cons(2).all? { |a, b| a > b }\nend", "  return true if l.length <= 1\n\
    \  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if l[i]\
    \ < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return false\
    \ if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true if l.length <=\
    \ 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if l[0] <= l[1]\n  return\
    \ l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >= l[1]\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if\
    \ l[0] <= l[1]\n  return l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >=\
    \ l[1]\nend", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ monotonic_increasing(l) || monotonic_decreasing(l)\nend", "  return true if\
    \ l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true\
    \ if l.length < 2\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if l[0]\
    \ <= l[1]\n  return l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >= l[1]\n\
    end", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.size <= 1\n  if l[0] < l[1]\n    (0..l.size-2).each do |i|\n\
    \      return false if l[i] > l[i+1]\n    end\n  else\n    (0..l.size-2).each\
    \ do |i|\n      return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", " \
    \ l.each_cons(2).all? { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b\
    \ }\nend", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] < l[1] ? monotonic(l[1..-1]) : monotonic(l[0..-2])\nend", "  return true\
    \ if l.length <= 1\n  if l[0] < l[1]\n    (0..l.length-2).each do |i|\n      return\
    \ false if l[i] > l[i+1]\n    end\n  else\n    (0..l.length-2).each do |i|\n \
    \     return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", "  return false\
    \ if l.length < 2\n  if l[0] < l[1]\n    (0..l.length-2).each do |i|\n      return\
    \ false if l[i] > l[i+1]\n    end\n  else\n    (0..l.length-2).each do |i|\n \
    \     return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", "  if l.sort\
    \ == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n\
    \    return false\n  end\nend", "  return true if l.length <= 1\n  if l[0] < l[1]\n\
    \    (0..l.length-2).each do |i|\n      return false if l[i] > l[i+1]\n    end\n\
    \  else\n    (0..l.length-2).each do |i|\n      return false if l[i] < l[i+1]\n\
    \    end\n  end\n  true\nend", "  return true if l.length <= 1\n  return l[0]\
    \ <= l[1] ? monotonic(l[1..-1]) : false if l[0] <= l[1]\n  return l[0] >= l[1]\
    \ ? monotonic(l[1..-1]) : false if l[0] >= l[1]\nend", "  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (0..l.length-2).each do |i|\n      return false\
    \ if l[i] > l[i+1]\n    end\n  else\n    (0..l.length-2).each do |i|\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
