name: HumanEval_10_make_palindrome
language: rb
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome.call(\"\")\n# \"\"\n# >>> make_palindrome.call(\"\
  cat\")\n# \"catac\"\n# >>> make_palindrome.call(\"cata\")\n# \"catac\"\ndef make_palindrome(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n\
  \    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\"\
  , candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n\
  \    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n"
completions: ["  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[0..-3].reverse if string.length\
    \ == 3\n  return string + string[0..-4].reverse if string.length == 4\n  return\
    \ string + string[0..-5].reverse if string.length == 5\n  return string + string[0..-6].reverse\
    \ if string.length == 6\n  return string + string[0..-7].reverse if string.length\
    \ == 7\n  return string + string[0..-8].reverse if string.length == 8\n  return\
    \ string + string[0..-9].reverse if string.length == 9\n  return string + string[0..-10].reverse\
    \ if string.length == 10\n  return string + string[0..-11].reverse if string.length\
    \ == 11\n  return string + string[0..-12].reverse if string.length == 12\n  return\
    \ string + string[0..-13].reverse if string.length == 13\n  return string + string[0..-14].reverse\
    \ if string.length == 14\n  return string + string[0..-15].reverse if string.length\
    \ == 15\n  return string + string[0..-16].reverse if string.length == 16\n  return\
    \ string + string[0..-17].reverse if string.length == 17\n  return string + string[0..-18].reverse\
    \ if string.length == 18\n  return string + string[0..-19].reverse if string.length\
    \ == 19\n  return string + string[0..-20].reverse if string.length == 20\n  return\
    \ string + string[0..-21].reverse if string.length == 21\n  return string + string[0..-22].reverse\
    \ if string.length == 22\n  return string + string[0..-23].reverse if string.length\
    \ == 23\n  return string + string[0..-24].reverse if string.length == 24\n  return\
    \ string + string[0..-25].reverse if string.length == 25\n  return string + string[0..-26].reverse\
    \ if string.length == 26\n  return string + string[0..-27].reverse if string.length\
    \ == 27\n  return string + string[0..-28].reverse", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2\n  return string\
    \ + string[1..-1].reverse if string.length == 3", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.size == 0\n  return string + string.reverse if string.size == 1\n\
    \  return string + string[1..-1].reverse if string.size == 2", "  string + string[0..find_longest_palindrome_suffix(string)].reverse\n\
    end", "  return string if string.length <= 1\n  longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \  string + string[0..-longest_palindrome_suffix.length-1].reverse\nend", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[0..-3].reverse if string.length == 3\n  return\
    \ string + string[0..-4].reverse if string.length == 4\n  return string + string[0..-5].reverse\
    \ if string.length == 5\n  return string + string[0..-6].reverse if string.length\
    \ == 6\n  return string + string[0..-7].reverse if string.length == 7\n  return\
    \ string + string[0..-8].reverse if string.length == 8\n  return string + string[0..-9].reverse\
    \ if string.length == 9\n  return string + string[0..-10].reverse if string.length\
    \ == 10\n  return string + string[0..-11].reverse if string.length == 11\n  return\
    \ string + string[0..-12].reverse if string.length == 12\n  return string + string[0..-13].reverse\
    \ if string.length == 13\n  return string + string[0..-14].reverse if string.length\
    \ == 14\n  return string + string[0..-15].reverse if string.length == 15\n  return\
    \ string + string[0..-16].reverse if string.length == 16\n  return string + string[0..-17].reverse\
    \ if string.length == 17\n  return string + string[0..-18].reverse if string.length\
    \ == 18\n  return string + string[0..-19].reverse if string.length == 19\n  return\
    \ string + string[0..-20].reverse if string.length == 20\n  return string + string[0..-21].reverse\
    \ if string.length == 21\n  return string + string[0..-22].reverse if string.length\
    \ == 22\n  return string + string[0..-23].reverse if string.length == 23\n  return\
    \ string + string[0..-24].reverse if string.length == 24\n  return string + string[0..-25].reverse\
    \ if string.length == 25\n  return string + string[0..-26].reverse if string.length\
    \ == 26\n  return string + string[0..-27].reverse if string.length == 27\n  return\
    \ string + string[0..-28].reverse", "  return string if string.length <= 1\n \
    \ string + string[0..find_longest_palindrome_suffix(string)].reverse\nend", " \
    \ return string if string.length <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0..-(longest_palindrome_suffix.length + 1)].reverse\nend",
  "  return string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[0..-3].reverse if string.length == 3\n  return\
    \ string + string[0..-4].reverse if string.length == 4\n  return string + string[0..-5].reverse\
    \ if string.length == 5\n  return string + string[0..-6].reverse if string.length\
    \ == 6\n  return string + string[0..-7].reverse if string.length == 7\n  return\
    \ string + string[0..-8].reverse if string.length == 8\n  return string + string[0..-9].reverse\
    \ if string.length == 9\n  return string + string[0..-10].reverse if string.length\
    \ == 10\n  return string + string[0..-11].reverse if string.length == 11\n  return\
    \ string + string[0..-12].reverse if string.length == 12\n  return string + string[0..-13].reverse\
    \ if string.length == 13\n  return string + string[0..-14].reverse if string.length\
    \ == 14\n  return string + string[0..-15].reverse if string.length == 15\n  return\
    \ string + string[0..-16].reverse if string.length == 16\n  return string + string[0..-17].reverse\
    \ if string.length == 17\n  return string + string[0..-18].reverse if string.length\
    \ == 18\n  return string + string[0..-19].reverse if string.length == 19\n  return\
    \ string + string[0..-20].reverse if string.length == 20\n  return string + string[0..-21].reverse\
    \ if string.length == 21\n  return string + string[0..-22].reverse if string.length\
    \ == 22\n  return string + string[0..-23].reverse if string.length == 23\n  return\
    \ string + string[0..-24].reverse if string.length == 24\n  return string + string[0..-25].reverse\
    \ if string.length == 25\n  return string + string[0..-26].reverse if string.length\
    \ == 26\n  return string + string[0..-27].reverse if string.length == 27\n  return\
    \ string + string[0..-28].reverse", "  string.reverse + string[0...-longest_palindrome_suffix(string)]\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[0..-3].reverse if string.length\
    \ == 3\n  return string + string[0..-4].reverse if string.length == 4\n  return\
    \ string + string[0..-5].reverse if string.length == 5\n  return string + string[0..-6].reverse\
    \ if string.length == 6\n  return string + string[0..-7].reverse if string.length\
    \ == 7\n  return string + string[0..-8].reverse if string.length == 8\n  return\
    \ string + string[0..-9].reverse if string.length == 9\n  return string + string[0..-10].reverse\
    \ if string.length == 10\n  return string + string[0..-11].reverse if string.length\
    \ == 11\n  return string + string[0..-12].reverse if string.length == 12\n  return\
    \ string + string[0..-13].reverse if string.length == 13\n  return string + string[0..-14].reverse\
    \ if string.length == 14\n  return string + string[0..-15].reverse if string.length\
    \ == 15\n  return string + string[0..-16].reverse if string.length == 16\n  return\
    \ string + string[0..-17].reverse if string.length == 17\n  return string + string[0..-18].reverse\
    \ if string.length == 18\n  return string + string[0..-19].reverse if string.length\
    \ == 19\n  return string + string[0..-20].reverse if string.length == 20\n  return\
    \ string + string[0..-21].reverse if string.length == 21\n  return string + string[0..-22].reverse\
    \ if string.length == 22\n  return string + string[0..-23].reverse if string.length\
    \ == 23\n  return string + string[0..-24].reverse if string.length == 24\n  return\
    \ string + string[0..-25].reverse if string.length == 25\n  return string + string[0..-26].reverse\
    \ if string.length == 26\n  return string + string[0..-27].reverse if string.length\
    \ == 27\n  return string + string[0..-28].reverse", "  return string if string.length\
    \ <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string_prefix = string[0..-longest_palindrome_suffix.length - 1]\n  string_prefix.reverse\
    \ + string\nend", "  return string if string.length == 0\n  longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n  string + string[0..-longest_palindrome_suffix.length-1].reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  palindrome_suffix\
    \ = find_palindrome_suffix(string)\n  string + reverse(string[0..(string.length\
    \ - palindrome_suffix.length - 1)])\nend", "  return string if string.length <=\
    \ 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n  string\
    \ + string[0..-(longest_palindrome_suffix.length + 1)].reverse\nend", "  return\
    \ string if string.length == 0\n  return string + string.reverse if string.length\
    \ == 1\n  return string + string[1..-1].reverse if string.length == 2\n  return\
    \ string + string[2..-1].reverse if string[0..1] == string[-2..-1]", '  return
    string if string.empty?', "  return string if string.length <= 1\n  palindrome_suffix\
    \ = find_palindrome_suffix(string)\n  string + reverse(string[0..(string.length\
    \ - palindrome_suffix.length - 1)])\nend", "  return string if string.length <=\
    \ 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.empty?\n  return string + string.reverse if string.length == 1\n \
    \ return string + string[1..-1].reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2\n  return string + string[0..-3].reverse if string.length == 3\n  return string\
    \ + string[0..-4].reverse if string.length == 4", "  return string if string.length\
    \ == 0\n  return string + string.reverse if string.length == 1\n  return string\
    \ + string[1..-1].reverse if string.length == 2", "  return string if string.length\
    \ < 2\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0..-longest_palindrome_suffix.length-1].reverse\nend", "  return\
    \ string if string.length <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0...(string.length - longest_palindrome_suffix.length)].reverse\n\
    end", "  return string if string.length < 2\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3\n  return string + string[2..-1].reverse if string.length\
    \ == 4", "  return string if string.size <= 1\n  return string + string.reverse\
    \ if string.size == 2\n  return string + string[1..-1].reverse if string.size\
    \ == 3\n  return string + string[2..-1].reverse if string.size == 4\n  return\
    \ string + string[3..-1].reverse if string.size == 5\n  return string + string[4..-1].reverse\
    \ if string.size == 6\n  return string + string[5..-1].reverse if string.size\
    \ == 7\n  return string + string[6..-1].reverse if string.size == 8\n  return\
    \ string + string[7..-1].reverse if string.size == 9\n  return string + string[8..-1].reverse\
    \ if string.size == 10\n  return string + string[9..-1].reverse if string.size\
    \ == 11\n  return string + string[10..-1].reverse if string.size == 12\n  return\
    \ string + string[11..-1].reverse if string.size == 13\n  return string + string[12..-1].reverse\
    \ if string.size == 14\n  return string + string[13..-1].reverse if string.size\
    \ == 15\n  return string + string[14..-1].reverse if string.size == 16\n  return\
    \ string + string[15..-1].reverse if string.size == 17\n  return string + string[16..-1].reverse\
    \ if string.size == 18\n  return string + string[17..-1].reverse if string.size\
    \ == 19\n  return string + string[18..-1].reverse if string.size == 20\n  return\
    \ string + string[19..-1].reverse if string.size == 21\n  return string + string[20..-1].reverse\
    \ if string.size == 22\n  return string + string[21..-1].reverse if string.size\
    \ == 23\n  return string + string[22..-1].reverse if string.size == 24\n  return\
    \ string + string[23..-1].reverse if string.size == 25\n  return string + string[24..-1].reverse\
    \ if string.size == 26\n  return string + string[25..-1].reverse if string.size\
    \ == 27\n  return string + string[26..-1].reverse", "  return string if string.length\
    \ == 0\n  return string + string.reverse if string.length == 1\n  return string\
    \ + string[1..-1].reverse if string.length == 2\n  return string + string[2..-1].reverse\
    \ if string[0..1] == string[-2..-1]\n  return string + string[3..-1].reverse if\
    \ string[0..2] == string[-3..-1]\n  return string + string[4..-1].reverse if string[0..3]\
    \ == string[-4..-1]\n  return string + string[5..-1].reverse if string[0..4] ==\
    \ string[-5..-1]\n  return string + string[6..-1].reverse if string[0..5] == string[-6..-1]\n\
    \  return string + string[7..-1].reverse if string[0..6] == string[-7..-1]\n \
    \ return string + string[8..-1].reverse if string[0..7] == string[-8..-1]\n  return\
    \ string + string[9..-1].reverse if string[0..8] == string[-9..-1]\n  return string\
    \ + string[10..-1].reverse if string[0..9] == string[-10..-1]\n  return string\
    \ + string[11..-1].reverse if string[0..10] == string[-11..-1]\n  return string\
    \ + string[12..-1].reverse if string[0..11] == string[-12..-1]\n  return string\
    \ + string[13..-1].reverse if string[0..12] == string[-13..-1]\n  return string\
    \ + string[14..-1].reverse if string[0..13] == string[-14..-1]\n  return string\
    \ + string[15..-1].reverse if string[0..14] == string[-15..-1]\n  return string\
    \ + string[16..-1].reverse if string[0..15] == string[-16..-1]\n  return string\
    \ + string[17..-1].reverse if string[0..16] == string[-17..-1]\n  return string\
    \ +", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3\n  return string + string[2..-1].reverse if string.length == 4", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  string + string[0...(string.length - palindrome_suffix_length(string))].reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3", "  return string if string.length == 0\n  return string + string.reverse\
    \ if string.length == 1\n  return string + string[0..-2].reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if is_palindrome?(string)", "  return string if string.length == 0\n  return\
    \ string + string.reverse if string.length == 1\n  return string + string[1..-1].reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3", "  return string if string.length == 0\n  return string\
    \ + string.reverse if string.length == 1\n  return string + string[1..-1].reverse\
    \ if string.length == 2\n  return string + string[2..-1].reverse if string[0]\
    \ == string[-1] && string[1] == string[-2]\n  return string + string[1..-1].reverse\
    \ if string[0] == string[-1]\n  return string + string[2..-1].reverse if string[1]\
    \ == string[-1]\n  return string + string[3..-1].reverse if string[2] == string[-1]\n\
    \  return string + string[4..-1].reverse if string[3] == string[-1]\n  return\
    \ string + string[5..-1].reverse if string[4] == string[-1]\n  return string +\
    \ string[6..-1].reverse if string[5] == string[-1]\n  return string + string[7..-1].reverse\
    \ if string[6] == string[-1]\n  return string + string[8..-1].reverse if string[7]\
    \ == string[-1]\n  return string + string[9..-1].reverse if string[8] == string[-1]\n\
    \  return string + string[10..-1].reverse if string[9] == string[-1]\n  return\
    \ string + string[11..-1].reverse if string[10] == string[-1]\n  return string\
    \ + string[12..-1].reverse if string[11] == string[-1]\n  return string + string[13..-1].reverse\
    \ if string[12] == string[-1]\n  return string + string[14..-1].reverse if string[13]\
    \ == string[-1]\n  return string + string[15..-1].reverse if string[14] == string[-1]\n\
    \  return string + string[16..-1].reverse if string[15] == string[-1]\n  return\
    \ string + string[17..-1].reverse if string[16] == string[-1]\n  return string\
    \ + string[18..-1].reverse if string[17] == string[-1]\n ", "  return string if\
    \ string.length <= 1\n  return string + string.reverse if string.length == 2\n\
    \  return string[0] + string + string[0] if string.length == 3", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2", "  return string if string.empty?\n  return string + string.reverse if string.length\
    \ == 1\n  return string + string[1..-1].reverse if string.length == 2\n  return\
    \ string + string[2..-1].reverse if string[0..1] == string[-2..-1]\n  return string\
    \ + string[3..-1].reverse if string[0..2] == string[-3..-1]\n  return string +\
    \ string[4..-1].reverse if string[0..3] == string[-4..-1]\n  return string + string[5..-1].reverse\
    \ if string[0..4] == string[-5..-1]\n  return string + string[6..-1].reverse if\
    \ string[0..5] == string[-6..-1]\n  return string + string[7..-1].reverse if string[0..6]\
    \ == string[-7..-1]\n  return string + string[8..-1].reverse if string[0..7] ==\
    \ string[-8..-1]\n  return string + string[9..-1].reverse if string[0..8] == string[-9..-1]\n\
    \  return string + string[10..-1].reverse if string[0..9] == string[-10..-1]\n\
    \  return string + string[11..-1].reverse if string[0..10] == string[-11..-1]\n\
    \  return string + string[12..-1].reverse if string[0..11] == string[-12..-1]\n\
    \  return string + string[13..-1].reverse if string[0..12] == string[-13..-1]\n\
    \  return string + string[14..-1].reverse if string[0..13] == string[-14..-1]\n\
    \  return string + string[15..-1].reverse if string[0..14] == string[-15..-1]\n\
    \  return string + string[16..-1].reverse if string[0..15] == string[-16..-1]\n\
    \  return string + string[17..-1].reverse if string[0..16] == string[-17..-1]\n\
    \  return string + string", "  return string if string.length < 2\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3\n  return string + string[2..-1].reverse if string.length\
    \ == 4", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[0..-3].reverse if string.length\
    \ == 3\n  return string + string[0..-4].reverse if string.length == 4", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[0..-3].reverse if string.length == 3", "  return\
    \ string if string.length <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0..-longest_palindrome_suffix.length-1].reverse\nend", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[0..-3].reverse if string.length == 3\n  return\
    \ string + string[0..-3].reverse if string[-3..-1] == string[-3..-1].reverse\n\
    \  return string + string[0..-2].reverse if string[-2..-1] == string[-2..-1].reverse\n\
    \  return string + string[0..-4].reverse if string[-4..-1] == string[-4..-1].reverse\n\
    \  return string + string[0..-5].reverse if string[-5..-1] == string[-5..-1].reverse\n\
    \  return string + string[0..-6].reverse if string[-6..-1] == string[-6..-1].reverse\n\
    \  return string + string[0..-7].reverse if string[-7..-1] == string[-7..-1].reverse\n\
    \  return string + string[0..-8].reverse if string[-8..-1] == string[-8..-1].reverse\n\
    \  return string + string[0..-9].reverse if string[-9..-1] == string[-9..-1].reverse\n\
    \  return string + string[0..-10].reverse if string[-10..-1] == string[-10..-1].reverse\n\
    \  return string + string[0..-11].reverse if string[-11..-1] == string[-11..-1].reverse\n\
    \  return string + string[0..-12].reverse if string[-12..-1] == string[-12..-1].reverse\n\
    \  return string + string[0..-13].reverse if string[-13..-1] == string[-13..-1].reverse\n\
    \  return string + string[0..-14].reverse if string[-14..-1] == string[-14..-1].reverse\n\
    \  return string + string[0..-15].reverse if string[-15..-1] == string[-15..-1].reverse\n\
    \  return string + string[0..-16].reverse if string[-16..-1", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2\n  return string + string[1..-1].reverse if string.length == 3", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3", "  return\
    \ string if string.length == 0\n  return string + string.reverse if string.length\
    \ == 1\n  return string + string[1..-1].reverse if string.length == 2", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  string + string[0..-1-longest_palindrome_suffix(string)].reverse\n\
    end", "  return string if string.length <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0..-(longest_palindrome_suffix.length + 1)].reverse\nend",
  "  return string if string.empty?\n  return string + string.reverse if string.length\
    \ == 1\n  return string + string[1..-1].reverse if string.length == 2", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3", "  return string if string.length < 2\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3\n  return string + string[2..-1].reverse if string[0..1] == string[-2..-1]",
  "  return string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  string + string[0..find_longest_palindrome_suffix(string)].reverse\n\
    end", "  return string if string.length == 0\n  return string + string.reverse\
    \ if string.length == 1\n  return string + string[0..-2].reverse if string.length\
    \ == 2\n  return string + string[0..-3].reverse if string.length == 3\n  return\
    \ string + string[0..-4].reverse if string.length == 4\n  return string + string[0..-5].reverse\
    \ if string.length == 5\n  return string + string[0..-6].reverse if string.length\
    \ == 6\n  return string + string[0..-7].reverse if string.length == 7\n  return\
    \ string + string[0..-8].reverse if string.length == 8\n  return string + string[0..-9].reverse\
    \ if string.length == 9\n  return string + string[0..-10].reverse if string.length\
    \ == 10\n  return string + string[0..-11].reverse if string.length == 11\n  return\
    \ string + string[0..-12].reverse if string.length == 12\n  return string + string[0..-13].reverse\
    \ if string.length == 13\n  return string + string[0..-14].reverse if string.length\
    \ == 14\n  return string + string[0..-15].reverse if string.length == 15\n  return\
    \ string + string[0..-16].reverse if string.length == 16\n  return string + string[0..-17].reverse\
    \ if string.length == 17\n  return string + string[0..-18].reverse if string.length\
    \ == 18\n  return string + string[0..-19].reverse if string.length == 19\n  return\
    \ string + string[0..-20].reverse if string.length == 20\n  return string + string[0..-21].reverse\
    \ if string.length == 21\n  return string + string[0..-22].reverse if string.length\
    \ == 22\n  return string + string[0..-23].reverse if string.length == 23\n  return\
    \ string + string[0..-24].reverse if string.length == 24\n  return string + string[0..-25].reverse\
    \ if string.length == 25\n  return string + string[0..-26].reverse if string.length\
    \ == 26\n  return string + string[0..-27].reverse", "  return string if string.length\
    \ == 0\n  return string + string.reverse if string.length == 1\n  return string\
    \ + string[1..-1].reverse if string.length == 2\n  return string + string[2..-1].reverse\
    \ if string[0] == string[-1]\n  return string + string[1..-1].reverse if string[1]\
    \ == string[-1]\n  return string + string[2..-1].reverse if string[2] == string[-1]\n\
    \  return string + string[3..-1].reverse if string[3] == string[-1]\n  return\
    \ string + string[4..-1].reverse if string[4] == string[-1]\n  return string +\
    \ string[5..-1].reverse if string[5] == string[-1]\n  return string + string[6..-1].reverse\
    \ if string[6] == string[-1]\n  return string + string[7..-1].reverse if string[7]\
    \ == string[-1]\n  return string + string[8..-1].reverse if string[8] == string[-1]\n\
    \  return string + string[9..-1].reverse if string[9] == string[-1]\n  return\
    \ string + string[10..-1].reverse if string[10] == string[-1]\n  return string\
    \ + string[11..-1].reverse if string[11] == string[-1]\n  return string + string[12..-1].reverse\
    \ if string[12] == string[-1]\n  return string + string[13..-1].reverse if string[13]\
    \ == string[-1]\n  return string + string[14..-1].reverse if string[14] == string[-1]\n\
    \  return string + string[15..-1].reverse if string[15] == string[-1]\n  return\
    \ string + string[16..-1].reverse if string[16] == string[-1]\n  return string\
    \ + string[17..-1].reverse if string[17] == string[-1]\n  return string + string[18..-1].reverse\
    \ if string[18] == string[-1]\n  return string + string[19..-1].reverse", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3\n  return\
    \ string + string[2..-1].reverse if string.length == 4", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2\n  return string + string[1..-1].reverse if string.length == 3", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.reverse == string\n  longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \  string + string[0...(string.length - longest_palindrome_suffix.length)].reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n  prefix = string[0..-longest_palindrome_suffix.length-1]\n\
    \  prefix.reverse + string\nend", "  return string if string.length <= 1\n  return\
    \ string + string.reverse if is_palindrome?(string)", "  return string if string.length\
    \ <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0..-(longest_palindrome_suffix.length + 1)].reverse\nend",
  "  return string if string.length <= 1\n  longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \  string + string[0..-longest_palindrome_suffix.length-1].reverse\nend", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if is_palindrome?(string)",
  "  return string if string.length <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  prefix = string[0..(string.length - longest_palindrome_suffix.length - 1)]\n\
    \  prefix.reverse + string\nend", "  return string if string.length <= 1\n  longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n  string + string[0..string.length - longest_palindrome_suffix.length\
    \ - 1].reverse\nend", "  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0..-longest_palindrome_suffix.length - 1].reverse\nend", " \
    \ return string if string.length <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0..-longest_palindrome_suffix.length-1].reverse\nend", "  return\
    \ string if string.length == 0\n  return string + string.reverse if string.length\
    \ == 1\n  return string + string[0..-2].reverse if string.length == 2\n  return\
    \ string + string[0..-3].reverse if string.length == 3\n  return string + string[0..-4].reverse\
    \ if string.length == 4\n  return string + string[0..-5].reverse if string.length\
    \ == 5\n  return string + string[0..-6].reverse if string.length == 6\n  return\
    \ string + string[0..-7].reverse if string.length == 7\n  return string + string[0..-8].reverse\
    \ if string.length == 8\n  return string + string[0..-9].reverse if string.length\
    \ == 9\n  return string + string[0..-10].reverse if string.length == 10\n  return\
    \ string + string[0..-11].reverse if string.length == 11\n  return string + string[0..-12].reverse\
    \ if string.length == 12\n  return string + string[0..-13].reverse if string.length\
    \ == 13\n  return string + string[0..-14].reverse if string.length == 14\n  return\
    \ string + string[0..-15].reverse if string.length == 15\n  return string + string[0..-16].reverse\
    \ if string.length == 16\n  return string + string[0..-17].reverse if string.length\
    \ == 17\n  return string + string[0..-18].reverse if string.length == 18\n  return\
    \ string + string[0..-19].reverse if string.length == 19\n  return string + string[0..-20].reverse\
    \ if string.length == 20\n  return string + string[0..-21].reverse if string.length\
    \ == 21\n  return string + string[0..-22].reverse if string.length == 22\n  return\
    \ string + string[0..-23].reverse if string.length == 23\n  return string + string[0..-24].reverse\
    \ if string.length == 24\n  return string + string[0..-25].reverse if string.length\
    \ == 25\n  return string + string[0..-26].reverse if string.length == 26\n  return\
    \ string + string[0..-27].reverse", '  return string if string.empty?', "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[0..-3].reverse\
    \ if string.length == 3", "  return string if string.length < 2\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2", '  return string if string.length ==
    0', "  return string if string.length <= 1\n  return string + string.reverse if\
    \ string.length == 2\n  return string + string[0..-3].reverse if string.length\
    \ == 3", "  return string if string.length < 2\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length == 0\n  return string\
    \ + string.reverse if string.length == 1\n  return string + string[1..-1].reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length ==\
    \ 0\n  return string + string.reverse if string.length == 1\n  return string +\
    \ string[1..-1].reverse if string.length == 2", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length == 0\n  return string + string.reverse if string.length ==\
    \ 1\n  return string + string[1..-1].reverse if string.length == 2\n  return string\
    \ + string[2..-1].reverse if string[0] == string[-1]", "  return string if string.length\
    \ <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0..-longest_palindrome_suffix.length-1].reverse\nend", "  return\
    \ string if string.length <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0..-longest_palindrome_suffix.length-1].reverse\nend", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  postfix = find_longest_palindromic_postfix(string)\n  prefix = string[0..(string.length\
    \ - postfix.length - 1)]\n  prefix + postfix + prefix.reverse\nend", "  return\
    \ string if string.length < 2\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3\n  return\
    \ string + string[2..-1].reverse if string[0] == string[-1]\n  return string +\
    \ string[1..-1].reverse if string[1] == string[-1]\n  return string + string[2..-1].reverse\
    \ if string[2] == string[-1]\n  return string + string[3..-1].reverse if string[3]\
    \ == string[-1]\n  return string + string[4..-1].reverse if string[4] == string[-1]\n\
    \  return string + string[5..-1].reverse if string[5] == string[-1]\n  return\
    \ string + string[6..-1].reverse if string[6] == string[-1]\n  return string +\
    \ string[7..-1].reverse if string[7] == string[-1]\n  return string + string[8..-1].reverse\
    \ if string[8] == string[-1]\n  return string + string[9..-1].reverse if string[9]\
    \ == string[-1]\n  return string + string[10..-1].reverse if string[10] == string[-1]\n\
    \  return string + string[11..-1].reverse if string[11] == string[-1]\n  return\
    \ string + string[12..-1].reverse if string[12] == string[-1]\n  return string\
    \ + string[13..-1].reverse if string[13] == string[-1]\n  return string + string[14..-1].reverse\
    \ if string[14] == string[-1]\n  return string + string[15..-1].reverse if string[15]\
    \ == string[-1]\n  return string + string[16..-1].reverse if string[16] == string[-1]\n\
    \  return string + string[17..-1].reverse if string[17] == string[-1]\n  return\
    \ string + string[18..-1].reverse if string[18] == string[-1]\n  return string\
    \ + string[19..-1].reverse", "  return string if string.length <= 1\n  return\
    \ string + string.reverse if string.length == 2", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.empty?\n  return string + string.reverse if string.length == 1\n \
    \ return string + string[1..-1].reverse if string.length == 2\n  return string\
    \ + string[2..-1].reverse if string[0] == string[-1]\n  return string + string[1..-1].reverse\
    \ if string[1] == string[-1]\n  return string + string[2..-1].reverse if string[0]\
    \ == string[-2]\n  return string + string[1..-2].reverse if string[1] == string[-2]\n\
    \  return string + string[2..-2].reverse if string[2] == string[-2]\n  return\
    \ string + string[3..-1].reverse if string[0] == string[-3]\n  return string +\
    \ string[1..-3].reverse if string[1] == string[-3]\n  return string + string[2..-3].reverse\
    \ if string[2] == string[-3]\n  return string + string[3..-3].reverse if string[3]\
    \ == string[-3]\n  return string + string[4..-1].reverse if string[0] == string[-4]\n\
    \  return string + string[1..-4].reverse if string[1] == string[-4]\n  return\
    \ string + string[2..-4].reverse if string[2] == string[-4]\n  return string +\
    \ string[3..-4].reverse if string[3] == string[-4]\n  return string + string[4..-4].reverse\
    \ if string[4] == string[-4]\n  return string + string[5..-1].reverse if string[0]\
    \ == string[-5]\n  return string + string[1..-5].reverse if string[1] == string[-5]\n\
    \  return string + string[2..-5].reverse if string[2] == string[-5]\n  return\
    \ string + string[3..-5].reverse if string[3] == string[-5]\n  return string +\
    \ string[4..-5].reverse if string[4] == string[-5]\n  return string + string[5..-5].reverse\
    \ if", "  return string if string.length == 0\n  return string + string.reverse\
    \ if string.length == 1\n  return string + string[1..-1].reverse if string.length\
    \ == 2", "  return string if palindrome?(string)\n  return string + string.reverse\
    \ if string.length == 1\n  return string + string[0..-2].reverse if string.length\
    \ == 2\n  longest_palindrome_suffix = longest_palindrome_suffix(string)\n  string\
    \ + string[0..-(longest_palindrome_suffix.length + 1)].reverse\nend", '  return
    string if string.length <= 1', "  return string if string.length <= 1\n  palindrome_suffix\
    \ = find_palindrome_suffix(string)\n  string + reverse(string[0..-palindrome_suffix.length\
    \ - 1])\nend", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[0..-3].reverse if string.length\
    \ == 3\n  return string + string[0..-4].reverse if string.length == 4\n  return\
    \ string + string[0..-5].reverse if string.length == 5\n  return string + string[0..-6].reverse\
    \ if string.length == 6\n  return string + string[0..-7].reverse if string.length\
    \ == 7\n  return string + string[0..-8].reverse if string.length == 8\n  return\
    \ string + string[0..-9].reverse if string.length == 9\n  return string + string[0..-10].reverse\
    \ if string.length == 10\n  return string + string[0..-11].reverse if string.length\
    \ == 11\n  return string + string[0..-12].reverse if string.length == 12\n  return\
    \ string + string[0..-13].reverse if string.length == 13\n  return string + string[0..-14].reverse\
    \ if string.length == 14\n  return string + string[0..-15].reverse if string.length\
    \ == 15\n  return string + string[0..-16].reverse if string.length == 16\n  return\
    \ string + string[0..-17].reverse if string.length == 17\n  return string + string[0..-18].reverse\
    \ if string.length == 18\n  return string + string[0..-19].reverse if string.length\
    \ == 19\n  return string + string[0..-20].reverse if string.length == 20\n  return\
    \ string + string[0..-21].reverse if string.length == 21\n  return string + string[0..-22].reverse\
    \ if string.length == 22\n  return string + string[0..-23].reverse if string.length\
    \ == 23\n  return string + string[0..-24].reverse if string.length == 24\n  return\
    \ string + string[0..-25].reverse if string.length == 25\n  return string + string[0..-26].reverse\
    \ if string.length == 26\n  return string + string[0..-27].reverse if string.length\
    \ == 27\n  return string + string[0..-28].reverse", "  return string if string.length\
    \ == 0\n  return string + string.reverse if string.length == 1\n  return string\
    \ + string[1..-1].reverse if string.length == 2", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2\n  return string\
    \ + string[0..-3].reverse if string.length == 3\n  return string + string[0..-4].reverse\
    \ if string.length == 4\n  return string + string[0..-5].reverse if string.length\
    \ == 5\n  return string + string[0..-6].reverse if string.length == 6\n  return\
    \ string + string[0..-7].reverse if string.length == 7\n  return string + string[0..-8].reverse\
    \ if string.length == 8\n  return string + string[0..-9].reverse if string.length\
    \ == 9\n  return string + string[0..-10].reverse if string.length == 10\n  return\
    \ string + string[0..-11].reverse if string.length == 11\n  return string + string[0..-12].reverse\
    \ if string.length == 12\n  return string + string[0..-13].reverse if string.length\
    \ == 13\n  return string + string[0..-14].reverse if string.length == 14\n  return\
    \ string + string[0..-15].reverse if string.length == 15\n  return string + string[0..-16].reverse\
    \ if string.length == 16\n  return string + string[0..-17].reverse if string.length\
    \ == 17\n  return string + string[0..-18].reverse if string.length == 18\n  return\
    \ string + string[0..-19].reverse if string.length == 19\n  return string + string[0..-20].reverse\
    \ if string.length == 20\n  return string + string[0..-21].reverse if string.length\
    \ == 21\n  return string + string[0..-22].reverse if string.length == 22\n  return\
    \ string + string[0..-23].reverse if string.length == 23\n  return string + string[0..-24].reverse\
    \ if string.length == 24\n  return string + string[0..-25].reverse if string.length\
    \ == 25\n  return string + string[0..-26].reverse if string.length == 26\n  return\
    \ string + string[0..-27].reverse if string.length == 27\n  return string + string[0..-28].reverse",
  "  return string if string.length <= 1\n  longest_palindrome_suffix_length = longest_palindrome_suffix_length(string)\n\
    \  string + string[0...-longest_palindrome_suffix_length].reverse\nend", "  return\
    \ string if string.length <= 1\n  string + string[0..-find_longest_palindrome_suffix(string).length\
    \ - 1].reverse\nend", "  return string if string.length <= 1\n  longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n  string + reverse(string[0..-longest_palindrome_suffix.length\
    \ - 1])\nend", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2", "  string + string[0..find_longest_palindrome_suffix(string)].reverse\n\
    end", "  return string if string.length == 0\n  return string + string.reverse\
    \ if string.length == 1\n  return string + string[1..-1].reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  longest_palindrome_suffix =\
    \ find_longest_palindrome_suffix(string)\n  string + string[0..-longest_palindrome_suffix.length-1].reverse\n\
    end", "  return string if string.length <= 1\n  string + string[0..(find_longest_palindrome_suffix(string)\
    \ - 1)].reverse\nend", "  string + string[0...-longest_palindrome_suffix(string).length].reverse\n\
    end", '  return string if string.length <= 1', "  return string if string.length\
    \ <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0..(string.length - longest_palindrome_suffix - 1)].reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3", "  return string if string.length == 0\n  return string + string.reverse\
    \ if string.length == 1\n  return string + string[1..-1].reverse if string.length\
    \ == 2", '  return string if string.length <= 1', "  return string if string.length\
    \ <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0..(string.length - longest_palindrome_suffix.length - 1)].reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n  string + reverse(string[0..-longest_palindrome_suffix.length\
    \ - 1])\nend", "  return string if string.length <= 1\n  longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n  string + string[0...string.length - longest_palindrome_suffix.length].reverse\n\
    end", "  return string if string.length <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  prefix = string[0..-longest_palindrome_suffix.length-1]\n  prefix.reverse +\
    \ string\nend", "  return string if string.length == 0\n  return string + string.reverse\
    \ if string.length == 1\n  return string + string[1..-1].reverse if string.length\
    \ == 2\n  return string + string[2..-1].reverse if string[0] == string[-1] &&\
    \ string[1] == string[-2]\n  return string + string[1..-1].reverse if string[0]\
    \ == string[-1]\n  return string + string[2..-1].reverse if string[1] == string[-1]\n\
    \  return string + string[3..-1].reverse if string[2] == string[-1]\n  return\
    \ string + string[3..-1].reverse if string[0] == string[-2] && string[1] == string[-3]\n\
    \  return string + string[4..-1].reverse if string[0] == string[-3] && string[1]\
    \ == string[-4]\n  return string + string[4..-1].reverse if string[0] == string[-4]\
    \ && string[1] == string[-5]\n  return string + string[5..-1].reverse if string[0]\
    \ == string[-5] && string[1] == string[-6]\n  return string + string[5..-1].reverse\
    \ if string[0] == string[-6] && string[1] == string[-7]\n  return string + string[6..-1].reverse\
    \ if string[0] == string[-7] && string[1] == string[-8]\n  return string + string[6..-1].reverse\
    \ if string[0] == string[-8] && string[1] == string[-9]\n  return string + string[7..-1].reverse\
    \ if string[0] == string[-9] && string[1] == string[-10]\n  return string + string[7..-1].reverse\
    \ if string[0] == string[-10] && string[1] == string[-11]\n  return string + string[8..-1].reverse\
    \ if string[0] == string[-11] && string[1] == string[-12]\n  return string + string[8..-1].",
  "  return string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3\n  return\
    \ string + string[2..-1].reverse if string.length == 4", "  longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n  string_prefix = string[0..-longest_palindrome_suffix.length\
    \ - 1]\n  string_prefix.reverse + string\nend", "  string + string[0...-longest_palindrome_suffix(string)].reverse\n\
    end", "  return string if string.length < 2\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3\n  return string + string[2..-1].reverse if string.length == 4", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length == 0\n  return string\
    \ + string.reverse if string.length == 1\n  return string + string[1..-1].reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3\n  return string + string[2..-1].reverse if string.length\
    \ == 4", "  string + string[0...-(longest_palindrome_suffix(string).length)].reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3\n  return string + string[2..-1].reverse if string.length == 4\n  return\
    \ string + string[3..-1].reverse if string.length == 5\n  return string + string[4..-1].reverse\
    \ if string.length == 6\n  return string + string[5..-1].reverse if string.length\
    \ == 7\n  return string + string[6..-1].reverse if string.length == 8\n  return\
    \ string + string[7..-1].reverse if string.length == 9\n  return string + string[8..-1].reverse\
    \ if string.length == 10\n  return string + string[9..-1].reverse if string.length\
    \ == 11\n  return string + string[10..-1].reverse if string.length == 12\n  return\
    \ string + string[11..-1].reverse if string.length == 13\n  return string + string[12..-1].reverse\
    \ if string.length == 14\n  return string + string[13..-1].reverse if string.length\
    \ == 15\n  return string + string[14..-1].reverse if string.length == 16\n  return\
    \ string + string[15..-1].reverse if string.length == 17\n  return string + string[16..-1].reverse\
    \ if string.length == 18\n  return string + string[17..-1].reverse if string.length\
    \ == 19\n  return string + string[18..-1].reverse if string.length == 20\n  return\
    \ string + string[19..-1].reverse if string.length == 21\n  return string + string[20..-1].reverse\
    \ if string.length == 22\n  return string + string[21..-1].reverse if string.length\
    \ == 23\n  return string + string[22..-1].reverse if string.length == 24\n  return\
    \ string + string[23..-1].reverse if string.length == 25\n  return string + string[24..-1].reverse\
    \ if string.length == 26\n  return string + string[25..-1].reverse if string.length\
    \ == 27\n  return string + string[26..-1].reverse", "  return string if string.length\
    \ <= 1\n  suffix = longest_palindromic_suffix(string)\n  prefix = string[0..-suffix.length-1]\n\
    \  prefix.reverse + string\nend", "  return string if string.length <= 1\n  longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n  string + reverse(string[0..-longest_palindrome_suffix.length\
    \ - 1])\nend", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[0..-3].reverse if string.length\
    \ == 3", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length == 0\n  return string\
    \ + string.reverse if string.length == 1\n  return string + string[1..-1].reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2", "  string + string[0..find_longest_palindrome_suffix(string)].reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[0..-3].reverse if string.length\
    \ == 3\n  return string + string[0..-4].reverse if string.length == 4", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3", "  return\
    \ string if string.length <= 1\n  longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \  string + string[0..-longest_palindrome_suffix.length-1].reverse\nend", '  return
    string if string.length <= 1', "  return string if string.length <= 1\n  return\
    \ string + string.reverse if string.length == 2\n  return string + string[0..-3].reverse\
    \ if string[-1] == string[-2]\n  return string + string[0..-2].reverse if string[-1]\
    \ == string[0]\n  return string + string[0..-3].reverse if string[-1] == string[1]\n\
    \  return string + string[0..-4].reverse if string[-1] == string[2]\n  return\
    \ string + string[0..-5].reverse if string[-1] == string[3]\n  return string +\
    \ string[0..-6].reverse if string[-1] == string[4]\n  return string + string[0..-7].reverse\
    \ if string[-1] == string[5]\n  return string + string[0..-8].reverse if string[-1]\
    \ == string[6]\n  return string + string[0..-9].reverse if string[-1] == string[7]\n\
    \  return string + string[0..-10].reverse if string[-1] == string[8]\n  return\
    \ string + string[0..-11].reverse if string[-1] == string[9]\n  return string\
    \ + string[0..-12].reverse if string[-1] == string[10]\n  return string + string[0..-13].reverse\
    \ if string[-1] == string[11]\n  return string + string[0..-14].reverse if string[-1]\
    \ == string[12]\n  return string + string[0..-15].reverse if string[-1] == string[13]\n\
    \  return string + string[0..-16].reverse if string[-1] == string[14]\n  return\
    \ string + string[0..-17].reverse if string[-1] == string[15]\n  return string\
    \ + string[0..-18].reverse if string[-1] == string[16]\n  return string + string[0..-19].reverse\
    \ if string[-1] == string[17]\n  return string + string[0..-20].reverse if string[-1]\
    \ == string[18]\n  return string + string[", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2\n  return string + string[0..-3].reverse if string.length == 3", "  return\
    \ string if string.length == 0\n  return string + string.reverse if string.length\
    \ == 1\n  return string + string[1..-1].reverse if string.length == 2", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length < 2\n  longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n  string + string[0..-longest_palindrome_suffix.length-1].reverse\n\
    end", "  return string if string.length <= 1\n  longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \  string + string[0..-longest_palindrome_suffix.length-1].reverse\nend", "  string.concat(string[0..-1].reverse)\n\
    end", "  return string if string.length <= 1\n  suffix = find_longest_palindromic_suffix(string)\n\
    \  prefix = string[0..-(suffix.length + 1)]\n  prefix.reverse + string\nend",
  "  return string if string.length == 0\n  return string + string.reverse if string.length\
    \ == 1\n  return string + string[0..-2].reverse if string.length == 2", "  return\
    \ string if string.length <= 1\n  longest_palindrome = longest_palindrome_postfix(string)\n\
    \  string + string[0..(string.length - longest_palindrome.length - 1)].reverse\n\
    end", "  return string if string.length <= 1\n  longest_palindrome_suffix_length\
    \ = find_longest_palindrome_suffix_length(string)\n  string + string[0..-longest_palindrome_suffix_length-1].reverse\n\
    end", "  return string if string.length <= 1\n  longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \  string + string[0...-longest_palindrome_suffix.length].reverse\nend", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  string + string[0...-longest_palindrome_suffix(string)].reverse\n\
    end", '  return string if string.length <= 1', "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2\n  longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n  string + string[0..-longest_palindrome_suffix.length-1].reverse\n\
    end", '  return string if string.length < 2', "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  string_length\
    \ = string.length\n  return string if string_length == 0\n  return string + string.reverse\
    \ if string_length == 1", "  string + string[0...-1].reverse\nend", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3\n  return\
    \ string + string[2..-1].reverse if string.length == 4\n  return string + string[3..-1].reverse\
    \ if string.length == 5\n  return string + string[4..-1].reverse if string.length\
    \ == 6\n  return string + string[5..-1].reverse if string.length == 7\n  return\
    \ string + string[6..-1].reverse if string.length == 8\n  return string + string[7..-1].reverse\
    \ if string.length == 9\n  return string + string[8..-1].reverse if string.length\
    \ == 10\n  return string + string[9..-1].reverse if string.length == 11\n  return\
    \ string + string[10..-1].reverse if string.length == 12\n  return string + string[11..-1].reverse\
    \ if string.length == 13\n  return string + string[12..-1].reverse if string.length\
    \ == 14\n  return string + string[13..-1].reverse if string.length == 15\n  return\
    \ string + string[14..-1].reverse if string.length == 16\n  return string + string[15..-1].reverse\
    \ if string.length == 17\n  return string + string[16..-1].reverse if string.length\
    \ == 18\n  return string + string[17..-1].reverse if string.length == 19\n  return\
    \ string + string[18..-1].reverse if string.length == 20\n  return string + string[19..-1].reverse\
    \ if string.length == 21\n  return string + string[20..-1].reverse if string.length\
    \ == 22\n  return string + string[21..-1].reverse if string.length == 23\n  return\
    \ string + string[22..-1].reverse if string.length == 24\n  return string + string[23..-1].reverse\
    \ if string.length == 25\n  return string + string[24..-1].reverse if string.length\
    \ == 26\n  return string + string[25..-1].reverse if string.length == 27\n  return\
    \ string + string[26..-1].reverse", "  string + string[0...-longest_palindrome_suffix(string)].reverse\n\
    end", "  return string if string.length == 0\n  return string + string.reverse\
    \ if string.length == 1\n  return string + string[1..-1].reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  suffix = longest_palindromic_suffix(string)\n\
    \  prefix = string[0..-suffix.length-1]\n  prefix + suffix + prefix.reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3\n  return string + string[2..-1].reverse if string.length == 4", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n  string + string[0...string.length\
    \ - longest_palindrome_suffix.length].reverse\nend", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2\n  return string\
    \ + string[0..-3].reverse if string.length == 3\n  return string + string[0..-4].reverse\
    \ if string.length == 4", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[0..-3].reverse\
    \ if string.length == 3", "  return string if string.length < 2\n  longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n  string + string[0..-(longest_palindrome_suffix.length\
    \ + 1)].reverse\nend", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3\n  return string + string[2..-1].reverse if string.length\
    \ == 4\n  return string + string[3..-1].reverse if string.length == 5\n  return\
    \ string + string[4..-1].reverse if string.length == 6\n  return string + string[5..-1].reverse\
    \ if string.length == 7\n  return string + string[6..-1].reverse if string.length\
    \ == 8\n  return string + string[7..-1].reverse if string.length == 9\n  return\
    \ string + string[8..-1].reverse if string.length == 10\n  return string + string[9..-1].reverse\
    \ if string.length == 11\n  return string + string[10..-1].reverse if string.length\
    \ == 12\n  return string + string[11..-1].reverse if string.length == 13\n  return\
    \ string + string[12..-1].reverse if string.length == 14\n  return string + string[13..-1].reverse\
    \ if string.length == 15\n  return string + string[14..-1].reverse if string.length\
    \ == 16\n  return string + string[15..-1].reverse if string.length == 17\n  return\
    \ string + string[16..-1].reverse if string.length == 18\n  return string + string[17..-1].reverse\
    \ if string.length == 19\n  return string + string[18..-1].reverse if string.length\
    \ == 20\n  return string + string[19..-1].reverse if string.length == 21\n  return\
    \ string + string[20..-1].reverse if string.length == 22\n  return string + string[21..-1].reverse\
    \ if string.length == 23\n  return string + string[22..-1].reverse if string.length\
    \ == 24\n  return string + string[23..-1].reverse if string.length == 25\n  return\
    \ string + string[24..-1].reverse if string.length == 26\n  return string + string[25..-1].reverse\
    \ if string.length == 27\n  return string + string[26..-1].reverse", "  return\
    \ string if string.empty?\n  return string if string.length == 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length <=\
    \ 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n  string\
    \ + reverse(string[0..-longest_palindrome_suffix.length - 1])\nend", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string[0] == string[-1]\n \
    \ return string[0] + make_palindrome(string[1..-1]) + string[0]\nend", "  return\
    \ \"\" if string.empty?\n  return string if string.length == 1\n  return string\
    \ if string == string.reverse", "  string + string[0..find_longest_palindrome_suffix(string)].reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n  string + string[0..-longest_palindrome_suffix.length-1].reverse\n\
    end", "  return string if string.length == 0\n  return string + string.reverse\
    \ if string.length == 1\n  return string + string[1..-1].reverse if string.length\
    \ == 2\n  return string + string[2..-1].reverse if string[0..1] == string[-2..-1]\n\
    \  return string + string[1..-1].reverse if string[0] == string[-1]\n  return\
    \ string + string[2..-1].reverse if string[1] == string[-1]\n  return string +\
    \ string[3..-1].reverse if string[0..2] == string[-3..-1]\n  return string + string[4..-1].reverse\
    \ if string[0..3] == string[-4..-1]\n  return string + string[5..-1].reverse if\
    \ string[0..4] == string[-5..-1]\n  return string + string[6..-1].reverse if string[0..5]\
    \ == string[-6..-1]\n  return string + string[7..-1].reverse if string[0..6] ==\
    \ string[-7..-1]\n  return string + string[8..-1].reverse if string[0..7] == string[-8..-1]\n\
    \  return string + string[9..-1].reverse if string[0..8] == string[-9..-1]\n \
    \ return string + string[10..-1].reverse if string[0..9] == string[-10..-1]\n\
    \  return string + string[11..-1].reverse if string[0..10] == string[-11..-1]\n\
    \  return string + string[12..-1].reverse if string[0..11] == string[-12..-1]\n\
    \  return string + string[13..-1].reverse if string[0..12] == string[-13..-1]\n\
    \  return string + string[14..-1].reverse if string[0..13] == string[-14..-1]\n\
    \  return string + string[15..-1].reverse if string[0..14] == string[-15..-1]\n\
    \  return string + string[16..-1].reverse if string", "  return string if string.length\
    \ < 2\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  postfix = find_longest_palindromic_postfix(string)\n\
    \  prefix = string[0..-postfix.length-1]\n  prefix + postfix + prefix.reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[0..-3].reverse if string.length\
    \ == 3\n  return string + string[0..-4].reverse if string.length == 4\n  return\
    \ string + string[0..-5].reverse if string.length == 5\n  return string + string[0..-6].reverse\
    \ if string.length == 6\n  return string + string[0..-7].reverse if string.length\
    \ == 7\n  return string + string[0..-8].reverse if string.length == 8\n  return\
    \ string + string[0..-9].reverse if string.length == 9\n  return string + string[0..-10].reverse\
    \ if string.length == 10\n  return string + string[0..-11].reverse if string.length\
    \ == 11\n  return string + string[0..-12].reverse if string.length == 12\n  return\
    \ string + string[0..-13].reverse if string.length == 13\n  return string + string[0..-14].reverse\
    \ if string.length == 14\n  return string + string[0..-15].reverse if string.length\
    \ == 15\n  return string + string[0..-16].reverse if string.length == 16\n  return\
    \ string + string[0..-17].reverse if string.length == 17\n  return string + string[0..-18].reverse\
    \ if string.length == 18\n  return string + string[0..-19].reverse if string.length\
    \ == 19\n  return string + string[0..-20].reverse if string.length == 20\n  return\
    \ string + string[0..-21].reverse if string.length == 21\n  return string + string[0..-22].reverse\
    \ if string.length == 22\n  return string + string[0..-23].reverse if string.length\
    \ == 23\n  return string + string[0..-24].reverse if string.length == 24\n  return\
    \ string + string[0..-25].reverse if string.length == 25\n  return string + string[0..-26].reverse\
    \ if string.length == 26\n  return string + string[0..-27].reverse if string.length\
    \ == 27\n  return string + string[0..-28].reverse", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if is_palindrome?(string)"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
