name: HumanEval_10_make_palindrome
language: rb
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome.call(\"\")\n# \"\"\n# >>> make_palindrome.call(\"\
  cat\")\n# \"catac\"\n# >>> make_palindrome.call(\"cata\")\n# \"catac\"\ndef make_palindrome(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n\
  \    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\"\
  , candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n\
  \    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n"
completions: ["  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[0..-3].reverse if string.length\
    \ == 3\n  return string + string[0..-4].reverse if string.length == 4\n  return\
    \ string + string[0..-5].reverse if string.length == 5\n  return string + string[0..-6].reverse\
    \ if string.length == 6\n  return string + string[0..-7].reverse if string.length\
    \ == 7\n  return string + string[0..-8].reverse if string.length == 8\n  return\
    \ string + string[0..-9].reverse if string.length == 9\n  return string + string[0..-10].reverse\
    \ if string.length == 10\n  return string + string[0..-11].reverse if string.length\
    \ == 11\n  return string + string[0..-12].reverse if string.length == 12\n  return\
    \ string + string[0..-13].reverse if string.length == 13\n  return string + string[0..-14].reverse\
    \ if string.length == 14\n  return string + string[0..-15].reverse if string.length\
    \ == 15\n  return string + string[0..-16].reverse if string.length == 16\n  return\
    \ string + string[0..-17].reverse if string.length == 17\n  return string + string[0..-18].reverse\
    \ if string.length == 18\n  return string + string[0..-19].reverse if string.length\
    \ == 19\n  return string + string[0..-20].reverse if string.length == 20\n  return\
    \ string + string[0..-21].reverse if string.length == 21\n  return string + string[0..-22].reverse\
    \ if string.length == 22\n  return string + string[0..-23].reverse if string.length\
    \ == 23\n  return string + string[0..-24].reverse if string.length == 24\n  return\
    \ string + string[0..-25].reverse if string.length == 25\n  return string + string[0..-26].reverse\
    \ if string.length == 26\n  return string + string[0..-27].reverse if string.length\
    \ == 27\n  return string + string[0..-28].reverse", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2\n  return string\
    \ + string[1..-1].reverse if string.length == 3", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.size == 0\n  return string + string.reverse if string.size == 1\n\
    \  return string + string[1..-1].reverse if string.size == 2", "  string + string[0..find_longest_palindrome_suffix(string)].reverse\n\
    end", "  return string if string.length <= 1\n  longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \  string + string[0..-longest_palindrome_suffix.length-1].reverse\nend", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[0..-3].reverse if string.length == 3\n  return\
    \ string + string[0..-4].reverse if string.length == 4\n  return string + string[0..-5].reverse\
    \ if string.length == 5\n  return string + string[0..-6].reverse if string.length\
    \ == 6\n  return string + string[0..-7].reverse if string.length == 7\n  return\
    \ string + string[0..-8].reverse if string.length == 8\n  return string + string[0..-9].reverse\
    \ if string.length == 9\n  return string + string[0..-10].reverse if string.length\
    \ == 10\n  return string + string[0..-11].reverse if string.length == 11\n  return\
    \ string + string[0..-12].reverse if string.length == 12\n  return string + string[0..-13].reverse\
    \ if string.length == 13\n  return string + string[0..-14].reverse if string.length\
    \ == 14\n  return string + string[0..-15].reverse if string.length == 15\n  return\
    \ string + string[0..-16].reverse if string.length == 16\n  return string + string[0..-17].reverse\
    \ if string.length == 17\n  return string + string[0..-18].reverse if string.length\
    \ == 18\n  return string + string[0..-19].reverse if string.length == 19\n  return\
    \ string + string[0..-20].reverse if string.length == 20\n  return string + string[0..-21].reverse\
    \ if string.length == 21\n  return string + string[0..-22].reverse if string.length\
    \ == 22\n  return string + string[0..-23].reverse if string.length == 23\n  return\
    \ string + string[0..-24].reverse if string.length == 24\n  return string + string[0..-25].reverse\
    \ if string.length == 25\n  return string + string[0..-26].reverse if string.length\
    \ == 26\n  return string + string[0..-27].reverse if string.length == 27\n  return\
    \ string + string[0..-28].reverse", "  return string if string.length <= 1\n \
    \ string + string[0..find_longest_palindrome_suffix(string)].reverse\nend", " \
    \ return string if string.length <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string + string[0..-(longest_palindrome_suffix.length + 1)].reverse\nend",
  "  return string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[0..-3].reverse if string.length == 3\n  return\
    \ string + string[0..-4].reverse if string.length == 4\n  return string + string[0..-5].reverse\
    \ if string.length == 5\n  return string + string[0..-6].reverse if string.length\
    \ == 6\n  return string + string[0..-7].reverse if string.length == 7\n  return\
    \ string + string[0..-8].reverse if string.length == 8\n  return string + string[0..-9].reverse\
    \ if string.length == 9\n  return string + string[0..-10].reverse if string.length\
    \ == 10\n  return string + string[0..-11].reverse if string.length == 11\n  return\
    \ string + string[0..-12].reverse if string.length == 12\n  return string + string[0..-13].reverse\
    \ if string.length == 13\n  return string + string[0..-14].reverse if string.length\
    \ == 14\n  return string + string[0..-15].reverse if string.length == 15\n  return\
    \ string + string[0..-16].reverse if string.length == 16\n  return string + string[0..-17].reverse\
    \ if string.length == 17\n  return string + string[0..-18].reverse if string.length\
    \ == 18\n  return string + string[0..-19].reverse if string.length == 19\n  return\
    \ string + string[0..-20].reverse if string.length == 20\n  return string + string[0..-21].reverse\
    \ if string.length == 21\n  return string + string[0..-22].reverse if string.length\
    \ == 22\n  return string + string[0..-23].reverse if string.length == 23\n  return\
    \ string + string[0..-24].reverse if string.length == 24\n  return string + string[0..-25].reverse\
    \ if string.length == 25\n  return string + string[0..-26].reverse if string.length\
    \ == 26\n  return string + string[0..-27].reverse if string.length == 27\n  return\
    \ string + string[0..-28].reverse", "  string.reverse + string[0...-longest_palindrome_suffix(string)]\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[0..-3].reverse if string.length\
    \ == 3\n  return string + string[0..-4].reverse if string.length == 4\n  return\
    \ string + string[0..-5].reverse if string.length == 5\n  return string + string[0..-6].reverse\
    \ if string.length == 6\n  return string + string[0..-7].reverse if string.length\
    \ == 7\n  return string + string[0..-8].reverse if string.length == 8\n  return\
    \ string + string[0..-9].reverse if string.length == 9\n  return string + string[0..-10].reverse\
    \ if string.length == 10\n  return string + string[0..-11].reverse if string.length\
    \ == 11\n  return string + string[0..-12].reverse if string.length == 12\n  return\
    \ string + string[0..-13].reverse if string.length == 13\n  return string + string[0..-14].reverse\
    \ if string.length == 14\n  return string + string[0..-15].reverse if string.length\
    \ == 15\n  return string + string[0..-16].reverse if string.length == 16\n  return\
    \ string + string[0..-17].reverse if string.length == 17\n  return string + string[0..-18].reverse\
    \ if string.length == 18\n  return string + string[0..-19].reverse if string.length\
    \ == 19\n  return string + string[0..-20].reverse if string.length == 20\n  return\
    \ string + string[0..-21].reverse if string.length == 21\n  return string + string[0..-22].reverse\
    \ if string.length == 22\n  return string + string[0..-23].reverse if string.length\
    \ == 23\n  return string + string[0..-24].reverse if string.length == 24\n  return\
    \ string + string[0..-25].reverse if string.length == 25\n  return string + string[0..-26].reverse\
    \ if string.length == 26\n  return string + string[0..-27].reverse if string.length\
    \ == 27\n  return string + string[0..-28].reverse", "  return string if string.length\
    \ <= 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string_prefix = string[0..-longest_palindrome_suffix.length - 1]\n  string_prefix.reverse\
    \ + string\nend", "  return string if string.length == 0\n  longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n  string + string[0..-longest_palindrome_suffix.length-1].reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  palindrome_suffix\
    \ = find_palindrome_suffix(string)\n  string + reverse(string[0..(string.length\
    \ - palindrome_suffix.length - 1)])\nend", "  return string if string.length <=\
    \ 1\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n  string\
    \ + string[0..-(longest_palindrome_suffix.length + 1)].reverse\nend", "  return\
    \ string if string.length == 0\n  return string + string.reverse if string.length\
    \ == 1\n  return string + string[1..-1].reverse if string.length == 2\n  return\
    \ string + string[2..-1].reverse if string[0..1] == string[-2..-1]", '  return
    string if string.empty?']
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
