language: rb
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |str| str.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprq5uf1mj

    Started

    .

    Finished in 0.000314533 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3179.32 tests/s, 6358.63 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpft3pa30a

    Started

    .

    Finished in 0.000281874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3547.68 tests/s, 7095.37 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppy19l4ia

    Started

    .

    Finished in 0.000280344 seconds.

    -------------------------------------------------------------------------------

    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3567.05 tests/s, 7134.09 assertions/s

    '
  stdout: ''
  timestamp: 1659793732
