name: HumanEval_36_fizz_buzz
language: rb
prompt: "# Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n# >>> fizz_buzz.call(50)\n# 0\n# >>> fizz_buzz.call(78)\n\
  # 2\n# >>> fizz_buzz.call(79)\n# 3\ndef fizz_buzz(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n\
  \    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n \
  \   assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n\
  \    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n\
  \    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n\
  \    assert_equal(8026, candidate.call(100000))\n  end\nend\n"
completions: ["  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  # TODO: return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n  count = 0\n  (1..n).each do\
    \ |i|\n    if i % 11 == 0 || i % 13 == 0\n      count += i.to_s.count('7')\n \
    \   end\n  end\n  count\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 ==\
    \ 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select { |i| i % 11\
    \ == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select { |x|\
    \ x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7') }\nend", "  count\
    \ = 0\n  (1...n).each do |i|\n    if i % 11 == 0 || i % 13 == 0\n      count +=\
    \ i.to_s.count('7')\n    end\n  end\n  count\nend", "  (1...n).select { |i| i\
    \ % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  count\
    \ = 0\n  (1...n).each do |i|\n    count += 1 if (i % 11 == 0 || i % 13 == 0) &&\
    \ i.to_s.include?('7')\n  end\n  count\nend", "  (1...n).select { |i| i % 11 ==\
    \ 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).count\
    \ { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).count { |i| (i % 11 ==\
    \ 0 || i % 13 == 0) && i.to_s.include?('7') }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
