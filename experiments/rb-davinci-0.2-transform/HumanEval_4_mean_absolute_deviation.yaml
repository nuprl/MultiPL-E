name: HumanEval_4_mean_absolute_deviation
language: rb
prompt: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
  # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
  \ difference between each\n# element and a centerpoint (mean in this case):\n# MAD\
  \ = average | x - x_mean |\n# >>> mean_absolute_deviation.call([1.0, 2.0, 3.0, 4.0])\n\
  # 1.0\ndef mean_absolute_deviation(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
  \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
  \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
  \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
completions: ["  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.mean\n\
    end", "  mean = numbers.reduce(:+) / numbers.size\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.mean\n  numbers.map { |n| (n - mean).abs\
    \ }.mean\nend", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n\
    \    sum += (number - mean).abs\n  end\n  sum / numbers.length\nend", "  mean\
    \ = numbers.reduce(:+) / numbers.size.to_f\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.size.to_f\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, n| sum + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum +\
    \ (n - mean).abs } / numbers.size\nend", "  return 0 if numbers.empty?\n  mean\
    \ = numbers.inject(:+) / numbers.length\n  numbers.map { |x| (x - mean).abs }.inject(:+)\
    \ / numbers.length\nend", "  mean = numbers.reduce(:+) / numbers.size\n  numbers.map\
    \ { |x| (x - mean).abs }.reduce(:+) / numbers.size\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean = mean(numbers)\n  sum\
    \ = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n  sum\
    \ / numbers.length\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el }\
    \ / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } /\
    \ numbers.size\nend", "  mean = numbers.mean\n  numbers.map { |x| (x - mean).abs\
    \ }.mean\nend", "  # TODO: Implement this function\n  # Hint: You can use the\
    \ abs() function to get the absolute value of a number\n  # Hint: You can use\
    \ the reduce() function to calculate the sum of an array\n  # Hint: You can use\
    \ the length() function to get the length of an array\n  # Hint: You can use the\
    \ mean() function to get the mean of an array\n  # Hint: You can use the map()\
    \ function to create a new array from an existing one\n  # Hint: You can use the\
    \ each() function to iterate over an array\n  # Hint: You can use the zip() function\
    \ to combine two arrays\n  # Hint: You can use the flatten() function to flatten\
    \ an array\n  # Hint: You can use the compact() function to remove nil values\
    \ from an array\n  # Hint: You can use the reject() function to remove elements\
    \ from an array\n  # Hint: You can use the select() function to select elements\
    \ from an array\n  # Hint: You can use the sort() function to sort an array\n\
    \  # Hint: You can use the uniq() function to remove duplicates from an array\n\
    \  # Hint: You can use the flatten() function to flatten an array\n  # Hint: You\
    \ can use the compact() function to remove nil values from an array\n  # Hint:\
    \ You can use the reject() function to remove elements from an array\n  # Hint:\
    \ You can use the select() function to select elements from an array\n  # Hint:\
    \ You can use the sort() function to sort an array\n  # Hint: You can use the\
    \ uniq() function to remove duplicates from an array\n  # Hint: You can use the\
    \ flatten() function to flatten an array\n  # Hint: You can use the compact()\
    \ function to remove nil values from an array\n  # Hint: You can use the reject()\
    \ function to remove elements from an array\n  # Hint: You can use the select()\
    \ function to select elements from an array\n  # Hint: You can use the sort()\
    \ function to sort an array\n  # Hint: You can use the uniq() function to remove\
    \ duplicates from an array\n  # Hint: You can use the flatten() function to flatten\
    \ an array", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n\
    \  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } / numbers.size\nend",
  "  mean = numbers.mean\n  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
