name: HumanEval_4_mean_absolute_deviation
language: rb
prompt: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
  # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
  \ difference between each\n# element and a centerpoint (mean in this case):\n# MAD\
  \ = average | x - x_mean |\n# >>> mean_absolute_deviation.call([1.0, 2.0, 3.0, 4.0])\n\
  # 1.0\ndef mean_absolute_deviation(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
  \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
  \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
  \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
completions: ["  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.mean\n\
    end", "  mean = numbers.reduce(:+) / numbers.size\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.mean\n  numbers.map { |n| (n - mean).abs\
    \ }.mean\nend", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n\
    \    sum += (number - mean).abs\n  end\n  sum / numbers.length\nend", "  mean\
    \ = numbers.reduce(:+) / numbers.size.to_f\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.size.to_f\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, n| sum + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum +\
    \ (n - mean).abs } / numbers.size\nend", "  return 0 if numbers.empty?\n  mean\
    \ = numbers.inject(:+) / numbers.length\n  numbers.map { |x| (x - mean).abs }.inject(:+)\
    \ / numbers.length\nend", "  mean = numbers.reduce(:+) / numbers.size\n  numbers.map\
    \ { |x| (x - mean).abs }.reduce(:+) / numbers.size\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean = mean(numbers)\n  sum\
    \ = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n  sum\
    \ / numbers.length\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el }\
    \ / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } /\
    \ numbers.size\nend", "  mean = numbers.mean\n  numbers.map { |x| (x - mean).abs\
    \ }.mean\nend", "  # TODO: Implement this function\n  # Hint: You can use the\
    \ abs() function to get the absolute value of a number\n  # Hint: You can use\
    \ the reduce() function to calculate the sum of an array\n  # Hint: You can use\
    \ the length() function to get the length of an array\n  # Hint: You can use the\
    \ mean() function to get the mean of an array\n  # Hint: You can use the map()\
    \ function to create a new array from an existing one\n  # Hint: You can use the\
    \ each() function to iterate over an array\n  # Hint: You can use the zip() function\
    \ to combine two arrays\n  # Hint: You can use the flatten() function to flatten\
    \ an array\n  # Hint: You can use the compact() function to remove nil values\
    \ from an array\n  # Hint: You can use the reject() function to remove elements\
    \ from an array\n  # Hint: You can use the select() function to select elements\
    \ from an array\n  # Hint: You can use the sort() function to sort an array\n\
    \  # Hint: You can use the uniq() function to remove duplicates from an array\n\
    \  # Hint: You can use the flatten() function to flatten an array\n  # Hint: You\
    \ can use the compact() function to remove nil values from an array\n  # Hint:\
    \ You can use the reject() function to remove elements from an array\n  # Hint:\
    \ You can use the select() function to select elements from an array\n  # Hint:\
    \ You can use the sort() function to sort an array\n  # Hint: You can use the\
    \ uniq() function to remove duplicates from an array\n  # Hint: You can use the\
    \ flatten() function to flatten an array\n  # Hint: You can use the compact()\
    \ function to remove nil values from an array\n  # Hint: You can use the reject()\
    \ function to remove elements from an array\n  # Hint: You can use the select()\
    \ function to select elements from an array\n  # Hint: You can use the sort()\
    \ function to sort an array\n  # Hint: You can use the uniq() function to remove\
    \ duplicates from an array\n  # Hint: You can use the flatten() function to flatten\
    \ an array", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n\
    \  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } / numbers.size\nend",
  "  mean = numbers.mean\n  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  numbers.mean.absdev(numbers)\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  # TODO: Implement\nend", "  mean = mean(numbers)\n  numbers.map { |n|\
    \ (n - mean).abs }.sum / numbers.length\nend", "  mean = mean(numbers)\n  numbers.map\
    \ { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n\
    \  sum = 0.0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  mean = numbers.inject(0.0) { |sum, el| sum +\
    \ el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs\
    \ }.reduce(:+) / numbers.size\nend", "  # Calculate the mean of the input numbers\n\
    \  mean = numbers.inject(0.0) { |sum, n| sum + n } / numbers.size", "  mean =\
    \ numbers.reduce(:+) / numbers.length\n  numbers.map { |x| (x - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n\
    \  numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  numbers = numbers.map(&:to_f)\n  mean = numbers.reduce(:+) / numbers.length\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  absolute_deviations.reduce(:+)\
    \ / absolute_deviations.length\nend", "  mean = mean(numbers)\n  numbers.map {\
    \ |n| (n - mean).abs }.mean\nend", "  mean = mean(numbers)\n  numbers.map { |x|\
    \ (x - mean).abs }.sum / numbers.length\nend", "  mean = numbers.mean\n  numbers.map\
    \ { |number| (number - mean).abs }.mean\nend", "  mean = numbers.inject(0) { |sum,\
    \ n| sum + n } / numbers.size\n  numbers.inject(0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map\
    \ { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length.to_f\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length.to_f\n\
    end", "  numbers.mean.abs_deviation(numbers)\nend", "  mean = mean(numbers)\n\
    \  mean_absolute_deviation = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation\
    \ += (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.size\nend",
  "  mean = mean(numbers)\n  numbers.inject(0.0) { |sum, number| sum + (number - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el }\
    \ / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } /\
    \ numbers.size\nend", "  mean = mean(numbers)\n  mean_absolute_deviation = 0.0\n\
    \  numbers.each do |number|\n    mean_absolute_deviation += (number - mean).abs\n\
    \  end\n  mean_absolute_deviation / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.size.to_f\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.size.to_f\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  numbers = numbers.map(&:to_f)\n\
    \  mean = numbers.reduce(:+) / numbers.size\n  numbers.map { |n| (n - mean).abs\
    \ }.reduce(:+) / numbers.size\nend", "  mean = mean(numbers)\n  sum = 0\n  numbers.each\
    \ do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  mean = numbers.mean\n  numbers.map { |n| (n - mean).abs }.mean\nend",
  "  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean\
    \ = numbers.reduce(:+) / numbers.length\n  numbers.map { |n| (n - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el }\
    \ / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } /\
    \ numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n\
    \  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } / numbers.size\nend",
  "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |n| (n - mean).abs\
    \ }.reduce(:+) / numbers.length\nend", "  numbers.mean.abs_deviation(numbers)\n\
    end", "  mean = numbers.reduce(:+) / numbers.size.to_f\n  mean_absolute_deviation\
    \ = numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.size.to_f\n  mean_absolute_deviation\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean = mean(numbers)\n  numbers.map\
    \ { |x| (x - mean).abs }.mean\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  absolute_deviations = numbers.map { |x| (x - mean).abs }\n  absolute_deviations.reduce(:+)\
    \ / absolute_deviations.length\nend", "  mean = mean(numbers)\n  numbers.map {\
    \ |x| (x - mean).abs }.sum / numbers.length\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length.to_f\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length.to_f\n\
    end", "  mean = numbers.reduce(:+) / numbers.length.to_f\n  numbers.map { |n|\
    \ (n - mean).abs }.reduce(:+) / numbers.length.to_f\nend", "  mean = mean(numbers)\n\
    \  mean_absolute_deviation = 0\n  numbers.each do |number|\n    mean_absolute_deviation\
    \ += (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  mean_absolute_deviation = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation\
    \ += (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  absolute_differences\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_differences)\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.mean\n  numbers.map\
    \ { |n| (n - mean).abs }.mean\nend", "  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  # TODO: Implement this function\n  # Hint: You can\
    \ use the 'mean' function you wrote above\n  # Hint: You can use the 'absolute_value'\
    \ function you wrote above\n  # Hint: You can use the 'reduce' function you wrote\
    \ above\n  # Hint: You can use the 'map' function you wrote above\n  # Hint: You\
    \ can use the 'zip' function you wrote above\n  # Hint: You can use the 'enumerate'\
    \ function you wrote above\n  # Hint: You can use the 'range' function you wrote\
    \ above\n  # Hint: You can use the 'sum' function you wrote above\n  # Hint: You\
    \ can use the 'length' function you wrote above\n  # Hint: You can use the 'divide'\
    \ function you wrote above\n  # Hint: You can use the 'is_integer' function you\
    \ wrote above\n  # Hint: You can use the 'is_float' function you wrote above\n\
    \  # Hint: You can use the 'is_number' function you wrote above\n  # Hint: You\
    \ can use the 'is_string' function you wrote above\n  # Hint: You can use the\
    \ 'is_array' function you wrote above\n  # Hint: You can use the 'is_hash' function\
    \ you wrote above\n  # Hint: You can use the 'is_nil' function you wrote above\n\
    \  # Hint: You can use the 'is_boolean' function you wrote above\n  # Hint: You\
    \ can use the 'is_true' function you wrote above\n  # Hint: You can use the 'is_false'\
    \ function you wrote above\n  # Hint: You can use the 'is_truthy' function you\
    \ wrote above\n  # Hint: You can use the 'is_falsy' function you wrote above\n\
    \  # Hint: You can use the 'is_empty' function you wrote above\n  # Hint: You\
    \ can use the 'is_even' function you wrote above\n  # Hint: You can use the 'is_odd'\
    \ function you wrote above\n  # Hint: You can use the 'is_positive' function you\
    \ wrote above\n  # Hint: You can use the 'is_negative' function you wrote above",
  "  mean = numbers.mean\n  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean\
    \ = numbers.reduce(:+) / numbers.size.to_f\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.size.to_f\nend", "  mean = mean(numbers)\n  sum = 0\n\
    \  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.sum / numbers.size\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.mean\nend",
  "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  numbers.map { |number| (number - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs\
    \ }.mean\nend", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n\
    \    sum += (number - mean).abs\n  end\n  sum / numbers.length\nend", "  mean\
    \ = numbers.reduce(:+) / numbers.length.to_f\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.length.to_f\nend", "  mean = mean(numbers)\n  sum = 0.0\n\
    \  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs }.sum / numbers.length\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  mad = numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\n  mad\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.size\nend", "  # TODO:\
    \ Implement\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n\
    \  absolute_deviations = numbers.map { |el| (el - mean).abs }\n  absolute_deviations.inject(0.0)\
    \ { |sum, el| sum + el } / absolute_deviations.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  # TODO: Implement this function\n\
    \  # Hint: Use the mean function you wrote above\n  # Hint: Use the absolute_value\
    \ function you wrote above\n  # Hint: Use the reduce function you wrote above\n\
    \  # Hint: Use the map function you wrote above\n  # Hint: Use the length function\
    \ you wrote above\n  # Hint: Use the sum function you wrote above\n  # Hint: Use\
    \ the zip function you wrote above\n  # Hint: Use the enumerate function you wrote\
    \ above\n  # Hint: Use the range function you wrote above\n  # Hint: Use the enumerate\
    \ function you wrote above\n  # Hint: Use the zip function you wrote above\n \
    \ # Hint: Use the enumerate function you wrote above\n  # Hint: Use the range\
    \ function you wrote above\n  # Hint: Use the enumerate function you wrote above\n\
    \  # Hint: Use the zip function you wrote above\n  # Hint: Use the enumerate function\
    \ you wrote above\n  # Hint: Use the range function you wrote above\n  # Hint:\
    \ Use the enumerate function you wrote above\n  # Hint: Use the zip function you\
    \ wrote above\n  # Hint: Use the enumerate function you wrote above\n  # Hint:\
    \ Use the range function you wrote above\n  # Hint: Use the enumerate function\
    \ you wrote above\n  # Hint: Use the zip function you wrote above\n  # Hint: Use\
    \ the enumerate function you wrote above\n  # Hint: Use the range function you\
    \ wrote above\n  # Hint: Use the enumerate function you wrote above\n  # Hint:\
    \ Use the zip function you wrote above\n  # Hint: Use the enumerate function you\
    \ wrote above\n  # Hint: Use the range function you wrote above\n  # Hint: Use\
    \ the enumerate function you wrote above\n  # Hint: Use the zip function you wrote\
    \ above\n  # Hint: Use the enumerate function you wrote above\n  # Hint: Use the\
    \ range function you wrote above\n  # Hint: Use the enumerate function you wrote\
    \ above\n  # Hint: Use the zip function you wrote above\n  # Hint: Use the enumerate\
    \ function you wrote above\n  # Hint: Use the range function you wrote above\n\
    \  # Hint", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |number|\
    \ (number - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number -\
    \ mean).abs\n  end\n  mean_absolute_deviation / numbers.length\nend", "  raise\
    \ ArgumentError, \"numbers must be an array\" unless numbers.is_a?(Array)\n  raise\
    \ ArgumentError, \"numbers must not be empty\" if numbers.empty?", "  mean = numbers.inject(0.0)\
    \ { |sum, n| sum + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum +\
    \ (n - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  # TODO: Implement me!\n  numbers_mean =\
    \ numbers.mean\n  numbers_absolute_deviation = numbers.map { |number| (number\
    \ - numbers_mean).abs }\n  numbers_absolute_deviation.mean\nend", "  mean = numbers.mean\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend", "  mean = mean(numbers)\n  numbers.map\
    \ { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.size.to_f\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.size.to_f\n\
    end", "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each do |number|\n    sum\
    \ += (number - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = numbers.mean\n  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean = mean(numbers)\n\
    \  sum = 0.0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number -\
    \ mean).abs\n  end\n  mean_absolute_deviation / numbers.length\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.mean\n\
    \  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean = mean(numbers)\n  sum\
    \ = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n  sum\
    \ / numbers.length\nend", "  mean = mean(numbers)\n  absolute_differences = numbers.map\
    \ { |number| (number - mean).abs }\n  mean(absolute_differences)\nend", "  numbers\
    \ = numbers.to_a\n  mean = numbers.mean\n  numbers.map { |x| (x - mean).abs }.mean\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  numbers.mean.abs\nend", "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each\
    \ do |num|\n    sum += (num - mean).abs\n  end\n  sum / numbers.length\nend",
  "  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  mean = numbers.reduce(:+) / numbers.length\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  absolute_deviations.reduce(:+) / absolute_deviations.length\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  numbers.mean.abs\n\
    end", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |x| (x -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number -\
    \ mean).abs\n  end\n  mean_absolute_deviation / numbers.length\nend", "  mean\
    \ = numbers.reduce(:+) / numbers.size.to_f\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.size.to_f\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length.to_f\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length.to_f\nend",
  "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  # TODO: Implement\
    \ this function\n  # Hint: You can use the built-in function `abs` to calculate\
    \ absolute value\n  # Hint: You can use the built-in function `mean` to calculate\
    \ mean value\n  # Hint: You can use the built-in function `map` to apply a function\
    \ to each element\n  # Hint: You can use the built-in function `reduce` to combine\
    \ all elements\n  # Hint: You can use the built-in function `sum` to sum all elements\n\
    \  # Hint: You can use the built-in function `length` to get the length of an\
    \ array\n  # Hint: You can use the built-in function `round` to round a number\
    \ to a given precision\n  # Hint: You can use the built-in function `Float` to\
    \ convert an integer to a float\n  # Hint: You can use the built-in function `Integer`\
    \ to convert a float to an integer\n  # Hint: You can use the built-in function\
    \ `Float` to convert an integer to a float\n  # Hint: You can use the built-in\
    \ function `Integer` to convert a float to an integer\n  # Hint: You can use the\
    \ built-in function `Float` to convert an integer to a float\n  # Hint: You can\
    \ use the built-in function `Integer` to convert a float to an integer\n  # Hint:\
    \ You can use the built-in function `Float` to convert an integer to a float\n\
    \  # Hint: You can use the built-in function `Integer` to convert a float to an\
    \ integer\n  # Hint: You can use the built-in function `Float` to convert an integer\
    \ to a float\n  # Hint: You can use the built-in function `Integer` to convert\
    \ a float to an integer\n  # Hint: You can use the built-in function `Float` to\
    \ convert an integer to a float\n  # Hint: You can use the built-in function `Integer`\
    \ to convert a float to an integer\n  # Hint: You can use the built-in function\
    \ `Float` to convert an integer to a float\n  # Hint: You can use the built-in\
    \ function `Integer` to convert a float to an integer\n  # Hint: You can use",
  "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  sum = 0.0\n\
    \  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |x| (x -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n  sum\
    \ = 0.0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n \
    \ sum / numbers.size\nend", "  mean = numbers.mean\n  numbers.map { |x| (x - mean).abs\
    \ }.mean\nend", "  numbers.mean.absdev(numbers)\nend", "  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = numbers.inject(0) do |sum, number|\n    sum + (number - mean).abs\n  end\n\
    \  mean_absolute_deviation / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el }\
    \ / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } /\
    \ numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n\
    \  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } / numbers.size\nend",
  "  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  # TODO: Implement\
    \ this function\n  mean = numbers.reduce(:+) / numbers.length\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  absolute_deviations.reduce(:+)\
    \ / absolute_deviations.length\nend", "  # TODO: Implement this\n  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number -\
    \ mean).abs\n  end\n  mean_absolute_deviation / numbers.size\nend", "  mean =\
    \ numbers.mean\n  numbers.map { |n| (n - mean).abs }.mean\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = numbers.reduce(:+) / numbers.length\n  numbers.map { |n| (n - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  mean = numbers.reduce(:+) / numbers.length.to_f\n\
    \  absolute_deviations = numbers.map { |x| (x - mean).abs }\n  absolute_deviations.reduce(:+)\
    \ / absolute_deviations.length.to_f\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |x| (x -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n  sum\
    \ = 0.0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n \
    \ sum / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map\
    \ { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = numbers.mean\n\
    \  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  sum = 0\n\
    \  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  # Calculate the mean of the input numbers\n  mean = numbers.inject(0.0)\
    \ { |sum, n| sum + n } / numbers.size\n  # Calculate the absolute difference between\
    \ each element and the mean\n  absolute_differences = numbers.map { |n| (n - mean).abs\
    \ }\n  # Return the mean of the absolute differences\n  absolute_differences.inject(0.0)\
    \ { |sum, n| sum + n } / absolute_differences.size\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  numbers = numbers.to_a\n  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  # TODO: Implement\
    \ this function\n  # Hint: You can use the abs() function to get the absolute\
    \ value of a number\n  # Hint: You can use the mean() function to get the mean\
    \ of a list of numbers\n  # Hint: You can use the map() function to apply a function\
    \ to each element of a list\n  # Hint: You can use the reduce() function to combine\
    \ all elements of a list\n  # Hint: You can use the sum() function to get the\
    \ sum of a list of numbers\n  # Hint: You can use the length() function to get\
    \ the length of a list\n  # Hint: You can use the div() function to divide two\
    \ numbers\n  # Hint: You can use the round() function to round a number to a given\
    \ number of decimal places\n  # Hint: You can use the is_a?() function to check\
    \ if a value is of a given type\n  # Hint: You can use the is_a?() function to\
    \ check if a value is of a given type\n  # Hint: You can use the is_a?() function\
    \ to check if a value is of a given type\n  # Hint: You can use the is_a?() function\
    \ to check if a value is of a given type\n  # Hint: You can use the is_a?() function\
    \ to check if a value is of a given type\n  # Hint: You can use the is_a?() function\
    \ to check if a value is of a given type\n  # Hint: You can use the is_a?() function\
    \ to check if a value is of a given type\n  # Hint: You can use the is_a?() function\
    \ to check if a value is of a given type\n  # Hint: You can use the is_a?() function\
    \ to check if a value is of a given type\n  # Hint: You can use the is_a?() function\
    \ to check if a value is of a given type\n  # Hint: You can use the is_a?() function\
    \ to check if a value is of a given type\n  # Hint: You can use the is_a?() function\
    \ to check if a value is of a given type\n  # Hint: You can use the is_a?() function\
    \ to check if a value is", "  mean = mean(numbers)\n  deviations = numbers.map\
    \ { |number| (number - mean).abs }\n  mean(deviations)\nend", "  mean = numbers.mean\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  sum = 0\n  numbers.each\
    \ do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  mean = numbers.reduce(:+) / numbers.size.to_f\n  numbers.map { |n| (n\
    \ - mean).abs }.reduce(:+) / numbers.size.to_f\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  sum = 0.0\n  numbers.each { |n| sum\
    \ += (n - mean).abs }\n  sum / numbers.size\nend", "  mean = numbers.mean\n  numbers.map{|x|\
    \ (x - mean).abs}.mean\nend", "  mean = numbers.reduce(:+) / numbers.length.to_f\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length.to_f\nend",
  "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each do |number|\n    sum += (number\
    \ - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend", "  # TODO: Implement this function\n\
    \  # Hint: You can use the 'mean' function you just wrote\n  #       to get the\
    \ mean of a list of numbers\n  # Hint: You can use the 'absolute_value' function\
    \ you just wrote\n  #       to get the absolute value of a number\n  # Hint: You\
    \ can use the 'map' function to apply a function to each element\n  #       of\
    \ a list\n  # Hint: You can use the 'reduce' function to combine the elements\
    \ of a list\n  #       into a single value\n  # Hint: You can use the 'average'\
    \ function to get the average of a list of\n  #       numbers\n  # Hint: You can\
    \ use the 'zip' function to combine two lists into a list of\n  #       pairs\n\
    \  # Hint: You can use the 'map' function to apply a function to each element\n\
    \  #       of a list\n  # Hint: You can use the 'reduce' function to combine the\
    \ elements of a list\n  #       into a single value\n  # Hint: You can use the\
    \ 'average' function to get the average of a list of\n  #       numbers\n  # Hint:\
    \ You can use the 'zip' function to combine two lists into a list of\n  #    \
    \   pairs\n  # Hint: You can use the 'map' function to apply a function to each\
    \ element\n  #       of a list\n  # Hint: You can use the 'reduce' function to\
    \ combine the elements of a list\n  #       into a single value\n  # Hint: You\
    \ can use the 'average' function to get the average of a list of\n  #       numbers\n\
    \  # Hint: You can use the 'zip' function to combine two lists into a list of\n\
    \  #       pairs\n  # Hint: You can use the 'map' function to apply a function\
    \ to each element\n  #       of a list\n  # Hint: You can use the 'reduce' function\
    \ to combine the elements of a list\n  #       into a single value\n  # Hint:\
    \ You can use the 'average' function to get the average of a list of\n  #    \
    \   numbers\n  # Hint: You can use the 'zip' function to combine two lists into\
    \ a list", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n\
    \  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } / numbers.size\nend",
  "  # TODO: Implement this function\n  # Hint: You can use the mean function from\
    \ above\n  # Hint: You can use the absolute_value function from above\n  mean\
    \ = mean(numbers)\n  numbers.map { |number| absolute_value(number - mean) }.reduce(:+)\
    \ / numbers.length\nend", "  mean = numbers.inject(0.0) { |sum, x| sum + x } /\
    \ numbers.size\n  numbers.inject(0.0) { |sum, x| sum + (x - mean).abs } / numbers.size\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
