language: rb
name: HumanEval_85_add
results:
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.each_with_index.inject(0) { |sum, (num, index)| sum + (num if index.odd?\
    \ && num.even?) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprcnqxpvx\nStarted\nE\n===============================================================================\n\
    Error: test_add(TestHumanEval): TypeError: nil can't be coerced into Integer\n\
    /tmp/tmprcnqxpvx.rb:6:in `+'\n/tmp/tmprcnqxpvx.rb:6:in `block in add'\n/tmp/tmprcnqxpvx.rb:6:in\
    \ `each'\n/tmp/tmprcnqxpvx.rb:6:in `each_with_index'\n/tmp/tmprcnqxpvx.rb:6:in\
    \ `each'\n/tmp/tmprcnqxpvx.rb:6:in `inject'\n/tmp/tmprcnqxpvx.rb:6:in `add'\n\
    /tmp/tmprcnqxpvx.rb:12:in `call'\n/tmp/tmprcnqxpvx.rb:12:in `test_add'\n     \
    \ 9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_add\n   \
    \  11:     candidate = method(:add)\n  => 12:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     13:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     15:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n===============================================================================\n\
    \nFinished in 0.00122607 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    815.61 tests/s, 0.00 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp50301ehk

    Started

    .

    Finished in 0.000396294 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2523.38 tests/s, 10093.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3p7xtdr2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3p7xtdr2.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006898869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.95 tests/s, 289.90 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3p7xtdr2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3p7xtdr2.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006898869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.95 tests/s, 289.90 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9r3g14yl

    Started

    .

    Finished in 0.000514199 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1944.77 tests/s, 7779.09 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp50301ehk

    Started

    .

    Finished in 0.000396294 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2523.38 tests/s, 10093.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1ktthpf3\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp1ktthpf3.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006609276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.30 tests/s, 302.61 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3p7xtdr2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3p7xtdr2.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006898869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.95 tests/s, 289.90 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp50301ehk

    Started

    .

    Finished in 0.000396294 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2523.38 tests/s, 10093.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1ktthpf3\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp1ktthpf3.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006609276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.30 tests/s, 302.61 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3p7xtdr2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3p7xtdr2.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006898869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.95 tests/s, 289.90 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9r3g14yl

    Started

    .

    Finished in 0.000514199 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1944.77 tests/s, 7779.09 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp50301ehk

    Started

    .

    Finished in 0.000396294 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2523.38 tests/s, 10093.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp50301ehk

    Started

    .

    Finished in 0.000396294 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2523.38 tests/s, 10093.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1ktthpf3\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp1ktthpf3.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006609276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.30 tests/s, 302.61 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.each_with_index.inject(0) { |sum, (el, i)| i.odd? && el.even? ? sum + el\
    \ : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpftwkdu3p

    Started

    .

    Finished in 0.00052358 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1909.93 tests/s, 7639.71 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index{|x,i| x.even? && i.odd?}.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0hdpzc04

    Started

    .

    Finished in 0.000513697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1946.67 tests/s, 7786.69 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3p7xtdr2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3p7xtdr2.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006898869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.95 tests/s, 289.90 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index{|x,i| x.even? && i.odd?}.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpto4w05ee

    Started

    .

    Finished in 0.00053353 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1874.31 tests/s, 7497.24 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9r3g14yl

    Started

    .

    Finished in 0.000514199 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1944.77 tests/s, 7779.09 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |e, i| e.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp96qmkyrv

    Started

    .

    Finished in 0.000543547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.77 tests/s, 7359.07 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9r3g14yl

    Started

    .

    Finished in 0.000514199 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1944.77 tests/s, 7779.09 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3p7xtdr2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3p7xtdr2.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006898869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.95 tests/s, 289.90 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index{|x,i| x.even? && i.odd?}.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0hdpzc04

    Started

    .

    Finished in 0.000513697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1946.67 tests/s, 7786.69 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp50301ehk

    Started

    .

    Finished in 0.000396294 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2523.38 tests/s, 10093.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp50301ehk

    Started

    .

    Finished in 0.000396294 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2523.38 tests/s, 10093.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3p7xtdr2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3p7xtdr2.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006898869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.95 tests/s, 289.90 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| i.odd? && x.even? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkxx06wvv

    Started

    .

    Finished in 0.000533211 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1875.43 tests/s, 7501.72 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3p7xtdr2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3p7xtdr2.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006898869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.95 tests/s, 289.90 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9r3g14yl

    Started

    .

    Finished in 0.000514199 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1944.77 tests/s, 7779.09 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp50301ehk

    Started

    .

    Finished in 0.000396294 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2523.38 tests/s, 10093.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3p7xtdr2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3p7xtdr2.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006898869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.95 tests/s, 289.90 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3p7xtdr2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3p7xtdr2.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006898869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.95 tests/s, 289.90 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |e, i| e.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp96qmkyrv

    Started

    .

    Finished in 0.000543547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.77 tests/s, 7359.07 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |n, i| n.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9r_pt180

    Started

    .

    Finished in 0.000617472 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1619.51 tests/s, 6478.03 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp50301ehk

    Started

    .

    Finished in 0.000396294 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2523.38 tests/s, 10093.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8f9j917h

    Started

    .

    Finished in 0.000539813 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1852.49 tests/s, 7409.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1ktthpf3\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp1ktthpf3.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006609276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.30 tests/s, 302.61 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3p7xtdr2\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3p7xtdr2.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006898869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.95 tests/s, 289.90 assertions/s\n"
  timestamp: 1659800062
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxpml4mug\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxpml4mug.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006744001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.28 tests/s, 296.56 assertions/s\n"
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbyxem7k3

    Started

    .

    Finished in 0.000428208 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2335.31 tests/s, 9341.25 assertions/s

    '
  stdout: ''
  timestamp: 1659800062
