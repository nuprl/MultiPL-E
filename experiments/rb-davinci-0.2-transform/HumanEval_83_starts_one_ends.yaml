name: HumanEval_83_starts_one_ends
language: rb
prompt: "# Given a positive integer n, return the count of the numbers of n-digit\n\
  # positive integers that start or end with 1.\ndef starts_one_ends(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_starts_one_ends\n\
  \    candidate = method(:starts_one_ends)\n    assert_equal(1, candidate.call(1))\n\
  \    assert_equal(18, candidate.call(2))\n    assert_equal(180, candidate.call(3))\n\
  \    assert_equal(1800, candidate.call(4))\n    assert_equal(18000, candidate.call(5))\n\
  \  end\nend\n"
completions: ["  return 0 if n == 0\n  return 10 if n == 1\n  return 9 * 10 ** (n\
    \ - 2) + 10 if n == 2\n  9 * 10 ** (n - 2) + 10 + starts_one_ends(n - 1)\nend",
  "  return 0 if n == 0\n  return 1 if n == 1\n  return 10 if n == 2\n  return 10\
    \ + 9 * (10 ** (n - 2))\nend", "  return 1 if n == 1\n  return 10 if n == 2\n\
    \  return 10 * (10 ** (n - 2)) + starts_one_ends(n - 1)\nend", "  return 1 if\
    \ n == 1\n  return 10 if n == 2\n  return 9 * 10 ** (n - 2) + starts_one_ends(n\
    \ - 1)\nend", "  return 1 if n == 1\n  return 10 if n == 2\n  return 10 + 9 *\
    \ 9 * (n - 2)\nend", "  return 1 if n == 1\n  return 10 if n == 2\n  return 10\
    \ + 9 * 9 * (n - 2)\nend", "  return 1 if n == 1\n  return 10 if n == 2\n  return\
    \ 10 + 9 * (10 ** (n - 2))\nend", "  return 1 if n == 1\n  return 10 if n == 2\n\
    \  return 9 * 10 ** (n - 2) + starts_one_ends(n - 1)\nend", "  # TODO: implement\
    \ me!\nend", "  return 1 if n == 1\n  return 10 if n == 2\n  return 9 * (10 **\
    \ (n - 2)) + starts_one_ends(n - 1)\nend", "  return 0 if n == 0\n  return 1 if\
    \ n == 1\n  return 10 if n == 2\n  return 10 + 9 * (n - 2) * 9**(n - 3)\nend",
  "  return 0 if n == 0\n  return 1 if n == 1\n  return 10 if n == 2\n  return 10\
    \ + 9 * (10 ** (n - 2))\nend", "  return 0 if n == 0\n  return 1 if n == 1\n \
    \ return 10 if n == 2\n  return 10 + 9 * 9 * (n - 2)\nend", "  return 1 if n ==\
    \ 1\n  return 10 if n == 2\n  return 10 + 9 * 9 * (n - 2)\nend", "  return 1 if\
    \ n == 1\n  return 10 if n == 2\n  return 10 + 9 * (10 ** (n - 2))\nend", "  return\
    \ 1 if n == 1\n  return 10 if n == 2\n  return 10 + 9 * (10 ** (n - 2))\nend",
  "  return 1 if n == 1\n  return 10 if n == 2\n  return 9 * 10 ** (n - 2) + starts_one_ends(n\
    \ - 1)\nend", "  return 1 if n == 1\n  return 10 if n == 2\n  return 9 * 10 **\
    \ (n - 2) + 10 if n == 3\n  9 * 10 ** (n - 2) + 10 + 9 * 10 ** (n - 2)\nend",
  "  return 0 if n == 0\n  return 10 if n == 1\n  return 9 * 10 ** (n - 2) + 10 if\
    \ n == 2\n  9 * 10 ** (n - 2) + 10 + starts_one_ends(n - 1)\nend", "  return 0\
    \ if n == 0\n  return 1 if n == 1\n  return 10 if n == 2\n  return 10 + 9 * 9**(n\
    \ - 2)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
