name: HumanEval_59_largest_prime_factor
language: rb
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  # >>> largest_prime_factor.call(13195)\n# 29\n# >>> largest_prime_factor.call(2048)\n\
  # 2\ndef largest_prime_factor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n\
  \    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n\
  \    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n\
  \    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n\
  \  end\nend\n"
completions: ["  # TODO\nend", "  # TODO\nend", "  # TODO: implement me!\nend", " \
    \ # TODO\nend", "  # TODO: Implement this method\nend", "  # TODO: Implement me!\n\
    end", "  # TODO: implement me\nend", "  # TODO: implement me\nend", "  # TODO:\
    \ implement me\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  return n\nend", "  factor = 2\n  while\
    \ n > 1\n    if n % factor == 0\n      n /= factor\n      factor -= 1\n    end\n\
    \    factor += 1\n  end\n  factor\nend", "  # TODO\nend", "  # TODO: implement\
    \ me\nend", "  # TODO: implement this\nend", "  (2..n).each do |i|\n    if n %\
    \ i == 0\n      return largest_prime_factor(n / i)\n    end\n  end\n  n\nend",
  "  # TODO\nend", "  # TODO: implement me\nend", "  (2..n).each do |i|\n    if n\
    \ % i == 0\n      return largest_prime_factor(n / i)\n    end\n  end\n  n\nend",
  "  # TODO: implement me\nend", "  # TODO\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
