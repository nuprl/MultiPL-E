name: HumanEval_59_largest_prime_factor
language: rb
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  # >>> largest_prime_factor.call(13195)\n# 29\n# >>> largest_prime_factor.call(2048)\n\
  # 2\ndef largest_prime_factor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n\
  \    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n\
  \    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n\
  \    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n\
  \  end\nend\n"
completions: ["  # TODO\nend", "  # TODO\nend", "  # TODO: implement me!\nend", " \
    \ # TODO\nend", "  # TODO: Implement this method\nend", "  # TODO: Implement me!\n\
    end", "  # TODO: implement me\nend", "  # TODO: implement me\nend", "  # TODO:\
    \ implement me\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  return n\nend", "  factor = 2\n  while\
    \ n > 1\n    if n % factor == 0\n      n /= factor\n      factor -= 1\n    end\n\
    \    factor += 1\n  end\n  factor\nend", "  # TODO\nend", "  # TODO: implement\
    \ me\nend", "  # TODO: implement this\nend", "  (2..n).each do |i|\n    if n %\
    \ i == 0\n      return largest_prime_factor(n / i)\n    end\n  end\n  n\nend",
  "  # TODO\nend", "  # TODO: implement me\nend", "  (2..n).each do |i|\n    if n\
    \ % i == 0\n      return largest_prime_factor(n / i)\n    end\n  end\n  n\nend",
  "  # TODO: implement me\nend", "  # TODO\nend", "  i = 2\n  while i < n\n    if\
    \ n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend",
  "  # TODO: implement this\nend", "  return n if prime?(n)\n  (2..n).each do |i|\n\
    \    if n % i == 0\n      return largest_prime_factor(n / i)\n    end\n  end\n\
    end", "  # TODO: implement me\nend", "  # TODO: implement me!\nend", "  # TODO:\
    \ implement this\nend", "  (2..n).each do |i|\n    if n % i == 0\n      return\
    \ largest_prime_factor(n / i)\n    end\n  end\n  n\nend", "  # TODO: Implement\
    \ this method.\nend", "  (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n  end\n  n\nend", "  # TODO\nend", "  # TODO: implement me\n\
    end", "  # TODO: implement this method\nend", "  # TODO: implement me\nend", " \
    \ # TODO\nend", "  # TODO\nend", "  # TODO: implement\nend", "  i = 2\n  while\
    \ i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n \
    \ end\n  i\nend", "  (2..n).each do |i|\n    if n % i == 0\n      n /= i\n   \
    \   return largest_prime_factor(n)\n    end\n  end\n  n\nend", "  # TODO: implement\
    \ me\nend", "  return n if n < 2\n  return 2 if n == 2\n  return 3 if n == 3\n\
    \  return 5 if n == 5\n  return 7 if n == 7\n  return 11 if n == 11\n  return\
    \ 13 if n == 13\n  return 17 if n == 17\n  return 19 if n == 19\n  return 23 if\
    \ n == 23\n  return 29 if n == 29\n  return 31 if n == 31\n  return 37 if n ==\
    \ 37\n  return 41 if n == 41\n  return 43 if n == 43\n  return 47 if n == 47\n\
    \  return 53 if n == 53\n  return 59 if n == 59\n  return 61 if n == 61\n  return\
    \ 67 if n == 67\n  return 71 if n == 71\n  return 73 if n == 73\n  return 79 if\
    \ n == 79\n  return 83 if n == 83\n  return 89 if n == 89\n  return 97 if n ==\
    \ 97\n  return 101 if n == 101\n  return 103 if n == 103\n  return 107 if n ==\
    \ 107\n  return 109 if n == 109\n  return 113 if n == 113\n  return 127 if n ==\
    \ 127\n  return 131 if n == 131\n  return 137 if n == 137\n  return 139 if n ==\
    \ 139\n  return 149 if n == 149\n  return 151 if n == 151\n  return 157 if n ==\
    \ 157\n  return 163 if n == 163\n  return 167 if n == 167\n  return 173 if n ==\
    \ 173\n  return 179 if n == 179\n  return 181 if n == 181\n  return 191 if n ==\
    \ 191\n  return 193 if n == 193\n  return 197 if n == 197\n  return 199 if n ==\
    \ 199\n  return 211 if n == 211\n  return 223 if n == 223\n  return 227 if n ==\
    \ 227\n  return 229 if n == 229\n  return 233 if n == 233\n  return 239 if n ==\
    \ 239\n  return 241 if n == 241\n  return 251 if n == 251\n  return 257 if n ==\
    \ 257\n  return 263 if n == 263\n  return 269 if n == 269\n  return 271 if n ==\
    \ 271\n  return 277 if n == 277\n  return 281 if n == 281\n  return 283 if n ==\
    \ 283\n  return 293 if n == 293\n  return 307 if n == 307", "  # TODO: implement\
    \ me!\nend", "  # TODO\nend", "  # TODO: implement\nend", "  # TODO: implement\n\
    end", "  # TODO: implement me\nend", "  # TODO\nend", "  # TODO\nend", "  # TODO:\
    \ implement me\nend", "  # TODO: implement this\nend", "  i = 2\n  while i < n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\n\
    end", "  prime_factors(n).max\nend", "  # TODO: implement this method\nend", " \
    \ return nil if n <= 1\n  return n if is_prime?(n)\n  return largest_prime_factor(n\
    \ / 2) if n % 2 == 0\n  return largest_prime_factor(n / 3) if n % 3 == 0\n  return\
    \ largest_prime_factor(n / 5) if n % 5 == 0\n  return largest_prime_factor(n /\
    \ 7) if n % 7 == 0\n  return largest_prime_factor(n / 11) if n % 11 == 0\n  return\
    \ largest_prime_factor(n / 13) if n % 13 == 0\n  return largest_prime_factor(n\
    \ / 17) if n % 17 == 0\n  return largest_prime_factor(n / 19) if n % 19 == 0\n\
    \  return largest_prime_factor(n / 23) if n % 23 == 0\n  return largest_prime_factor(n\
    \ / 29) if n % 29 == 0\n  return largest_prime_factor(n / 31) if n % 31 == 0\n\
    \  return largest_prime_factor(n / 37) if n % 37 == 0\n  return largest_prime_factor(n\
    \ / 41) if n % 41 == 0\n  return largest_prime_factor(n / 43) if n % 43 == 0\n\
    \  return largest_prime_factor(n / 47) if n % 47 == 0\n  return largest_prime_factor(n\
    \ / 53) if n % 53 == 0\n  return largest_prime_factor(n / 59) if n % 59 == 0\n\
    \  return largest_prime_factor(n / 61) if n % 61 == 0\n  return largest_prime_factor(n\
    \ / 67) if n % 67 == 0\n  return largest_prime_factor(n / 71) if n % 71 == 0\n\
    \  return largest_prime_factor(n / 73) if n % 73 == 0\n  return largest_prime_factor(n\
    \ / 79) if n % 79 == 0\n  return largest_prime_factor(n / 83) if n % 83 == 0\n\
    \  return largest_prime_factor(n / 89) if n % 89 == 0\n  return largest_prime_factor(n\
    \ / 97) if n % 97 == 0\n  return largest_prime_factor(n / 101) if n % 101", " \
    \ return n if n == 1\n  return 2 if n == 2\n  return 3 if n == 3\n  return 5 if\
    \ n == 5\n  return 7 if n == 7\n  return 11 if n == 11\n  return 13 if n == 13\n\
    \  return 17 if n == 17\n  return 19 if n == 19\n  return 23 if n == 23\n  return\
    \ 29 if n == 29\n  return 31 if n == 31\n  return 37 if n == 37\n  return 41 if\
    \ n == 41\n  return 43 if n == 43\n  return 47 if n == 47\n  return 53 if n ==\
    \ 53\n  return 59 if n == 59\n  return 61 if n == 61\n  return 67 if n == 67\n\
    \  return 71 if n == 71\n  return 73 if n == 73\n  return 79 if n == 79\n  return\
    \ 83 if n == 83\n  return 89 if n == 89\n  return 97 if n == 97\n  return 101\
    \ if n == 101\n  return 103 if n == 103\n  return 107 if n == 107\n  return 109\
    \ if n == 109\n  return 113 if n == 113\n  return 127 if n == 127\n  return 131\
    \ if n == 131\n  return 137 if n == 137\n  return 139 if n == 139\n  return 149\
    \ if n == 149\n  return 151 if n == 151\n  return 157 if n == 157\n  return 163\
    \ if n == 163\n  return 167 if n == 167\n  return 173 if n == 173\n  return 179\
    \ if n == 179\n  return 181 if n == 181\n  return 191 if n == 191\n  return 193\
    \ if n == 193\n  return 197 if n == 197\n  return 199 if n == 199\n  return 211\
    \ if n == 211\n  return 223 if n == 223\n  return 227 if n == 227\n  return 229\
    \ if n == 229\n  return 233 if n == 233\n  return 239 if n == 239\n  return 241\
    \ if n == 241\n  return 251 if n == 251\n  return 257 if n == 257\n  return 263\
    \ if n == 263\n  return 269 if n == 269\n  return 271 if n == 271\n  return 277\
    \ if n == 277\n  return 281 if n == 281\n  return 283 if n == 283\n  return 293\
    \ if n == 293\n  return 307 if n == 307", "  # TODO: implement me\nend", "  #\
    \ TODO: implement me\nend", "  # TODO\nend", "  # TODO: implement this method\n\
    end", "  # Your code here\nend", "  # TODO: Implement me!\nend", "  (2..n).each\
    \ do |i|\n    if n % i == 0\n      return largest_prime_factor(n / i)\n    end\n\
    \  end\n  n\nend", "  (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n  end\n  n\nend", "  # TODO: implement me\nend", "  # TODO: implement\
    \ me\nend", "  # TODO\nend", "  factors = []\n  (2..n).each do |i|\n    if n %\
    \ i == 0\n      factors << i\n      n /= i\n    end\n  end\n  factors.max\nend",
  "  # TODO: implement me!\nend", "  # TODO: implement me\nend", "  return n if is_prime?(n)\n\
    \  largest_prime_factor(n / smallest_prime_factor(n))\nend", "  # TODO: implement\
    \ this method\nend", "  # TODO: implement me\nend", "  # TODO: implement\nend",
  "  # TODO: implement me\nend", "  i = n\n  while i > 1\n    if n % i == 0 && prime?(i)\n\
    \      return i\n    end\n    i -= 1\n  end\nend", "  i = 2\n  while i <= n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  # TODO: implement me!\nend", "  # TODO\nend", "  (2..n).each do |i|\n\
    \    if n % i == 0\n      return largest_prime_factor(n / i)\n    end\n  end\n\
    \  n\nend", "  # TODO: implement\nend", "  # your code here\nend", "  (2..n).each\
    \ do |i|\n    if n % i == 0\n      return largest_prime_factor(n / i)\n    end\n\
    \  end\n  n\nend", "  return n if n.prime?\n  (2..n).each do |i|\n    if n % i\
    \ == 0\n      return largest_prime_factor(n / i)\n    end\n  end\nend", "  return\
    \ nil if n <= 1\n  return n if is_prime?(n)\n  (2..n).each do |i|\n    if n %\
    \ i == 0\n      return largest_prime_factor(n / i)\n    end\n  end\nend", "  #\
    \ TODO: implement me\nend", "  # TODO\nend", "  # TODO: Implement me!\nend", " \
    \ (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n /\
    \ i)\n    end\n  end\n  n\nend", "  return n if n.prime?\n  (2..n).each do |i|\n\
    \    return i if n % i == 0 && i.prime?\n  end\nend", "  # TODO\nend", "  # TODO\n\
    end", "  # TODO: implement me\nend", "  # TODO: implement me\nend", "  i = 2\n\
    \  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n\
    \  end\n  n\nend", "  return n if n <= 1\n  return 2 if n == 2\n  return 3 if\
    \ n == 3\n  return 5 if n == 5\n  return 7 if n == 7\n  return 11 if n == 11\n\
    \  return 13 if n == 13\n  return 17 if n == 17\n  return 19 if n == 19\n  return\
    \ 23 if n == 23\n  return 29 if n == 29\n  return 31 if n == 31\n  return 37 if\
    \ n == 37\n  return 41 if n == 41\n  return 43 if n == 43\n  return 47 if n ==\
    \ 47\n  return 53 if n == 53\n  return 59 if n == 59\n  return 61 if n == 61\n\
    \  return 67 if n == 67\n  return 71 if n == 71\n  return 73 if n == 73\n  return\
    \ 79 if n == 79\n  return 83 if n == 83\n  return 89 if n == 89\n  return 97 if\
    \ n == 97\n  return 101 if n == 101\n  return 103 if n == 103\n  return 107 if\
    \ n == 107\n  return 109 if n == 109\n  return 113 if n == 113\n  return 127 if\
    \ n == 127\n  return 131 if n == 131\n  return 137 if n == 137\n  return 139 if\
    \ n == 139\n  return 149 if n == 149\n  return 151 if n == 151\n  return 157 if\
    \ n == 157\n  return 163 if n == 163\n  return 167 if n == 167\n  return 173 if\
    \ n == 173\n  return 179 if n == 179\n  return 181 if n == 181\n  return 191 if\
    \ n == 191\n  return 193 if n == 193\n  return 197 if n == 197\n  return 199 if\
    \ n == 199\n  return 211 if n == 211\n  return 223 if n == 223\n  return 227 if\
    \ n == 227\n  return 229 if n == 229\n  return 233 if n == 233\n  return 239 if\
    \ n == 239\n  return 241 if n == 241\n  return 251 if n == 251\n  return 257 if\
    \ n == 257\n  return 263 if n == 263\n  return 269 if n == 269\n  return 271 if\
    \ n == 271\n  return 277 if n == 277\n  return 281 if n == 281\n  return 283 if\
    \ n == 283\n  return 293 if n == 293\n  return 307 if n == 307", "  # TODO: implement\
    \ me!\nend", "  # TODO: implement me\nend", "  # TODO: implement me\nend", " \
    \ # TODO: implement this method\nend", "  # TODO: implement me\nend", "  # TODO:\
    \ implement me\nend", "  return n if is_prime(n)\n  (2..n).each do |i|\n    if\
    \ n % i == 0\n      return largest_prime_factor(n / i)\n    end\n  end\nend",
  "  factor = 2\n  while n > 1\n    if n % factor == 0\n      n /= factor\n      factor\
    \ -= 1\n    end\n    factor += 1\n  end\n  factor\nend", "  i = 2\n  while i <\
    \ n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  n\nend", "  (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n  end\n  n\nend", "  (2..n).each do |i|\n    return n if n ==\
    \ i\n    if n % i == 0\n      return largest_prime_factor(n / i)\n    end\n  end\n\
    end", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n   \
    \   i += 1\n    end\n  end\n  n\nend", "  i = 2\n  while i < n\n    if n % i ==\
    \ 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  # TODO:\
    \ implement me\nend", "  # TODO: Implement this method\nend", "  # TODO: implement\
    \ me\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  n\nend", "  # TODO: implement me\nend", "  #\
    \ TODO\nend", "  # TODO: implement me\nend", "  i = 2\n  while i <= n\n    if\
    \ n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend",
  "  prime_factors(n).max\nend", "  # TODO: implement me\nend", "  # TODO: Implement\
    \ me!\nend", "  # TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n  \
    \    n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO: implement\n\
    end", "  # TODO: implement me\nend", "  # TODO: implement me\nend", "  # TODO\n\
    end", "  # TODO\nend", "  return n if n.prime?\n  factors = n.prime_factors\n\
    \  factors.max\nend", "  # TODO: Implement me!\nend", "  # TODO\nend", "  (2..n).each\
    \ do |i|\n    if n % i == 0\n      return largest_prime_factor(n / i)\n    end\n\
    \  end\n  n\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO\nend", "  # TODO:\
    \ implement this method\nend", "  # TODO: implement me\nend", "  return n if n.prime?\n\
    \  (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n  end\nend", "  (2..n).each do |i|\n    if n % i == 0\n     \
    \ return largest_prime_factor(n / i)\n    end\n  end\n  n\nend", "  (2..n).each\
    \ do |i|\n    if n % i == 0\n      return largest_prime_factor(n / i)\n    end\n\
    \  end\n  n\nend", "  # TODO: implement me\nend", "  i = 2\n  while i < n\n  \
    \  if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\n\
    end", "  return n if n.prime?\n  (2..n).each do |i|\n    if n % i == 0\n     \
    \ return largest_prime_factor(n / i)\n    end\n  end\nend", "  # TODO: implement\
    \ me\nend", "  # TODO: implement me\nend", "  # TODO: implement me\nend", "  #\
    \ TODO: implement me\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n    \
    \  n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO: implement\
    \ me\nend", "  # TODO: implement me\nend", "  # TODO: Implement this method.\n\
    end", "  # TODO: implement me\nend", "  # TODO: implement me\nend", "  # TODO:\
    \ implement me\nend", "  # TODO: implement me\nend", "  # TODO: implement me\n\
    end", "  # TODO\nend", "  # TODO: implement this\nend", "  # TODO: implement this\n\
    end", "  prime_factors(n).max\nend", "  # TODO: Implement this method\nend", " \
    \ # TODO\nend", "  factors = []\n  (2..n).each do |i|\n    if n % i == 0\n   \
    \   factors << i\n      n /= i\n    end\n  end\n  factors.max\nend", "  # TODO:\
    \ implement me\nend", "  n.downto(2) do |i|\n    if n % i == 0 && prime?(i)\n\
    \      return i\n    end\n  end\nend", "  # TODO: Implement this method.\nend",
  "  # TODO: implement me\nend", "  return n if n.prime?\n  (2..n).each do |i|\n \
    \   return largest_prime_factor(n / i) if n % i == 0\n  end\nend", "  # TODO:\
    \ implement me\nend", "  (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n  end\n  n\nend", "  # TODO\nend", "  # TODO\nend", "  # TODO\n\
    end", "  # Your code here\nend", "  # TODO\nend", "  # TODO: implement me\nend",
  "  # TODO: implement me\nend", "  # TODO: implement\nend", "  return nil if n <=\
    \ 1\n  return n if is_prime?(n)\n  factor = 2\n  while factor <= n\n    if n %\
    \ factor == 0\n      n /= factor\n      factor = 2\n    else\n      factor +=\
    \ 1\n    end\n  end\n  factor\nend", "  return n if n.prime?\n  (2..n).each do\
    \ |i|\n    return i if n % i == 0 && i.prime?\n  end\nend", "  # TODO: implement\
    \ me\nend", "  (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n  end\n  n\nend", "  # TODO: implement this method\nend", " \
    \ # TODO: implement me\nend", "  # TODO\nend", "  # TODO\nend", "  # TODO: implement\
    \ me\nend", "  # Your code here\nend", "  # TODO\nend", "  # TODO: implement me\n\
    end", "  return n if n.prime?\n  (2..n).each do |i|\n    return i if n % i ==\
    \ 0 && i.prime?\n  end\nend", "  # TODO: implement this\nend", "  # TODO\nend",
  "  # TODO: implement\nend", "  (2..n).each do |i|\n    if n % i == 0\n      return\
    \ largest_prime_factor(n / i)\n    end\n  end\n  n\nend", "  # TODO: implement\
    \ me\nend", "  # TODO\nend", "  factor = 2\n  while n > 1\n    if n % factor ==\
    \ 0\n      n /= factor\n      factor -= 1\n    end\n    factor += 1\n  end\n \
    \ factor\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n   \
    \ else\n      i += 1\n    end\n  end\n  n\nend", "  # TODO\nend", "  # TODO: implement\
    \ this\nend", "  # TODO: implement me!\nend", "  # TODO: implement\nend", "  #\
    \ TODO: implement this method\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
