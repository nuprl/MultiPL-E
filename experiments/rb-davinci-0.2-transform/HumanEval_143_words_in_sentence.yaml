name: HumanEval_143_words_in_sentence
language: rb
prompt: "# You are given a string representing a sentence,\n# the sentence contains\
  \ some words separated by a space,\n# and you have to return a string that contains\
  \ the words from the original sentence,\n# whose lengths are prime numbers,\n# the\
  \ order of the words in the new string should be the same as the original one.\n\
  # Example 1:\n# >>> words_in_sentence.call(\"This is a test\")\n# \"is\"\n# Example\
  \ 2:\n# >>> words_in_sentence.call(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n\
  # * 1 <= len(sentence) <= 100\n# * sentence contains only letters\ndef words_in_sentence(sentence)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_in_sentence\n\
  \    candidate = method(:words_in_sentence)\n    assert_equal(\"is\", candidate.call(\"\
  This is a test\"))\n    assert_equal(\"go for\", candidate.call(\"lets go for swimming\"\
  ))\n    assert_equal(\"there is no place\", candidate.call(\"there is no place available\
  \ here\"))\n    assert_equal(\"Hi am Hussein\", candidate.call(\"Hi I am Hussein\"\
  ))\n    assert_equal(\"go for it\", candidate.call(\"go for it\"))\n    assert_equal(\"\
  \", candidate.call(\"here\"))\n    assert_equal(\"is\", candidate.call(\"here is\"\
  ))\n  end\nend\n"
completions: ["  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  words = sentence.split(' ')\n  prime_words = words.select { |word| prime?(word.length)\
    \ }\n  prime_words.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split(\" \")\n  words.select { |word| prime?(word.length)\
    \ }.join(\" \")\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split(\" \")\n  words.select { |word| is_prime?(word.length)\
    \ }.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  words = sentence.split(' ')\n  words.select { |word| prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  words\
    \ = sentence.split(' ')\n  words.select { |word| is_prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split(\" \")\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(\" \")\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split(\" \").select { |word| word.length.prime?\
    \ }.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  words = sentence.split(\" \")\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(\" \")\nend",
  "  sentence.split(\" \").select { |word| word.length.prime? }.join(\" \")\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  words = sentence.split(\" \")\n  prime_words = []\n  words.each\
    \ do |word|\n    prime_words << word if is_prime?(word.length)\n  end\n  prime_words.join(\"\
    \ \")\nend", "  sentence.split.select { |word| is_prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  # TODO: implement this method\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  # TODO: implement me\nend", "  sentence.split.select {\
    \ |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend",
  "  words = sentence.split(' ')\n  prime_words = []\n  words.each do |word|\n   \
    \ prime_words << word if is_prime?(word.length)\n  end\n  prime_words.join(' ')\n\
    end", "  sentence.split(' ').select { |word| prime?(word.length) }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  words = sentence.split\n  words.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  words = sentence.split(\" \")\n  words.select { |word|\
    \ is_prime?(word.length) }.join(\" \")\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  words = sentence.split(' ')\n  words.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  words = sentence.split(\" \")\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(\" \")\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split(\" \").select\
    \ { |word| prime?(word.length) }.join(\" \")\nend", "  sentence.split.select {\
    \ |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  words = sentence.split\n  prime_words = words.select { |word| is_prime?(word.length)\
    \ }\n  prime_words.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  # your code here\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  # your\
    \ code here\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  words = sentence.split\n\
    \  words.select { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split(\"\
    \ \").select { |word| prime?(word.length) }.join(\" \")\nend", "  words = sentence.split(\"\
    \ \")\n  prime_words = []\n  words.each do |word|\n    prime_words << word if\
    \ is_prime?(word.length)\n  end\n  prime_words.join(\" \")\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split(\" \").select { |word|\
    \ prime?(word.length) }.join(\" \")\nend", "  words = sentence.split(\" \")\n\
    \  words.select { |word| is_prime?(word.length) }.join(\" \")\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split\n  prime_words = []\n  words.each do |word|\n\
    \    prime_words << word if is_prime?(word.length)\n  end\n  prime_words.join('\
    \ ')\nend", "  words = sentence.split(\" \")\n  words.select { |word| is_prime?(word.length)\
    \ }.join(\" \")\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  words = sentence.split(\" \")\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(\" \")\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split(\"\
    \ \")\n  primes = []\n  words.each do |word|\n    primes << word if is_prime?(word.length)\n\
    \  end\n  primes.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split(' ')\n\
    \  prime_words = []\n  words.each do |word|\n    prime_words << word if is_prime?(word.length)\n\
    \  end\n  prime_words.join(' ')\nend", "  words = sentence.split(' ')\n  words.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  # TODO: implement this function\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split(\"\
    \ \")\n  words.select { |word| prime?(word.length) }.join(\" \")\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  words = sentence.split\n  words.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  words = sentence.split\n  prime_words = words.select {\
    \ |word| prime?(word.length) }\n  prime_words.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split(\" \").select { |word| is_prime?(word.length)\
    \ }.join(\" \")\nend", "  words = sentence.split(' ')\n  words.select { |word|\
    \ prime?(word.length) }.join(' ')\nend", "  sentence.split(\" \").select { |word|\
    \ is_prime?(word.length) }.join(\" \")\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  # TODO:\
    \ implement me\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  words = sentence.split(\" \")\n  words.select { |word| is_prime?(word.length)\
    \ }.join(\" \")\nend", "  # write your code here\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend",
  "  words = sentence.split(\" \")\n  prime_words = []\n  words.each do |word|\n \
    \   prime_words << word if is_prime?(word.length)\n  end\n  prime_words.join(\"\
    \ \")\nend", "  words = sentence.split(\" \")\n  primes = []\n  words.each do\
    \ |word|\n    primes << word if is_prime?(word.length)\n  end\n  primes.join(\"\
    \ \")\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  words\
    \ = sentence.split\n  words.select { |word| word.length.prime? }.join(' ')\nend",
  "  words = sentence.split(' ')\n  words.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  words = sentence.split(' ')\n  prime_words = []\n  words.each do\
    \ |word|\n    prime_words << word if is_prime?(word.length)\n  end\n  prime_words.join('\
    \ ')\nend", "  sentence.split.select { |word| is_prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  words\
    \ = sentence.split(\" \")\n  result = []\n  words.each do |word|\n    result <<\
    \ word if is_prime?(word.length)\n  end\n  result.join(\" \")\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  # TODO: implement me\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  words = sentence.split(\" \")\n  prime_words\
    \ = []\n  words.each do |word|\n    prime_words << word if is_prime?(word.length)\n\
    \  end\n  prime_words.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  words = sentence.split(' ')\n  words.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  words = sentence.split(' ')\n  words.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  words = sentence.split(\" \")\n  words.select { |word| is_prime?(word.length)\
    \ }.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split\n  words.select { |word| prime?(word.length) }.join('\
    \ ')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
