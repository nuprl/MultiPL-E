name: HumanEval_154_cycpattern_check
language: rb
prompt: "# You are given 2 words. You need to return True if the second word or any\
  \ of its rotations is a substring in the first word\n# >>> cycpattern_check.call(\"\
  abcd\", \"abd\")\n# false\n# >>> cycpattern_check.call(\"hello\", \"ell\")\n# true\n\
  # >>> cycpattern_check.call(\"whassup\", \"psus\")\n# false\n# >>> cycpattern_check.call(\"\
  abab\", \"baa\")\n# true\n# >>> cycpattern_check.call(\"efef\", \"eeff\")\n# false\n\
  # >>> cycpattern_check.call(\"himenss\", \"simen\")\n# true\ndef cycpattern_check(a,\
  \ b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_cycpattern_check\n\
  \    candidate = method(:cycpattern_check)\n    assert_equal(false, candidate.call(\"\
  xyzw\", \"xyw\"))\n    assert_equal(true, candidate.call(\"yello\", \"ell\"))\n\
  \    assert_equal(false, candidate.call(\"whattup\", \"ptut\"))\n    assert_equal(true,\
  \ candidate.call(\"efef\", \"fee\"))\n    assert_equal(false, candidate.call(\"\
  abab\", \"aabb\"))\n    assert_equal(true, candidate.call(\"winemtt\", \"tinem\"\
  ))\n  end\nend\n"
completions: ["  b.length.times do\n    b = b[1..-1] + b[0]\n    return true if a.include?(b)\n\
    \  end\n  false\nend", "  return false if a.length < b.length\n  a.length.times\
    \ do |i|\n    return true if a[i..-1] + a[0...i] == b\n  end\n  false\nend", " \
    \ a.include?(b) || a.include?(b.reverse)\nend", "  b.length.times do\n    b =\
    \ b[1..-1] + b[0]\n    return true if a.include?(b)\n  end\n  false\nend", " \
    \ b.length.times do\n    b = b[1..-1] + b[0]\n    return true if a.include?(b)\n\
    \  end\n  false\nend", "  a.include?(b) || a.include?(b[1..-1] + b[0]) || a.include?(b[2..-1]\
    \ + b[0..1]) || a.include?(b[3..-1] + b[0..2])\nend", "  b.length.times do\n \
    \   b = b[1..-1] + b[0]\n    return true if a.include?(b)\n  end\n  false\nend",
  "  a.length.times do\n    a = a[1..-1] + a[0]\n    return true if a.include?(b)\n\
    \  end\n  false\nend", "  b.length.times do\n    b = b[1..-1] + b[0]\n    return\
    \ true if a.include?(b)\n  end\n  false\nend", "  return false if a.length < b.length\n\
    \  a.length.times do |i|\n    return true if a[i..-1] + a[0...i] == b\n  end\n\
    \  false\nend", "  b.length.times do\n    b = b[1..-1] + b[0]\n    return true\
    \ if a.include?(b)\n  end\n  false\nend", "  a.include?(b) || a.include?(b.reverse)\n\
    end", "  a.include?(b) || a.include?(b[1..-1] + b[0]) || a.include?(b[2..-1] +\
    \ b[0..1]) || a.include?(b[3..-1] + b[0..2])\nend", "  a.length.times do\n   \
    \ a = a[1..-1] + a[0]\n    return true if a.include?(b)\n  end\n  false\nend",
  "  return false if a.length < b.length\n  b.length.times do |i|\n    return true\
    \ if a.include?(b)\n    b = b[1..-1] + b[0]\n  end\n  false\nend", "  a.length.times\
    \ do\n    a = a[1..-1] + a[0]\n    return true if a.include?(b)\n  end\n  false\n\
    end", "  return false if a.length < b.length\n  a.length.times do |i|\n    return\
    \ true if a[i..-1] + a[0...i] == b\n  end\n  false\nend", "  b.length.times do\n\
    \    b = b[1..-1] + b[0]\n    return true if a.include?(b)\n  end\n  false\nend",
  "  return false if a.length < b.length\n  return true if a.include?(b)\n  b = b.split('')\n\
    \  b.rotate!\n  while b.join != b.rotate.join\n    return true if a.include?(b.join)\n\
    \    b.rotate!\n  end\n  false\nend", "  a.length == b.length && (a + a).include?(b)\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
