name: HumanEval_18_how_many_times
language: rb
prompt: "# Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n# >>> how_many_times.call(\"\", \"a\")\n# 0\n# >>> how_many_times.call(\"\
  aaa\", \"a\")\n# 3\n# >>> how_many_times.call(\"aaaa\", \"aa\")\n# 3\ndef how_many_times(string,\
  \ substring)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
  \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\"\
  , \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
  \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
  john doe\", \"john\"))\n  end\nend\n"
completions: ["  string.scan(/(?=#{substring})/).count\nend", "  count = 0\n  index\
    \ = 0\n  while index < string.length\n    if string[index] == substring[0]\n \
    \     if string[index..index + substring.length - 1] == substring\n        count\
    \ += 1\n      end\n    end\n    index += 1\n  end\n  count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  count = 0\n  string.scan(substring)\
    \ { count += 1 }\n  count\nend", "  return 0 if string.empty? || substring.empty?\n\
    \  string.scan(substring).count\nend", "  string.scan(substring).length\nend",
  "  return 0 if string.empty? || substring.empty?\n  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).length\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  string.scan(substring).length\n\
    end", "  # TODO: implement the method\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).length\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
