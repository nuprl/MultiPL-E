name: HumanEval_135_can_arrange
language: rb
prompt: "# Create a function which returns the largest index of an element which\n\
  # is not greater than or equal to the element immediately preceding it. If\n# no\
  \ such element exists then return -1. The given array will not contain\n# duplicate\
  \ values.\n# Examples:\n# >>> can_arrange.call([1, 2, 4, 3, 5])\n# 3\n# >>> can_arrange.call([1,\
  \ 2, 3])\n# -1\ndef can_arrange(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_can_arrange\n\
  \    candidate = method(:can_arrange)\n    assert_equal(3, candidate.call([1, 2,\
  \ 4, 3, 5]))\n    assert_equal(-1, candidate.call([1, 2, 4, 5]))\n    assert_equal(2,\
  \ candidate.call([1, 4, 2, 5, 6, 7, 8, 9, 10]))\n    assert_equal(4, candidate.call([4,\
  \ 8, 5, 7, 3]))\n    assert_equal(-1, candidate.call([]))\n  end\nend\n"
completions: ["  arr.each_with_index do |e, i|\n    return i - 1 if e < arr[i - 1]\n\
    \  end\n  -1\nend", "  arr.each_with_index do |e, i|\n    return i if arr[i] <\
    \ arr[i - 1]\n  end\n  -1\nend", "  # Your code here\nend", "  arr.each_with_index\
    \ do |e, i|\n    return i - 1 if arr[i + 1] && arr[i + 1] < e\n  end\n  -1\nend",
  "  arr.each_with_index do |e, i|\n    if i > 0\n      return i - 1 if arr[i - 1]\
    \ >= e\n    end\n  end\n  -1\nend", "  # TODO: implement this method\nend", " \
    \ arr.each_with_index do |e, i|\n    return i - 1 if e < arr[i - 1]\n  end\n \
    \ -1\nend", "  arr.each_with_index do |el, i|\n    return i - 1 if arr[i - 1]\
    \ && el < arr[i - 1]\n  end\n  -1\nend", "  arr.each_with_index do |el, i|\n \
    \   return i - 1 if el < arr[i - 1]\n  end\n  -1\nend", "  arr.each_with_index\
    \ do |e, i|\n    return i - 1 if e < arr[i - 1]\n  end\n  -1\nend", "  arr.each_with_index\
    \ do |el, i|\n    if i == 0\n      next\n    elsif el < arr[i - 1]\n      return\
    \ i - 1\n    end\n  end\n  -1\nend", "  (arr.size - 1).downto(0).each do |i|\n\
    \    return i if arr[i] < arr[i - 1]\n  end\n  -1\nend", "  arr.each_with_index\
    \ do |e, i|\n    return i - 1 if e < arr[i - 1]\n  end\n  -1\nend", "  arr.each_with_index\
    \ do |num, index|\n    return index - 1 if num < arr[index - 1]\n  end\n  -1\n\
    end", "  arr.each_with_index do |e, i|\n    return i - 1 if arr[i + 1] && arr[i\
    \ + 1] < e\n  end\n  -1\nend", "  arr.each_with_index do |e, i|\n    return i\
    \ - 1 if e < arr[i - 1]\n  end\n  -1\nend", "  arr.each_with_index do |el, i|\n\
    \    return i - 1 if el < arr[i - 1]\n  end\n  -1\nend", "  arr.each_with_index\
    \ do |e, i|\n    return i if e < arr[i-1]\n  end\n  -1\nend", "  arr.each_with_index.reverse_each.find\
    \ { |e, i| e < arr[i - 1] }.try(:last) || -1\nend", "  arr.each_with_index do\
    \ |e, i|\n    return i - 1 if e < arr[i - 1]\n  end\n  -1\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
