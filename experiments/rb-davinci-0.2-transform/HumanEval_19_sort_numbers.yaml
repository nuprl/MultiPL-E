name: HumanEval_19_sort_numbers
language: rb
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\ndef\
  \ sort_numbers(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
  \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
  three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
  \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
  ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
  \ five four three two one zero\"))\n  end\nend\n"
completions: ["  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\n\
    end", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |number|\
    \ number_to_int(number) }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split(' ').sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |num|\
    \ num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\n\
    end", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend", " \
    \ numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |number| number_to_int(number) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |number| NUMBERS.index(number) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
