name: HumanEval_19_sort_numbers
language: rb
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\ndef\
  \ sort_numbers(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
  \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
  three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
  \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
  ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
  \ five four three two one zero\"))\n  end\nend\n"
completions: ["  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\n\
    end", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |number|\
    \ number_to_int(number) }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split(' ').sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |num|\
    \ num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\n\
    end", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend", " \
    \ numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |number| number_to_int(number) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |number| NUMBERS.index(number) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS[number]\
    \ }.join(' ')\nend", "  numbers.split(' ').sort_by { |number| number_to_int(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend", " \
    \ numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split('\
    \ ').sort_by { |num| num_to_i(num) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |n|\
    \ NUMBERS.index(n) }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number)\
    \ }.join(' ')\nend", "  numbers.split(' ').sort_by { |number| number_to_int(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\n\
    end", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| NUMBERS[num] }.join(' ')\nend", " \
    \ numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |num|\
    \ NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| number_to_i(number) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |n| NUMBERS.index(n) }.join(' ')\nend",
  "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| number_to_int(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |number| number_to_int(number) }.join('\
    \ ')\nend", "  # TODO: implement\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |word| word_to_number(word) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |number| number_to_i(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend", " \
    \ numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |number| number_to_i(number) }.join(' ')\nend", "  numbers.split.sort_by {\
    \ |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |num|\
    \ num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |number| number_to_i(number) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |number| NUMBERS.index(number) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |number| number_to_int(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers_hash = {\n    'zero'\
    \ => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n\
    \    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n   \
    \ 'nine' => 9\n  }\n  numbers_array = numbers.split\n  numbers_array.sort_by!\
    \ { |number| numbers_hash[number] }\n  numbers_array.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split(' ').sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |number| number_to_int(number) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |num|\
    \ num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |number| number_to_int(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| number_to_int(number)\
    \ }.join(' ')\nend", "  # TODO: Implement this method\nend", "  numbers.split('\
    \ ').sort_by { |number| NUMBERS.index(number) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |word|\
    \ NUMBERS.index(word) }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend", " \
    \ numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  number_map = {\n\
    \    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four'\
    \ => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' =>\
    \ 8,\n    'nine' => 9\n  }\n  numbers.split(' ').sort_by { |number| number_map[number]\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\n\
    end", "  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\n\
    end", "  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\n\
    end", "  numbers.split(' ').sort_by { |num| NUMBERS.index(num) }.join(' ')\nend",
  "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |word| word_to_number(word)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\n\
    end", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend", " \
    \ numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend", " \
    \ numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |number| number_to_int(number) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend", " \
    \ numbers.split(' ').sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |word| word_to_number(word) }.join(' ')\nend", "  numbers.split.sort_by {\
    \ |number| NUMBERS.index(number) }.join(' ')\nend", "  numbers.split.sort_by {\
    \ |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend", " \
    \ numbers.split.sort_by { |number| number_to_int(number) }.join(' ')\nend", " \
    \ numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| numeral_to_number(num) }.join(' ')\nend", "  numbers.split.sort_by {\
    \ |number| NUMBERS.index(number) }.join(' ')\nend", "  numbers.split.sort_by {\
    \ |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |number| NUMBERS.index(number) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| number_to_int(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |word| word_to_number(word) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |word| WORD_TO_NUMBER[word] }.join(' ')\n\
    end", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split('\
    \ ').sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num|\
    \ NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |number| NUMBERS.index(number) }.join(' ')\nend", " \
    \ numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |n|\
    \ NUMBERS.index(n) }.join(' ')\nend", "  number_map = {\n    \"zero\" => 0,\n\
    \    \"one\" => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n\
    \    \"five\" => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\" =>\
    \ 8,\n    \"nine\" => 9\n  }\n  numbers.split.sort_by { |number| number_map[number]\
    \ }.join(\" \")\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\n\
    end", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |n| NUMBERS.index(n) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num)\
    \ }.join(' ')\nend", "  numbers.split.sort_by{|num| num.to_i}.join(' ')\nend",
  "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split(' ').sort_by { |num| NUMBERS.index(num)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| number_to_i(number) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |number| number_to_i(number) }.join(' ')\n\
    end", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers_array\
    \ = numbers.split(\" \")\n  numbers_array.sort! { |a, b| NUMBERS[a] <=> NUMBERS[b]\
    \ }\n  numbers_array.join(\" \")\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |word| NUMBERS.index(word) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split.sort_by { |num|\
    \ num.to_i }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| NUMBERS.index(number)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split(' ').sort_by { |num| NUMBERS.index(num)\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |num| num.to_i }.join(' ')\nend",
  "  numbers.split.sort_by { |num| NUMBERS.index(num) }.join(' ')\nend", "  numbers.split('\
    \ ').sort_by { |number| NUMBERS.index(number) }.join(' ')\nend", "  numbers.split.sort_by\
    \ { |num| num.to_i }.join(' ')\nend", "  numbers.split(' ').sort_by { |num| num.to_i\
    \ }.join(' ')\nend", "  numbers.split.sort_by { |number| number_to_i(number) }.join('\
    \ ')\nend", "  numbers.split.sort_by { |number| number_to_int(number) }.join('\
    \ ')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
