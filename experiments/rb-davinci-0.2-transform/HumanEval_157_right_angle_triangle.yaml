name: HumanEval_157_right_angle_triangle
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
  \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
  \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
  \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
  \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
  \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
  \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
  \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
  \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
  \ 2, 10))\n  end\nend\n"
completions: ["  # Your code here\nend", "  # TODO: implement me\nend", "  # TODO:\
    \ implement this method\nend", "  # Your code goes here\nend", "  # Your code\
    \ here\nend", "  if (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 +\
    \ c**2 == a**2)\n    return true\n  else\n    return false\n  end\nend", "  #\
    \ Your code here\nend", "  # TODO: implement me\nend", "  # TODO: implement\n\
    end", "  # Your code here\nend", "  # TODO: Implement this function\nend", " \
    \ # Your code here\nend", "  if a ** 2 + b ** 2 == c ** 2\n    return true\n \
    \ elsif a ** 2 + c ** 2 == b ** 2\n    return true\n  elsif b ** 2 + c ** 2 ==\
    \ a ** 2\n    return true\n  else\n    return false\n  end\nend", "  # Your code\
    \ here\nend", "  if a**2 + b**2 == c**2\n    return true\n  else\n    return false\n\
    \  end\nend", "  # Your code here\nend", "  # TODO: implement me\nend", "  # Your\
    \ code here\nend", "  if a**2 + b**2 == c**2\n    return true\n  elsif a**2 +\
    \ c**2 == b**2\n    return true\n  elsif b**2 + c**2 == a**2\n    return true\n\
    \  else\n    return false\n  end\nend", "  # TODO: Implement this method\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
