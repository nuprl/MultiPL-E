{
  "language": "rb",
  "name": "HumanEval_66_digitSum",
  "results": [
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |x| x > 64 && x < 91 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp3ie3l5y2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp3ie3l5y2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006864329 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.68 tests/s, 145.68 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.60 tests/s, 108.60 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.60 tests/s, 108.60 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map{|i| i.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp7nmf8f80\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp7nmf8f80.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00642104 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n155.74 tests/s, 155.74 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp209cxlvc\nStarted\n.\nFinished in 0.00049113 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2036.12 tests/s, 16288.97 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpm8nat7ox\nStarted\n.\nFinished in 0.000477873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2092.61 tests/s, 16740.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n > 64 && n < 91 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpnw9prldn\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpnw9prldn.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007164843 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n139.57 tests/s, 139.57 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp87pcgvh0\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp87pcgvh0.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006920841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.49 tests/s, 144.49 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp87pcgvh0\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp87pcgvh0.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006920841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.49 tests/s, 144.49 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.33 tests/s, 148.33 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|c| c.ord}.select{|c| c >= 65 && c <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpsldaqwyc\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpsldaqwyc.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007059688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.65 tests/s, 141.65 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp87pcgvh0\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp87pcgvh0.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006920841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.49 tests/s, 144.49 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|c| c.ord}.select{|c| c >= 65 && c <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpsldaqwyc\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpsldaqwyc.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007059688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.65 tests/s, 141.65 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.reduce(0) { |sum, c| c.ord.between?(65, 90) ? sum + c.ord : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpt6hlnzrk\nStarted\n.\nFinished in 0.000460055 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2173.65 tests/s, 17389.23 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.33 tests/s, 148.33 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').split('').map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpo6a0fk_y\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpo6a0fk_y.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.012623667 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.22 tests/s, 79.22 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').map{|x| x.ord}.select{|x| x > 64 && x < 91}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpbu88ocki\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpbu88ocki.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00662693 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.90 tests/s, 150.90 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgmi1yymj\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpgmi1yymj.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006389164 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.51 tests/s, 156.51 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpte6janyy\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpte6janyy.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008093423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.56 tests/s, 123.56 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgmi1yymj\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpgmi1yymj.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006389164 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.51 tests/s, 156.51 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp87pcgvh0\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp87pcgvh0.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006920841 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.49 tests/s, 144.49 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoq05i53n\nStarted\n.\nFinished in 0.000462532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2162.01 tests/s, 17296.10 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpm8nat7ox\nStarted\n.\nFinished in 0.000477873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2092.61 tests/s, 16740.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp6d3c6vr7\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp6d3c6vr7.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007109546 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n140.66 tests/s, 140.66 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.33 tests/s, 148.33 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.33 tests/s, 148.33 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpyaccq10d\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpyaccq10d.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008446511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.39 tests/s, 118.39 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpyaccq10d\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpyaccq10d.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008446511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.39 tests/s, 118.39 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz35_q5wv\nStarted\n.\nFinished in 0.000529322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1889.21 tests/s, 15113.67 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp22imvp6j\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp22imvp6j.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006313052 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.40 tests/s, 158.40 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp22imvp6j\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp22imvp6j.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006313052 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.40 tests/s, 158.40 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |i| i.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp1dvo87bc\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp1dvo87bc.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008444859 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.42 tests/s, 118.42 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').select { |x| x =~ /[A-Z]/ }.map { |x| x.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp0abfh6ul\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp0abfh6ul.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006756798 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.00 tests/s, 148.00 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp22imvp6j\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp22imvp6j.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006313052 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.40 tests/s, 158.40 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.60 tests/s, 108.60 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpym4ia19v\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpym4ia19v.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00677417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.62 tests/s, 147.62 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|c| c.ord}.select{|i| i >= 65 && i <= 90}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptryajpck\nStarted\n.\nFinished in 0.000483151 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2069.75 tests/s, 16557.97 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|c| c.ord}.select{|n| n >= 65 && n <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpe0w5al1o\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpe0w5al1o.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006923087 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n144.44 tests/s, 144.44 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp22imvp6j\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp22imvp6j.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006313052 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.40 tests/s, 158.40 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpym4ia19v\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpym4ia19v.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00677417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.62 tests/s, 147.62 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz35_q5wv\nStarted\n.\nFinished in 0.000529322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1889.21 tests/s, 15113.67 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.select { |c| c =~ /[A-Z]/ }.map { |c| c.ord }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpaqgc4k08\nStarted\n.\nFinished in 0.000464573 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2152.51 tests/s, 17220.11 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpym4ia19v\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpym4ia19v.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00677417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.62 tests/s, 147.62 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n.between?(65, 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptyj4w8dp\nStarted\n.\nFinished in 0.000465393 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2148.72 tests/s, 17189.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.33 tests/s, 148.33 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.33 tests/s, 148.33 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_char do |c|\n    sum += c.ord if c.ord >= 65 && c.ord <= 90\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpv9qs6stv\nStarted\n.\nFinished in 0.000461258 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2167.98 tests/s, 17343.87 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n  s.each_char { |c| sum += c.ord if c.ord.between?(65, 90) }\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ayx70p1\nStarted\n.\nFinished in 0.000470717 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2124.42 tests/s, 16995.35 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpym4ia19v\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpym4ia19v.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00677417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.62 tests/s, 147.62 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.33 tests/s, 148.33 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpvxi6jtow\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpvxi6jtow.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006857447 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n145.83 tests/s, 145.83 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgmi1yymj\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpgmi1yymj.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006389164 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.51 tests/s, 156.51 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c > 64 && c < 91 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpyu1sv6ti\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpyu1sv6ti.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007931434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n126.08 tests/s, 126.08 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpte6janyy\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpte6janyy.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008093423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.56 tests/s, 123.56 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp69zmz048\nStarted\n.\nFinished in 0.000460668 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2170.76 tests/s, 17366.09 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp22imvp6j\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp22imvp6j.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006313052 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.40 tests/s, 158.40 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select{|x| x >= 65 && x <= 90}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmprxjhkuu1\nStarted\n.\nFinished in 0.000480799 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2079.87 tests/s, 16638.97 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqq_hxons\nStarted\n.\nFinished in 0.000470392 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2125.89 tests/s, 17007.09 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoqm7omx0\nStarted\n.\nFinished in 0.000452767 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2208.64 tests/s, 17669.13 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c > 64 && c < 91 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpyu1sv6ti\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpyu1sv6ti.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007931434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n126.08 tests/s, 126.08 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpm8nat7ox\nStarted\n.\nFinished in 0.000477873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2092.61 tests/s, 16740.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').map{|x| x.ord}.select{|x| x >= 65 && x <= 90}.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpzi5muwna\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpzi5muwna.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00665006 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n150.37 tests/s, 150.37 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map{|x| x.ord}.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp5lhom_b5\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp5lhom_b5.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.012516856 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n79.89 tests/s, 79.89 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.33 tests/s, 148.33 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoq05i53n\nStarted\n.\nFinished in 0.000462532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2162.01 tests/s, 17296.10 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgmi1yymj\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpgmi1yymj.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006389164 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.51 tests/s, 156.51 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x >= 65 && x <= 90}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5btfz8ed\nStarted\n.\nFinished in 0.00102732 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n973.41 tests/s, 7787.25 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpoq05i53n\nStarted\n.\nFinished in 0.000462532 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2162.01 tests/s, 17296.10 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpa8mplhmc\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpa8mplhmc.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.014375918 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n69.56 tests/s, 69.56 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpyaccq10d\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpyaccq10d.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008446511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.39 tests/s, 118.39 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgmi1yymj\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpgmi1yymj.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006389164 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n156.51 tests/s, 156.51 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n108.60 tests/s, 108.60 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpfreutwz2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpfreutwz2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008264611 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n121.00 tests/s, 121.00 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |n| n >= 65 && n <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpu95yvrch\nStarted\n.\nFinished in 0.000470334 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2126.15 tests/s, 17009.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map{|i| i.ord}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzkd2x36y\nStarted\n.\nFinished in 0.000462377 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2162.74 tests/s, 17301.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |char| char.ord }.select { |ord| ord >= 65 && ord <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpe2in1ch8\nStarted\n.\nFinished in 0.000466514 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2143.56 tests/s, 17148.47 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmplinwgfn6\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmplinwgfn6.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.009326363 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n107.22 tests/s, 107.22 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.inject(0) { |sum, c| c =~ /[A-Z]/ ? sum + c.ord : sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpodxqx261\nStarted\n.\nFinished in 0.000441035 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2267.39 tests/s, 18139.15 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.select { |c| c.upcase == c }.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpc99o2q16\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpc99o2q16.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006257345 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.81 tests/s, 159.81 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map{|x| x.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgsc1is3n\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpgsc1is3n.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006512278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.56 tests/s, 153.56 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp49rrj767\nStarted\n.\nFinished in 0.000562292 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1778.44 tests/s, 14227.48 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpqt9ngob2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpqt9ngob2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006329139 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.00 tests/s, 158.00 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjzk0goad\nStarted\n.\nFinished in 0.000474056 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2109.46 tests/s, 16875.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|c| c.ord}.select{|c| c >= 65 && c <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpsldaqwyc\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpsldaqwyc.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.007059688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n141.65 tests/s, 141.65 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp7hu2roha\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp7hu2roha.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006107513 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n163.73 tests/s, 163.73 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').map(&:ord).select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp9_j7a8oo\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp9_j7a8oo.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006285452 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n159.10 tests/s, 159.10 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpym4ia19v\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpym4ia19v.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00677417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.62 tests/s, 147.62 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmprdffkr5o\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmprdffkr5o.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00628977 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.99 tests/s, 158.99 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqq_hxons\nStarted\n.\nFinished in 0.000470392 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2125.89 tests/s, 17007.09 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.33 tests/s, 148.33 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.sum { |c| c.ord if c =~ /[A-Z]/ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp97gbdjcj\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp97gbdjcj.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131 \n?   26\n? - ?\n===============================================================================\n\nFinished in 0.006242451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n160.19 tests/s, 320.39 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.reduce(0) { |sum, c| sum + c.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp7ov33ab8\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp7ov33ab8.rb:25:in `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131, candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\nFinished in 0.012804568 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n78.10 tests/s, 156.19 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x > 64 && x < 91}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp_bdk4vb7\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp_bdk4vb7.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006314323 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.37 tests/s, 158.37 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp11ewhmx0\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp11ewhmx0.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.005848562 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n170.98 tests/s, 170.98 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map{|x| x.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpgsc1is3n\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpgsc1is3n.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006512278 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n153.56 tests/s, 153.56 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpyaccq10d\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpyaccq10d.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008446511 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n118.39 tests/s, 118.39 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpte6janyy\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpte6janyy.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008093423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.56 tests/s, 123.56 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|i| i.ord}.select{|i| i.between?(65,90)}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpyeo9h4r8\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpyeo9h4r8.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.005867842 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n170.42 tests/s, 170.42 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpm8nat7ox\nStarted\n.\nFinished in 0.000477873 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2092.61 tests/s, 16740.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |n| n.between?(65, 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2bjwb2vw\nStarted\n.\nFinished in 0.000406451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2460.32 tests/s, 19682.57 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794932
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0_s4opp0\nStarted\n.\nFinished in 0.000476444 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2098.88 tests/s, 16791.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x > 64 && x < 91}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp_bdk4vb7\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp_bdk4vb7.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006314323 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.37 tests/s, 158.37 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpte6janyy\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpte6janyy.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008093423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.56 tests/s, 123.56 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n148.33 tests/s, 148.33 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpp0zw0o3j\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpp0zw0o3j.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008864379 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n112.81 tests/s, 112.81 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz35_q5wv\nStarted\n.\nFinished in 0.000529322 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1889.21 tests/s, 15113.67 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpym4ia19v\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpym4ia19v.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.00677417 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n147.62 tests/s, 147.62 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpte6janyy\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpte6janyy.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008093423 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n123.56 tests/s, 123.56 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x > 64 && x < 91}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp_bdk4vb7\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmp_bdk4vb7.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006314323 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n158.37 tests/s, 158.37 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|i| i.ord}.select{|i| i >= 65 && i <= 90}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpmol40pux\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpmol40pux.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.006128875 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n163.16 tests/s, 163.16 assertions/s\n",
      "timestamp": 1659794932
    },
    {
      "exit_code": 1,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\nFailure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n115.94 tests/s, 115.94 assertions/s\n",
      "timestamp": 1659794892
    },
    {
      "exit_code": 0,
      "program": "# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"You arE Very Smart\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjzk0goad\nStarted\n.\nFinished in 0.000474056 seconds.\n-------------------------------------------------------------------------------\n1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2109.46 tests/s, 16875.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659794892
    }
  ]
}