name: HumanEval_113_odd_count
language: rb
prompt: "# Given a list of strings, where each string consists of only digits, return\
  \ a list.\n# Each element i of the output should be \"the number of odd elements\
  \ in the\n# string i of the input.\" where all the i's should be replaced by the\
  \ number\n# of odd digits in the i'th string of the input.\n# >>> odd_count.call([\"\
  1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
  # >>> odd_count.call([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n\
  \ the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of\
  \ the 8nput.\"]\ndef odd_count(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_count\n\
  \    candidate = method(:odd_count)\n    assert_equal([\"the number of odd elements\
  \ 4n the str4ng 4 of the 4nput.\"], candidate.call([\"1234567\"]))\n    assert_equal([\"\
  the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
  \ elements 8n the str8ng 8 of the 8nput.\"], candidate.call([\"3\", \"11111111\"\
  ]))\n    assert_equal([\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
  , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
  \ odd elements 2n the str2ng 2 of the 2nput.\"], candidate.call([\"271\", \"137\"\
  , \"314\"]))\n  end\nend\n"
completions: ["  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.scan(/\\d/).count { |n| n.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).count\n\
    \  end\nend", "  lst.map do |str|\n    odd_count = str.split(\"\").map(&:to_i).select\
    \ { |n| n.odd? }.count\n    \"the number of odd elements #{odd_count}n the str#{odd_count}ng\
    \ #{odd_count} of the #{odd_count}nput.\"\n  end\nend", "  lst.map { |str| \"\
    the number of odd elements #{str.count(\"13579\")}n the str#{str.count(\"13579\"\
    )}ng #{str.count(\"13579\")} of the #{str.count(\"13579\")}nput.\" }\nend", " \
    \ lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\nend",
  "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).size\n  end\nend",
  "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\nend",
  "  lst.map do |str|\n    str.split(\"\").select { |char| char.to_i.odd? }.length\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.count { |c| c.to_i.odd? }\n \
    \ end\nend", "  lst.map do |str|\n    str.count(\"13579\")\n  end\nend", "  lst.map\
    \ { |str| \"the number of odd elements #{str.count(\"13579\")}n the str#{str.count(\"\
    13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"13579\")}nput.\" }\n\
    end", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\n\
    end", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\n\
    end", "  lst.map do |str|\n    num_odds = str.chars.count { |c| c.to_i.odd? }\n\
    \    \"the number of odd elements #{num_odds}n the str#{num_odds}ng #{num_odds}\
    \ of the #{num_odds}nput.\"\n  end\nend", "  lst.map do |str|\n    str.chars.count\
    \ { |char| char.to_i.odd? }\n  end\nend", "  lst.map do |str|\n    str.chars.count\
    \ { |char| char.to_i.odd? }\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
