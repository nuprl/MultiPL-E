name: HumanEval_97_multiply
language: rb
prompt: "# Complete the function that takes two integers and returns \n# the product\
  \ of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>>\
  \ multiply.call(148, 412)\n# 16\n# >>> multiply.call(19, 28)\n# 72\n# >>> multiply.call(2020,\
  \ 1851)\n# 0\n# >>> multiply.call(14, -15)\n# 20\ndef multiply(a, b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_multiply\n\
  \    candidate = method(:multiply)\n    assert_equal(16, candidate.call(148, 412))\n\
  \    assert_equal(72, candidate.call(19, 28))\n    assert_equal(0, candidate.call(2020,\
  \ 1851))\n    assert_equal(20, candidate.call(14, -15))\n    assert_equal(42, candidate.call(76,\
  \ 67))\n    assert_equal(49, candidate.call(17, 27))\n    assert_equal(0, candidate.call(0,\
  \ 1))\n    assert_equal(0, candidate.call(0, 0))\n  end\nend\n"
completions: ["  (a.abs * b.abs).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\n\
    end", "  (a * b).abs % 10\nend", "  (a * b).to_s[-1].to_i\nend", "  a.abs.to_s.chars.last.to_i\
    \ * b.abs.to_s.chars.last.to_i\nend", "  (a % 10) * (b % 10)\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend",
  "  (a % 10) * (b % 10)\nend", "  (a * b).to_s[-1].to_i\nend", "  (a % 10) * (b %\
    \ 10)\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", " \
    \ (a.abs * b.abs).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a %\
    \ 10) * (b % 10)\nend", "  (a * b).to_s[-1].to_i\nend", "  (a % 10) * (b % 10)\n\
    end", "  (a % 10) * (b % 10)\nend", "  (a * b).to_s[-1].to_i\nend", "  (a % 10)\
    \ * (b % 10)\nend", "  a.abs * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\nend",
  "  (a % 10) * (b % 10)\nend", "  a.abs * b.abs % 10\nend", "  a.abs * b.abs % 10\n\
    end", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend",
  "  (a * b).to_s[-1].to_i\nend", "  (a * b).abs % 10\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  a.abs.to_s.chars.last.to_i * b.abs.to_s.chars.last.to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a.abs\
    \ * b.abs).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  a.abs\
    \ * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  a.abs * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  a.abs * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend",
  "  (a * b).to_s[-1].to_i\nend", "  a.abs * b.abs % 10\nend", "  (a % 10) * (b %\
    \ 10)\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", " \
    \ (a.abs * b.abs).to_s[-1].to_i\nend", "  a.abs * b.abs % 10\nend", "  (a % 10)\
    \ * (b % 10)\nend", "  a.abs * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\nend",
  "  (a * b).abs % 10\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).abs % 10\n\
    end", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend",
  "  (a * b).abs % 10\nend", "  (a * b).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\n\
    end", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  (a % 10) * (b % 10)\nend", " \
    \ (a.abs * b.abs).to_s[-1].to_i\nend", "  (a % 10) * (b % 10)\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a.abs\
    \ * b.abs).to_s[-1].to_i\nend", "  (a % 10) * (b % 10)\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.abs\
    \ * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  a.abs * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\nend", "  (a.abs *\
    \ b.abs).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a.abs\
    \ * b.abs).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.abs * b.abs\
    \ % 10\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend",
  "  a.abs.to_s.chars.last.to_i * b.abs.to_s.chars.last.to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  a.abs * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  a.abs * b.abs % 10\nend", " \
    \ (a * b).abs % 10\nend", "  (a % 10) * (b % 10)\nend", "  (a.abs * b.abs).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend",
  "  a.abs * b.abs % 10\nend", "  a.abs * b.abs % 10\nend", "  (a % 10) * (b % 10)\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  a.abs * b.abs % 10\nend", "  (a % 10) * (b % 10)\n\
    end", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  (a % 10) * (b % 10)\nend", " \
    \   a.abs * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a % 10) * (b % 10)\nend", "  a.abs *\
    \ b.abs % 10\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  a.abs * b.abs % 10\nend", "  a.abs * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  a.abs * b.abs % 10\nend", "  (a * b).abs % 10\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a % 10) * (b % 10)\nend", "  (a * b).abs % 10\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).abs % 10\nend", "  (a % 10) * (b % 10)\nend", "  (a % 10) * (b\
    \ % 10)\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).abs % 10\nend", "  (a.abs * b.abs).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a % 10) * (b % 10)\nend", "  (a * b).abs % 10\n\
    end", "  (a % 10) * (b % 10)\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).abs % 10\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  (a\
    \ % 10) * (b % 10)\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  a.abs.to_s.chars.last.to_i\
    \ * b.abs.to_s.chars.last.to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend",
  "  (a * b).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  (a %\
    \ 10) * (b % 10)\nend", "  a.abs * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend",
  "  (a * b).abs % 10\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  (a * b).abs\
    \ % 10\nend", "  a.abs * b.abs % 10\nend", "  (a % 10) * (b % 10)\nend", "  (a.abs\
    \ * b.abs).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.abs * b.abs\
    \ % 10\nend", "  a.abs * b.abs % 10\nend", "  (a * b).to_s[-1].to_i\nend", " \
    \ (a * b).to_s[-1].to_i\nend", "  (a % 10) * (b % 10)\nend", "  (a % 10) * (b\
    \ % 10)\nend", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  (a.abs * b.abs).to_s[-1].to_i\n\
    end", "  (a.abs * b.abs).to_s[-1].to_i\nend", "  (a * b).abs % 10\nend", "  (a\
    \ * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.abs * b.abs %\
    \ 10\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", " \
    \ (a * b).to_s[-1].to_i\nend", "  a.abs.to_s.chars.last.to_i * b.abs.to_s.chars.last.to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.abs * b.abs % 10\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
