name: HumanEval_66_digitSum
language: rb
prompt: "# Task\n# Write a function that takes a string as input and returns the sum\
  \ of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
  \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n\
  # 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n\
  # 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
  \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
  \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
  abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
  \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
  ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
  \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
completions: ["  s.chars.map(&:ord).select { |x| x > 64 && x < 91 }.reduce(:+)\nend",
  "  s.chars.map { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend",
  "  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend",
  "  s.chars.map { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend",
  "  s.scan(/[A-Z]/).map{|i| i.ord}.reduce(:+)\nend", "  s.chars.map(&:ord).select\
    \ { |x| x >= 65 && x <= 90 }.sum\nend", "  s.chars.map { |c| c.ord }.select {\
    \ |c| c >= 65 && c <= 90 }.reduce(:+)\nend", "  s.chars.map(&:ord).select { |c|\
    \ c >= 65 && c <= 90 }.sum\nend", "  s.chars.map { |c| c.ord }.select { |c| c\
    \ >= 65 && c <= 90 }.reduce(:+)\nend", "  s.chars.map { |c| c.ord }.select { |n|\
    \ n > 64 && n < 91 }.reduce(:+)\nend", "  s.chars.map(&:ord).select { |c| c >=\
    \ 65 && c <= 90 }.reduce(:+)\nend", "  s.chars.map(&:ord).select { |c| c >= 65\
    \ && c <= 90 }.reduce(:+)\nend", "  s.chars.map { |c| c.ord }.select { |c| c >=\
    \ 65 && c <= 90 }.sum\nend", "  s.chars.map { |c| c.ord }.select { |c| c.between?(65,\
    \ 90) }.reduce(:+)\nend", "  s.chars.map { |c| c.ord }.select { |c| c >= 65 &&\
    \ c <= 90 }.sum\nend", "  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c\
    \ <= 90 }.reduce(:+)\nend", "  s.chars.map { |c| c.ord }.select { |c| c >= 65\
    \ && c <= 90 }.reduce(:+)\nend", "  s.chars.map { |c| c.ord }.select { |c| c >=\
    \ 65 && c <= 90 }.reduce(:+)\nend", "  s.chars.map{|c| c.ord}.select{|c| c >=\
    \ 65 && c <= 90}.reduce(:+)\nend", "  s.chars.map { |c| c.ord }.select { |c| c\
    \ >= 65 && c <= 90 }.reduce(:+)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
