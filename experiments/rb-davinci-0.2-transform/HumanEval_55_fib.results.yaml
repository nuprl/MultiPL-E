language: rb
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpt5kns9h5

    Started

    .

    Finished in 0.000783852 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1275.75 tests/s, 6378.76 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoeaz1b6q

    Started

    .

    Finished in 0.000815883 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1225.67 tests/s, 6128.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpt5kns9h5

    Started

    .

    Finished in 0.000783852 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1275.75 tests/s, 6378.76 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoeaz1b6q

    Started

    .

    Finished in 0.000815883 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1225.67 tests/s, 6128.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpt5kns9h5

    Started

    .

    Finished in 0.000783852 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1275.75 tests/s, 6378.76 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoeaz1b6q

    Started

    .

    Finished in 0.000815883 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1225.67 tests/s, 6128.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp31aklqn_

    Started

    .

    Finished in 0.00079814 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1252.91 tests/s, 6264.57 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoeaz1b6q

    Started

    .

    Finished in 0.000815883 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1225.67 tests/s, 6128.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    return 1\n\
    \  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpt8oeqt73

    Started

    .

    Finished in 0.000597792 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1672.82 tests/s, 8364.11 assertions/s

    '
  stdout: ''
  timestamp: 1659793256
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoeaz1b6q

    Started

    .

    Finished in 0.000815883 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1225.67 tests/s, 6128.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6e70ccuy

    Started

    .

    Finished in 0.001489224 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    671.49 tests/s, 3357.45 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 1\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpt5kns9h5

    Started

    .

    Finished in 0.000783852 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1275.75 tests/s, 6378.76 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 2\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpj2ou4aeh

    Started

    .

    Finished in 0.000688471 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1452.49 tests/s, 7262.47 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n < 2 ? n : fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpsxp4ev0o

    Started

    .

    Finished in 0.000782046 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1278.70 tests/s, 6393.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793256
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp31aklqn_

    Started

    .

    Finished in 0.00079814 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1252.91 tests/s, 6264.57 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp31aklqn_

    Started

    .

    Finished in 0.00079814 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1252.91 tests/s, 6264.57 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoeaz1b6q

    Started

    .

    Finished in 0.000815883 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1225.67 tests/s, 6128.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp31aklqn_

    Started

    .

    Finished in 0.00079814 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1252.91 tests/s, 6264.57 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n <= 2\n    1\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpj2ou4aeh

    Started

    .

    Finished in 0.000688471 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1452.49 tests/s, 7262.47 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6e70ccuy

    Started

    .

    Finished in 0.001489224 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    671.49 tests/s, 3357.45 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp31aklqn_

    Started

    .

    Finished in 0.00079814 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1252.91 tests/s, 6264.57 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n\
    \ == 2\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n  \
    \  candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6e70ccuy

    Started

    .

    Finished in 0.001489224 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    671.49 tests/s, 3357.45 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp31aklqn_

    Started

    .

    Finished in 0.00079814 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1252.91 tests/s, 6264.57 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp31aklqn_

    Started

    .

    Finished in 0.00079814 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1252.91 tests/s, 6264.57 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoeaz1b6q

    Started

    .

    Finished in 0.000815883 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1225.67 tests/s, 6128.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if\
    \ n == 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdc7oawr

    Started

    .

    Finished in 0.000612064 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1633.82 tests/s, 8169.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoeaz1b6q

    Started

    .

    Finished in 0.000815883 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1225.67 tests/s, 6128.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp31aklqn_

    Started

    .

    Finished in 0.00079814 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1252.91 tests/s, 6264.57 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n\
    \    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9pj7osv4

    Started

    .

    Finished in 0.000758787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1317.89 tests/s, 6589.46 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp31aklqn_

    Started

    .

    Finished in 0.00079814 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1252.91 tests/s, 6264.57 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbofqyh59

    Started

    .

    Finished in 0.000724062 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1381.10 tests/s, 6905.49 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n\
    \    1\n  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpegk78fi6

    Started

    .

    Finished in 0.000646143 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1547.65 tests/s, 7738.23 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp31aklqn_

    Started

    .

    Finished in 0.00079814 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1252.91 tests/s, 6264.57 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpztigw5xq

    Started

    .

    Finished in 0.000649785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1538.97 tests/s, 7694.85 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  if n < 2\n    n\n  else\n    fib(n-1)\
    \ + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoeaz1b6q

    Started

    .

    Finished in 0.000815883 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1225.67 tests/s, 6128.33 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp31aklqn_

    Started

    .

    Finished in 0.00079814 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1252.91 tests/s, 6264.57 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
- exit_code: 0
  program: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
    # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1sqapgmh

    Started

    .

    Finished in 0.000813572 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1229.15 tests/s, 6145.74 assertions/s

    '
  stdout: ''
  timestamp: 1659793225
