name: HumanEval_64_vowels_count
language: rb
prompt: "# Write a function vowels_count which takes a string representing\n# a word\
  \ as input and returns the number of vowels in the string.\n# Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is\
  \ at the end of the given word.\n# Example:\n# >>> vowels_count.call(\"abcde\")\n\
  # 2\n# >>> vowels_count.call(\"ACEDY\")\n# 3\ndef vowels_count(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_vowels_count\n\
  \    candidate = method(:vowels_count)\n    assert_equal(2, candidate.call(\"abcde\"\
  ))\n    assert_equal(3, candidate.call(\"Alone\"))\n    assert_equal(2, candidate.call(\"\
  key\"))\n    assert_equal(1, candidate.call(\"bye\"))\n    assert_equal(2, candidate.call(\"\
  keY\"))\n    assert_equal(1, candidate.call(\"bYe\"))\n    assert_equal(3, candidate.call(\"\
  ACEDY\"))\n  end\nend\n"
completions: ["  s.downcase.count(\"aeiouy\")\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.gsub(/[^aeiouy]/,\
    \ '').length\nend", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.scan(/[aeiouy]/i).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.scan(/[aeiouy]/i).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  # TODO: implement this function\n  count = 0\n  s.each_char do |c|\n\
    \    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y'\n\
    \      count += 1\n    end\n  end\n  count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.count('aeiouy')\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.count('aeiouy')\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.count('aeiouy')\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  vowels = %w(a e i o u)\n\
    \  count = 0\n  s.each_char do |char|\n    count += 1 if vowels.include?(char.downcase)\n\
    \  end\n  count\nend", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.count('aeiouy')\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  count = 0\n  s.each_char do |c|\n    count += 1 if c =~ /[aeiou]/i\n\
    \  end\n  count\nend", "  s.downcase.count(\"aeiouy\")\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.count('aeiouy')\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.count('aeiouy')\n\
    end", "  s.downcase.count(\"aeiouy\")\nend", "  s.count('aeiouy')\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.count(\"aeiouy\")\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.count('aeiouy')\nend", "  s.downcase.count(\"aeiouy\")\nend",
  "  s.downcase.gsub(/[^aeiouy]/, '').size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.count('aeiouy')\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.count(\"aeiouy\")\nend", "  s.downcase.count(\"aeiouy\")\nend", " \
    \ s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.count('aeiouy')\nend", "  s.downcase.count(\"aeiouy\")\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.count(\"aeiouy\"\
    )\nend", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.count('aeiouy')\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.count('aeiouy')\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.gsub(/[^aeiouy]/,\
    \ '').length\nend", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.chars.select {\
    \ |c| \"aeiouy\".include?(c) }.size\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.gsub(/[^aeiouy]/,\
    \ '').length\nend", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).size\n\
    end", "  s.downcase.scan(/[aeiouy]/).count\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end", "  s.downcase.scan(/[aeiouy]/).size\nend", "  s.downcase.scan(/[aeiouy]/).count\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
