name: HumanEval_69_search
language: rb
prompt: "# You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n# zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n# The frequency of an integer is the number\
  \ of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n\
  # >>> search.call([4, 1, 2, 2, 3, 1])\n# 2\n# >>> search.call([1, 2, 2, 3, 3, 3,\
  \ 4, 4, 4])\n# 3\n# >>> search.call([5, 5, 4, 4, 4])\n# -1\ndef search(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_search\n\
  \    candidate = method(:search)\n    assert_equal(1, candidate.call([5, 5, 5, 5,\
  \ 1]))\n    assert_equal(4, candidate.call([4, 1, 4, 1, 4, 4]))\n    assert_equal(-1,\
  \ candidate.call([3, 3]))\n    assert_equal(8, candidate.call([8, 8, 8, 8, 8, 8,\
  \ 8, 8]))\n    assert_equal(2, candidate.call([2, 3, 3, 2, 2]))\n    assert_equal(1,\
  \ candidate.call([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10,\
  \ 8, 1]))\n    assert_equal(2, candidate.call([3, 2, 8, 2]))\n    assert_equal(1,\
  \ candidate.call([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]))\n    assert_equal(-1, candidate.call([8,\
  \ 8, 3, 6, 5, 6, 4]))\n    assert_equal(1, candidate.call([6, 9, 6, 7, 1, 4, 7,\
  \ 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]))\n    assert_equal(1,\
  \ candidate.call([1, 9, 10, 1, 3]))\n    assert_equal(5, candidate.call([6, 9, 7,\
  \ 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]))\n    assert_equal(1,\
  \ candidate.call([1]))\n    assert_equal(4, candidate.call([8, 8, 10, 6, 4, 3, 5,\
  \ 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]))\n    assert_equal(2, candidate.call([2,\
  \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]))\n    assert_equal(1, candidate.call([1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]))\n    assert_equal(4, candidate.call([9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4]))\n    assert_equal(4, candidate.call([2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]))\n    assert_equal(2, candidate.call([9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]))\n    assert_equal(-1,\
  \ candidate.call([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10,\
  \ 8]))\n    assert_equal(-1, candidate.call([10]))\n    assert_equal(2, candidate.call([9,\
  \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]))\n    assert_equal(1, candidate.call([5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]))\n    assert_equal(1, candidate.call([7, 9, 9,\
  \ 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]))\n    assert_equal(-1,\
  \ candidate.call([3, 10, 10, 9, 2]))\n  end\nend\n"
completions: ["  lst.sort!\n  lst.each_with_index do |num, index|\n    if num == lst.count(num)\
    \ && num > 0\n      return num\n    end\n  end\n  -1\nend", "  lst.sort!\n  lst.each\
    \ do |i|\n    return i if lst.count(i) >= i\n  end\n  -1\nend", "  # your code\
    \ here\nend", "  lst.uniq.each do |num|\n    return num if lst.count(num) >= num\n\
    \  end\n  -1\nend", "  # Your code here\nend", "  lst.uniq.each do |i|\n    return\
    \ i if lst.count(i) >= i\n  end\n  -1\nend", "  lst.uniq.each do |n|\n    return\
    \ n if lst.count(n) >= n\n  end\n  -1\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, idx|\n    return num if lst.count(num) >= num\n  end\n  -1\nend", " \
    \ # Your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  lst.sort!\n  lst.each_with_index do |num, i|\n   \
    \ if num == lst[i+1]\n      return num if lst.count(num) >= num\n    end\n  end\n\
    \  -1\nend", "  lst.sort!\n  lst.uniq.each do |i|\n    return i if lst.count(i)\
    \ >= i\n  end\n  -1\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  lst.uniq.sort.reverse.each do |i|\n    return i if\
    \ lst.count(i) >= i\n  end\n  -1\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  lst.uniq.each do |i|\n    return i\
    \ if lst.count(i) >= i\n  end\n  -1\nend", "  # your code here\nend", "  lst.uniq.each\
    \ do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\nend", "  lst.sort!\n\
    \  lst.each_with_index do |num, index|\n    if lst.count(num) >= num\n      return\
    \ num\n    end\n  end\n  return -1\nend", "  lst.sort!\n  lst.uniq.each do |i|\n\
    \    return i if lst.count(i) >= i\n  end\n  -1\nend", "  # your code here\nend",
  "  lst.uniq.each do |i|\n    return i if lst.count(i) >= i\n  end\n  -1\nend", " \
    \ lst.each do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\nend",
  "  # your code here\nend", "  lst.sort!\n  lst.each do |i|\n    return i if lst.count(i)\
    \ >= i\n  end\n  -1\nend", "  lst.uniq.each do |i|\n    return i if lst.count(i)\
    \ >= i\n  end\n  -1\nend", "  lst.uniq.sort.each do |i|\n    return i if lst.count(i)\
    \ >= i\n  end\n  -1\nend", "  lst.uniq.each do |i|\n    return i if lst.count(i)\
    \ >= i\n  end\n  -1\nend", "  # your code here\nend", "  # Your code here\nend",
  "  lst.sort!\n  lst.each do |num|\n    return num if lst.count(num) >= num\n  end\n\
    \  -1\nend", "  lst.sort!\n  lst.each do |i|\n    return i if lst.count(i) >=\
    \ i\n  end\n  -1\nend", "  lst.uniq.sort.each do |num|\n    return num if lst.count(num)\
    \ >= num\n  end\n  -1\nend", "  lst.uniq.each do |x|\n    return x if lst.count(x)\
    \ >= x\n  end\n  -1\nend", "  # Your code here\nend", "  # your code here\nend",
  "  lst.each do |num|\n    if lst.count(num) >= num\n      return num\n    end\n\
    \  end\n  return -1\nend", "  # your code here\nend", "  lst.uniq.each do |num|\n\
    \    return num if lst.count(num) >= num\n  end\n  -1\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, index|\n    if lst.count(num) >= num\n      return num\n    end\n \
    \ end\n  return -1\nend", "  lst.sort!\n  lst.each_with_index do |num, index|\n\
    \    return num if lst.count(num) >= num\n  end\n  -1\nend", "  freq = lst.inject(Hash.new(0))\
    \ { |h,v| h[v] += 1; h }\n  freq.select { |k,v| k <= v }.max_by { |k,v| k }.first\n\
    end", "  # your code here\nend", "  lst.uniq.each do |n|\n    return n if lst.count(n)\
    \ >= n\n  end\n  -1\nend", "  lst.uniq.each do |num|\n    return num if lst.count(num)\
    \ >= num\n  end\n  -1\nend", "  lst.uniq.each do |x|\n    return x if lst.count(x)\
    \ >= x\n  end\n  -1\nend", "  # your code here\nend", "  # your code here\nend",
  "  lst.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }\n    .select\
    \ { |k, v| v >= k }\n    .max_by { |k, v| k }\n    .first || -1\nend", "  # your\
    \ code here\nend", "  lst.uniq.each do |i|\n    return i if lst.count(i) >= i\n\
    \  end\n  -1\nend", "  lst.sort!\n  lst.each do |x|\n    if lst.count(x) >= x\n\
    \      return x\n    end\n  end\n  return -1\nend", "  # your code here\nend",
  "  lst.sort!\n  lst.each_with_index do |x, i|\n    return x if lst.count(x) >= x\
    \ && x > 0\n  end\n  -1\nend", "  lst.sort!\n  lst.each_with_index do |num, index|\n\
    \    return num if lst.count(num) >= num && num > 0\n  end\n  -1\nend", "  freq\
    \ = Hash.new(0)\n  lst.each { |i| freq[i] += 1 }\n  freq.select { |k, v| k <=\
    \ v }.max_by { |k, v| k }.first || -1\nend", "  lst.uniq.each do |n|\n    return\
    \ n if lst.count(n) >= n\n  end\n  -1\nend", "  lst.uniq.each do |i|\n    return\
    \ i if lst.count(i) >= i\n  end\n  -1\nend", "  # Your code here\nend", "  # your\
    \ code here\nend", "  lst.each do |i|\n    return i if lst.count(i) >= i\n  end\n\
    \  -1\nend", "  # your code here\nend", "  lst.each_with_object(Hash.new(0)) {\
    \ |i, h| h[i] += 1 }.select { |k, v| v >= k }.max.first || -1\nend", "  lst.uniq.each\
    \ do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\nend", "  # your\
    \ code here\nend", "  lst.uniq.each do |num|\n    return num if lst.count(num)\
    \ >= num\n  end\n  -1\nend", "  h = Hash.new(0)\n  lst.each { |x| h[x] += 1 }\n\
    \  h.select { |k, v| v >= k }.max_by { |k, v| k }.first\nend", "  lst.uniq.each\
    \ do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\nend", "  lst.uniq.each\
    \ do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\nend", "  lst.uniq.each\
    \ do |i|\n    return i if lst.count(i) >= i\n  end\n  -1\nend", "  freq = Hash.new(0)\n\
    \  lst.each { |num| freq[num] += 1 }\n  freq.select { |k, v| k <= v }.max_by {\
    \ |k, v| k }.first\nend", "  # Your code here\nend", "  lst.uniq.each do |i|\n\
    \    return i if lst.count(i) >= i\n  end\n  -1\nend", "  # your code here\nend",
  "  lst.uniq.each do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\n\
    end", "  lst.uniq.sort.each do |x|\n    return x if lst.count(x) >= x\n  end\n\
    \  -1\nend", "  lst.sort!\n  lst.each_with_index do |x, i|\n    if lst.count(x)\
    \ >= x\n      return x\n    end\n  end\n  return -1\nend", "  # your code here\n\
    end", "  lst.uniq.sort.reverse.each do |num|\n    return num if lst.count(num)\
    \ >= num\n  end\n  -1\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  lst.uniq.each do |x|\n    return x if lst.count(x)\
    \ >= x\n  end\n  -1\nend", "  lst.uniq.each do |x|\n    return x if lst.count(x)\
    \ >= x\n  end\n  -1\nend", "  lst.uniq.each do |i|\n    return i if lst.count(i)\
    \ >= i\n  end\n  -1\nend", "  lst.uniq.each do |x|\n    return x if lst.count(x)\
    \ >= x\n  end\n  -1\nend", "  lst.sort!\n  lst.each do |x|\n    if lst.count(x)\
    \ >= x\n      return x\n    end\n  end\n  return -1\nend", "  lst.uniq.each do\
    \ |n|\n    return n if lst.count(n) >= n\n  end\n  -1\nend", "  lst.uniq.each\
    \ do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\nend", "  lst.sort!\n\
    \  lst.each_with_index do |num, index|\n    return num if num == lst.count(num)\
    \ && num > 0\n  end\n  -1\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  lst.sort!\n  lst.each_with_index do |x, i|\n    if lst.count(x) >= x\n\
    \      return x\n    end\n  end\n  return -1\nend", "  # your code here\nend",
  "  lst.uniq.sort.each do |i|\n    return i if lst.count(i) >= i\n  end\n  -1\nend",
  "  lst.each_with_object(Hash.new(0)) { |num, hash| hash[num] += 1 }\n    .select\
    \ { |num, freq| freq >= num }\n    .max_by { |num, freq| num }\n    &.first ||\
    \ -1\nend", "  # your code here\nend", "  lst.uniq.each do |i|\n    return i if\
    \ lst.count(i) >= i\n  end\n  -1\nend", "  lst.uniq.each do |num|\n    return\
    \ num if lst.count(num) >= num\n  end\n  -1\nend", "  # your code here\nend",
  "  lst.uniq.each do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\n\
    end", "  # Your code here\nend", "  lst.each do |num|\n    return num if lst.count(num)\
    \ >= num\n  end\n  -1\nend", "  lst.each do |num|\n    return num if lst.count(num)\
    \ >= num\n  end\n  -1\nend", "  lst.sort!\n  lst.each_with_index do |num, index|\n\
    \    return num if lst.count(num) >= num && num > 0\n  end\n  -1\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  lst.uniq.each do |num|\n    return\
    \ num if lst.count(num) >= num\n  end\n  -1\nend", "  lst.each do |x|\n    return\
    \ x if lst.count(x) >= x\n  end\n  -1\nend", "  lst.sort!\n  lst.each do |num|\n\
    \    if lst.count(num) >= num\n      return num\n    end\n  end\n  return -1\n\
    end", "  lst.uniq.each do |num|\n    return num if lst.count(num) >= num\n  end\n\
    \  -1\nend", "  # your code here\nend", "  lst.sort!\n  lst.each_with_index do\
    \ |x, i|\n    if lst.count(x) >= x\n      return x\n    end\n  end\n  return -1\n\
    end", "  lst.uniq.each do |n|\n    return n if lst.count(n) >= n\n  end\n  -1\n\
    end", "  lst.uniq.sort.each do |n|\n    return n if lst.count(n) >= n\n  end\n\
    \  -1\nend", "  # your code here\nend", "  # Your code here\nend", "  # your code\
    \ here\nend", "  lst.uniq.each do |num|\n    return num if lst.count(num) >= num\n\
    \  end\n  -1\nend", "  # your code here\nend", "  # your code here\nend", "  lst.uniq.each\
    \ do |x|\n    return x if lst.count(x) >= x\n  end\n  -1\nend", "  lst.uniq.each\
    \ do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\nend", "  lst.sort!\n\
    \  lst.uniq.each do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\n\
    end", "  lst.sort!\n  lst.each do |i|\n    return i if lst.count(i) >= i\n  end\n\
    \  -1\nend", "  lst.uniq.each do |i|\n    return i if lst.count(i) >= i\n  end\n\
    \  -1\nend", "  lst.uniq.each do |num|\n    return num if lst.count(num) >= num\n\
    \  end\n  -1\nend", "  # your code here\nend", "  lst.each do |n|\n    return\
    \ n if lst.count(n) >= n\n  end\n  -1\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  lst.uniq.each do |i|\n    return i if lst.count(i) >= i\n\
    \  end\n  -1\nend", "  # your code here\nend", "  # your code here\nend", "  lst.uniq.sort.reverse.each\
    \ do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\nend", "  lst.uniq.each\
    \ do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\nend", "  # Your\
    \ code here\nend", "  lst.uniq.sort.each do |num|\n    return num if lst.count(num)\
    \ >= num\n  end\n  -1\nend", "  lst.sort!\n  lst.each do |i|\n    if lst.count(i)\
    \ >= i\n      return i\n    end\n  end\n  return -1\nend", "  # your code here\n\
    end", "  # your code here\nend", "  lst.uniq.each do |num|\n    return num if\
    \ lst.count(num) >= num\n  end\n  -1\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, index|\n    return num if lst.count(num) >= num && lst[index + 1] !=\
    \ num\n  end\n  -1\nend", "  freq = {}\n  lst.each do |num|\n    freq[num] = lst.count(num)\n\
    \  end\n  freq.each do |k, v|\n    return k if k <= v\n  end\n  -1\nend", "  lst.sort!\n\
    \  lst.each_with_index do |x, i|\n    if lst.count(x) >= x\n      return x\n \
    \   end\n  end\n  return -1\nend", "  lst.uniq.sort.each do |num|\n    return\
    \ num if lst.count(num) >= num\n  end\n  -1\nend", "  # your code here\nend",
  "  lst.sort!\n  lst.each do |x|\n    if lst.count(x) >= x\n      return x\n    end\n\
    \  end\n  return -1\nend", "  lst.uniq.each do |x|\n    return x if lst.count(x)\
    \ >= x\n  end\n  -1\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  lst.sort!\n  lst.each_with_index do |num, index|\n\
    \    if num == lst.count(num)\n      return num\n    end\n  end\n  -1\nend", " \
    \ # Your code here\nend", "  lst.sort!\n  lst.each do |x|\n    return x if lst.count(x)\
    \ >= x\n  end\n  -1\nend", "  # Your code here\nend", "  # your code here\nend",
  "  lst.sort!\n  lst.uniq.each do |num|\n    return num if lst.count(num) >= num\n\
    \  end\n  -1\nend", "  lst.sort!\n  lst.each do |x|\n    if lst.count(x) >= x\n\
    \      return x\n    end\n  end\n  return -1\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, i|\n    return num if num == lst.count(num)\n  end\n  -1\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  lst.uniq.sort.each do\
    \ |n|\n    return n if lst.count(n) >= n\n  end\n  -1\nend", "  lst.sort!\n  lst.each\
    \ do |i|\n    return i if lst.count(i) >= i\n  end\n  -1\nend", "  lst.uniq.each\
    \ do |i|\n    return i if lst.count(i) >= i\n  end\n  -1\nend", "  lst.uniq.each\
    \ do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\nend", "  # your\
    \ code here\nend", "  lst.uniq.each { |i| return i if lst.count(i) >= i }\n  -1\n\
    end", "  lst.sort!\n  lst.each_with_index do |num, index|\n    if num == lst.count(num)\n\
    \      return num\n    end\n  end\n  -1\nend", "  lst.uniq.sort.each do |i|\n\
    \    return i if lst.count(i) >= i\n  end\n  -1\nend", "  lst.each do |num|\n\
    \    return num if lst.count(num) >= num\n  end\n  -1\nend", "  lst.uniq.each\
    \ do |i|\n    return i if lst.count(i) >= i\n  end\n  -1\nend", "  lst.uniq.each\
    \ do |i|\n    return i if lst.count(i) >= i\n  end\n  -1\nend", "  lst.sort!\n\
    \  lst.each_with_index do |num, index|\n    if lst.count(num) >= num\n      return\
    \ num\n    end\n  end\n  return -1\nend", "  lst.uniq.each do |i|\n    return\
    \ i if lst.count(i) >= i\n  end\n  -1\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |x, i|\n    if lst.count(x) >= x\n      return x\n    end\n  end\n  return\
    \ -1\nend", "  lst.sort!\n  lst.each_with_index do |x, i|\n    if lst.count(x)\
    \ >= x\n      return x\n    end\n  end\n  return -1\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, index|\n    if lst.count(num) >= num\n      return num\n    end\n \
    \ end\n  return -1\nend", "  lst.sort!\n  lst.each_with_index do |num, idx|\n\
    \    return num if num == lst.count(num) && num > 0\n  end\n  -1\nend", "  lst.uniq.sort.each\
    \ do |num|\n    return num if lst.count(num) >= num\n  end\n  -1\nend", "  # Your\
    \ code here\nend", "  # your code here\nend", "  lst.uniq.each do |i|\n    return\
    \ i if lst.count(i) >= i\n  end\n  -1\nend", "  lst.uniq.each do |num|\n    return\
    \ num if lst.count(num) >= num\n  end\n  -1\nend", "  lst.sort!\n  lst.uniq.each\
    \ do |i|\n    return i if lst.count(i) >= i\n  end\n  -1\nend", "  lst.uniq.each\
    \ do |i|\n    return i if lst.count(i) >= i\n  end\n  -1\nend", "  lst.sort!\n\
    \  i = lst.length - 1\n  while i >= 0\n    if lst.count(lst[i]) >= lst[i]\n  \
    \    return lst[i]\n    end\n    i -= 1\n  end\n  return -1\nend", "  lst.sort!\n\
    \  lst.each do |i|\n    return i if lst.count(i) >= i\n  end\n  -1\nend", "  #\
    \ your code here\nend", "  lst.sort!\n  lst.each_with_index do |num, index|\n\
    \    if lst.count(num) >= num\n      return num\n    end\n  end\n  return -1\n\
    end", "  lst.sort!\n  lst.each do |num|\n    return num if lst.count(num) >= num\n\
    \  end\n  -1\nend", "  # Your code here\nend", "  lst.uniq.each do |i|\n    return\
    \ i if lst.count(i) >= i\n  end\n  -1\nend", "  lst.uniq.each do |num|\n    return\
    \ num if lst.count(num) >= num\n  end\n  -1\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
