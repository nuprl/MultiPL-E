name: HumanEval_89_encrypt
language: rb
prompt: "# Create a function encrypt that takes a string as an argument and\n# returns\
  \ a string encrypted with the alphabet being rotated. \n# The alphabet should be\
  \ rotated in a manner such that the letters \n# shift down by two multiplied to\
  \ two places.\n# For example:\n# >>> encrypt.call(\"hi\")\n# \"lm\"\n# >>> encrypt.call(\"\
  asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt.call(\"gf\")\n# \"kj\"\n# >>> encrypt.call(\"\
  et\")\n# \"ix\"\ndef encrypt(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encrypt\n\
  \    candidate = method(:encrypt)\n    assert_equal(\"lm\", candidate.call(\"hi\"\
  ))\n    assert_equal(\"ewhjklnop\", candidate.call(\"asdfghjkl\"))\n    assert_equal(\"\
  kj\", candidate.call(\"gf\"))\n    assert_equal(\"ix\", candidate.call(\"et\"))\n\
  \    assert_equal(\"jeiajeaijeiak\", candidate.call(\"faewfawefaewg\"))\n    assert_equal(\"\
  lippsqcjvmirh\", candidate.call(\"hellomyfriend\"))\n    assert_equal(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  , candidate.call(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"))\n    assert_equal(\"\
  e\", candidate.call(\"a\"))\n  end\nend\n"
completions: ["\talphabet = (\"a\"..\"z\").to_a\n\tnew_alphabet = alphabet.rotate(2*2)\n\
    \tnew_string = \"\"\n\ts.each_char do |char|\n\t\tnew_string << new_alphabet[alphabet.index(char)]\n\
    \tend\n\tnew_string\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\
    \"\n  s.each_char do |char|\n    old_index = alphabet.find_index(char)\n    new_index\
    \ = old_index + 2 * 2\n    encrypted += alphabet[new_index]\n  end\n  encrypted\n\
    end", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\talphabet_array = alphabet.split(\"\
    \")\n\ts_array = s.split(\"\")\n\tencrypted_array = []\n\ts_array.each do |letter|\n\
    \t\tindex = alphabet_array.index(letter)\n\t\tif index == 0\n\t\t\tencrypted_array\
    \ << alphabet_array[index + 24]\n\t\telsif index == 1\n\t\t\tencrypted_array <<\
    \ alphabet_array[index + 24]\n\t\telse\n\t\t\tencrypted_array << alphabet_array[index\
    \ - 2]\n\t\tend\n\tend\n\tencrypted_array.join(\"\")\nend", "  s.split(\"\").map\
    \ { |char| char.next.next }.join(\"\")\nend", "  s.chars.map { |c| c.ord + 2 *\
    \ 2 }.map { |c| c.chr }.join\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map {\
    \ |c| c.chr }.join\nend", "  s.split(\"\").map { |x| x.ord + 2 * 2 }.map { |x|\
    \ x.chr }.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\
    \"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted <<\
    \ alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted << char\n\
    \    end\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map {\
    \ |c| c.chr }.join\nend", "  s.chars.map { |char| char.ord + 2 * 2 }.map { |char|\
    \ char.chr }.join\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr\
    \ }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encrypted = \"\
    \"\n  s.each_char do |char|\n    if char == \" \"\n      encrypted += \" \"\n\
    \    else\n      encrypted += alphabet[alphabet.index(char) + 2 * 2]\n    end\n\
    \  end\n  encrypted\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend", "  s.chars.map\
    \ { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.tr(\"a-z\", \"c-za-b\"\
    )\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |c|\n    if alphabet.include?(c)\n      encrypted << alphabet[(alphabet.index(c)\
    \ + 2) % 26]\n    else\n      encrypted << c\n    end\n  end\n  encrypted\nend",
  "  s.tr('a-z', 'c-za-b')\nend", "  s.split(\"\").map { |char| char.next.next }.join(\"\
    \")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    if alphabet.include?(char)\n      old_idx = alphabet.find_index(char)\n\
    \      new_idx = old_idx + 2\n      encrypted += alphabet[new_idx]\n    else\n\
    \      encrypted += char\n    end\n  end\n  encrypted\nend", "  s.tr(\"a-z\",\
    \ \"c-za-b\")\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
