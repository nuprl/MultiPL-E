name: HumanEval_89_encrypt
language: rb
prompt: "# Create a function encrypt that takes a string as an argument and\n# returns\
  \ a string encrypted with the alphabet being rotated. \n# The alphabet should be\
  \ rotated in a manner such that the letters \n# shift down by two multiplied to\
  \ two places.\n# For example:\n# >>> encrypt.call(\"hi\")\n# \"lm\"\n# >>> encrypt.call(\"\
  asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt.call(\"gf\")\n# \"kj\"\n# >>> encrypt.call(\"\
  et\")\n# \"ix\"\ndef encrypt(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encrypt\n\
  \    candidate = method(:encrypt)\n    assert_equal(\"lm\", candidate.call(\"hi\"\
  ))\n    assert_equal(\"ewhjklnop\", candidate.call(\"asdfghjkl\"))\n    assert_equal(\"\
  kj\", candidate.call(\"gf\"))\n    assert_equal(\"ix\", candidate.call(\"et\"))\n\
  \    assert_equal(\"jeiajeaijeiak\", candidate.call(\"faewfawefaewg\"))\n    assert_equal(\"\
  lippsqcjvmirh\", candidate.call(\"hellomyfriend\"))\n    assert_equal(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  , candidate.call(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"))\n    assert_equal(\"\
  e\", candidate.call(\"a\"))\n  end\nend\n"
completions: ["\talphabet = (\"a\"..\"z\").to_a\n\tnew_alphabet = alphabet.rotate(2*2)\n\
    \tnew_string = \"\"\n\ts.each_char do |char|\n\t\tnew_string << new_alphabet[alphabet.index(char)]\n\
    \tend\n\tnew_string\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\
    \"\n  s.each_char do |char|\n    old_index = alphabet.find_index(char)\n    new_index\
    \ = old_index + 2 * 2\n    encrypted += alphabet[new_index]\n  end\n  encrypted\n\
    end", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\talphabet_array = alphabet.split(\"\
    \")\n\ts_array = s.split(\"\")\n\tencrypted_array = []\n\ts_array.each do |letter|\n\
    \t\tindex = alphabet_array.index(letter)\n\t\tif index == 0\n\t\t\tencrypted_array\
    \ << alphabet_array[index + 24]\n\t\telsif index == 1\n\t\t\tencrypted_array <<\
    \ alphabet_array[index + 24]\n\t\telse\n\t\t\tencrypted_array << alphabet_array[index\
    \ - 2]\n\t\tend\n\tend\n\tencrypted_array.join(\"\")\nend", "  s.split(\"\").map\
    \ { |char| char.next.next }.join(\"\")\nend", "  s.chars.map { |c| c.ord + 2 *\
    \ 2 }.map { |c| c.chr }.join\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map {\
    \ |c| c.chr }.join\nend", "  s.split(\"\").map { |x| x.ord + 2 * 2 }.map { |x|\
    \ x.chr }.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\
    \"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted <<\
    \ alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted << char\n\
    \    end\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map {\
    \ |c| c.chr }.join\nend", "  s.chars.map { |char| char.ord + 2 * 2 }.map { |char|\
    \ char.chr }.join\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr\
    \ }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encrypted = \"\
    \"\n  s.each_char do |char|\n    if char == \" \"\n      encrypted += \" \"\n\
    \    else\n      encrypted += alphabet[alphabet.index(char) + 2 * 2]\n    end\n\
    \  end\n  encrypted\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend", "  s.chars.map\
    \ { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.tr(\"a-z\", \"c-za-b\"\
    )\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |c|\n    if alphabet.include?(c)\n      encrypted << alphabet[(alphabet.index(c)\
    \ + 2) % 26]\n    else\n      encrypted << c\n    end\n  end\n  encrypted\nend",
  "  s.tr('a-z', 'c-za-b')\nend", "  s.split(\"\").map { |char| char.next.next }.join(\"\
    \")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    if alphabet.include?(char)\n      old_idx = alphabet.find_index(char)\n\
    \      new_idx = old_idx + 2\n      encrypted += alphabet[new_idx]\n    else\n\
    \      encrypted += char\n    end\n  end\n  encrypted\nend", "  s.tr(\"a-z\",\
    \ \"c-za-b\")\nend", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tindex = 0\n\
    \tencrypted_string = \"\"\n\twhile index < s.length\n\t\tletter = s[index]\n\t\
    \tletter_index = alphabet.index(letter)\n\t\tencrypted_letter = alphabet[letter_index\
    \ + 2]\n\t\tencrypted_string += encrypted_letter\n\t\tindex += 1\n\tend\n\treturn\
    \ encrypted_string\nend", "  alphabet = ('a'..'z').to_a\n  encrypted = \"\"\n\
    \  s.each_char do |char|\n    if alphabet.include?(char)\n      old_index = alphabet.find_index(char)\n\
    \      new_index = old_index + 2 * 2\n      encrypted += alphabet[new_index %\
    \ 26]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\nend", "\t\
    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tencrypt = \"\"\n\ts.each_char do\
    \ |char|\n\t\tif char == \" \"\n\t\t\tencrypt += \" \"\n\t\telse\n\t\t\told_idx\
    \ = alphabet.index(char)\n\t\t\tnew_idx = old_idx + 2\n\t\t\tencrypt += alphabet[new_idx]\n\
    \t\tend\n\tend\n\tencrypt\nend", "\talphabet = (\"a\"..\"z\").to_a\n\tencrypted\
    \ = \"\"\n\ts.each_char do |char|\n\t\tif alphabet.include?(char)\n\t\t\tencrypted\
    \ += alphabet[(alphabet.index(char) + 2 * 2) % 26]\n\t\telse\n\t\t\tencrypted\
    \ += char\n\t\tend\n\tend\n\tencrypted\nend", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n\ts.each_char do |char|\n\t\tindex = alphabet.index(char)\n\t\tindex += 2 *\
    \ 2\n\t\tindex -= 26 if index > 25\n\t\tprint alphabet[index]\n\tend\nend", " \
    \ s.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    old_index = alphabet.find_index(char)\n\
    \    new_index = old_index + 2 * 2\n    encrypted += alphabet[new_index]\n  end\n\
    \  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    if alphabet.include?(char)\n      encrypted << alphabet[(alphabet.index(char)\
    \ + 2) % 26]\n    else\n      encrypted << char\n    end\n  end\n  encrypted\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do\
    \ |char|\n    index = alphabet.index(char)\n    encrypted += alphabet[(index +\
    \ 2) % 26]\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    index = alphabet.index(char)\n    encrypted\
    \ << alphabet[(index + 2) % 26]\n  end\n  encrypted\nend", "  alphabet = (\"a\"\
    ..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[(alphabet.index(char) + 2) * 2]\n    else\n     \
    \ encrypted << char\n    end\n  end\n  encrypted\nend", "\ts.split(\"\").map {|x|\
    \ x.next.next}.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    encrypted << alphabet[(alphabet.index(char)\
    \ + 2) * 2]\n  end\n  encrypted\nend", "  s.chars.map { |char| char.next.next\
    \ }.join\nend", "  s.split(\"\").map do |letter|\n    letter.ord + 2 * 2\n  end.map\
    \ do |num|\n    num.chr\n  end.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[(alphabet.index(char) + 2) % 26]\n    else\n    \
    \  encrypted << char\n    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"\
    ..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[(alphabet.index(char) + 2) % 26]\n    else\n    \
    \  encrypted << char\n    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"\
    ..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[(alphabet.index(char) + 2) * 2]\n    else\n     \
    \ encrypted << char\n    end\n  end\n  encrypted\nend", "  s.chars.map { |c| (c.ord\
    \ + 2 * 2).chr }.join\nend", "  s.chars.map do |char|\n    if char == \"z\"\n\
    \      \"b\"\n    elsif char == \"y\"\n      \"a\"\n    else\n      char.next.next\n\
    \    end\n  end.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\
    \"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted +=\
    \ alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted += char\n\
    \    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ += alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted += char\n\
    \    end\n  end\n  encrypted\nend", "\talphabet = ('a'..'z').to_a\n\ts.split(\"\
    \").map { |x| alphabet[alphabet.index(x) + 2 * 2] }.join(\"\")\nend", "  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    old_index\
    \ = alphabet.find_index(char)\n    new_index = old_index + 2 * 2\n    encrypted\
    \ += alphabet[new_index]\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord\
    \ + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.split(\"\").map { |c| c.ord + 2\
    \ * 2 }.map { |c| c.chr }.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    index = alphabet.index(char)\n\
    \    encrypted << alphabet[(index + 2) % 26]\n  end\n  encrypted\nend", "  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[(alphabet.index(char) + 2) % 26]\n    else\n    \
    \  encrypted << char\n    end\n  end\n  encrypted\nend", "\t# s.split(\"\").map\
    \ {|x| x.ord + 2}.join(\"\")\n\ts.split(\"\").map {|x| x.ord + 2}.map {|x| x.chr}.join(\"\
    \")\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encrypted = \"\"\n\
    \  s.each_char do |char|\n    if char == \" \"\n      encrypted += \" \"\n   \
    \ else\n      encrypted += alphabet[alphabet.index(char) + 2]\n    end\n  end\n\
    \  encrypted\nend", "\talphabet = (\"a\"..\"z\").to_a\n\talphabet_rotated = alphabet.rotate(2*2)\n\
    \ts.tr(alphabet.join, alphabet_rotated.join)\nend", "  alphabet = (\"a\"..\"z\"\
    ).to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      old_idx = alphabet.find_index(char)\n      new_idx = old_idx + 2\n    \
    \  encrypted += alphabet[new_idx]\n    else\n      encrypted += char\n    end\n\
    \  end\n  encrypted\nend", "  s.each_char.map { |c| (c.ord + 2 * 2).chr }.join\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = []\n  s.each_char do |char|\n\
    \    if alphabet.include?(char)\n      encrypted << alphabet[alphabet.index(char)\
    \ + 2]\n    else\n      encrypted << char\n    end\n  end\n  encrypted.join\n\
    end", "\talphabet = (\"a\"..\"z\").to_a\n\tnew_string = \"\"\n\ts.each_char do\
    \ |char|\n\t\tif char == \" \"\n\t\t\tnew_string << \" \"\n\t\telse\n\t\t\tnew_string\
    \ << alphabet[(alphabet.index(char) + 2) % 26]\n\t\tend\n\tend\n\tnew_string\n\
    end", "  s.chars.map { |char| char.next.next }.join\nend", "\ts.tr(\"a-z\", \"\
    c-za-b\")\nend", "  s.split(\"\").map { |x| x.next.next }.join(\"\")\nend", " \
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    if alphabet.include?(char)\n      encrypted += alphabet[(alphabet.index(char)\
    \ + 2) * 2]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\n\
    end", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    if char == \" \"\n      encrypted += \" \"\n    else\n      encrypted\
    \ += alphabet[alphabet.index(char) + 2]\n    end\n  end\n  encrypted\nend", " \
    \ s.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    index = alphabet.index(char)\n    encrypted\
    \ += alphabet[(index + 2) % 26]\n  end\n  encrypted\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  encrypted = \"\"\n  s.each_char do |char|\n    index = alphabet.index(char)\n\
    \    encrypted += alphabet[index + 2]\n  end\n  encrypted\nend", "\talphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n\tresult = \"\"\n\ts.each_char do |c|\n\t\t\
    if c == \" \"\n\t\t\tresult += \" \"\n\t\telse\n\t\t\tresult += alphabet[(alphabet.index(c)\
    \ + 2) % 26]\n\t\tend\n\tend\n\tresult\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[(alphabet.index(char) + 2) % 26]\n    else\n    \
    \  encrypted += char\n    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"\
    ..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |c|\n    if alphabet.include?(c)\n\
    \      encrypted += alphabet[alphabet.index(c) + 2 * 2]\n    else\n      encrypted\
    \ += c\n    end\n  end\n  encrypted\nend", "\ts.each_char.map { |c| c.ord + 2\
    \ * 2 }.map { |i| i.chr }.join\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    old_index\
    \ = alphabet.find_index(char)\n    new_index = old_index + 2 * 2\n    encrypted\
    \ += alphabet[new_index]\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\"\
    ).to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      old_index = alphabet.find_index(char)\n      new_index = old_index + 2\n\
    \      encrypted += alphabet[new_index]\n    else\n      encrypted += char\n \
    \   end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ << alphabet[alphabet.index(char) + 2]\n    else\n      encrypted << char\n \
    \   end\n  end\n  encrypted\nend", "  s.split(\"\").map { |char| char.next.next\
    \ }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = []\n  s.each_char\
    \ do |char|\n    if alphabet.include?(char)\n      encrypted << alphabet[alphabet.index(char)\
    \ + 2]\n    else\n      encrypted << char\n    end\n  end\n  encrypted.join\n\
    end", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |i| i.chr }.join\nend", "  s.chars.map\
    \ { |char| char.ord + 2 * 2 }.map { |num| num.chr }.join\nend", "  alphabet =\
    \ (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      old_index = alphabet.find_index(char)\n      new_index = old_index + 2\
    \ * 2\n      encrypted += alphabet[new_index % 26]\n    else\n      encrypted\
    \ += char\n    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[alphabet.index(char) + 2 * 2]\n    else\n      encrypted\
    \ << char\n    end\n  end\n  encrypted\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  new_string = \"\"\n  s.each_char do |char|\n    new_string += alphabet[alphabet.index(char)\
    \ + 2 * 2]\n  end\n  new_string\nend", "  s.each_char.map do |char|\n    if char\
    \ == \"z\"\n      \"b\"\n    elsif char == \"y\"\n      \"a\"\n    else\n    \
    \  (char.ord + 2).chr\n    end\n  end.join\nend", "\talphabet = (\"a\"..\"z\"\
    ).to_a\n\tnew_string = \"\"\n\ts.each_char do |char|\n\t\tnew_string += alphabet[alphabet.index(char)\
    \ + 2]\n\tend\n\tnew_string\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    old_index = alphabet.find_index(char)\n\
    \    new_index = old_index + 2 * 2\n    encrypted += alphabet[new_index]\n  end\n\
    \  encrypted\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend", "\talphabet = (\"a\"..\"\
    z\").to_a\n\talphabet_rotated = alphabet.rotate(2*2)\n\talphabet_rotated_hash\
    \ = Hash[alphabet.zip(alphabet_rotated)]\n\ts.split(\"\").map {|letter| alphabet_rotated_hash[letter]}.join\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do\
    \ |char|\n    if alphabet.include?(char)\n      encrypted += alphabet[alphabet.index(char)\
    \ + 2 * 2]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\nend",
  "  s.split(\"\").map { |x| x.ord + 2 * 2 }.map { |x| x.chr }.join(\"\")\nend", " \
    \ alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n\
    \    if alphabet.include?(char)\n      encrypted += alphabet[(alphabet.index(char)\
    \ + 2) % 26]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\n\
    end", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tnew_string = \"\"\n\ts.each_char\
    \ do |char|\n\t\tnew_string += alphabet[alphabet.index(char) + 2]\n\tend\n\tnew_string\n\
    end", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[alphabet.index(char) + 2]\n    else\n      encrypted\
    \ += char\n    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if char == \" \"\n      encrypted\
    \ << \" \"\n    else\n      encrypted << alphabet[alphabet.index(char) + 2 * 2]\n\
    \    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  s.split(\"\
    \").map { |letter| alphabet[alphabet.index(letter) + 2 * 2] }.join(\"\")\nend",
  "  s.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if char == \" \"\n      encrypted << \"\
    \ \"\n    else\n      encrypted << alphabet[alphabet.index(char) + 2 * 2]\n  \
    \  end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ += alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted += char\n\
    \    end\n  end\n  encrypted\nend", "  s.split(\"\").map { |char| char.next.next\
    \ }.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n\
    \  s.each_char do |c|\n    encrypted << alphabet[alphabet.index(c) + 2 * 2]\n\
    \  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\
    \"\n  s.each_char do |char|\n    old_index = alphabet.find_index(char)\n    new_index\
    \ = old_index + 2 * 2\n    encrypted += alphabet[new_index]\n  end\n  encrypted\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do\
    \ |char|\n    if char == \" \"\n      encrypted << \" \"\n    else\n      encrypted\
    \ << alphabet[alphabet.index(char) + 2]\n    end\n  end\n  encrypted\nend", "\t\
    s.split(\"\").map {|x| x.ord + 2}.map {|x| x.chr}.join(\"\")\nend", "  s.chars.map\
    \ { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.chars.map { |c| c.ord\
    \ + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map\
    \ { |c| c.chr }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\
    \"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted <<\
    \ alphabet[(alphabet.index(char) + 2) * 2]\n    else\n      encrypted << char\n\
    \    end\n  end\n  encrypted\nend", "  s.chars.map { |c| (c.ord + 2 * 2).chr }.join\n\
    end", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  new_string = \"\"\n  s.each_char\
    \ do |char|\n    new_string += alphabet[alphabet.index(char) + 2 * 2]\n  end\n\
    \  new_string\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n \
    \ s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted += alphabet[alphabet.index(char)\
    \ + 2 * 2]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\nend",
  "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\ts.each_char do |char|\n\t\tindex\
    \ = alphabet.index(char)\n\t\tindex += 2\n\t\tindex *= 2\n\t\tprint alphabet[index]\n\
    \tend\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    encrypted += alphabet[(alphabet.index(char) + 2) * 2]\n  end\n\
    \  encrypted\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\n\
    end", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[(alphabet.index(char) + 2) % 26]\n    else\n    \
    \  encrypted += char\n    end\n  end\n  encrypted\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  encrypted = \"\"\n  s.each_char do |c|\n    if alphabet.include?(c)\n    \
    \  encrypted += alphabet[alphabet.index(c) + 2 * 2]\n    else\n      encrypted\
    \ += c\n    end\n  end\n  encrypted\nend", "\ts.split(\"\").map {|x| x.ord + 2\
    \ * 2}.map {|x| x.chr}.join(\"\")\nend", "  s.each_char.map { |c| (c.ord + 2 *\
    \ 2).chr }.join\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet = (\"a\"\
    ..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    encrypted << alphabet[alphabet.index(char)\
    \ + 2 * 2]\n  end\n  encrypted\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend", "\t\
    s.split(\"\").map {|x| x.ord + 2}.map {|x| x.chr}.join(\"\")\nend", "  s.each_char.map\
    \ { |c| (c.ord + 2 * 2).chr }.join\nend", "  s.chars.map { |c| (c.ord + 2 * 2).chr\
    \ }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    index = alphabet.index(char)\n    encrypted += alphabet[(index\
    \ + 2) % 26]\n  end\n  encrypted\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[(alphabet.index(char) + 2) * 2]\n    else\n     \
    \ encrypted += char\n    end\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord\
    \ + 2 * 2 }.map { |c| c.chr }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  new_string = \"\"\n  s.each_char do |char|\n    new_string += alphabet[alphabet.index(char)\
    \ + 2 * 2]\n  end\n  new_string\nend", "  s.chars.map do |c|\n    if c == \"z\"\
    \n      \"b\"\n    elsif c == \"y\"\n      \"a\"\n    else\n      c.next.next\n\
    \    end\n  end.join\nend", "  alphabet = ('a'..'z').to_a\n  encrypted = \"\"\n\
    \  s.each_char do |c|\n    if alphabet.include?(c)\n      encrypted += alphabet[(alphabet.index(c)\
    \ + 2) % 26]\n    else\n      encrypted += c\n    end\n  end\n  encrypted\nend",
  "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n\
    \    if alphabet.include?(char)\n      encrypted << alphabet[(alphabet.index(char)\
    \ + 2) % 26]\n    else\n      encrypted << char\n    end\n  end\n  encrypted\n\
    end", "  s.tr('a-z', 'c-za-b')\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  s.split(\"\").map do |letter|\n    alphabet.index(letter)\n  end.map do |index|\n\
    \    alphabet[(index + 2) * 2]\n  end.join(\"\")\nend", "  alphabet = (\"a\"..\"\
    z\").to_a\n  encrypted = []\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[(alphabet.index(char) + 2) % 26]\n    else\n    \
    \  encrypted << char\n    end\n  end\n  encrypted.join\nend", "  alphabet = (\"\
    a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if char ==\
    \ \" \"\n      encrypted << \" \"\n    else\n      encrypted << alphabet[(alphabet.index(char)\
    \ + 2) * 2]\n    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    index = alphabet.index(char)\n\
    \    encrypted += alphabet[(index + 2) % 26]\n  end\n  encrypted\nend", "  s.chars.map\
    \ { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  alphabet = (\"a\"..\"\
    z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    encrypted += alphabet[alphabet.index(char)\
    \ + 2 * 2]\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ << alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted << char\n\
    \    end\n  end\n  encrypted\nend", "  s.chars.map { |char| char.next.next }.join\n\
    end", "  s.split(\"\").map { |letter| letter.next.next }.join(\"\")\nend", " \
    \ alphabet = ('a'..'z').to_a\n  encrypted = ''\n  s.each_char do |char|\n    index\
    \ = alphabet.index(char)\n    encrypted << alphabet[index + 2]\n  end\n  encrypted\n\
    end", "  s.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      old_idx = alphabet.find_index(char)\n      new_idx = old_idx + 2\n    \
    \  encrypted += alphabet[new_idx]\n    else\n      encrypted += char\n    end\n\
    \  end\n  encrypted\nend", "  s.tr('a-z', 'c-za-b')\nend", "  alphabet = (\"a\"\
    ..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[(alphabet.index(char) + 2) * 2]\n    else\n     \
    \ encrypted += char\n    end\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord\
    \ + 2 * 2 }.map { |c| c.chr }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[(alphabet.index(char) + 2) * 2]\n    else\n     \
    \ encrypted += char\n    end\n  end\n  encrypted\nend", "  s.split(\"\").map {\
    \ |c| c.ord + 2 * 2 }.map { |c| c.chr }.join(\"\")\nend", "  alphabet = (\"a\"\
    ..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |c|\n    if alphabet.include?(c)\n\
    \      encrypted << alphabet[(alphabet.index(c) + 2) % 26]\n    else\n      encrypted\
    \ << c\n    end\n  end\n  encrypted\nend", "  alphabet = ('a'..'z').to_a\n  encrypted\
    \ = []\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ << alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted << char\n\
    \    end\n  end\n  encrypted.join\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map\
    \ { |c| c.chr }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\
    \"\n  s.each_char do |char|\n    index = alphabet.index(char)\n    encrypted +=\
    \ alphabet[(index + 4) % 26]\n  end\n  encrypted\nend", "\ts.split(\"\").map {|x|\
    \ x.ord + 2 * 2}.map {|x| x.chr}.join(\"\")\nend", "  alphabet = (\"a\"..\"z\"\
    ).to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[(alphabet.index(char) + 2) % 26]\n    else\n    \
    \  encrypted += char\n    end\n  end\n  encrypted\nend", "  # your code here\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do\
    \ |char|\n    if char == \" \"\n      encrypted << \" \"\n    else\n      encrypted\
    \ << alphabet[(alphabet.index(char) + 2 * 2) % 26]\n    end\n  end\n  encrypted\n\
    end", "\ts.split(\"\").map {|x| x.next.next}.join(\"\")\nend", "  alphabet = (\"\
    a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |c|\n    if alphabet.include?(c)\n\
    \      encrypted << alphabet[(alphabet.index(c) + 2) % 26]\n    else\n      encrypted\
    \ << c\n    end\n  end\n  encrypted\nend", "\talphabet = (\"a\"..\"z\").to_a\n\
    \tnew_alphabet = alphabet.rotate(2)\n\tnew_alphabet2 = new_alphabet.rotate(2)\n\
    \tnew_alphabet3 = new_alphabet2.rotate(2)\n\tnew_alphabet4 = new_alphabet3.rotate(2)\n\
    \tnew_alphabet5 = new_alphabet4.rotate(2)\n\tnew_alphabet6 = new_alphabet5.rotate(2)\n\
    \tnew_alphabet7 = new_alphabet6.rotate(2)\n\tnew_alphabet8 = new_alphabet7.rotate(2)\n\
    \tnew_alphabet9 = new_alphabet8.rotate(2)\n\tnew_alphabet10 = new_alphabet9.rotate(2)\n\
    \tnew_alphabet11 = new_alphabet10.rotate(2)\n\tnew_alphabet12 = new_alphabet11.rotate(2)\n\
    \tnew_alphabet13 = new_alphabet12.rotate(2)\n\tnew_alphabet14 = new_alphabet13.rotate(2)\n\
    \tnew_alphabet15 = new_alphabet14.rotate(2)\n\tnew_alphabet16 = new_alphabet15.rotate(2)\n\
    \tnew_alphabet17 = new_alphabet16.rotate(2)\n\tnew_alphabet18 = new_alphabet17.rotate(2)\n\
    \tnew_alphabet19 = new_alphabet18.rotate(2)\n\tnew_alphabet20 = new_alphabet19.rotate(2)\n\
    \tnew_alphabet21 = new_alphabet20.rotate(2)\n\tnew_alphabet22 = new_alphabet21.rotate(2)\n\
    \tnew_alphabet23 = new_alphabet22.rotate(2)\n\tnew_alphabet24 = new_alphabet23.rotate(2)\n\
    \tnew_alphabet25 = new_alphabet24.rotate(2)\n\tnew_alphabet26 = new_alphabet25.rotate(2)\n\
    \tnew_alphabet27 = new", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\
    \n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted +=\
    \ alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted += char\n\
    \    end\n  end\n  encrypted\nend", "  s.split(\"\").map { |letter| letter.next.next\
    \ }.join(\"\")\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do\
    \ |char|\n    if alphabet.include?(char)\n      encrypted << alphabet[alphabet.index(char)\
    \ + 2 * 2]\n    else\n      encrypted << char\n    end\n  end\n  encrypted\nend",
  "  s.split(\"\").map { |x| x.next.next }.join(\"\")\nend", "  alphabet = (\"a\"\
    ..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    index = alphabet.index(char)\n\
    \    encrypted += alphabet[(index + 2) % 26]\n  end\n  encrypted\nend", "  s.chars.map\
    \ { |char| char.next.next }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ << alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted << char\n\
    \    end\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map {\
    \ |c| c.chr }.join\nend", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tencrypted\
    \ = \"\"\n\ts.each_char do |c|\n\t\tif c == \" \"\n\t\t\tencrypted += \" \"\n\t\
    \telse\n\t\t\tidx = alphabet.index(c)\n\t\t\tencrypted += alphabet[idx + 2]\n\t\
    \tend\n\tend\n\tencrypted\nend", "  s.split(\"\").map { |c| c.ord + 2 * 2 }.map\
    \ { |c| c.chr }.join(\"\")\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet\
    \ = ('a'..'z').to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[(alphabet.index(char) + 2 * 2) % 26]\n    else\n\
    \      encrypted += char\n    end\n  end\n  encrypted\nend", "  alphabet = (\"\
    a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    old_idx = alphabet.find_index(char)\n\
    \    new_idx = old_idx + 2\n    encrypted += alphabet[new_idx]\n  end\n  encrypted\n\
    end", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |c|\n    encrypted\
    \ << alphabet[(alphabet.index(c) + 2) * 2]\n  end\n  encrypted\nend", "  s.chars.map\
    \ { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  alphabet = (\"a\"..\"\
    z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    index = alphabet.index(char)\n\
    \    encrypted << alphabet[(index + 2) % 26]\n  end\n  encrypted\nend", "\talphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n\tnew_string = \"\"\n\ts.each_char do |x|\n\
    \t\tnew_string += alphabet[alphabet.index(x) + 2]\n\tend\n\tnew_string\nend",
  "  alphabet = ('a'..'z').to_a\n  encrypted = \"\"\n  s.each_char do |char|\n   \
    \ encrypted += alphabet[(alphabet.index(char) + 2) * 2]\n  end\n  encrypted\n\
    end", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.tr(\"\
    a-z\", \"c-za-b\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\
    \n  s.each_char do |char|\n    if char == \" \"\n      encrypted << \" \"\n  \
    \  else\n      old_index = alphabet.find_index(char)\n      new_index = old_index\
    \ + 2 * 2\n      encrypted << alphabet[new_index]\n    end\n  end\n  encrypted\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do\
    \ |char|\n    encrypted << alphabet[(alphabet.index(char) + 2) * 2]\n  end\n \
    \ encrypted\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend", "  s.chars.map { |c| c.ord\
    \ + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.split(\"\").map { |letter| letter.next.next\
    \ }.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n\
    \  s.each_char do |char|\n    if alphabet.include?(char)\n      old_index = alphabet.index(char)\n\
    \      new_index = old_index + 2\n      encrypted += alphabet[new_index]\n   \
    \ else\n      encrypted += char\n    end\n  end\n  encrypted\nend", "  s.split(\"\
    \").map { |letter| letter.next.next }.join(\"\")\nend", "  s.chars.map { |c| c.ord\
    \ + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map\
    \ { |c| c.chr }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\
    \"\n  s.each_char do |char|\n    index = alphabet.index(char)\n    encrypted <<\
    \ alphabet[(index + 2) % 26]\n  end\n  encrypted\nend", "  s.tr(\"a-z\", \"c-za-b\"\
    )\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[alphabet.index(char) + 2]\n    else\n      encrypted\
    \ << char\n    end\n  end\n  encrypted\nend", "  alphabet = ('a'..'z').to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[alphabet.index(char) + 2]\n    else\n      encrypted\
    \ << char\n    end\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord + 2 *\
    \ 2 }.map { |c| c.chr }.join\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map {\
    \ |c| c.chr }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\
    \n  s.each_char do |char|\n    encrypted << alphabet[alphabet.index(char) + 2\
    \ * 2]\n  end\n  encrypted\nend", "    s.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    index\
    \ = alphabet.index(char)\n    encrypted << alphabet[(index + 2) % 26]\n  end\n\
    \  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    if alphabet.include?(char)\n      encrypted << alphabet[alphabet.index(char)\
    \ + 2 * 2]\n    else\n      encrypted << char\n    end\n  end\n  encrypted\nend",
  "  s.tr(\"a-z\", \"c-za-b\")\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
