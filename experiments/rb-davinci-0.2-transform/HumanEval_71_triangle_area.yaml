name: HumanEval_71_triangle_area
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return the area of\n\
  # the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any\
  \ two sides is greater \n# than the third side.\n# Example:\n# >>> triangle_area.call(3,\
  \ 4, 5)\n# 6.0\n# >>> triangle_area.call(1, 2, 10)\n# -1\ndef triangle_area(a, b,\
  \ c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n\
  \    candidate = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3,\
  \ 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18,\
  \ candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n  \
  \  assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10,\
  \ 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43,\
  \ candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\n\
  end\n"
completions: ["  # Your code here\nend", "  # Your code here\nend", "  # Your code\
    \ here\nend", "  # your code here\nend", "  # Your code here\nend", "  # TODO:\
    \ implement this method\nend", "  # your code here\nend", "  # TODO: implement\
    \ me\nend", "  # your code here\nend", "  # your code here\nend", "  # Your code\
    \ here\nend", "  # write your code here\nend", "  # your code here\nend", "  #\
    \ TODO: implement this method\nend", "  # Your code here\nend", "  # your code\
    \ here\nend", "  # Your code here\nend", "  # TODO: implement this method\nend",
  "  # TODO: implement this method\nend", "  # your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
