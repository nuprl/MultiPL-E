name: HumanEval_70_strange_sort_list
language: rb
prompt: "# Given list of integers, return list in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# Examples:\n# >>> strange_sort_list.call([1, 2, 3, 4])\n\
  # [1, 4, 2, 3]\n# >>> strange_sort_list.call([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>>\
  \ strange_sort_list.call([])\n# []\ndef strange_sort_list(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
  \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
  \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
  \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
  \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5,\
  \ 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7,\
  \ 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2,\
  \ 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\n\
  end\n"
completions: ["  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  result = []\n  until lst.empty?\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  return lst if\
    \ lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n    result <<\
    \ lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend",
  "  return lst if lst.empty?\n  result = []\n  min = lst.min\n  max = lst.max\n \
    \ result << min\n  result << max\n  lst.delete(min)\n  lst.delete(max)\n  until\
    \ lst.empty?\n    min = lst.min\n    max = lst.max\n    result << min\n    result\
    \ << max\n    lst.delete(min)\n    lst.delete(max)\n  end\n  result\nend", " \
    \ lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  res = []\n  while lst.size >\
    \ 1\n    res << lst.shift\n    res << lst.pop\n  end\n  res << lst.shift\n  res\n\
    end", "  lst.sort_by.with_index { |_, i| i.even? ? 0 : 1 }\nend", "  lst.sort_by.with_index\
    \ { |_, i| i.even? ? lst.min : lst.max }\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  result = []\n  while lst.size > 1\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result << lst.shift\n  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  sorted = []\n  lst.sort!\n  while lst.size > 0\n    sorted\
    \ << lst.shift\n    sorted << lst.pop\n  end\n  sorted\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  result = []\n  lst.sort!\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  return lst if lst.empty?\n  result = []\n  result << lst.min\n\
    \  lst.delete(lst.min)\n  while lst.size > 0\n    result << lst.max\n    lst.delete(lst.max)\n\
    \    result << lst.min\n    lst.delete(lst.min)\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend",
  "  if lst.length.even?\n    lst.sort.each_slice(2).to_a.transpose.flatten\n  else\n\
    \    lst.sort.each_slice(2).to_a.transpose.flatten.push(lst.max)\n  end\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort_by.with_index\
    \ { |_, i| i.even? ? 0 : 1 }\nend", "  lst.sort.each_slice(2).to_a.flatten.reverse\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).flat_map\
    \ { |a, b| [a, b].compact }\nend", "  return lst if lst.empty?\n  result = []\n\
    \  result << lst.min\n  lst.delete(lst.min)\n  until lst.empty?\n    result <<\
    \ lst.max\n    lst.delete(lst.max)\n    result << lst.min\n    lst.delete(lst.min)\n\
    \  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  # your code here\nend", "  return lst if lst.empty?\n  lst.sort!\n  lst.insert(1,\
    \ lst.pop)\n  lst\nend", "  lst.sort_by.with_index { |_, i| i.even? ? 0 : 1 }\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  lst.reverse!\n  lst.each_slice(2).to_a.transpose.flatten\nend",
  "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  result = []\n  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result << lst.shift\n  result\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  result << lst.shift\n\
    \  result << lst.pop\n  result << strange_sort_list(lst)\n  result.flatten\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n\
    \    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while\
    \ lst.size > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result\
    \ << lst.shift\n  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort_by.with_index { |_, i| i.even? ? lst.min : lst.max }\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  # your code here\n\
    end", "  return lst if lst.empty?\n  result = []\n  result << lst.min\n  lst.delete(lst.min)\n\
    \  result << lst.max\n  lst.delete(lst.max)\n  result << strange_sort_list(lst)\n\
    \  result.flatten\nend", "  lst.sort.each_slice(2).to_a.flatten.reverse\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.length > 0\n\
    \    result << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.unshift(lst.pop)\n  lst\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.reverse.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  result = []\n  until lst.empty?\n    result << lst.min\n\
    \    lst.delete(lst.min)\n    result << lst.max\n    lst.delete(lst.max)\n  end\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n\
    \    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  min = lst.shift\n\
    \  max = lst.pop\n  [min, max] + strange_sort_list(lst)\nend", "  return lst if\
    \ lst.empty?\n  sorted = []\n  sorted << lst.min\n  lst.delete(lst.min)\n  sorted\
    \ << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(l",
  "  lst.sort_by.with_index { |_, i| [i.even? ? :min : :max] }\nend", "  return lst\
    \ if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.reverse.each_slice(2).to_a.flatten.reverse\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  if lst.empty?\n    return []\n  end\n  result = []\n  while lst.length\
    \ > 0\n    result << lst.min\n    lst.delete(lst.min)\n    result << lst.max\n\
    \    lst.delete(lst.max)\n  end\n  result\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  lst.map.with_index do |_, i|\n    if i.even?\n      lst.shift\n\
    \    else\n      lst.pop\n    end\n  end\nend", "  return lst if lst.empty?\n\
    \  result = []\n  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result << lst.shift\n  result\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).flat_map { |a, b| [a, b].compact\
    \ }\nend", "  return lst if lst.empty?\n  lst.sort!\n  min = lst.shift\n  max\
    \ = lst.pop\n  lst.unshift(max)\n  lst.push(min)\n  lst\nend", "  return lst if\
    \ lst.empty?\n  result = []\n  min = lst.min\n  max = lst.max\n  while result.length\
    \ < lst.length\n    result << min\n    result << max\n    lst.delete(min)\n  \
    \  lst.delete(max)\n    min = lst.min\n    max = lst.max\n  end\n  result\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  (lst.length / 2).times do |i|\n    lst.insert(2\
    \ * i + 1, lst.pop)\n  end\n  lst\nend", "  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort_by.with_index { |_, i| i.even? ? lst.min : lst.max }\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  sorted = []\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(l",
  '  return lst if lst.empty?', "  return lst if lst.empty?\n  min = lst.min\n  max\
    \ = lst.max\n  lst.delete(min)\n  lst.delete(max)\n  [min, max] + strange_sort_list(lst)\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort_by.with_index { |_, i| i.even? ? lst.min : lst.max }\nend",
  "  return lst if lst.empty?\n  result = []\n  result << lst.min\n  lst.delete(lst.min)\n\
    \  result << lst.max\n  lst.delete(lst.max)\n  result << strange_sort_list(lst)\n\
    \  result.flatten\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend",
  "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort_by.with_index { |_, i| i.even? ? 0 : 1 }\nend", "  return lst\
    \ if lst.empty?\n  result = []\n  result << lst.min\n  lst.delete(lst.min)\n \
    \ until lst.empty?\n    result << lst.max\n    lst.delete(lst.max)\n    result\
    \ << lst.min\n    lst.delete(lst.min)\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort_by.with_index { |_, i| i.even? ? 0 : 1 }\nend", "  return lst\
    \ if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\nend",
  "  return lst if lst.empty?\n  sorted = []\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(l",
  "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  result = []\n  while lst.size > 1\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result << lst.shift\n  result\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  lst.unshift(lst.pop)\n  lst\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  result = []\n  i = 0\n  while lst.size > 0\n\
    \    result << lst.delete_at(i)\n    i = -i - 1\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  result = []\n  result << lst.min\n  lst.delete(lst.min)\n\
    \  until lst.empty?\n    result << lst.max\n    lst.delete(lst.max)\n    result\
    \ << lst.min\n    lst.delete(lst.min)\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  return lst if lst.empty?\n  result = []\n  lst.sort!\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while\
    \ lst.size > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result\
    \ << lst.pop\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return\
    \ lst if lst.empty?\n  result = []\n  lst.sort!\n  while lst.size > 0\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  return lst if\
    \ lst.empty?\n  sorted = []\n  sorted << lst.min\n  lst.delete(lst.min)\n  sorted\
    \ << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(l",
  "  lst.sort_by.with_index { |_, i| i.even? ? lst.min : lst.max }\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  result = []\n  while lst.size > 0\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort_by.with_index\
    \ { |_, i| i.even? ? lst.min : lst.max }\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\nend", "  return lst\
    \ if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort_by.with_index { |_, i| i.even? ? lst.min : lst.max }\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  result = []\n  result << lst.min\n  lst.delete(lst.min)\n\
    \  result << lst.max\n  lst.delete(lst.max)\n  result << strange_sort_list(lst)\n\
    \  result.flatten\nend", "  lst.sort_by.with_index { |_, i| i.even? ? lst.min\
    \ : lst.max }\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", " \
    \ return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 0\n\
    \    result << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  sorted = []\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(l",
  "  return lst if lst.empty?\n  sorted = []\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n\
    \  sorted << lst.max\n  lst.delete(lst.max)\n  sorted\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  new_lst = []\n  while lst.size\
    \ > 0\n    new_lst << lst.shift\n    new_lst << lst.pop\n  end\n  new_lst\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  result = []\n  while lst.size > 1\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result << lst.shift\n  result\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.unshift(lst.pop)\n  lst\n\
    end", "  lst.sort.each_slice(2).flat_map { |a, b| [a, b].compact }\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_with_index.map do |_,\
    \ i|\n    i.even? ? lst.shift : lst.pop\n  end\nend", "  lst.sort.partition.with_index\
    \ { |_, i| i.even? }.flatten\nend", "  lst.sort_by.with_index { |_, i| i.even?\
    \ ? 0 : 1 }\nend", "  return lst if lst.empty?\n  lst.sort!\n  (lst.size / 2).times\
    \ do |i|\n    lst.insert(2 * i + 1, lst.pop)\n  end\n  lst\nend", "  return lst\
    \ if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 0\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.partition.with_index { |_, i| i.even? }.flatten\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  sorted = []\n  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n\
    \  lst.delete(lst.max)\n  sorted << lst.min\n  lst.delete(lst.min)\n  sorted <<\
    \ lst.max\n  lst.delete(lst.max)\n  sorted\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.reverse.each_slice(2).to_a.flatten.reverse\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.unshift(lst.pop)\n  lst\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  min = lst.shift\n  max = lst.pop\n  lst.unshift(max)\n  lst.push(min)\n\
    \  lst\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return\
    \ lst if lst.empty?\n  result = []\n  lst.sort!\n  while lst.size > 0\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.map.with_index { |e, i|\
    \ i.even? ? e : lst.pop }\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  result = []\n  while lst.size > 1\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result << lst.shift\n  result\nend", "  return\
    \ lst if lst.empty?\n  result = []\n  sorted = lst.sort\n  while sorted.any?\n\
    \    result << sorted.shift\n    result << sorted.pop\n  end\n  result\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return lst if\
    \ lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 0\n    result <<\
    \ lst.shift\n    result << lst.pop\n  end\n  result\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  return lst if lst.empty?\n \
    \ lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\nend", "  return lst if\
    \ lst.empty?\n  result = []\n  lst.sort!\n  while lst.size > 1\n    result <<\
    \ lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
