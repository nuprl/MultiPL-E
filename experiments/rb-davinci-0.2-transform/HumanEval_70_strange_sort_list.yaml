name: HumanEval_70_strange_sort_list
language: rb
prompt: "# Given list of integers, return list in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# Examples:\n# >>> strange_sort_list.call([1, 2, 3, 4])\n\
  # [1, 4, 2, 3]\n# >>> strange_sort_list.call([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>>\
  \ strange_sort_list.call([])\n# []\ndef strange_sort_list(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
  \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
  \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
  \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
  \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5,\
  \ 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7,\
  \ 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2,\
  \ 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\n\
  end\n"
completions: ["  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  result = []\n  until lst.empty?\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  return lst if\
    \ lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n    result <<\
    \ lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend",
  "  return lst if lst.empty?\n  result = []\n  min = lst.min\n  max = lst.max\n \
    \ result << min\n  result << max\n  lst.delete(min)\n  lst.delete(max)\n  until\
    \ lst.empty?\n    min = lst.min\n    max = lst.max\n    result << min\n    result\
    \ << max\n    lst.delete(min)\n    lst.delete(max)\n  end\n  result\nend", " \
    \ lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  res = []\n  while lst.size >\
    \ 1\n    res << lst.shift\n    res << lst.pop\n  end\n  res << lst.shift\n  res\n\
    end", "  lst.sort_by.with_index { |_, i| i.even? ? 0 : 1 }\nend", "  lst.sort_by.with_index\
    \ { |_, i| i.even? ? lst.min : lst.max }\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  result = []\n  while lst.size > 1\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result << lst.shift\n  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  sorted = []\n  lst.sort!\n  while lst.size > 0\n    sorted\
    \ << lst.shift\n    sorted << lst.pop\n  end\n  sorted\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
