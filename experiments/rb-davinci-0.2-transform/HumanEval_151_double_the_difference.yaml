name: HumanEval_151_double_the_difference
language: rb
prompt: "# Given a list of numbers, return the sum of squares of the numbers\n# in\
  \ the list that are odd. Ignore numbers that are negative or not integers.\n# >>>\
  \ double_the_difference.call([1, 3, 2, 0])\n# 10\n# >>> double_the_difference.call([-1,\
  \ -2, 0])\n# 0\n# >>> double_the_difference.call([9, -2])\n# 81\n# >>> double_the_difference.call([0])\n\
  # 0\n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
  \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
  \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0,\
  \ candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
  \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
  \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
completions: ["  lst.select { |num| num.is_a?(Integer) && num > 0 }\n      .map {\
    \ |num| num ** 2 }\n      .reduce(0, :+)\nend", "  # your code here\nend", " \
    \ sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  return sum\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\nend", "  lst.select { |x| x.is_a?(Integer)\
    \ && x > 0 }.map { |x| x ** 2 }.sum\nend", "  return 0 if lst.empty?\n  lst.select\
    \ { |x| x.is_a?(Integer) && x.odd? }.map { |x| x**2 }.sum\nend", "  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.sum\nend", "  lst.select\
    \ { |num| num.odd? && num.integer? && num > 0 }.map { |num| num ** 2 }.sum\nend",
  "  lst.select { |num| num.is_a?(Integer) && num > 0 }\n      .map { |num| num **\
    \ 2 }\n      .reduce(0, :+)\nend", "  lst.select { |num| num.is_a?(Integer) &&\
    \ num.odd? }.map { |num| num ** 2 }.sum\nend", "  lst.select { |num| num.is_a?(Integer)\
    \ && num > 0 }\n      .map { |num| num ** 2 }\n      .sum * 2\nend", "  lst.select\
    \ { |num| num.is_a?(Integer) && num > 0 }\n      .map { |num| num ** 2 }\n   \
    \   .reduce(0, :+)\nend", "  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x|\
    \ x**2}.reduce(:+) || 0\nend", "  lst.select { |num| num.is_a?(Integer) && num\
    \ > 0 }\n      .map { |num| num ** 2 }\n      .reduce(0, :+)\nend", "  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.sum\nend", "  lst.select\
    \ { |num| num.is_a?(Integer) && num.odd? }.map { |num| num ** 2 }.sum\nend", " \
    \ lst.select { |num| num.is_a?(Integer) && num > 0 }\n      .map { |num| num **\
    \ 2 }\n      .reduce(0, :+)\nend", "  return 0 if lst.empty?\n  lst.select { |x|\
    \ x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\nend", "  lst.select\
    \ { |num| num.is_a?(Integer) && num > 0 }\n      .map { |num| num ** 2 }\n   \
    \   .reduce(0, :+)\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num ** 2\n    end\n  end\n  sum * 2\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
