language: rb
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.map(&:to_i).all? { |n| n.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp83i06fra

    Started

    .

    Finished in 0.000397244 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2517.34 tests/s, 10069.38 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpn33jchw5

    Started

    .

    Finished in 0.000858366 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1165.00 tests/s, 4660.02 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select{|i| i.to_s.split('').map(&:to_i).all?{|j| j.odd?}}.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0tv_4o52

    Started

    .

    Finished in 0.000401317 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2491.80 tests/s, 9967.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyvpm_803

    Started

    .

    Finished in 0.000558834 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1789.44 tests/s, 7157.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7teq1a8u

    Started

    .

    Finished in 0.001286236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    777.46 tests/s, 3109.85 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfxe5aec9

    Started

    .

    Finished in 0.000377459 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2649.29 tests/s, 10597.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.map(&:to_i).all?(&:odd?) }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19gjvzc8

    Started

    .

    Finished in 0.00116318 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    859.71 tests/s, 3438.85 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfxe5aec9

    Started

    .

    Finished in 0.000377459 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2649.29 tests/s, 10597.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7erw7p2y

    Started

    .

    Finished in 0.000673876 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1483.95 tests/s, 5935.81 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select{|i| i.to_s.split('').all?{|j| j.to_i.odd?}}.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp15stsvv5

    Started

    .

    Finished in 0.000526759 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1898.40 tests/s, 7593.61 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfv3boj91

    Started

    .

    Finished in 0.000513231 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1948.44 tests/s, 7793.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7teq1a8u

    Started

    .

    Finished in 0.001286236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    777.46 tests/s, 3109.85 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyvpm_803

    Started

    .

    Finished in 0.000558834 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1789.44 tests/s, 7157.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcfdl8vbo

    Started

    .

    Finished in 0.000387829 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2578.46 tests/s, 10313.82 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.map(&:to_i).all? { |digit|\
    \ digit.odd? } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1pxovrg1

    Started

    .

    Finished in 0.000478038 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2091.88 tests/s, 8367.54 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfxe5aec9

    Started

    .

    Finished in 0.000377459 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2649.29 tests/s, 10597.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfxe5aec9

    Started

    .

    Finished in 0.000377459 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2649.29 tests/s, 10597.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpn33jchw5

    Started

    .

    Finished in 0.000858366 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1165.00 tests/s, 4660.02 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcfdl8vbo

    Started

    .

    Finished in 0.000387829 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2578.46 tests/s, 10313.82 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.map(&:to_i).all? { |digit|\
    \ digit.odd? } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1pxovrg1

    Started

    .

    Finished in 0.000478038 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2091.88 tests/s, 8367.54 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7teq1a8u

    Started

    .

    Finished in 0.001286236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    777.46 tests/s, 3109.85 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7teq1a8u

    Started

    .

    Finished in 0.001286236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    777.46 tests/s, 3109.85 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyvpm_803

    Started

    .

    Finished in 0.000558834 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1789.44 tests/s, 7157.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7erw7p2y

    Started

    .

    Finished in 0.000673876 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1483.95 tests/s, 5935.81 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcfdl8vbo

    Started

    .

    Finished in 0.000387829 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2578.46 tests/s, 10313.82 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').map(&:to_i).all? { |n| n.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpty8xeuaz

    Started

    .

    Finished in 0.000367881 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2718.27 tests/s, 10873.08 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all?(&:odd?) }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo6bxn7kw

    Started

    .

    Finished in 0.00096761 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1033.47 tests/s, 4133.90 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7teq1a8u

    Started

    .

    Finished in 0.001286236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    777.46 tests/s, 3109.85 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfxe5aec9

    Started

    .

    Finished in 0.000377459 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2649.29 tests/s, 10597.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcfdl8vbo

    Started

    .

    Finished in 0.000387829 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2578.46 tests/s, 10313.82 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfv3boj91

    Started

    .

    Finished in 0.000513231 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1948.44 tests/s, 7793.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9zp2dtla

    Started

    .

    Finished in 0.00036755 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2720.72 tests/s, 10882.87 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpf11v9mnu

    Started

    .

    Finished in 0.000556694 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1796.32 tests/s, 7185.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkg139l1j

    Started

    .

    Finished in 0.000495955 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2016.31 tests/s, 8065.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfv3boj91

    Started

    .

    Finished in 0.000513231 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1948.44 tests/s, 7793.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyvpm_803

    Started

    .

    Finished in 0.000558834 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1789.44 tests/s, 7157.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfxe5aec9

    Started

    .

    Finished in 0.000377459 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2649.29 tests/s, 10597.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select{|i| i.to_s.split('').all?{|j| j.to_i.odd?}}.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp15stsvv5

    Started

    .

    Finished in 0.000526759 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1898.40 tests/s, 7593.61 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfv3boj91

    Started

    .

    Finished in 0.000513231 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1948.44 tests/s, 7793.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyvpm_803

    Started

    .

    Finished in 0.000558834 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1789.44 tests/s, 7157.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all?(&:odd?)\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpckgtroea

    Started

    .

    Finished in 0.000442881 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2257.94 tests/s, 9031.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkg139l1j

    Started

    .

    Finished in 0.000495955 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2016.31 tests/s, 8065.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7teq1a8u

    Started

    .

    Finished in 0.001286236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    777.46 tests/s, 3109.85 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfxe5aec9

    Started

    .

    Finished in 0.000377459 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2649.29 tests/s, 10597.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyvpm_803

    Started

    .

    Finished in 0.000558834 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1789.44 tests/s, 7157.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').map(&:to_i).all? { |d| d.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpok3sh47v

    Started

    .

    Finished in 0.000290205 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3445.84 tests/s, 13783.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792902
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpn33jchw5

    Started

    .

    Finished in 0.000858366 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1165.00 tests/s, 4660.02 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfxe5aec9

    Started

    .

    Finished in 0.000377459 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2649.29 tests/s, 10597.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7teq1a8u

    Started

    .

    Finished in 0.001286236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    777.46 tests/s, 3109.85 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select{|i| i.to_s.split('').all?{|j| j.to_i.odd?}}.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp15stsvv5

    Started

    .

    Finished in 0.000526759 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1898.40 tests/s, 7593.61 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9zp2dtla

    Started

    .

    Finished in 0.00036755 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2720.72 tests/s, 10882.87 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9zp2dtla

    Started

    .

    Finished in 0.00036755 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2720.72 tests/s, 10882.87 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcfdl8vbo

    Started

    .

    Finished in 0.000387829 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2578.46 tests/s, 10313.82 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyvpm_803

    Started

    .

    Finished in 0.000558834 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1789.44 tests/s, 7157.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select{|i| i.to_s.split('').map(&:to_i).all?{|i| i.odd?}}.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnhmor4y9

    Started

    .

    Finished in 0.000359035 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2785.24 tests/s, 11140.98 assertions/s

    '
  stdout: ''
  timestamp: 1659792902
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7teq1a8u

    Started

    .

    Finished in 0.001286236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    777.46 tests/s, 3109.85 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select{|i| i.to_s.split('').all?{|j| j.to_i.odd?}}.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp15stsvv5

    Started

    .

    Finished in 0.000526759 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1898.40 tests/s, 7593.61 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 1
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_unique_digits\n    candidate = method(:unique_digits)\n\
    \    assert_equal([1, 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([],\
    \ candidate.call([152, 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9s8d24yz\nStarted\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/tmp/tmp9s8d24yz.rb:16:in `test_unique_digits'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_unique_digits\n\
    \     15:     candidate = method(:unique_digits)\n  => 16:     assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n     17:     assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n     18:     assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n     19:     assert_equal([31, 135], candidate.call([135,\
    \ 103, 31]))\n<[1, 15, 33]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005470171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.81 tests/s, 182.81 assertions/s\n"
  timestamp: 1659792902
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfv3boj91

    Started

    .

    Finished in 0.000513231 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1948.44 tests/s, 7793.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').map(&:to_i).all? { |digit|\
    \ digit.odd? } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuovynayi

    Started

    .

    Finished in 0.000290069 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3447.46 tests/s, 13789.82 assertions/s

    '
  stdout: ''
  timestamp: 1659792902
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcfdl8vbo

    Started

    .

    Finished in 0.000387829 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2578.46 tests/s, 10313.82 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpn33jchw5

    Started

    .

    Finished in 0.000858366 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1165.00 tests/s, 4660.02 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcfdl8vbo

    Started

    .

    Finished in 0.000387829 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2578.46 tests/s, 10313.82 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 1
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.any? { |d| d.to_i.even? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1nzvx_yp\nStarted\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/tmp/tmp1nzvx_yp.rb:16:in `test_unique_digits'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_unique_digits\n\
    \     15:     candidate = method(:unique_digits)\n  => 16:     assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n     17:     assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n     18:     assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n     19:     assert_equal([31, 135], candidate.call([135,\
    \ 103, 31]))\n<[1, 15, 33]> expected but was\n<[1422]>\n\ndiff:\n? [1, 15, 33]\n\
    ?   422      \n?   ????????      \n===============================================================================\n\
    \nFinished in 0.005529841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.84 tests/s, 180.84 assertions/s\n"
  timestamp: 1659792902
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfxe5aec9

    Started

    .

    Finished in 0.000377459 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2649.29 tests/s, 10597.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkg139l1j

    Started

    .

    Finished in 0.000495955 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2016.31 tests/s, 8065.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcfdl8vbo

    Started

    .

    Finished in 0.000387829 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2578.46 tests/s, 10313.82 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfxe5aec9

    Started

    .

    Finished in 0.000377459 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2649.29 tests/s, 10597.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |y| y.to_s.split('').all? { |z| z.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpq6n9jl1o

    Started

    .

    Finished in 0.000325592 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3071.33 tests/s, 12285.31 assertions/s

    '
  stdout: ''
  timestamp: 1659792902
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpn33jchw5

    Started

    .

    Finished in 0.000858366 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1165.00 tests/s, 4660.02 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyvpm_803

    Started

    .

    Finished in 0.000558834 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1789.44 tests/s, 7157.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyvpm_803

    Started

    .

    Finished in 0.000558834 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1789.44 tests/s, 7157.76 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.map(&:to_i).all? { |n| n.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8hixd5jn

    Started

    .

    Finished in 0.00038666 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2586.25 tests/s, 10345.01 assertions/s

    '
  stdout: ''
  timestamp: 1659792902
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfxe5aec9

    Started

    .

    Finished in 0.000377459 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2649.29 tests/s, 10597.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9zp2dtla

    Started

    .

    Finished in 0.00036755 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2720.72 tests/s, 10882.87 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9zp2dtla

    Started

    .

    Finished in 0.00036755 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2720.72 tests/s, 10882.87 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp19dn7be6

    Started

    .

    Finished in 0.000508556 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.35 tests/s, 7865.41 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7teq1a8u

    Started

    .

    Finished in 0.001286236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    777.46 tests/s, 3109.85 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').map(&:to_i).none?(&:even?)\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphh2b1mek

    Started

    .

    Finished in 0.000319617 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3128.74 tests/s, 12514.98 assertions/s

    '
  stdout: ''
  timestamp: 1659792902
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7erw7p2y

    Started

    .

    Finished in 0.000673876 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1483.95 tests/s, 5935.81 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpn33jchw5

    Started

    .

    Finished in 0.000858366 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1165.00 tests/s, 4660.02 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_38g0bb

    Started

    .

    Finished in 0.000434374 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2302.16 tests/s, 9208.65 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7teq1a8u

    Started

    .

    Finished in 0.001286236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    777.46 tests/s, 3109.85 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvtvojvlf

    Started

    .

    Finished in 0.000565644 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1767.90 tests/s, 7071.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz5nsugrq

    Started

    .

    Finished in 0.00060788 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1645.06 tests/s, 6580.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcfdl8vbo

    Started

    .

    Finished in 0.000387829 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2578.46 tests/s, 10313.82 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcfdl8vbo

    Started

    .

    Finished in 0.000387829 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2578.46 tests/s, 10313.82 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.map(&:to_i).all? { |digit|\
    \ digit.odd? } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1pxovrg1

    Started

    .

    Finished in 0.000478038 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2091.88 tests/s, 8367.54 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.map(&:to_i).all? { |n| n.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp83i06fra

    Started

    .

    Finished in 0.000397244 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2517.34 tests/s, 10069.38 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcfdl8vbo

    Started

    .

    Finished in 0.000387829 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2578.46 tests/s, 10313.82 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6y6ozq11

    Started

    .

    Finished in 0.000372323 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2685.84 tests/s, 10743.36 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
- exit_code: 0
  program: "# Given a list of positive integers x. return a sorted list of all \n\
    # elements that hasn't any even digit.\n# Note: Returned list should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select{|i| i.to_s.split('').all?{|j| j.to_i.odd?}}.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp15stsvv5

    Started

    .

    Finished in 0.000526759 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1898.40 tests/s, 7593.61 assertions/s

    '
  stdout: ''
  timestamp: 1659792901
