name: HumanEval_111_histogram
language: rb
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> histogram.call(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" =>\
  \ 1}\n# >>> histogram.call(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"\
  a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"b b b b a\")\n\
  # {\"b\" => 4}\n# >>> histogram.call(\"\")\n# {}\ndef histogram(test)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_histogram\n\
  \    candidate = method(:histogram)\n    assert_equal({\"a\" => 2, \"b\" => 2},\
  \ candidate.call(\"a b b a\"))\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"\
  a b c a b\"))\n    assert_equal({\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1,\
  \ \"g\" => 1}, candidate.call(\"a b c d g\"))\n    assert_equal({\"r\" => 1, \"\
  t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({\"b\" => 4},\
  \ candidate.call(\"b b b b a\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\"\
  \ => 1}, candidate.call(\"r t g\"))\n    assert_equal({}, candidate.call(\"\"))\n\
  \    assert_equal({\"a\" => 1}, candidate.call(\"a\"))\n  end\nend\n"
completions: ["  test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }.select\
    \ { |k,v| v == test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }.values.max\
    \ }\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k, v.size]}.to_h\n\
    end", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k, v.size]}.to_h\nend",
  "  histogram = Hash.new(0)\n  test.split.each { |word| histogram[word] += 1 }\n\
    \  histogram\nend", "  # your code here\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.select { |k, v| v == test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.values.max }\nend", "  letters = test.split(\" \")\n\
    \  letter_count = Hash.new(0)\n  letters.each do |letter|\n    letter_count[letter]\
    \ += 1\n  end\n  letter_count\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v|\
    \ [k, v.size]}.to_h\nend", "  letters = test.split(\" \")\n  counts = Hash.new(0)\n\
    \  letters.each { |letter| counts[letter] += 1 }\n  counts\nend", "  test.split(\"\
    \ \").group_by{|x| x}.map{|k,v| [k, v.size]}.to_h\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.max_by { |k, v| v }\nend", "  histogram = Hash.new(0)\n\
    \  test.split(\" \").each { |word| histogram[word] += 1 }\n  histogram\nend",
  "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.select { |k, v|\
    \ v == test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.values.max\
    \ }\nend", "  test.split(\" \").group_by{|i| i}.map{|k,v| [k, v.size]}.to_h\n\
    end", "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.select\
    \ { |k, v| v == test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.values.max\
    \ }\nend", "  test.split(\" \").group_by { |x| x }.map { |k, v| [k, v.size] }.to_h\n\
    end", "  test.split(\" \").group_by { |x| x }.map { |k, v| [k, v.size] }.to_h\n\
    end", "  test.split.each_with_object(Hash.new(0)) { |word, counts| counts[word]\
    \ += 1 }\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k, v.size]}.to_h\n\
    end", "  if test.empty?\n    return {}\n  else\n    test = test.split(\" \")\n\
    \    test = test.group_by{|x| x}\n    test = test.map{|k,v| [k,v.length]}\n  \
    \  test = test.to_h\n    test = test.sort_by{|k,v| v}.reverse.to_h\n    test =\
    \ test.select{|k,v| v == test.values[0]}\n    return test\n  end\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    if result.has_key?(letter)\n\
    \      result[letter] += 1\n    else\n      result[letter] = 1\n    end\n  end\n\
    \  result\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] += 1; h\
    \ }.select { |k,v| v == test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] +=\
    \ 1; h }.values.max }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.sort_by { |k, v| v }.reverse.to_h\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  # TODO: implement this method\n\
    \  hash = Hash.new(0)\n  test.split(' ').each do |letter|\n    hash[letter] +=\
    \ 1\n  end\n  hash\nend", "  histogram = {}\n  test.split(\" \").each do |letter|\n\
    \    if histogram.has_key?(letter)\n      histogram[letter] += 1\n    else\n \
    \     histogram[letter] = 1\n    end\n  end\n  histogram\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").group_by{|x|\
    \ x}.map{|k,v| [k, v.size]}.to_h\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k,\
    \ v.count]}.to_h\nend", "  test.split.each_with_object(Hash.new(0)) { |word,counts|\
    \ counts[word] += 1 }\nend", "  # Your code here\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.sort_by { |k, v| -v }.to_h\nend", "  test.split(\" \"\
    ).group_by{|x| x}.map{|k,v| [k, v.size]}.to_h\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").group_by { |x|\
    \ x }.map { |k, v| [k, v.count] }.to_h\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.max_by { |k, v| v }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h,v| h[v] += 1; h }.sort_by { |k,v| v }.reverse.to_h\nend", "  test.split(\"\
    \ \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.sort_by { |k, v| v }.reverse.to_h\n\
    end", "  # Your code here\nend", "  return {} if test.empty?\n  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.sort_by { |k, v| v }.reverse.to_h\nend", "  test.split(\"\
    \ \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.sort_by { |k, v| v }.reverse.to_h\n\
    end", "  test_arr = test.split(\" \")\n  test_arr.each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  hash = Hash.new(0)\n  test.split(\"\
    \ \").each do |letter|\n    hash[letter] += 1\n  end\n  hash.select { |k, v| v\
    \ == hash.values.max }\nend", "  test.split.each_with_object(Hash.new(0)) { |word,counts|\
    \ counts[word] += 1 }\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k,\
    \ v.size]}.to_h\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v]\
    \ += 1; h }.select { |k, v| v == test.split(\" \").inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.values.max }\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v|\
    \ [k, v.size]}.to_h\nend", "  test.split(' ').inject(Hash.new(0)) { |h, v| h[v]\
    \ += 1; h }.select { |k, v| v == test.split(' ').inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.values.max }\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  test.split.each_with_object(Hash.new(0)) { |word,counts|\
    \ counts[word] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,v|\
    \ h[v] += 1; h }.select { |k,v| v == test.split(\" \").inject(Hash.new(0)) { |h,v|\
    \ h[v] += 1; h }.values.max }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.max_by { |k, v| v }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h,v| h[v] += 1; h }.select { |k,v| v == test.split(\" \").inject(Hash.new(0))\
    \ { |h,v| h[v] += 1; h }.values.max }\nend", "  letters = test.split(\" \")\n\
    \  counts = Hash.new(0)\n  letters.each { |letter| counts[letter] += 1 }\n  counts.max_by\
    \ { |letter, count| count }\nend", "  # Your code here\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  test.split(\" \").group_by {\
    \ |i| i }.map { |k, v| [k, v.size] }.to_h\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").group_by{|x|\
    \ x}.map{|k,v| [k, v.size]}.to_h\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  result = {}\n  test.split.each do |letter|\n  \
    \  result[letter] = test.split.count(letter)\n  end\n  result\nend", "  test.split(\"\
    \ \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }.select { |k,v| v == test.split(\"\
    \ \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }.values.max }\nend", "  # TODO:\
    \ implement me!\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v]\
    \ += 1; h }.select { |k, v| v == test.split(\" \").inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.values.max }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").group_by{|x|\
    \ x}.map{|k,v| [k, v.count]}.to_h\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.sort_by { |k, v| v }.reverse.to_h\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h,v| h[v] += 1; h }.select { |k,v| v == test.split(\" \").inject(Hash.new(0))\
    \ { |h,v| h[v] += 1; h }.values.max }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  letters = test.split(\" \")\n\
    \  counts = Hash.new(0)\n  letters.each { |letter| counts[letter] += 1 }\n  counts\n\
    end", "  test.split(\" \").each_with_object(Hash.new(0)) { |word,counts| counts[word]\
    \ += 1 }\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k, v.size]}.to_h\n\
    end", "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.sort_by\
    \ { |k, v| -v }.to_h\nend", "  # Your code goes here\nend", "  test.split(\" \"\
    ).inject(Hash.new(0)) { |h, v| h[v] += 1; h }.select { |k, v| v == test.split(\"\
    \ \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.values.max }\nend", "  test.split(\"\
    \ \").group_by{|x| x}.map{|k,v| [k, v.size]}.to_h\nend", "  test.split(\" \").group_by{|x|\
    \ x}.map{|k,v| [k, v.size]}.to_h\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.sort_by { |k, v| v }.reverse.to_h\nend", "  test.split(\" \"\
    ).group_by{|x| x}.map{|k,v| [k, v.size]}.to_h\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h,v| h[v] += 1; h }.select { |k,v| v == test.split(\" \").inject(Hash.new(0))\
    \ { |h,v| h[v] += 1; h }.values.max }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h,v| h[v] += 1; h }.select { |k,v| v == test.split(\" \").inject(Hash.new(0))\
    \ { |h,v| h[v] += 1; h }.values.max }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.sort_by { |k, v| v }.reverse.to_h\nend", "  letters\
    \ = test.split(\" \")\n  counts = Hash.new(0)\n  letters.each { |letter| counts[letter]\
    \ += 1 }\n  counts.select { |k, v| v == counts.values.max }\nend", "  letters\
    \ = test.split(\" \")\n  count = Hash.new(0)\n  letters.each { |letter| count[letter]\
    \ += 1 }\n  count\nend", "  test.split.each_with_object(Hash.new(0)) { |word,\
    \ counts| counts[word] += 1 }\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k,\
    \ v.size]}.to_h\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k, v.count]}.to_h\n\
    end", "  test.split(\" \").each_with_object(Hash.new(0)) { |word,counts| counts[word]\
    \ += 1 }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h\
    \ }.select { |k, v| v == test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] +=\
    \ 1; h }.values.max }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.select { |k, v| v == test.split(\" \").inject(Hash.new(0)) {\
    \ |h, v| h[v] += 1; h }.values.max }\nend", "  letters = test.split(\" \")\n \
    \ histogram = Hash.new(0)\n  letters.each do |letter|\n    histogram[letter] +=\
    \ 1\n  end\n  histogram\nend", "  # TODO: your code here\nend", "  test.split(\"\
    \ \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.select { |k, v| v == test.split(\"\
    \ \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.values.max }\nend", "  test.split(\"\
    \ \").each_with_object(Hash.new(0)) { |word,counts| counts[word] += 1 }\nend",
  "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.select { |k, v|\
    \ v == test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.values.max\
    \ }\nend", "  test.split(\" \").each_with_object(Hash.new(0)) { |word, counts|\
    \ counts[word] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,v|\
    \ h[v] += 1; h }.sort_by { |k,v| v }.reverse.to_h\nend", "  if test.empty?\n \
    \   return {}\n  end\n  test = test.split(\" \")\n  test.sort!\n  count = 1\n\
    \  max = 1\n  max_letter = test[0]\n  for i in 1..test.length-1\n    if test[i]\
    \ == test[i-1]\n      count += 1\n    else\n      count = 1\n    end\n    if count\
    \ > max\n      max = count\n      max_letter = test[i]\n    end\n  end\n  return\
    \ {max_letter => max}\nend", "  test.split.each_with_object(Hash.new(0)) { |word,counts|\
    \ counts[word] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.max_by { |k, v| v }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").group_by{|x|\
    \ x}.map{|k,v| [k, v.count]}.to_h\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.select { |k, v| v == test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.values.max }\nend", "  histogram = Hash.new(0)\n  test.split(\"\
    \ \").each do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend",
  "  test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }.select { |k,v| v\
    \ == test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }.values.max }\n\
    end", "  result = Hash.new(0)\n  test.split.each { |word| result[word] += 1 }\n\
    \  result\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] += 1; h\
    \ }.select { |k,v| v == test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] +=\
    \ 1; h }.values.max }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.select { |k, v| v == test.split(\" \").inject(Hash.new(0)) {\
    \ |h, v| h[v] += 1; h }.values.max }\nend", "  hash = Hash.new(0)\n  test.split(\"\
    \ \").each { |word| hash[word] += 1 }\n  hash\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.select { |k, v| v == test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.values.max }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  letters = test.split(\" \")\n\
    \  letters.each_with_object(Hash.new(0)) { |letter, counts| counts[letter] +=\
    \ 1 }\nend", "  test.split.each_with_object(Hash.new(0)) { |word,counts| counts[word]\
    \ += 1 }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] += 1; h\
    \ }.select { |k,v| v == test.split(\" \").group_by { |i| i }.values.map(&:size).max\
    \ }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.select\
    \ { |k, v| v == test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.values.max\
    \ }\nend", "  test.split.each_with_object(Hash.new(0)) { |word,counts| counts[word]\
    \ += 1 }\nend", "  test.split(\" \").each_with_object(Hash.new(0)) { |word,counts|\
    \ counts[word] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.select { |k, v| v == test.split(\" \").inject(Hash.new(0)) {\
    \ |h, v| h[v] += 1; h }.values.max }\nend", "  test = test.split(\" \")\n  test\
    \ = test.group_by{|x| x}\n  test = test.map{|k,v| [k,v.length]}\n  test = test.to_h\n\
    \  test = test.sort_by{|k,v| v}.reverse.to_h\n  test = test.select{|k,v| v ==\
    \ test.values[0]}\n  test = test.to_h\n  return test\nend", "  test.split(\" \"\
    ).each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\nend", " \
    \ test.split(\" \").group_by{|x| x}.map{|k,v| [k, v.count]}.to_h\nend", "  test.split('\
    \ ').each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\nend",
  "  test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }.select { |k,v| v\
    \ == test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }.values.max }\n\
    end", "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.select\
    \ { |k, v| v == test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.values.max\
    \ }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = test.split(\" \").count(letter)\n  end\n  result\nend", "  test.split(\" \"\
    ).inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by { |k, v| v }\nend", "  #\
    \ Your code here\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v]\
    \ += 1; h }.select { |k, v| v == test.split(\" \").inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.values.max }\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v|\
    \ [k, v.size]}.to_h\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k,\
    \ v.size]}.to_h\nend", "  test.split(\" \").each_with_object(Hash.new(0)) { |word,\
    \ counts| counts[word] += 1 }\nend", "  letters = test.split(\" \")\n  letter_count\
    \ = Hash.new(0)\n  letters.each do |letter|\n    letter_count[letter] += 1\n \
    \ end\n  letter_count\nend", "  test.split.each_with_object(Hash.new(0)) { |word,\
    \ counts| counts[word] += 1 }\nend", "  letters = test.split(\" \")\n  counts\
    \ = Hash.new(0)\n  letters.each { |letter| counts[letter] += 1 }\n  counts\nend",
  "  test.split(\" \").inject(Hash.new(0)) { |hash, word| hash[word] += 1; hash }\n\
    end", "  test.split.inject(Hash.new(0)) { |h, v| h[v] += 1; h }.sort_by { |k,\
    \ v| -v }.to_h\nend", "  # TODO: implement this method\n  hash = Hash.new(0)\n\
    \  test.split(\" \").each do |letter|\n    hash[letter] += 1\n  end\n  hash.select\
    \ { |k, v| v == hash.values.max }\nend", "  # your code here\nend", "  test.split(\"\
    \ \").group_by{|x| x}.map{|k,v| [k, v.count]}.to_h\nend", "  test.split(\" \"\
    ).group_by{|x| x}.map{|k,v| [k, v.count]}.to_h\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split.inject(Hash.new(0))\
    \ { |h,v| h[v] += 1; h }.sort_by { |k,v| v }.reverse.to_h\nend", "  test.split(\"\
    \ \").inject(Hash.new(0)) { |h, e| h[e] += 1; h }.select { |k, v| v == test.split(\"\
    \ \").inject(Hash.new(0)) { |h, e| h[e] += 1; h }.values.max }\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, c| h[c] += 1; h }.sort_by { |k, v| v }.reverse.to_h\nend", "  result =\
    \ {}\n  test.split(\" \").each do |letter|\n    if result.has_key?(letter)\n \
    \     result[letter] += 1\n    else\n      result[letter] = 1\n    end\n  end\n\
    \  result\nend", "  return {} if test.empty?\n  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").group_by{|x|\
    \ x}.map{|k,v| [k, v.count]}.to_h\nend", "  test.split(\" \").group_by { |x| x\
    \ }.map { |k, v| [k, v.size] }.to_h\nend", "  test.split(\" \").group_by{|i| i}.map{|k,v|\
    \ [k, v.size]}.to_h\nend", "  histogram = Hash.new(0)\n  test.split.each { |word|\
    \ histogram[word] += 1 }\n  histogram\nend", "  # Your code here\nend", "  test.split(\"\
    \ \").group_by{|x| x}.map{|k,v| [k, v.count]}.to_h\nend", "  test.split(\" \"\
    ).inject(Hash.new(0)) { |h,v| h[v] += 1; h }.sort_by { |k,v| v }.reverse.to_h\n\
    end", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k, v.count]}.to_h\nend",
  "  test.split(\" \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }.max_by { |k,v| v\
    \ }\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k, v.size]}.to_h\n\
    end", "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.max_by\
    \ { |k, v| v }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v] +=\
    \ 1; h }.select { |k, v| v == test.split(\" \").inject(Hash.new(0)) { |h, v| h[v]\
    \ += 1; h }.values.max }\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(' ').each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  h = Hash.new(0)\n  test.split(\"\
    \ \").each { |word| h[word] += 1 }\n  h\nend", "  test.split(\" \").group_by {\
    \ |i| i }.map { |k, v| [k, v.count] }.to_h\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.sort_by { |k, v| v }.reverse.to_h\nend", "  test.split.each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  # your code here\nend", "  test.split(\"\
    \ \").group_by{|x| x}.map{|k,v| [k, v.count]}.to_h\nend", "  test.split(\" \"\
    ).inject(Hash.new(0)) { |h, v| h[v] += 1; h }.sort_by { |k, v| v }.reverse.to_h\n\
    end", "  test.split(\" \").group_by{|x| x}.map{|k,v| [k, v.size]}.to_h\nend",
  "  # your code here\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v| h[v]\
    \ += 1; h }.select { |k, v| v == test.split(\" \").inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.values.max }\nend", "  test.split.inject(Hash.new(0)) { |h,v|\
    \ h[v] += 1; h }.select { |k,v| v == test.split.inject(Hash.new(0)) { |h,v| h[v]\
    \ += 1; h }.values.max }\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  test.split.inject(Hash.new(0)) { |h, v| h[v] +=\
    \ 1; h }.select { |k, v| v == test.split.inject(Hash.new(0)) { |h, v| h[v] +=\
    \ 1; h }.values.max }\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, v|\
    \ h[v] += 1; h }.max_by { |k, v| v }\nend", "  test.split(\" \").group_by{|x|\
    \ x}.map{|k,v| [k, v.size]}.to_h\nend", "  test.split(\" \").group_by{|x| x}.map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  test.split(\" \").each_with_object(Hash.new(0))\
    \ { |word,counts| counts[word] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.sort_by { |k, v| v }.reverse.to_h\nend", "  # Your code\
    \ here\nend", "  letters = test.split(\" \")\n  letters.each_with_object(Hash.new(0))\
    \ { |letter, counts| counts[letter] += 1 }\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, v| h[v] += 1; h }.sort_by { |k, v| v }.reverse.to_h\nend", "  test.split(\"\
    \ \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.select { |k, v| v == test.split(\"\
    \ \").inject(Hash.new(0)) { |h, v| h[v] += 1; h }.values.max }\nend", "  test.split(\"\
    \ \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }.select { |k,v| v == test.split(\"\
    \ \").inject(Hash.new(0)) { |h,v| h[v] += 1; h }.values.max }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
