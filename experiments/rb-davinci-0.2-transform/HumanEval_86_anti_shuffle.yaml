name: HumanEval_86_anti_shuffle
language: rb
prompt: "# Write a function that takes a string and returns an ordered version of\
  \ it.\n# Ordered version of string, is a string where all words (separated by space)\n\
  # are replaced by a new word where all the characters arranged in\n# ascending order\
  \ based on ascii value.\n# Note: You should keep the order of words and blank spaces\
  \ in the sentence.\n# For example:\n# >>> anti_shuffle.call(\"Hi\")\n# \"Hi\"\n\
  # >>> anti_shuffle.call(\"hello\")\n# \"ehllo\"\n# >>> anti_shuffle.call(\"Hello\
  \ World!!!\")\n# \"Hello !!!Wdlor\"\ndef anti_shuffle(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_anti_shuffle\n\
  \    candidate = method(:anti_shuffle)\n    assert_equal(\"Hi\", candidate.call(\"\
  Hi\"))\n    assert_equal(\"ehllo\", candidate.call(\"hello\"))\n    assert_equal(\"\
  bemnru\", candidate.call(\"number\"))\n    assert_equal(\"abcd\", candidate.call(\"\
  abcd\"))\n    assert_equal(\"Hello !!!Wdlor\", candidate.call(\"Hello World!!!\"\
  ))\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\".Hi My aemn\
  \ is Meirst .Rboot How aer ?ouy\", candidate.call(\"Hi. My name is Mister Robot.\
  \ How are you?\"))\n  end\nend\n"
completions: ["  s.split.map { |word| word.chars.sort.join }.join(' ')\nend", "  s.split.map\
    \ { |word| word.chars.sort.join }.join(' ')\nend", "  s.split(' ').map { |word|\
    \ word.chars.sort.join }.join(' ')\nend", "  s.split(\" \").map { |word| word.chars.sort.join\
    \ }.join(\" \")\nend", "  s.split(\" \").map { |word| word.chars.sort.join }.join(\"\
    \ \")\nend", "  s.split.map { |word| word.chars.sort.join }.join(' ')\nend", " \
    \ s.split.map { |w| w.chars.sort.join }.join(' ')\nend", "  s.split.map { |w|\
    \ w.chars.sort.join }.join(' ')\nend", "  s.split.map { |w| w.chars.sort.join\
    \ }.join(' ')\nend", "  s.split.map { |word| word.chars.sort.join }.join(' ')\n\
    end", "  s.split.map { |word| word.chars.sort.join }.join(' ')\nend", "  s.split.map\
    \ { |word| word.chars.sort.join }.join(' ')\nend", "  s.split(' ').map { |word|\
    \ word.chars.sort.join }.join(' ')\nend", "  s.split.map { |w| w.chars.sort.join\
    \ }.join(' ')\nend", "  s.split.map { |word| word.chars.sort.join }.join(' ')\n\
    end", "  s.split(\" \").map { |word| word.chars.sort.join }.join(\" \")\nend",
  "  s.split(\" \").map { |word| word.chars.sort.join }.join(\" \")\nend", "  s.split(\"\
    \ \").map { |word| word.chars.sort.join }.join(\" \")\nend", "  s.split.map {\
    \ |word| word.chars.sort.join }.join(' ')\nend", "  s.split(' ').map { |word|\
    \ word.chars.sort.join }.join(' ')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
