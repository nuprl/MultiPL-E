name: HumanEval_46_fib4
language: rb
prompt: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n#\
  \ fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please\
  \ write a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\n# >>> fib4.call(5)\n# 4\n# >>> fib4.call(6)\n# 8\n# >>>\
  \ fib4.call(7)\n# 14\ndef fib4(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n\
  \    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28,\
  \ candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386,\
  \ candidate.call(12))\n  end\nend\n"
completions: ["  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n\
    \  return 0 if n == 3\n  a = 0\n  b = 0\n  c = 2\n  d = 0\n  (n-4).times do\n\
    \    a, b, c, d = b, c, d, a + b + c + d\n  end\n  d\nend", "  return 0 if n ==\
    \ 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n  a = 0\n\
    \  b = 0\n  c = 2\n  d = 0\n  (n-4).times do\n    a, b, c, d = b, c, d, a + b\
    \ + c + d\n  end\n  d\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return\
    \ 2 if n == 2\n  return 0 if n == 3\n  a, b, c, d = 0, 0, 2, 0\n  (n-4).times\
    \ do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  a + b + c + d\nend", " \
    \ return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if\
    \ n == 3\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  return\
    \ 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n ==\
    \ 3\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  return 0 if n ==\
    \ 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n  fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  return 0 if n == 0\n  return 0\
    \ if n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n  return fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  return 0 if n == 0\n  return 0 if\
    \ n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n  a = 0\n  b = 0\n  c =\
    \ 2\n  d = 0\n  (n-4).times do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n\
    \  d\nend", "  a = 0\n  b = 0\n  c = 2\n  d = 0\n  i = 3\n  while i <= n\n   \
    \ a = b\n    b = c\n    c = d\n    d = a + b + c\n    i += 1\n  end\n  d\nend",
  "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if\
    \ n == 3\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  return\
    \ 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n ==\
    \ 3\n  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  return 0 if n ==\
    \ 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n  a, b,\
    \ c, d = 0, 0, 2, 0\n  (n-4).times do\n    a, b, c, d = b, c, d, a + b + c + d\n\
    \  end\n  a + b + c + d\nend", "  return 0 if n == 0\n  return 0 if n == 1\n \
    \ return 2 if n == 2\n  return 0 if n == 3\n  fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if\
    \ n == 2\n  return 0 if n == 3\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end", "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return\
    \ 0 if n == 3\n  a = 0\n  b = 0\n  c = 2\n  d = 0\n  (n-4).times do\n    a, b,\
    \ c, d = b, c, d, a + b + c + d\n  end\n  d\nend", "  return 0 if n == 0\n  return\
    \ 0 if n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n  a = 0\n  b = 0\n\
    \  c = 2\n  d = 0\n  (n-4).times do\n    e = a + b + c + d\n    a = b\n    b =\
    \ c\n    c = d\n    d = e\n  end\n  return a + b + c + d\nend", "  return 0 if\
    \ n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n \
    \ a = 0\n  b = 0\n  c = 2\n  d = 0\n  (n-4).times do\n    a, b, c, d = b, c, d,\
    \ a + b + c + d\n  end\n  d\nend", "  return 0 if n == 0\n  return 0 if n == 1\n\
    \  return 2 if n == 2\n  return 0 if n == 3\n  fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "  return 0 if n == 0\n  return 0 if n == 1\n  return 2 if\
    \ n == 2\n  return 0 if n == 3\n  a = 0\n  b = 0\n  c = 2\n  d = 0\n  (n-4).times\
    \ do\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  d\nend", "  return 0 if\
    \ n == 0\n  return 0 if n == 1\n  return 2 if n == 2\n  return 0 if n == 3\n \
    \ a = 0\n  b = 0\n  c = 2\n  d = 0\n  (n-4).times do\n    a, b, c, d = b, c, d,\
    \ a + b + c + d\n  end\n  d\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
