name: HumanEval_132_is_nested
language: rb
prompt: "# Create a function that takes a string as input which contains only square\
  \ brackets.\n# The function should return True if and only if there is a valid subsequence\
  \ of brackets \n# where at least one bracket in the subsequence is nested.\n# >>>\
  \ is_nested.call(\"[[]]\")\n# true\n# >>> is_nested.call(\"[]]]]]]][[[[[]\")\n#\
  \ false\n# >>> is_nested.call(\"[][]\")\n# false\n# >>> is_nested.call(\"[]\")\n\
  # false\n# >>> is_nested.call(\"[[][]]\")\n# true\n# >>> is_nested.call(\"[[]][[\"\
  )\n# true\ndef is_nested(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
  \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"\
  ))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
  \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n \
  \   assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"\
  []]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
  \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n \
  \   assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
  [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
  \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
  ))\n  end\nend\n"
completions: ["  string.chars.each_with_object([]) do |char, stack|\n    if char ==\
    \ \"[\"\n      stack.push(char)\n    elsif char == \"]\"\n      return false if\
    \ stack.empty?\n      stack.pop\n    end\n  end.empty?\nend", "  return false\
    \ if string.length == 0\n  return false if string.length == 1\n  return false\
    \ if string.length.odd?\n  return false if string.count(\"[\") != string.count(\"\
    ]\")\n  return false if string.count(\"[\") == 1 && string.count(\"]\") == 1\n\
    \  return true if string.count(\"[\") == 2 && string.count(\"]\") == 2\n  return\
    \ true if string.count(\"[\") == 3 && string.count(\"]\") == 3\n  return true\
    \ if string.count(\"[\") == 4 && string.count(\"]\") == 4\n  return true if string.count(\"\
    [\") == 5 && string.count(\"]\") == 5\n  return true if string.count(\"[\") ==\
    \ 6 && string.count(\"]\") == 6\n  return true if string.count(\"[\") == 7 &&\
    \ string.count(\"]\") == 7\n  return true if string.count(\"[\") == 8 && string.count(\"\
    ]\") == 8\n  return true if string.count(\"[\") == 9 && string.count(\"]\") ==\
    \ 9\n  return true if string.count(\"[\") == 10 && string.count(\"]\") == 10\n\
    \  return true if string.count(\"[\") == 11 && string.count(\"]\") == 11\n  return\
    \ true if string.count(\"[\") == 12 && string.count(\"]\") == 12\n  return true\
    \ if string.count(\"[\") == 13 && string.count(\"]\") == 13\n  return true if\
    \ string.count(\"[\") == 14 && string.count(\"]\") == 14\n  return true if string.count(\"\
    [\") == 15 && string.count(\"]\") == 15\n  return true if string.count(\"[\")\
    \ == 16 && string.count(\"]\") == 16\n  return true if string.count(\"[\") ==\
    \ 17 && string.count(\"]\") == 17\n  return true if string.count(\"[\") == 18\
    \ && string.count(\"]\") == 18\n  return true if string.count(\"[\") == 19 &&\
    \ string.count(\"]\") == 19\n  return true if string.count(\"[\") == 20 && string.count(\"\
    ]\") == 20\n  return true if string.count(\"[\") == 21 && string.count(\"]\")\
    \ == 21\n", "  return false if string.length == 0\n  return false if string.length\
    \ % 2 != 0\n  stack = []\n  string.each_char do |char|\n    if char == \"[\"\n\
    \      stack.push(char)\n    else\n      if stack.length == 0\n        return\
    \ false\n      else\n        stack.pop\n      end\n    end\n  end\n  return true\n\
    end", "  stack = []\n  string.each_char do |char|\n    if char == \"[\"\n    \
    \  stack.push(char)\n    elsif char == \"]\"\n      if stack.empty?\n        return\
    \ false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  # your code goes here\nend", "  stack = []\n  string.chars.each do |char|\n\
    \    if char == \"[\"\n      stack.push(char)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return true\nend", "  stack = []\n  string.each_char do |char|\n    if char\
    \ == \"[\"\n      stack.push(char)\n    elsif char == \"]\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  string.each_char do |char|\n  \
    \  if char == \"[\"\n      stack.push(char)\n    elsif char == \"]\"\n      if\
    \ stack.empty?\n        return false\n      else\n        stack.pop\n      end\n\
    \    end\n  end\n  return stack.empty?\nend", "  stack = []\n  string.each_char\
    \ do |char|\n    if char == \"[\"\n      stack.push(char)\n    elsif char == \"\
    ]\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  string.each_char\
    \ do |char|\n    if char == \"[\"\n      stack.push(char)\n    elsif char == \"\
    ]\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  return false if string.length\
    \ == 0\n  return false if string.length % 2 != 0\n  return false if string[0]\
    \ == \"]\"\n  return false if string[-1] == \"[\"\n  return false if string.count(\"\
    [\") != string.count(\"]\")\n  return true\nend", "  return false if string.length\
    \ == 0\n  return false if string.length == 1\n  return false if string.length.odd?\n\
    \  return false if string.count(\"[\") != string.count(\"]\")\n  return false\
    \ if string.count(\"[\") == 0\n  return false if string.count(\"]\") == 0\n  return\
    \ false if string.count(\"[\") == 1 && string.count(\"]\") == 1\n  return false\
    \ if string.count(\"[\") == 2 && string.count(\"]\") == 2\n  return false if string.count(\"\
    [\") == 3 && string.count(\"]\") == 3\n  return false if string.count(\"[\") ==\
    \ 4 && string.count(\"]\") == 4\n  return false if string.count(\"[\") == 5 &&\
    \ string.count(\"]\") == 5\n  return false if string.count(\"[\") == 6 && string.count(\"\
    ]\") == 6\n  return false if string.count(\"[\") == 7 && string.count(\"]\") ==\
    \ 7\n  return false if string.count(\"[\") == 8 && string.count(\"]\") == 8\n\
    \  return false if string.count(\"[\") == 9 && string.count(\"]\") == 9\n  return\
    \ false if string.count(\"[\") == 10 && string.count(\"]\") == 10\n  return false\
    \ if string.count(\"[\") == 11 && string.count(\"]\") == 11\n  return false if\
    \ string.count(\"[\") == 12 && string.count(\"]\") == 12\n  return false if string.count(\"\
    [\") == 13 && string.count(\"]\") == 13\n  return false if string.count(\"[\"\
    ) == 14 && string.count(\"]\") == 14\n  return false if string.count(\"[\") ==\
    \ 15 && string.count(\"]\") == 15\n  return false if string.count(\"[\") == 16\
    \ && string.count(\"]\") == 16\n  return false if string.count(\"[\") == 17 &&\
    \ string.count(\"]\") == 17\n  return false if string.count(\"[\") == 18 && string.count(\"\
    ]\") == 18\n  return false if string.count(\"[\") == 19 && string.count(\"]\"\
    ) == 19\n  return false if string.count(\"[\") == 20 && string.count(\"]", " \
    \ stack = []\n  string.each_char do |char|\n    if char == \"[\"\n      stack.push(char)\n\
    \    elsif char == \"]\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ return false if string.length == 0\n  return false if string.length == 1\n \
    \ return false if string.length.odd?\n  return false if string[0] == \"]\"\n \
    \ return false if string[-1] == \"[\"\n  return false if string.count(\"[\") !=\
    \ string.count(\"]\")\n  return false if string.count(\"[\") == 1 && string.count(\"\
    ]\") == 1\n  return true if string.count(\"[\") == 2 && string.count(\"]\") ==\
    \ 2\n  return true if string.count(\"[\") == 3 && string.count(\"]\") == 3\n \
    \ return true if string.count(\"[\") == 4 && string.count(\"]\") == 4\n  return\
    \ true if string.count(\"[\") == 5 && string.count(\"]\") == 5\n  return true\
    \ if string.count(\"[\") == 6 && string.count(\"]\") == 6\n  return true if string.count(\"\
    [\") == 7 && string.count(\"]\") == 7\n  return true if string.count(\"[\") ==\
    \ 8 && string.count(\"]\") == 8\n  return true if string.count(\"[\") == 9 &&\
    \ string.count(\"]\") == 9\n  return true if string.count(\"[\") == 10 && string.count(\"\
    ]\") == 10\n  return true if string.count(\"[\") == 11 && string.count(\"]\")\
    \ == 11\n  return true if string.count(\"[\") == 12 && string.count(\"]\") ==\
    \ 12\n  return true if string.count(\"[\") == 13 && string.count(\"]\") == 13\n\
    \  return true if string.count(\"[\") == 14 && string.count(\"]\") == 14\n  return\
    \ true if string.count(\"[\") == 15 && string.count(\"]\") == 15\n  return true\
    \ if string.count(\"[\") == 16 && string.count(\"]\") == 16\n  return true if\
    \ string.count(\"[\") == 17 && string.count(\"]\") == 17\n  return true if string.count(\"\
    [\") == 18 && string.count(\"]\") == 18\n  return true if string.count(\"[\")\
    \ == 19 && string.count(\"]\") == 19\n  return true if string.count(\"[\") ==\
    \ 20 && string.count(\"]\")", "  string.scan(/\\[\\]/).size > 0\nend", "  return\
    \ false if string.length.odd?\n  stack = []\n  string.each_char do |char|\n  \
    \  if char == \"[\"\n      stack.push(char)\n    else\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  return false if stack.any?\n  true\nend",
  "  stack = []\n  string.each_char do |char|\n    if char == \"[\"\n      stack.push(char)\n\
    \    elsif char == \"]\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  string.each_char do |char|\n    if char == \"[\"\n      stack.push(char)\n\
    \    elsif char == \"]\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  string.each_char do |char|\n    if char == \"[\"\n      stack.push(char)\n\
    \    elsif char == \"]\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  string.each_char do |char|\n    if char == \"[\"\n      stack.push(char)\n\
    \    elsif char == \"]\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
