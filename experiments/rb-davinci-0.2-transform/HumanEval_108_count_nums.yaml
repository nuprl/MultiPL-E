name: HumanEval_108_count_nums
language: rb
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11, -11])\n\
  # 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
  \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
  \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n\
  \    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
  \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
  \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
completions: ["  arr.count { |num| num.digits.sum > 0 }\nend", "  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend", "  arr.count { |n| n.abs.digits.sum > 0 }\n\
    end", "  arr.count { |x| x.abs.digits.sum > 0 }\nend", "  arr.count { |n| n.abs.digits.sum\
    \ > 0 }\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend", "  arr.count { |num| num.digits.sum\
    \ > 0 }\nend", "  arr.count { |x| x.abs.digits.sum > 0 }\nend", "  arr.count {\
    \ |num| num.digits.sum > 0 }\nend", "  arr.count { |num| num.abs.digits.sum >\
    \ 0 }\nend", "  arr.select { |num| num.abs.digits.sum > 0 }.count\nend", "  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend", "  arr.count { |num| num.abs.digits.sum\
    \ > 0 }\nend", "  arr.select { |n| n.abs.digits.sum > 0 }.size\nend", "  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend", "  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.size\nend", "  arr.count { |num| num.abs.digits.sum > 0 }\nend", "  arr.count\
    \ { |num| num.digits.sum.positive? }\nend", "  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.size\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
