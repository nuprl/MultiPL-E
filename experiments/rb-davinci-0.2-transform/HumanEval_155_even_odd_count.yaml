name: HumanEval_155_even_odd_count
language: rb
prompt: "# Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n# >>> even_odd_count.call(123)\n\
  # [1, 2]\ndef even_odd_count(num)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
  \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
  \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
  \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
  \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
  \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
completions: ["  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  num.to_s.chars.partition\
    \ { |n| n.to_i.even? }.map(&:size)\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i % 2 == 0\n      even += 1\n    else\n      odd += 1\n\
    \    end\n  end\n  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n\
    \  odd = 0\n  num.abs.to_s.each_char do |char|\n    if char.to_i.even?\n     \
    \ even += 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend", " \
    \ num = num.abs\n  even_count = 0\n  odd_count = 0\n  while num > 0\n    if num\
    \ % 2 == 0\n      even_count += 1\n    else\n      odd_count += 1\n    end\n \
    \   num /= 10\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.each_char do |char|\n   \
    \ if char.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n\
    \    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.abs.to_s.split('').each do |number|\n    if number.to_i.even?\n \
    \     even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |i|\n    if i.to_i % 2 == 0\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.abs.to_s.split('').each do |digit|\n    digit.to_i.even?\
    \ ? even_count += 1 : odd_count += 1\n  end\n  [even_count, odd_count]\nend",
  "  even = 0\n  odd = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n\
    \      even += 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
