name: HumanEval_56_correct_bracketing
language: rb
prompt: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
  <\")\n# false\n# >>> correct_bracketing.call(\"<>\")\n# true\n# >>> correct_bracketing.call(\"\
  <<><>>\")\n# true\n# >>> correct_bracketing.call(\"><<>\")\n# false\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
  \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
  ))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false,\
  \ candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n  \
  \  assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\"\
  >\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false,\
  \ candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"\
  <><><<><>><>>><>\"))\n  end\nend\n"
completions: ["  stack = []\n  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return\
    \ stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n   \
    \ if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n        return\
    \ false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n    else\n\
    \      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.chars.each do |bracket|\n\
    \    if bracket == \"<\"\n      stack.push(bracket)\n    else\n      return false\
    \ if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement this method\nend", "  stack = []\n  brackets.each_char do |bracket|\n\
    \    if bracket == \"<\"\n      stack.push(bracket)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  return false if brackets.length.odd?\n  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == '<'\n      stack.push(c)\n    else\n      return false if\
    \ stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement this method\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  i = 0\n  while i < brackets.length\n\
    \    if brackets[i] == \"<\"\n      if brackets[i + 1] == \">\"\n        brackets.slice!(i,\
    \ 2)\n        i -= 1\n      else\n        return false\n      end\n    end\n \
    \   i += 1\n  end\n  return brackets.length == 0\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  return true if brackets.length\
    \ == 0\n  return false if brackets[0] == \">\"\n  return false if brackets[-1]\
    \ == \"<\"\n  return false if brackets.count(\"<\") != brackets.count(\">\")\n\
    \  return false if brackets.index(\"<\") > brackets.index(\">\")\n  return true\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return\
    \ stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.chars.each do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement\
    \ this method\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n    if c ==\
    \ '<'\n      stack.push(c)\n    else\n      return false if stack.empty?\n   \
    \   stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n    else\n\
    \      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  brackets.chars.reduce(0)\
    \ do |count, bracket|\n    if count < 0\n      return false\n    elsif bracket\
    \ == '<'\n      count + 1\n    else\n      count - 1\n    end\n  end == 0\nend",
  "  stack = []\n  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return\
    \ stack.empty?\nend", "  # TODO: implement this method\nend", "  stack = []\n\
    \  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n    else\n\
    \      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement\
    \ this method\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n   \
    \ if c == '<'\n      stack.push(c)\n    else\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this\
    \ method\nend", "  # TODO: implement this method\nend", "  return false if brackets.length.odd?\n\
    \  stack = []\n  brackets.chars.each do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  # your code here\nend", "  # TODO: implement this function\n\
    end", "  # TODO: implement me\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement\
    \ this method\nend", "  stack = []\n  brackets.each_char do |c|\n    if c == '<'\n\
    \      stack.push(c)\n    else\n      if stack.empty?\n        return false\n\
    \      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  return false if brackets.length.odd?\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\nend", "  stack = []\n\
    \  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n    else\n\
    \      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\nend", "  # TODO: implement\
    \ this method\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # TODO: implement this method\nend", "  stack\
    \ = []\n  brackets.chars.each do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    end", "  # TODO: implement this method\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  return false if brackets.count(\"\
    <\") != brackets.count(\">\")\n  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    else\n      stack.pop\n   \
    \ end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n\
    \    if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n     \
    \   return false\n      else\n        stack.pop\n      end\n    end\n  end\n \
    \ stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n    if c ==\
    \ '<'\n      stack.push(c)\n    else\n      if stack.empty?\n        return false\n\
    \      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend",
  "  # your code here\nend", "  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n   \
    \ if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n        return\
    \ false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\n\
    end", "  # TODO: implement this method\nend", "  # TODO: implement this method\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return\
    \ stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n    if c ==\
    \ '<'\n      stack.push(c)\n    else\n      if stack.empty?\n        return false\n\
    \      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\n\
    end", "  # your code here\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |ch|\n    if ch == '<'\n      stack.push(ch)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.chars.each do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    end", "  stack = []\n  brackets.chars.each do |char|\n    if char == \"<\"\n \
    \     stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n     \
    \   return false\n      else\n        stack.pop\n      end\n    end\n  end\n \
    \ stack.empty?\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n   \
    \ if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n        return\
    \ false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return\
    \ stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      return false\
    \ if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n  \
    \  else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n    else\n\
    \      return false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  brackets.count(\"<\") == brackets.count(\">\")\nend", "  # your code\
    \ here\nend", "  # TODO: implement me\nend", "  # TODO: implement this\nend",
  "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n   \
    \ if c == '<'\n      stack.push(c)\n    else\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.chars.each do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.chars.each do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      return\
    \ false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend",
  "  stack = []\n  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n    else\n\
    \      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == '<'\n      stack.push(c)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.chars.each do |char|\n    if char == \"<\"\n \
    \     stack.push(char)\n    elsif char == \">\"\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == '<'\n      stack.push(c)\n    else\n      return false if\
    \ stack.pop != '<'\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == '<'\n      stack.push(c)\n    else\n      if stack.pop !=\
    \ '<'\n        return false\n      end\n    end\n  end\n  return stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  # TODO: implement this method\nend", "  return false if brackets.length.odd?\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack = []\n\
    \  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # your code here\nend", "  # TODO: implement this function\nend", "  stack =\
    \ []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement this method\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    end", "  stack = []\n  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n    else\n\
    \      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    end", "  # your code here\nend", "  brackets.count(\"<\") == brackets.count(\"\
    >\")\nend", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n   \
    \     return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n    if c ==\
    \ '<'\n      stack.push(c)\n    else\n      if stack.empty?\n        return false\n\
    \      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |c|\n    if c == '<'\n      stack.push(c)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement\
    \ me\nend", "  # TODO: implement this\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
