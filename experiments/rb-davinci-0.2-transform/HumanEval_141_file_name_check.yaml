name: HumanEval_141_file_name_check
language: rb
prompt: "# Create a function which takes a string representing a file's name, and\
  \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  # A file's name is considered to be valid if and only if all the following conditions\
  \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n# the latin\
  \ alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one\
  \ of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> file_name_check.call(\"example.txt\"\
  )\n# \"Yes\"\n# >>> file_name_check.call(\"1example.dll\")\n# \"No\"\ndef file_name_check(file_name)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n\
  \    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"\
  example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n  \
  \  assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\"\
  , candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"\
  No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"\
  No\", candidate.call(\"this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"\
  this_is_valid.txt\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"\
  No\", candidate.call(\"@this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
  this_is_12valid.6exe4.txt\"))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"\
  ))\n    assert_equal(\"Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"\
  Yes\", candidate.call(\"Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"\
  no_one#knows.dll\"))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"\
  No\", candidate.call(\"final..txt\"))\n    assert_equal(\"No\", candidate.call(\"\
  final132\"))\n    assert_equal(\"No\", candidate.call(\"_f4indsartal132.\"))\n \
  \   assert_equal(\"No\", candidate.call(\".txt\"))\n    assert_equal(\"No\", candidate.call(\"\
  s.\"))\n  end\nend\n"
completions: ["  if file_name.count(\"0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\"\
    .\") != 1\n    return \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\"\
    .\").first.match(/^[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\",\
    \ \"dll\"].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n\
    \    return \"Yes\"\n  end\nend", "  if file_name.count(\"0-9\") <= 3 && file_name.count(\"\
    .\") == 1 && file_name.split(\".\").first.count(\"a-zA-Z\") > 0 && file_name.split(\"\
    .\").last.count(\"txt\") > 0 || file_name.split(\".\").last.count(\"exe\") > 0\
    \ || file_name.split(\".\").last.count(\"dll\") > 0\n    \"Yes\"\n  else\n   \
    \ \"No\"\n  end\nend", "  # Your code here\nend", "  if file_name =~ /^[a-zA-Z]\\\
    w*\\.\\w{3}$/\n    \"Yes\"\n  else\n    \"No\"\n  end\nend", "  if file_name.match(/^[a-zA-Z][\\\
    w]*\\.(txt|exe|dll)$/)\n    return \"Yes\"\n  else\n    return \"No\"\n  end\n\
    end", "  if file_name.count(\"0-9\") > 3\n    return \"No\"\n  end\n  if file_name.count(\"\
    .\") != 1\n    return \"No\"\n  end\n  if file_name.split(\".\").first.empty?\
    \ || !(file_name.split(\".\").first =~ /[a-zA-Z]/)\n    return \"No\"\n  end\n\
    \  if !([\"txt\", \"exe\", \"dll\"].include? file_name.split(\".\").last)\n  \
    \  return \"No\"\n  end\n  return \"Yes\"\nend", "  if file_name.count(\"0-9\"\
    ) > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return \"No\"\
    \n  elsif file_name.split(\".\").first.empty?\n    return \"No\"\n  elsif !file_name.split(\"\
    .\").first.match(/[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"\
    dll\"].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend", "  if file_name.count(\"0-9\") > 3\n    return \"No\"\n\
    \  elsif file_name.count(\".\") != 1\n    return \"No\"\n  elsif file_name.count(\"\
    .\") == 1\n    if file_name.split(\".\")[0].empty? || !file_name.split(\".\")[0].start_with?(\"\
    a-zA-Z\")\n      return \"No\"\n    elsif ![\"txt\", \"exe\", \"dll\"].include?(file_name.split(\"\
    .\")[1])\n      return \"No\"\n    else\n      return \"Yes\"\n    end\n  end\n\
    end", "  # Write your code here\nend", "  # TODO: implement this function\nend",
  "  if file_name.count(\"0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\"\
    .\") != 1\n    return \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\"\
    .\").first.match(/[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"\
    dll\"].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend", "  # Your code here\nend", "  if file_name.scan(/\\d/).length\
    \ > 3\n    return \"No\"\n  end\n  if file_name.scan(/\\./).length != 1\n    return\
    \ \"No\"\n  end\n  if file_name.scan(/[a-zA-Z]/).length == 0\n    return \"No\"\
    \n  end\n  if file_name.scan(/[a-zA-Z]/).length == 0\n    return \"No\"\n  end\n\
    \  if file_name.scan(/[a-zA-Z]/).length == 0\n    return \"No\"\n  end\n  if file_name.scan(/[a-zA-Z]/).length\
    \ == 0\n    return \"No\"\n  end\n  if file_name.scan(/[a-zA-Z]/).length == 0\n\
    \    return \"No\"\n  end\n  if file_name.scan(/[a-zA-Z]/).length == 0\n    return\
    \ \"No\"\n  end\n  if file_name.scan(/[a-zA-Z]/).length == 0\n    return \"No\"\
    \n  end\n  if file_name.scan(/[a-zA-Z]/).length == 0\n    return \"No\"\n  end\n\
    \  if file_name.scan(/[a-zA-Z]/).length == 0\n    return \"No\"\n  end\n  if file_name.scan(/[a-zA-Z]/).length\
    \ == 0\n    return \"No\"\n  end\n  if file_name.scan(/[a-zA-Z]/).length == 0\n\
    \    return \"No\"\n  end\n  if file_name.scan(/[a-zA-Z]/).length == 0\n    return\
    \ \"No\"\n  end\n  if file_name.scan(/[a-zA-Z]/).length == 0\n    return \"No\"\
    \n  end\n  if file_name.scan(/[a-zA-Z]/).length == 0\n    return \"No\"\n  end\n\
    \  if file_name.scan(/[a-", "  # write your code here\nend", "  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/^[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"\
    dll\"].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend", "  # Write your code here\nend", "  # TODO: implement\
    \ this function\nend", "  if file_name.match(/^[a-zA-Z]\\w*\\.\\w+$/)\n    if\
    \ file_name.match(/^[a-zA-Z]\\w*\\.txt$/)\n      \"Yes\"\n    elsif file_name.match(/^[a-zA-Z]\\\
    w*\\.exe$/)\n      \"Yes\"\n    elsif file_name.match(/^[a-zA-Z]\\w*\\.dll$/)\n\
    \      \"Yes\"\n    else\n      \"No\"\n    end\n  else\n    \"No\"\n  end\nend",
  "  # Write your code here\nend", "  if file_name.match(/^[a-zA-Z]\\w*\\.\\w{3}$/)\n\
    \    if file_name.match(/^[a-zA-Z]\\w*\\.txt$/)\n      return \"Yes\"\n    elsif\
    \ file_name.match(/^[a-zA-Z]\\w*\\.exe$/)\n      return \"Yes\"\n    elsif file_name.match(/^[a-zA-Z]\\\
    w*\\.dll$/)\n      return \"Yes\"\n    else\n      return \"No\"\n    end\n  else\n\
    \    return \"No\"\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
