name: HumanEval_37_sort_even
language: rb
prompt: "# This function takes a list l and returns a list l' such that\n# l' is identical\
  \ to l in the odd indicies, while its values at the even indicies are equal\n# to\
  \ the values of the even indicies of l, but sorted.\n# >>> sort_even.call([1, 2,\
  \ 3])\n# [1, 2, 3]\n# >>> sort_even.call([5, 6, 3, 4])\n# [3, 6, 5, 4]\ndef sort_even(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_even\n\
  \    candidate = method(:sort_even)\n    assert_equal([1, 2, 3], candidate.call([1,\
  \ 2, 3]))\n    assert_equal([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123], candidate.call([5,\
  \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([-12, 8, 3, 4, 5, 2, 12,\
  \ 11, 23, -10], candidate.call([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n  end\n\
  end\n"
completions: ["  l.each_index.map do |i|\n    if i.even?\n      l[i..i+1].sort\n \
    \   else\n      l[i]\n    end\n  end.flatten\nend", "  l.each_with_index.map do\
    \ |e, i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map do |e,\
    \ i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map { |e, i|\
    \ i.even? ? e.sort : e }\nend", "  l.each_index.map { |i| i.even? ? l[i..i+1].sort\
    \ : l[i] }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend",
  "  l.each_with_index.map do |x, i|\n    i.even? ? x.sort : x\n  end\nend", "  l.each_with_index.map\
    \ do |x, i|\n    i.even? ? x.sort : x\n  end\nend", "  l.each_with_index.map {\
    \ |x, i| i.even? ? x.sort : x }\nend", "  l.each_index.map { |i| i.even? ? l[i..i+1].sort\
    \ : l[i] }\nend", "  l.each_index.select(&:even?).each do |i|\n    l[i] = l[i].sort\n\
    \  end\n  l\nend", "  l.each_index.select { |i| i.even? }.each { |i| l[i] = l[i].sort\
    \ }\n  l\nend", "  l.each_index.map { |i| i.even? ? l[i..i+1].sort : l[i] }\n\
    end", "  l.each_index.map do |i|\n    i.even? ? l[i..i+1].sort : l[i]\n  end\n\
    end", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x }\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even?\
    \ ? e.sort : e }\nend", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x\
    \ }\nend", "  l.each_with_index.map do |x, i|\n    i.even? ? x.sort : x\n  end\n\
    end", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ do |e, i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map {\
    \ |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even?\
    \ ? e.sort : e }\nend", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x\
    \ }\nend", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x }\nend", " \
    \ l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map\
    \ { |x, i| i.even? ? x.sort : x }\nend", "  l.each_index.select(&:even?).each\
    \ do |i|\n    l[i] = l[i].sort\n  end\n  l\nend", "  l.each_with_index.map { |e,\
    \ i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even? ?\
    \ e.sort : e }\nend", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort\
    \ : e\n  end\nend", "  l.each_index.map { |i| i.even? ? l[i].sort : l[i] }\nend",
  "  l.each_with_index.map { |x, i| i.even? ? x.sort : x }\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map { |x, i| i.even?\
    \ ? x.sort : x }\nend", "  l.each_with_index.map do |x, i|\n    i.even? ? x.sort\
    \ : x\n  end\nend", "  l.each_index.map { |i| i.even? ? l[i..i+1].sort : l[i]\
    \ }\nend", "  l.each_index.map { |i| i.even? ? l[i..i+1].sort : l[i] }\nend",
  "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.map.with_index { |e, i| i.even?\
    \ ? e.sort : e }\nend", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x\
    \ }\nend", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x }\nend", " \
    \ l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ { |x, i| i.even? ? x.sort : x }\nend", "  l.each_with_index.map { |x, i| i.even?\
    \ ? x.sort : x }\nend", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort\
    \ : e\n  end\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\n\
    end", "  l.each_with_index.map do |e, i|\n    if i.even?\n      e.sort\n    else\n\
    \      e\n    end\n  end\nend", "  l.each_index.map do |i|\n    i.even? ? l[i..i+1].sort\
    \ : l[i]\n  end\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e\
    \ }\nend", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n  end\n\
    end", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ do |e, i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map {\
    \ |e, i| i.even? ? e.sort : e }\nend", "  l.each_index.map do |i|\n    i.even?\
    \ ? l[i..i+1].sort : l[i]\n  end\nend", "  l.each_index.map { |i| i.even? ? l[i..i+1].sort\
    \ : l[i] }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend",
  "  l.each_index.map { |i| i.even? ? l[i..i+1].sort : l[i] }\nend", "  l.each_with_index.map\
    \ do |v, i|\n    i.even? ? v.sort : v\n  end\nend", "  l.each_with_index.map do\
    \ |e, i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map do |e,\
    \ i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map { |e, i|\
    \ i.even? ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort\
    \ : e }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend",
  "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.map.with_index { |x, i| i.even?\
    \ ? x.sort : x }\nend", "  l.each_with_index.map do |e, i|\n    if i.even?\n \
    \     e.sort\n    else\n      e\n    end\n  end\nend", "  l.each_with_index.map\
    \ { |x, i| i.even? ? x.sort : x }\nend", "  l.each_with_index.map do |e, i|\n\
    \    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map do |e, i|\n \
    \   if i.even?\n      e.sort\n    else\n      e\n    end\n  end\nend", "  l.each_index.map\
    \ { |i| i.even? ? l[i..i+1].sort : l[i] }\nend", "  l.each_with_index.map do |e,\
    \ i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map do |e, i|\n\
    \    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map { |x, i| i.even?\
    \ ? x.sort : x }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e\
    \ }\nend", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x }\nend", " \
    \ l.each_index.map { |i| i.even? ? l[i..i+1].sort : l[i] }\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map do |e, i|\n\
    \    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map { |e, i| i.even?\
    \ ? e.sort : e }\nend", "  l.each_with_index.map { |v, i| i.even? ? v.sort : v\
    \ }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", " \
    \ l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map\
    \ do |x, i|\n    if i.even?\n      x.sort\n    else\n      x\n    end\n  end\n\
    end", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ { |x, i| i.even? ? x.sort : x }\nend", "  l.each_with_index.map { |x, i| i.even?\
    \ ? x.sort : x }\nend", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort\
    \ : e\n  end\nend", "  l.each_with_index.map do |x, i|\n    if i.even?\n     \
    \ x.sort\n    else\n      x\n    end\n  end\nend", "  l.each_with_index.map do\
    \ |e, i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map { |e,\
    \ i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map do |value, index|\n\
    \    if index.even?\n      value.sort\n    else\n      value\n    end\n  end\n\
    end", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x }\nend", "  l.each_with_index.map\
    \ do |item, index|\n    if index.even?\n      item.sort\n    else\n      item\n\
    \    end\n  end\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e\
    \ }\nend", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x }\nend", " \
    \ l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map do |x, i|\n\
    \    if i % 2 == 0\n      x\n    else\n      x.sort\n    end\n  end\nend", " \
    \ l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map do |e, i|\n\
    \    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map do |e, i|\n \
    \   i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map do |v, i|\n  \
    \  i.even? ? v.sort : v\n  end\nend", "  l.each_index.map { |i| i.even? ? l[i..i+1].sort\
    \ : l[i] }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend",
  "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ do |e, i|\n    if i.even?\n      e.sort\n    else\n      e\n    end\n  end\n\
    end", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n  end\nend",
  "  l.each_with_index.map { |x, i| i.even? ? x.sort : x }\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.each_index.map { |i| i.even? ? l[i..i+1].sort\
    \ : l[i] }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend",
  "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_index.select\
    \ { |i| i.even? }.each { |i| l[i] = l[i].sort }\n  l\nend", "  l.each_index.map\
    \ { |i| i.even? ? l[i..i+1].sort : l[i] }\nend", "  l.each_with_index.map do |e,\
    \ i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map { |e, i|\
    \ i.even? ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort\
    \ : e }\nend", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n\
    \  end\nend", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x }\nend",
  "  l.each_with_index.map { |x, i| i.even? ? x.sort : x }\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even?\
    \ ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e\
    \ }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", " \
    \ l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ { |x, i| i.even? ? x.sort : x }\nend", "  l.each_with_index.map { |x, i| i.even?\
    \ ? x.sort : x }\nend", "  l.each_with_index.map do |x, i|\n    i.even? ? x.sort\
    \ : x\n  end\nend", "  l.each_index.map { |i| i.even? ? l[i..i+1].sort : l[i]\
    \ }\nend", "  l.each_with_index.map do |x, i|\n    i.even? ? x.sort : x\n  end\n\
    end", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even?\
    \ ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e\
    \ }\nend", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n  end\n\
    end", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n  end\nend",
  "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map\
    \ { |x, i| i.even? ? x.sort : x }\nend", "  l.each_with_index.map do |e, i|\n\
    \    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map { |e, i| i.even?\
    \ ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e\
    \ }\nend", "  l.each_with_index.map do |x, i|\n    i.even? ? x.sort : x\n  end\n\
    end", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x }\nend", "  l.each_with_index.map\
    \ { |x, i| i.even? ? x.sort : x }\nend", "  l.each_with_index.map { |e, i| i.even?\
    \ ? e.sort : e }\nend", "  l.each_with_index do |e, i|\n    if i.even?\n     \
    \ l[i] = l[i].sort\n    end\n  end\n  l\nend", "  l.each_with_index.map { |x,\
    \ i| i.even? ? x.sort : x }\nend", "\tl.each_index do |i|\n\t\tif i % 2 == 0\n\
    \t\t\tl[i] = l[i].sort\n\t\tend\n\tend\n\treturn l\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.each_index.select(&:even?).each\
    \ do |i|\n    l[i] = l[i].sort\n  end\n  l\nend", "  l.each_with_index.map { |e,\
    \ i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even? ?\
    \ e.sort : e }\nend", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort\
    \ : e\n  end\nend", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort :\
    \ e\n  end\nend", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n\
    \  end\nend", "  l.each_with_index.map { |v, i| i.even? ? v.sort : v }\nend",
  "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.each_index.map { |i| i.even? ? l[i..i+1].sort\
    \ : l[i] }\nend", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x }\nend",
  "  l.each_with_index.map do |e, i|\n    if i.even?\n      l[i..i+1].sort\n    else\n\
    \      e\n    end\n  end.flatten\nend", "  l.each_with_index.map do |e, i|\n \
    \   i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map { |x, i| i.even?\
    \ ? x.sort : x }\nend", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x\
    \ }\nend", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n  end\n\
    end", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n  end\nend",
  "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map\
    \ { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map { |x, i| i.even?\
    \ ? x.sort : x }\nend", "  l.each_with_index.map { |x, i| i.even? ? x.sort : x\
    \ }\nend", "  l.each_index.map { |i| i.even? ? l[i..i+1].sort : l[i] }\nend",
  "  l.each_with_index.map do |e, i|\n    if i.even?\n      e.sort\n    else\n   \
    \   e\n    end\n  end\nend", "  l.each_with_index.map { |x, i| i.even? ? x.sort\
    \ : x }\nend", "  l.each_index.map { |i| i.even? ? l[i..i+1].sort : l[i] }\nend",
  "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ { |v, i| i.even? ? v.sort : v }\nend", "  l.each_with_index.map { |e, i| i.even?\
    \ ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e\
    \ }\nend", "  l.each_with_index.map do |e, i|\n    i.even? ? e.sort : e\n  end\n\
    end", "  l.map.with_index { |x, i| i.even? ? x.sort : x }\nend", "  l.each_index.map\
    \ { |i| i.even? ? l[i..i+1].sort : l[i] }\nend", "  l.each_with_index.map { |e,\
    \ i| i.even? ? e.sort : e }\nend", "  l.each_index.map do |i|\n    if i.even?\n\
    \      l[i..i+1].sort\n    else\n      l[i]\n    end\n  end.flatten\nend", " \
    \ l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ do |e, i|\n    i.even? ? e.sort : e\n  end\nend", "  l.each_with_index.map {\
    \ |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even?\
    \ ? e.sort : e }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e\
    \ }\nend", "  l.each_with_index.map do |x, i|\n    i.even? ? x.sort : x\n  end\n\
    end", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ do |e, i|\n    if i.even?\n      e.sort\n    else\n      e\n    end\n  end\n\
    end", "  l.each_with_index.map do |e, i|\n    if i.even?\n      e.sort\n    else\n\
    \      e\n    end\n  end\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort\
    \ : e }\nend", "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend",
  "  l.each_with_index.map { |e, i| i.even? ? e.sort : e }\nend", "  l.each_with_index.map\
    \ do |e, i|\n    if i.even?\n      e.sort\n    else\n      e\n    end\n  end\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
