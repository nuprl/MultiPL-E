name: HumanEval_127_intersection
language: rb
prompt: "# You are given two intervals,\n# where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n# The given intervals are closed\
  \ which means that the interval (start, end)\n# includes both start and end.\n#\
  \ For each given interval, it is assumed that its start is less or equal its end.\n\
  # Your task is to determine whether the length of intersection of these two \n#\
  \ intervals is a prime number.\n# Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If\
  \ the length of the intersection is a prime number, return \"YES\",\n# otherwise,\
  \ return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output]\
  \ samples:\n# >>> intersection.call([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection.call([-1,\
  \ 1], [0, 4])\n# \"NO\"\n# >>> intersection.call([-3, -1], [-5, 5])\n# \"YES\"\n\
  def intersection(interval1, interval2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection\n\
  \    candidate = method(:intersection)\n    assert_equal(\"NO\", candidate.call([1,\
  \ 2], [2, 3]))\n    assert_equal(\"NO\", candidate.call([-1, 1], [0, 4]))\n    assert_equal(\"\
  YES\", candidate.call([-3, -1], [-5, 5]))\n    assert_equal(\"YES\", candidate.call([-2,\
  \ 2], [-4, 0]))\n    assert_equal(\"NO\", candidate.call([-11, 2], [-1, -1]))\n\
  \    assert_equal(\"NO\", candidate.call([1, 2], [3, 5]))\n    assert_equal(\"NO\"\
  , candidate.call([1, 2], [1, 2]))\n    assert_equal(\"NO\", candidate.call([-2,\
  \ -2], [-3, -2]))\n  end\nend\n"
completions: ["  if interval1[0] > interval2[1] || interval2[0] > interval1[1]\n \
    \   return \"NO\"\n  end\n  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  if start == finish\n    return \"NO\"\n\
    \  end\n  if is_prime(finish - start)\n    return \"YES\"\n  else\n    return\
    \ \"NO\"\n  end\nend", "  start = [interval1[0], interval2[0]].max\n  finish =\
    \ [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if (start..ending).size.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  (start..finish).count.prime? ? \"YES\" : \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  intersection = [interval1[0], interval2[0]].max..[interval1[1],\
    \ interval2[1]].min\n  intersection.size == 1 ? \"NO\" : prime?(intersection.size)\
    \ ? \"YES\" : \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if start == finish\n  return \"NO\" if (start..finish).to_a.size.prime?\n\
    \  \"YES\"\nend", "  if interval1[0] > interval2[1] || interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  end\n  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  if start == finish\n    return \"NO\"\n\
    \  end\n  if (start..finish).to_a.length.prime?\n    return \"YES\"\n  else\n\
    \    return \"NO\"\n  end\nend", "  # your code here\nend", "  start1, end1 =\
    \ interval1\n  start2, end2 = interval2\n  if start1 > end2 || start2 > end1\n\
    \    return \"NO\"\n  end\n  start = [start1, start2].max\n  finish = [end1, end2].min\n\
    \  if start > finish\n    return \"NO\"\n  end\n  if prime?(finish - start + 1)\n\
    \    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if start == finish\n  return \"NO\" if\
    \ finish - start == 1\n  (2..Math.sqrt(finish - start)).each do |i|\n    return\
    \ \"NO\" if (finish - start) % i == 0\n  end\n  \"YES\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if start == finish\n  return \"NO\" if\
    \ (start..finish).count.prime?\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if ending < start\n\
    \  return \"YES\" if (ending - start + 1).prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  # your code here\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if start == finish && prime?(start)\n\
    \  return \"NO\" if start == finish && !prime?(start)\n  prime?(finish - start)\
    \ ? \"YES\" : \"NO\"\nend", "  # your code here\nend", "  # your code here\nend",
  "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  # Your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish\n  return \"NO\" if (start..finish).to_a.length\
    \ == 1\n  return \"YES\" if (start..finish).to_a.length == 2\n  return \"NO\"\
    \ if (start..finish).to_a.length == 3\n  return \"YES\" if (start..finish).to_a.length\
    \ == 4\n  return \"NO\" if (start..finish).to_a.length == 5\n  return \"YES\"\
    \ if (start..finish).to_a.length == 6\n  return \"NO\" if (start..finish).to_a.length\
    \ == 7\n  return \"YES\" if (start..finish).to_a.length == 8\n  return \"NO\"\
    \ if (start..finish).to_a.length == 9\n  return \"YES\" if (start..finish).to_a.length\
    \ == 10\n  return \"NO\" if (start..finish).to_a.length == 11\n  return \"YES\"\
    \ if (start..finish).to_a.length == 12\n  return \"NO\" if (start..finish).to_a.length\
    \ == 13\n  return \"YES\" if (start..finish).to_a.length == 14\n  return \"NO\"\
    \ if (start..finish).to_a.length == 15\n  return \"YES\" if (start..finish).to_a.length\
    \ == 16\n  return \"NO\" if (start..finish).to_a.length == 17\n  return \"YES\"\
    \ if (start..finish).to_a.length == 18\n  return \"NO\" if (start..finish).to_a.length\
    \ == 19\n  return \"YES\" if (start..finish).to_a.length == 20\n  return \"NO\"\
    \ if (start..finish).to_a.length == 21\n  return \"YES\" if (start..finish).to_a.length\
    \ == 22\n  return \"NO\" if (start..finish).to_a", "  # your code here\nend",
  "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if prime?(ending - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if ending < start\n  return\
    \ \"YES\" if (start..ending).count.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  (start..finish).count.prime? ? \"YES\" : \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if start == finish\n  return\
    \ \"NO\" if start == finish - 1\n  (start..finish).each do |num|\n    return \"\
    NO\" if (2..Math.sqrt(num)).any? { |divisor| num % divisor == 0 }\n  end\n  \"\
    YES\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if start == finish\n  return\
    \ \"NO\" if (start..finish).to_a.size == 1\n  return \"YES\" if (start..finish).to_a.size\
    \ == 2\n  return \"NO\" if (start..finish).to_a.size == 3\n  return \"YES\" if\
    \ (start..finish).to_a.size == 4\n  return \"NO\" if (start..finish).to_a.size\
    \ == 5\n  return \"YES\" if (start..finish).to_a.size == 6\n  return \"NO\" if\
    \ (start..finish).to_a.size == 7\n  return \"YES\" if (start..finish).to_a.size\
    \ == 8\n  return \"NO\" if (start..finish).to_a.size == 9\n  return \"YES\" if\
    \ (start..finish).to_a.size == 10\n  return \"NO\" if (start..finish).to_a.size\
    \ == 11\n  return \"YES\" if (start..finish).to_a.size == 12\n  return \"NO\"\
    \ if (start..finish).to_a.size == 13\n  return \"YES\" if (start..finish).to_a.size\
    \ == 14\n  return \"NO\" if (start..finish).to_a.size == 15\n  return \"YES\"\
    \ if (start..finish).to_a.size == 16\n  return \"NO\" if (start..finish).to_a.size\
    \ == 17\n  return \"YES\" if (start..finish).to_a.size == 18\n  return \"NO\"\
    \ if (start..finish).to_a.size == 19\n  return \"YES\" if (start..finish).to_a.size\
    \ == 20\n  return \"NO\" if (start..finish).to_a.size == 21\n  return \"YES\"\
    \ if (start..finish).to_a.size == 22\n  return \"NO\" if (start..finish).to_a",
  "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n\
    \  \"NO\"\nend", "  # Your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  length = finish - start + 1\n  return \"\
    YES\" if length == 2\n  return \"NO\" if length < 2\n  (2..length/2).each do |i|\n\
    \    return \"NO\" if length % i == 0\n  end\n  \"YES\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if finish - start == 1\n  return \"YES\" if (2..Math.sqrt(finish\
    \ - start)).none? { |i| (finish - start) % i == 0 }\n  \"NO\"\nend", "  # your\
    \ code here\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  # your code\
    \ here\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if start + 1 == finish\n  return \"YES\" if start\
    \ + 2 == finish\n  return \"NO\" if start + 3 == finish\n  return \"YES\" if start\
    \ + 4 == finish\n  return \"NO\" if start + 5 == finish\n  return \"YES\" if start\
    \ + 6 == finish\n  return \"NO\" if start + 7 == finish\n  return \"YES\" if start\
    \ + 8 == finish\n  return \"NO\" if start + 9 == finish\n  return \"YES\" if start\
    \ + 10 == finish\n  return \"NO\" if start + 11 == finish\n  return \"YES\" if\
    \ start + 12 == finish\n  return \"NO\" if start + 13 == finish\n  return \"YES\"\
    \ if start + 14 == finish\n  return \"NO\" if start + 15 == finish\n  return \"\
    YES\" if start + 16 == finish\n  return \"NO\" if start + 17 == finish\n  return\
    \ \"YES\" if start + 18 == finish\n  return \"NO\" if start + 19 == finish\n \
    \ return \"YES\" if start + 20 == finish\n  return \"NO\" if start + 21 == finish\n\
    \  return \"YES\" if start + 22 == finish\n  return \"NO\" if start + 23 == finish\n\
    \  return \"YES\" if start + 24 == finish\n  return \"NO\" if start + 25 == finish\n\
    \  return \"YES\" if start + 26 == finish\n  return \"NO\" if start + 27 == finish\n\
    \  return \"YES\" if start + 28 == finish\n  return \"NO\" if start + 29 == finish\n\
    \  return \"YES\" if start + 30 == finish\n  return \"NO\" if start + 31 == finish\n\
    \  return \"YES\" if start + 32 == finish\n  return \"NO\" if start + 33 == finish\n\
    \  return \"YES\" if start + 34 == finish\n  return \"NO\" if start + 35 == finish\n\
    \  return \"YES\" if start + 36 == finish\n  return \"NO\" if start + 37 == finish\n\
    \  return \"YES\" if start + 38 == finish", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if start == finish\n  (start..finish).to_a.size.prime?\
    \ ? \"YES\" : \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if start == finish\n  return\
    \ \"NO\" if (start..finish).count.prime?\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish\n  return \"NO\" if (start..finish).to_a.length\
    \ == 1\n  return \"YES\" if (start..finish).to_a.length == 2\n  return \"NO\"\
    \ if (start..finish).to_a.length == 3\n  return \"YES\" if (start..finish).to_a.length\
    \ == 4\n  return \"NO\" if (start..finish).to_a.length == 5\n  return \"YES\"\
    \ if (start..finish).to_a.length == 6\n  return \"NO\" if (start..finish).to_a.length\
    \ == 7\n  return \"YES\" if (start..finish).to_a.length == 8\n  return \"NO\"\
    \ if (start..finish).to_a.length == 9\n  return \"YES\" if (start..finish).to_a.length\
    \ == 10\n  return \"NO\" if (start..finish).to_a.length == 11\n  return \"YES\"\
    \ if (start..finish).to_a.length == 12\n  return \"NO\" if (start..finish).to_a.length\
    \ == 13\n  return \"YES\" if (start..finish).to_a.length == 14\n  return \"NO\"\
    \ if (start..finish).to_a.length == 15\n  return \"YES\" if (start..finish).to_a.length\
    \ == 16\n  return \"NO\" if (start..finish).to_a.length == 17\n  return \"YES\"\
    \ if (start..finish).to_a.length == 18\n  return \"NO\" if (start..finish).to_a.length\
    \ == 19\n  return \"YES\" if (start..finish).to_a.length == 20\n  return \"NO\"\
    \ if (start..finish).to_a.length == 21\n  return \"YES\" if (start..finish).to_a.length\
    \ == 22\n  return \"NO\" if (start..finish).to_a", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish\n  (start..finish).count.prime? ? \"YES\"\
    \ : \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count\
    \ == 2\n  return \"NO\" if (start..ending).count == 1\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish\n  return \"NO\" if (start..finish).to_a.length\
    \ == 1\n  (start..finish).to_a.length.prime? ? \"YES\" : \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if (start..finish).to_a.size.prime?\n  \"YES\"\n\
    end", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if start == finish\n  return \"NO\" if\
    \ (start..finish).size == 1\n  (start..finish).each do |num|\n    return \"NO\"\
    \ if (start..finish).size % num == 0\n  end\n  \"YES\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if start == finish\n  return \"NO\" if\
    \ start + 1 == finish\n  return \"YES\" if start + 2 == finish\n  \"NO\"\nend",
  "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if finish - start == 1\n  (2..finish - start - 1).each\
    \ do |i|\n    return \"NO\" if (finish - start) % i == 0\n  end\n  \"YES\"\nend",
  "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if finish - start == 1\n  (2..Math.sqrt(finish -\
    \ start)).each do |i|\n    return \"NO\" if (finish - start) % i == 0\n  end\n\
    \  \"YES\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if ending < start\n  return \"YES\" if prime?(ending\
    \ - start + 1)\n  \"NO\"\nend", "  start1, end1 = interval1\n  start2, end2 =\
    \ interval2\n  return \"NO\" if start1 > end2 || start2 > end1\n  start = [start1,\
    \ start2].max\n  ending = [end1, end2].min\n  return \"NO\" if ending - start\
    \ < 1\n  return \"YES\" if (ending - start).prime?\n  \"NO\"\nend", "  # Your\
    \ code here\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if (start..finish).count.prime?\nend", "  # your\
    \ code here\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).to_a.length.prime?\n  \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  if start > ending\n    \"NO\"\n  else\n    length = ending\
    \ - start + 1\n    if length == 1\n      \"NO\"\n    else\n      (2..Math.sqrt(length)).each\
    \ do |i|\n        return \"NO\" if length % i == 0\n      end\n      \"YES\"\n\
    \    end\n  end\nend", "  start = [interval1[0], interval2[0]].max\n  finish =\
    \ [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  # your code here\n\
    end", "  # your code here\nend", "  return \"NO\" if interval1[1] < interval2[0]\
    \ || interval2[1] < interval1[0]\n  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish\n  return \"NO\" if finish - start == 1\n\
    \  return \"YES\" if (2..Math.sqrt(finish - start)).none? { |n| (finish - start)\
    \ % n == 0 }\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  # your code here\n\
    end", "  start_interval = [interval1[0], interval2[0]].max\n  end_interval = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start_interval > end_interval\n  return\
    \ \"YES\" if (start_interval..end_interval).size.prime?\n  \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if (start..finish).to_a.size.prime?\n  \"YES\"\n\
    end", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  if start > finish\n    return \"NO\"\n  end\n  if start\
    \ == finish\n    return \"YES\"\n  end\n  if is_prime(finish - start)\n    return\
    \ \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start1,\
    \ end1 = interval1\n  start2, end2 = interval2\n  if start1 > end2 || start2 >\
    \ end1\n    return \"NO\"\n  end\n  start = [start1, start2].max\n  ending = [end1,\
    \ end2].min\n  if start > ending\n    return \"NO\"\n  end\n  length = ending\
    \ - start + 1\n  if length == 1\n    return \"NO\"\n  end\n  if length == 2\n\
    \    return \"YES\"\n  end\n  (2..Math.sqrt(length)).each do |i|\n    if length\
    \ % i == 0\n      return \"NO\"\n    end\n  end\n  \"YES\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if start == finish\n  return \"NO\" if\
    \ (start..finish).count.prime?\nend", "  start1, end1 = interval1\n  start2, end2\
    \ = interval2\n  return \"NO\" if start1 > end2 || start2 > end1\n  start = [start1,\
    \ start2].max\n  ending = [end1, end2].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if prime?(ending - start + 1)\n  \"NO\"\nend", "  start1, end1\
    \ = interval1\n  start2, end2 = interval2\n  return \"NO\" if start1 > end2 ||\
    \ start2 > end1\n  start = [start1, start2].max\n  finish = [end1, end2].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if finish - start == 1\n\
    \  return \"NO\" if finish - start == 2\n  return \"YES\" if finish - start ==\
    \ 3\n  return \"NO\" if finish - start == 4\n  return \"YES\" if finish - start\
    \ == 5\n  return \"NO\" if finish - start == 6\n  return \"YES\" if finish - start\
    \ == 7\n  return \"NO\" if finish - start == 8\n  return \"YES\" if finish - start\
    \ == 9\n  return \"NO\" if finish - start == 10\n  return \"YES\" if finish -\
    \ start == 11\n  return \"NO\" if finish - start == 12\n  return \"YES\" if finish\
    \ - start == 13\n  return \"NO\" if finish - start == 14\n  return \"YES\" if\
    \ finish - start == 15\n  return \"NO\" if finish - start == 16\n  return \"YES\"\
    \ if finish - start == 17\n  return \"NO\" if finish - start == 18\n  return \"\
    YES\" if finish - start == 19\n  return \"NO\" if finish - start == 20\n  return\
    \ \"YES\" if finish - start == 21\n  return \"NO\" if finish - start == 22\n \
    \ return \"YES\" if finish - start == 23\n  return \"NO\" if finish - start ==\
    \ 24\n  return \"YES\" if finish - start == 25\n  return \"NO\" if finish - start\
    \ == 26\n  return \"YES\" if finish - start == 27\n  return \"NO\" if finish -\
    \ start == 28\n  return \"YES\" if finish - start == 29\n  return \"NO\" if finish\
    \ - start == 30\n  return \"YES\" if finish - start == 31\n  return \"NO\" if\
    \ finish - start == 32\n  return \"YES\" if finish - start == 33\n  return \"\
    NO\" if finish - start == 34\n  return \"YES\" if finish - start == 35\n  return\
    \ \"NO\" if finish - start == 36\n  return \"YES\" if finish", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n  \"\
    NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if (start..ending).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if start == finish - 1\n  return \"YES\" if start\
    \ == finish - 2\n  (start..finish).each do |i|\n    return \"NO\" if i.prime?\n\
    \  end\n  \"YES\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return 'NO' if start > finish\n  (start..finish).size.prime?\
    \ ? 'YES' : 'NO'\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if start == finish && prime?(start)\n  return \"NO\" if prime?(start)\n\
    \  return \"NO\" if prime?(finish)\n  return \"YES\" if prime?(finish - start)\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if start\
    \ == ending\n  return \"NO\" if (start..ending).to_a.length == 1\n  return \"\
    YES\" if (start..ending).to_a.length == 2\n  return \"NO\" if (start..ending).to_a.length\
    \ == 3\n  return \"YES\" if (start..ending).to_a.length == 5\n  return \"NO\"\
    \ if (start..ending).to_a.length == 7\n  return \"YES\" if (start..ending).to_a.length\
    \ == 11\n  return \"NO\" if (start..ending).to_a.length == 13\n  return \"YES\"\
    \ if (start..ending).to_a.length == 17\n  return \"NO\" if (start..ending).to_a.length\
    \ == 19\n  return \"YES\" if (start..ending).to_a.length == 23\n  return \"NO\"\
    \ if (start..ending).to_a.length == 29\n  return \"YES\" if (start..ending).to_a.length\
    \ == 31\n  return \"NO\" if (start..ending).to_a.length == 37\n  return \"YES\"\
    \ if (start..ending).to_a.length == 41\n  return \"NO\" if (start..ending).to_a.length\
    \ == 43\n  return \"YES\" if (start..ending).to_a.length == 47\n  return \"NO\"\
    \ if (start..ending).to_a.length == 53\n  return \"YES\" if (start..ending).to_a.length\
    \ == 59\n  return \"NO\" if (start..ending).to_a.length == 61\n  return \"YES\"\
    \ if (start..ending).to_a.length == 67\n  return \"NO\" if (start..ending).to_a.length\
    \ == 71\n  return \"YES\" if (start..ending).to_a.length == 73\n  return \"NO\"\
    \ if (start..ending).to_a.length == 79\n  return \"YES\" if (start..ending).to_a.length\
    \ == 83", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if [start,\
    \ finish].uniq.size == 1\n  return \"NO\" if (start..finish).to_a.size == 1\n\
    \  return \"YES\" if (start..finish).to_a.size == 2\n  return \"NO\" if (start..finish).to_a.size\
    \ == 3\n  return \"YES\" if (start..finish).to_a.size == 4\n  return \"NO\" if\
    \ (start..finish).to_a.size == 5\n  return \"YES\" if (start..finish).to_a.size\
    \ == 6\n  return \"NO\" if (start..finish).to_a.size == 7\n  return \"YES\" if\
    \ (start..finish).to_a.size == 8\n  return \"NO\" if (start..finish).to_a.size\
    \ == 9\n  return \"YES\" if (start..finish).to_a.size == 10\n  return \"NO\" if\
    \ (start..finish).to_a.size == 11\n  return \"YES\" if (start..finish).to_a.size\
    \ == 12\n  return \"NO\" if (start..finish).to_a.size == 13\n  return \"YES\"\
    \ if (start..finish).to_a.size == 14\n  return \"NO\" if (start..finish).to_a.size\
    \ == 15\n  return \"YES\" if (start..finish).to_a.size == 16\n  return \"NO\"\
    \ if (start..finish).to_a.size == 17\n  return \"YES\" if (start..finish).to_a.size\
    \ == 18\n  return \"NO\" if (start..finish).to_a.size == 19\n  return \"YES\"\
    \ if (start..finish).to_a.size == 20\n  return \"NO\" if (start..finish).to_a.size\
    \ == 21\n  return \"YES\" if (start..finish).to_a.size == 22\n  return \"NO\"\
    \ if (", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if (start..ending).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  if start > ending\n    return \"NO\"\n  else\n    return\
    \ prime?(ending - start + 1) ? \"YES\" : \"NO\"\n  end\nend", "  # your code here\n\
    end", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if (start..finish).count.prime?\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish && prime?(start)\n  return \"NO\" if start\
    \ == finish && !prime?(start)\n  return \"YES\" if prime?(finish - start + 1)\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n  \"\
    NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start1, end1 = interval1\n  start2, end2 = interval2\n  return\
    \ \"NO\" if start1 > end2 || start2 > end1\n  start = [start1, start2].max\n \
    \ stop = [end1, end2].min\n  return \"NO\" if start > stop\n  return \"YES\" if\
    \ start == stop\n  return \"NO\" if (start..stop).to_a.size.prime?\n  \"YES\"\n\
    end", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if start == finish - 1\n  return \"YES\" if (start..finish).to_a.size\
    \ == 3\n  return \"NO\" if (start..finish).to_a.size == 4\n  return \"YES\" if\
    \ (start..finish).to_a.size == 5\n  return \"NO\" if (start..finish).to_a.size\
    \ == 6\n  return \"YES\" if (start..finish).to_a.size == 7\n  return \"NO\" if\
    \ (start..finish).to_a.size == 8\n  return \"YES\" if (start..finish).to_a.size\
    \ == 9\n  return \"NO\" if (start..finish).to_a.size == 10\n  return \"YES\" if\
    \ (start..finish).to_a.size == 11\n  return \"NO\" if (start..finish).to_a.size\
    \ == 12\n  return \"YES\" if (start..finish).to_a.size == 13\n  return \"NO\"\
    \ if (start..finish).to_a.size == 14\n  return \"YES\" if (start..finish).to_a.size\
    \ == 15\n  return \"NO\" if (start..finish).to_a.size == 16\n  return \"YES\"\
    \ if (start..finish).to_a.size == 17\n  return \"NO\" if (start..finish).to_a.size\
    \ == 18\n  return \"YES\" if (start..finish).to_a.size == 19\n  return \"NO\"\
    \ if (start..finish).to_a.size == 20\n  return \"YES\" if (start..finish).to_a.size\
    \ == 21\n  return \"NO\" if (start..finish).to_a.size == 22\n  return \"YES\"\
    \ if (start..finish).to_a.size == 23\n  return \"NO\" if (start..finish).to_a.size\
    \ == 24\n  return \"", "  # Your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if prime?(ending - start + 1)\n  \"NO\"\nend", "  if interval1[0]\
    \ <= interval2[0]\n    start = interval2[0]\n    end1 = interval1[1]\n    end2\
    \ = interval2[1]\n  else\n    start = interval1[0]\n    end1 = interval2[1]\n\
    \    end2 = interval1[1]\n  end\n  if end1 < start || end2 < start\n    return\
    \ \"NO\"\n  end\n  if end1 > end2\n    end = end2\n  else\n    end = end1\n  end\n\
    \  if end - start == 0\n    return \"NO\"\n  end\n  if end - start == 1\n    return\
    \ \"YES\"\n  end\n  if end - start == 2\n    return \"NO\"\n  end\n  if end -\
    \ start == 3\n    return \"YES\"\n  end\n  if end - start == 4\n    return \"\
    NO\"\n  end\n  if end - start == 5\n    return \"YES\"\n  end\n  if end - start\
    \ == 6\n    return \"NO\"\n  end\n  if end - start == 7\n    return \"YES\"\n\
    \  end\n  if end - start == 8\n    return \"NO\"\n  end\n  if end - start == 9\n\
    \    return \"NO\"\n  end\n  if end - start == 10\n    return \"NO\"\n  end\n\
    \  if end - start == 11\n    return \"YES\"\n  end\n  if end - start == 12\n \
    \   return \"NO\"\n  end\n  if end - start == 13\n    return \"YES\"\n  end\n\
    \  if end - start == 14\n    return \"NO\"\n  end\n  if end - start == 15\n  \
    \  return \"NO\"\n  end\n  if end - start == 16\n    return \"NO\"\n  end\n  if\
    \ end - start == 17\n    return \"YES\"\n  end\n  if end - start == 18\n    return\
    \ \"NO\"\n  end\n  if end - start == 19\n    return \"YES\"\n  end\n  if end -\
    \ start == 20\n    return \"NO\"\n  end\n  if end - start == 21\n    return \"\
    NO\"\n  end\n  if end - start == 22\n    return \"NO", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if ending < start\n  return \"YES\" if prime?(ending - start + 1)\n  \"NO\"\
    \nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if (start..finish).to_a.length == 1\n  return \"\
    YES\" if (start..finish).to_a.length == 2\n  return \"NO\" if (start..finish).to_a.length\
    \ == 3\n  return \"YES\" if (start..finish).to_a.length == 4\n  return \"NO\"\
    \ if (start..finish).to_a.length == 5\n  return \"YES\" if (start..finish).to_a.length\
    \ == 6\n  return \"NO\" if (start..finish).to_a.length == 7\n  return \"YES\"\
    \ if (start..finish).to_a.length == 8\n  return \"NO\" if (start..finish).to_a.length\
    \ == 9\n  return \"YES\" if (start..finish).to_a.length == 10\n  return \"NO\"\
    \ if (start..finish).to_a.length == 11\n  return \"YES\" if (start..finish).to_a.length\
    \ == 12\n  return \"NO\" if (start..finish).to_a.length == 13\n  return \"YES\"\
    \ if (start..finish).to_a.length == 14\n  return \"NO\" if (start..finish).to_a.length\
    \ == 15\n  return \"YES\" if (start..finish).to_a.length == 16\n  return \"NO\"\
    \ if (start..finish).to_a.length == 17\n  return \"YES\" if (start..finish).to_a.length\
    \ == 18\n  return \"NO\" if (start..finish).to_a.length == 19\n  return \"YES\"\
    \ if (start..finish).to_a.length == 20\n  return \"NO\" if (start..finish).to_a.length\
    \ == 21\n  return \"YES\" if (start..finish).to_a.length == 22\n  return \"NO\"\
    \ if (start..finish).to_a", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if start == finish\n  return \"NO\" if start + 1 == finish\n  return\
    \ \"YES\" if start + 2 == finish\n  return \"NO\" if start + 3 == finish\n  return\
    \ \"YES\" if start + 4 == finish\n  return \"NO\" if start + 5 == finish\n  return\
    \ \"YES\" if start + 6 == finish\n  return \"NO\" if start + 7 == finish\n  return\
    \ \"YES\" if start + 8 == finish\n  return \"NO\" if start + 9 == finish\n  return\
    \ \"YES\" if start + 10 == finish\n  return \"NO\" if start + 11 == finish\n \
    \ return \"YES\" if start + 12 == finish\n  return \"NO\" if start + 13 == finish\n\
    \  return \"YES\" if start + 14 == finish\n  return \"NO\" if start + 15 == finish\n\
    \  return \"YES\" if start + 16 == finish\n  return \"NO\" if start + 17 == finish\n\
    \  return \"YES\" if start + 18 == finish\n  return \"NO\" if start + 19 == finish\n\
    \  return \"YES\" if start + 20 == finish\n  return \"NO\" if start + 21 == finish\n\
    \  return \"YES\" if start + 22 == finish\n  return \"NO\" if start + 23 == finish\n\
    \  return \"YES\" if start + 24 == finish\n  return \"NO\" if start + 25 == finish\n\
    \  return \"YES\" if start + 26 == finish\n  return \"NO\" if start + 27 == finish\n\
    \  return \"YES\" if start + 28 == finish\n  return \"NO\" if start + 29 == finish\n\
    \  return \"YES\" if start + 30 == finish\n  return \"NO\" if start + 31 == finish\n\
    \  return \"YES\" if start + 32 == finish\n  return \"NO\" if start + 33 == finish\n\
    \  return \"YES\" if start + 34 == finish\n  return \"NO\" if start + 35 == finish\n\
    \  return \"YES\" if start + 36 == finish\n  return \"NO\" if start + 37 == finish\n\
    \  return \"YES\" if start + 38 == finish", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if start == finish\n  return\
    \ \"NO\" if (start..finish).to_a.size == 1\n  return \"YES\" if (start..finish).to_a.size\
    \ == 2\n  return \"NO\" if (start..finish).to_a.size == 3\n  return \"YES\" if\
    \ (start..finish).to_a.size == 4\n  return \"NO\" if (start..finish).to_a.size\
    \ == 5\n  return \"YES\" if (start..finish).to_a.size == 6\n  return \"NO\" if\
    \ (start..finish).to_a.size == 7\n  return \"YES\" if (start..finish).to_a.size\
    \ == 8\n  return \"NO\" if (start..finish).to_a.size == 9\n  return \"YES\" if\
    \ (start..finish).to_a.size == 10\n  return \"NO\" if (start..finish).to_a.size\
    \ == 11\n  return \"YES\" if (start..finish).to_a.size == 12\n  return \"NO\"\
    \ if (start..finish).to_a.size == 13\n  return \"YES\" if (start..finish).to_a.size\
    \ == 14\n  return \"NO\" if (start..finish).to_a.size == 15\n  return \"YES\"\
    \ if (start..finish).to_a.size == 16\n  return \"NO\" if (start..finish).to_a.size\
    \ == 17\n  return \"YES\" if (start..finish).to_a.size == 18\n  return \"NO\"\
    \ if (start..finish).to_a.size == 19\n  return \"YES\" if (start..finish).to_a.size\
    \ == 20\n  return \"NO\" if (start..finish).to_a.size == 21\n  return \"YES\"\
    \ if (start..finish).to_a.size == 22\n  return \"NO\" if (start..finish).to_a",
  "  # your code here\nend", "  # your code here\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\
    \nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if start == finish\n  return\
    \ \"NO\" if (start..finish).count.prime?\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  start = [interval1[0], interval2[0]].max\n  ending\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if ending < start\n  return\
    \ \"YES\" if start == ending && prime?(start)\n  return \"NO\" if start == ending\
    \ && !prime?(start)\n  return \"YES\" if prime?(ending - start)\n  \"NO\"\nend",
  "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start1, end1 = interval1\n  start2,\
    \ end2 = interval2\n  if start1 > end2 || start2 > end1\n    \"NO\"\n  else\n\
    \    start = [start1, start2].max\n    stop = [end1, end2].min\n    length = stop\
    \ - start + 1\n    length.prime? ? \"YES\" : \"NO\"\n  end\nend", "  # your code\
    \ here\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish && start.prime?\n  return \"NO\" if (finish - start).prime?\n  \"\
    YES\"\nend", "  # your code here\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish && is_prime?(start)\n  return \"NO\" if start == finish\n  return\
    \ \"YES\" if is_prime?(finish - start + 1)\n  \"NO\"\nend", "  # your code here\n\
    end", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if is_prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if ending < start\n  return\
    \ \"YES\" if is_prime?(ending - start + 1)\n  \"NO\"\nend", "  # your code here\n\
    end", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if ending < start\n  return \"YES\" if prime?(ending - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if start == finish\n  return \"NO\" if start + 1 == finish\n  return\
    \ \"YES\" if (start + 1..finish - 1).all? { |num| prime?(num) }\n  \"NO\"\nend",
  "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n\
    \  \"NO\"\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
