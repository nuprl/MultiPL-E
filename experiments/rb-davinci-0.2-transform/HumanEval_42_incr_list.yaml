name: HumanEval_42_incr_list
language: rb
prompt: "# Return list with elements incremented by 1.\n# >>> incr_list.call([1, 2,\
  \ 3])\n# [2, 3, 4]\n# >>> incr_list.call([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4,\
  \ 6, 3, 4, 4, 10, 1, 124]\ndef incr_list(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_incr_list\n\
  \    candidate = method(:incr_list)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([4, 3, 2], candidate.call([3, 2, 1]))\n    assert_equal([6, 3,\
  \ 6, 3, 4, 4, 10, 1, 124], candidate.call([5, 2, 5, 2, 3, 3, 9, 0, 123]))\n  end\n\
  end\n"
completions: ["  l.map { |x| x + 1 }\nend", "  l.map{|x| x+1}\nend", "  l.map { |x|\
    \ x + 1 }\nend", "  l.map { |x| x + 1 }\nend", "  l.map { |e| e + 1 }\nend", " \
    \ l.map { |x| x + 1 }\nend", "  l.map { |x| x + 1 }\nend", "  l.map { |x| x +\
    \ 1 }\nend", "  l.map { |e| e + 1 }\nend", "  l.map { |x| x + 1 }\nend", "  l.map\
    \ { |i| i + 1 }\nend", "  l.map { |x| x + 1 }\nend", "  l.map { |x| x + 1 }\n\
    end", "  l.map { |x| x + 1 }\nend", "  l.map { |e| e + 1 }\nend", "  l.map { |x|\
    \ x + 1 }\nend", "  l.map { |e| e + 1 }\nend", "  l.map { |e| e + 1 }\nend", " \
    \ l.map { |x| x + 1 }\nend", "  l.map { |x| x + 1 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
