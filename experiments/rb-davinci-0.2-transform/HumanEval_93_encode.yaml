name: HumanEval_93_encode
language: rb
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode.call(\"test\")\n# \"TGST\"\
  \n# >>> encode.call(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\ndef encode(message)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
  \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"\
  ))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
  ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
  This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
  I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
completions: ["  message.downcase.tr('aeiou', 'eioua')\nend", "  vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n  encoded_message = \"\"\n  message.each_char do |char|\n  \
    \  if vowels.include?(char.downcase)\n      encoded_message += (char.ord + 2).chr\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  # TODO: Implement this method\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  # TODO: implement this function\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  message.downcase.tr(\"a-z\", \"c-za-b\")\nend", "  message.chars.map\
    \ do |char|\n    if char.match(/[a-z]/i)\n      if char.match(/[aeiou]/i)\n  \
    \      char = char.next.next\n      else\n        char = char.next\n      end\n\
    \    end\n    char.upcase\n  end.join\nend", "  message.downcase.tr('aeiou', 'eioua')\n\
    end", "\tmessage.downcase.tr(\"aeiou\", \"eioau\")\nend", "  message.downcase.tr('aeiou',\
    \ 'eioau')\nend", "  message.split(\"\").map do |letter|\n    if letter.match(/[aeiou]/i)\n\
    \      letter.next.next\n    else\n      letter.swapcase\n    end\n  end.join\n\
    end", "  message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n      char\
    \ = char.next.next\n    else\n      char = char.swapcase\n    end\n  end.join\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\
    \n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n     \
    \ encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n      char.next.next\n\
    \    else\n      char.swapcase\n    end\n  end.join\nend", "  vowels = \"aeiou\"\
    \n  message.downcase.chars.map do |char|\n    if vowels.include?(char)\n     \
    \ vowels[(vowels.index(char) + 2) % 5]\n    else\n      char\n    end\n  end.join.upcase\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\
    \n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n     \
    \ encoded_message += next_vowel(char)\n    else\n      encoded_message += char.swapcase\n\
    \    end\n  end\n  encoded_message\nend", "  vowels = %w(a e i o u)\n  letters\
    \ = message.split('')\n  letters.map! do |letter|\n    if vowels.include?(letter.downcase)\n\
    \      letter = letter.next.next\n    else\n      letter.swapcase\n    end\n \
    \ end\n  letters.join\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n\
    \      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\nend",
  "  message.gsub(/[aeiou]/i) { |match| match.next.next }.swapcase\nend", "  message.upcase.tr('A-Z',\
    \ 'C-ZA-B')\nend", "  message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n\
    \      char.next.next\n    else\n      char.swapcase\n    end\n  end.join\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioau\")\nend", "  message.gsub(/[aeiou]/i)\
    \ { |vowel| vowel.next.next }.swapcase\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  message.split(\"\").map do |letter|\n    if letter == letter.upcase\n\
    \      letter.downcase\n    else\n      letter.upcase\n    end\n  end.join(\"\"\
    )\nend", "  message.downcase.tr('aeiou', 'eioua')\nend", "  vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      if char.downcase == \"u\"\n    \
    \    encoded_message += \"a\"\n      else\n        encoded_message += vowels[vowels.index(char.downcase)\
    \ + 2]\n      end\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\nend", "  message.downcase!\n\
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char)\n      index = vowels.index(char)\n\
    \      encoded_message += vowels[(index + 2) % 5]\n    else\n      encoded_message\
    \ += char\n    end\n  end\n  encoded_message.upcase\nend", "  vowels = \"aeiou\"\
    \n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n     \
    \ index = vowels.index(char.downcase)\n      char = vowels[(index + 2) % 5]\n\
    \    end\n    char.upcase == char ? char.downcase : char.upcase\n  end.join\n\
    end", "  # your code here\nend", "  message.downcase.tr(\"aeiou\", \"eioau\")\n\
    end", "  vowels = \"aeiou\"\n  message.downcase.each_char.map do |char|\n    if\
    \ vowels.include?(char)\n      vowels[(vowels.index(char) + 2) % 5]\n    else\n\
    \      char\n    end\n  end.join.upcase\nend", "  message.downcase!\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char)\n      encoded_message += vowels[(vowels.index(char) +\
    \ 2) % 5]\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message.upcase\n\
    end", "  # your code here\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr('aeiou', 'eioau')\nend", "  # your code here\nend",
  "  message.upcase.tr(\"AEIOU\", \"CGFKL\")\nend", "  message.downcase.gsub(/[aeiou]/,\
    \ 'a' => 'c', 'e' => 'g', 'i' => 'k', 'o' => 'q', 'u' => 's').upcase\nend", " \
    \ message.downcase.tr('a-z', 'c-za-b')\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  message.split('').map do |letter|\n    if\
    \ letter =~ /[aeiou]/i\n      letter = letter.next.next\n    else\n      letter\n\
    \    end\n  end.join('')\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\n\
    end", "  message.downcase.tr('aeiou', 'eioua')\nend", "\tvowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n\talphabet = ('a'..'z').to_a\n\tmessage.downcase!\n\tmessage.each_char\
    \ do |char|\n\t\tif vowels.include?(char)\n\t\t\tmessage.gsub!(char, alphabet[alphabet.index(char)\
    \ + 2])\n\t\tend\n\tend\n\tmessage.upcase!\nend", "  vowels = \"aeiou\"\n  message.downcase.chars.map\
    \ do |char|\n    if vowels.include?(char)\n      vowels[(vowels.index(char) +\
    \ 2) % 5]\n    else\n      char\n    end\n  end.join.upcase\nend", "  message.downcase.tr('aeiou',\
    \ 'eioau')\nend", "  vowels = \"aeiou\"\n  message.split(\"\").map do |letter|\n\
    \    if vowels.include?(letter.downcase)\n      index = vowels.index(letter.downcase)\n\
    \      index += 2\n      index -= 5 if index > 4\n      vowels[index].upcase\n\
    \    else\n      letter.swapcase\n    end\n  end.join(\"\")\nend", "  # TODO:\
    \ Implement this method\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  vowels = \"aeiou\"\n  message.downcase.each_char.map do |char|\n    if\
    \ vowels.include?(char)\n      vowels[(vowels.index(char) + 2) % 5]\n    else\n\
    \      char\n    end\n  end.join.upcase\nend", "  # your code here\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  message.downcase.tr(\"aeiou\", \"eioua\"\
    )\nend", "  message.downcase.tr('aeiou', 'eioau')\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += next_vowel(char)\n    else\n      encoded_message +=\
    \ char.swapcase\n    end\n  end\n  encoded_message\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  # TODO: implement me\nend", "  message.chars.map\
    \ do |char|\n    if char =~ /[aeiou]/i\n      char = char.next.next\n    else\n\
    \      char\n    end\n  end.join\nend", "  message.downcase.tr(\"aeiou\", \"eioau\"\
    )\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message =\
    \ \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n   \
    \   result += char\n    end\n  end\n  result.swapcase\nend", "  vowels = %w(a\
    \ e i o u)\n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      index += 2\n      index = index\
    \ % 5 if index > 4\n      char = vowels[index].upcase if char == char.upcase\n\
    \      char = vowels[index] if char == char.downcase\n    else\n      char = char.swapcase\n\
    \    end\n  end.join\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend",
  "  message.split(\"\").map do |char|\n    if char.match(/[a-z]/i)\n      if char.match(/[aeiou]/i)\n\
    \        if char.match(/[aeiou]/i).to_s == \"u\"\n          char = \"a\"\n   \
    \     else\n          char = char.next.next\n        end\n      end\n      char.swapcase\n\
    \    else\n      char\n    end\n  end.join\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ message.split(\"\").map do |letter|\n    if letter.match(/[aeiou]/i)\n     \
    \ letter = letter.next.next\n    else\n      letter = letter.next\n    end\n \
    \ end.join(\"\")\nend", "  message.downcase.tr('aeiou', 'eouai')\nend", "  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n    else\n\
    \      result += char.swapcase\n    end\n  end\n  result\nend", "  message.split(\"\
    \").map do |letter|\n    if letter.match(/[aeiou]/i)\n      letter.next.next\n\
    \    else\n      letter.swapcase\n    end\n  end.join\nend", "  message.downcase.tr(\"\
    aeiou\", \"eioua\")\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n \
    \ message.each_char do |char|\n    if vowels.include?(char.downcase)\n      encoded_message\
    \ += (vowels[(vowels.index(char.downcase) + 2) % 5].upcase)\n    else\n      encoded_message\
    \ += char.swapcase\n    end\n  end\n  encoded_message\nend", "  message.each_char.map\
    \ do |char|\n    if char =~ /[aeiou]/i\n      char.next.next\n    else\n     \
    \ char\n    end\n  end.join\nend", "  message.downcase.tr(\"aeiou\", \"eioau\"\
    )\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message =\
    \ \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += encode_vowel(char)\n    else\n      encoded_message\
    \ += encode_consonant(char)\n    end\n  end\n  encoded_message\nend", "  message.split(\"\
    \").map do |letter|\n    if letter.match(/[a-z]/i)\n      if letter.match(/[aeiou]/i)\n\
    \        letter = letter.next.next\n      else\n        letter = letter.next\n\
    \      end\n    end\n    letter\n  end.join(\"\")\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  message.split(\"\").map\
    \ do |char|\n    if vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      if index == 4\n        char = vowels[0].upcase\n      else\n        char\
    \ = vowels[index + 1].upcase\n      end\n    else\n      char.swapcase\n    end\n\
    \  end.join(\"\")\nend", "  message.split(\"\").map do |letter|\n    if letter.match(/[a-z]/i)\n\
    \      if letter.match(/[aeiou]/i)\n        letter = letter.next.next\n      else\n\
    \        letter = letter.next\n      end\n    end\n    letter.swapcase\n  end.join\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioau\")\nend", "  message.downcase.chars.map\
    \ do |char|\n    if char =~ /[aeiou]/\n      char = char.ord + 2\n      char =\
    \ char - 26 if char > 122\n      char.chr\n    else\n      char\n    end\n  end.join\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\
    \n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n     \
    \ encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char.match(/[A-Z]/)\n      new_message += char.downcase\n\
    \    elsif char.match(/[a-z]/)\n      new_message += char.upcase\n    else\n \
    \     new_message += char\n    end\n  end\n  new_message\nend", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  message.split(\"\").map do |letter|\n    if\
    \ vowels.include?(letter.downcase)\n      vowels[(vowels.index(letter.downcase)\
    \ + 2) % 5]\n    else\n      letter.swapcase\n    end\n  end.join(\"\")\nend",
  "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\nend", "\tvowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n\talphabet = ('a'..'z').to_a\n\tmessage.downcase.split('').map\
    \ do |letter|\n\t\tif vowels.include?(letter)\n\t\t\tindex = alphabet.index(letter)\n\
    \t\t\talphabet[index + 2]\n\t\telse\n\t\t\tletter.upcase\n\t\tend\n\tend.join\n\
    end", "  message.downcase.tr(\"aeiou\", \"eouai\")\nend", "  message.downcase.gsub(/[aeiou]/)\
    \ { |vowel| vowel.next.next }.upcase\nend", "  vowels = \"aeiou\"\n  message.chars.map\
    \ do |char|\n    if vowels.include?(char.downcase)\n      new_index = (vowels.index(char.downcase)\
    \ + 2) % 5\n      char.downcase == char ? vowels[new_index] : vowels[new_index].upcase\n\
    \    else\n      char.downcase == char ? char.upcase : char.downcase\n    end\n\
    \  end.join\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += get_next_vowel(char)\n    else\n      encoded_message\
    \ += char\n    end\n  end\n  encoded_message\nend", "  vowels = \"aeiou\"\n  message.chars.map\
    \ do |char|\n    if vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      char = vowels[(index + 2) % 5]\n    end\n    char == char.upcase ? char.downcase\
    \ : char.upcase\n  end.join\nend", "  message.downcase.tr('aeiou', 'eioua')\n\
    end", "  message.downcase.tr('a-z', 'cdefghijklmnopqrstuvwxyzab')\nend", "  message.downcase.gsub(/[aeiou]/)\
    \ { |match| match.next.next }.upcase\nend", "  message.downcase.tr('aeiou', 'eioua')\n\
    end", "  message.downcase.tr('aeiou', 'eioau')\nend", "  message.downcase.tr(\"\
    aeiou\", \"eioau\")\nend", "  # your code here\nend", "  # your code here\nend",
  "  # TODO: implement this\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  message.downcase.tr('aeiou',\
    \ 'eioau')\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\n\
    end", "  # TODO: implement this method\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "\tmessage.downcase!\n\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tvowels\
    \ = \"aeiou\"\n\tencoded_message = \"\"\n\tmessage.each_char do |char|\n\t\tif\
    \ vowels.include?(char)\n\t\t\tindex = alphabet.index(char)\n\t\t\tindex += 2\n\
    \t\t\tindex -= 26 if index > 25\n\t\t\tencoded_message += alphabet[index]\n\t\t\
    else\n\t\t\tencoded_message += char\n\t\tend\n\tend\n\tencoded_message.upcase\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\n\
    end", "  message.split(\"\").map do |letter|\n    if letter.match(/[a-z]/i)\n\
    \      if letter.match(/[aeiou]/i)\n        if letter.match(/[aeiou]/i).to_s ==\
    \ \"u\"\n          letter = \"a\"\n        else\n          letter = letter.next.next\n\
    \        end\n      else\n        letter = letter.swapcase\n      end\n    else\n\
    \      letter\n    end\n  end.join(\"\")\nend", "  vowels = \"aeiou\"\n  message.downcase.chars.map\
    \ do |char|\n    if vowels.include?(char)\n      vowels[(vowels.index(char) +\
    \ 2) % 5]\n    else\n      char.upcase\n    end\n  end.join\nend", "  # TODO:\
    \ implement this method\nend", "  message.downcase.tr('a-z', 'cdefghijklmnopqrstuvwxyzab')\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  vowels = \"aeiou\"\
    \n  message.downcase.tr(vowels, vowels[2..-1] + vowels[0..1]).tr(\"a-z\", \"A-Z\"\
    )\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  vowels = \"aeiou\"\n  message.split(\"\"\
    ).map do |char|\n    if vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      char = vowels[(index + 2) % 5]\n    end\n    char == char.upcase ? char.downcase\
    \ : char.upcase\n  end.join(\"\")\nend", "  message.downcase.tr(\"aeiou\", \"\
    eioua\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message << alphabet[alphabet.index(char.downcase)\
    \ + 2]\n    elsif char == char.upcase\n      encoded_message << char.downcase\n\
    \    else\n      encoded_message << char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.chars.map do |char|\n    if char =~ /[aeiou]/i\n      char =\
    \ char.next.next\n    else\n      char.swapcase\n    end\n  end.join\nend", " \
    \ message.downcase.tr('aeiou', 'eioua')\nend", "  message.split(\"\").map do |char|\n\
    \    if char.match(/[aeiou]/i)\n      char = char.next.next\n    elsif char.match(/[a-z]/i)\n\
    \      char = char.next\n    else\n      char\n    end\n  end.join(\"\").swapcase\n\
    end", "  # your code here\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioau\")\nend", "  # your code here\n\
    end", "\tmessage = message.split(\"\")\n\tmessage.each_with_index do |letter,\
    \ index|\n\t\tif letter == letter.upcase\n\t\t\tmessage[index] = letter.downcase\n\
    \t\telse\n\t\t\tmessage[index] = letter.upcase\n\t\tend\n\t\tif letter == \"a\"\
    \n\t\t\tmessage[index] = \"c\"\n\t\telsif letter == \"e\"\n\t\t\tmessage[index]\
    \ = \"g\"\n\t\telsif letter == \"i\"\n\t\t\tmessage[index] = \"k\"\n\t\telsif\
    \ letter == \"o\"\n\t\t\tmessage[index] = \"q\"\n\t\telsif letter == \"u\"\n\t\
    \t\tmessage[index] = \"y\"\n\t\telsif letter == \"A\"\n\t\t\tmessage[index] =\
    \ \"C\"\n\t\telsif letter == \"E\"\n\t\t\tmessage[index] = \"G\"\n\t\telsif letter\
    \ == \"I\"\n\t\t\tmessage[index] = \"K\"\n\t\telsif letter == \"O\"\n\t\t\tmessage[index]\
    \ = \"Q\"\n\t\telsif letter == \"U\"\n\t\t\tmessage[index] = \"Y\"\n\t\tend\n\t\
    end\n\tmessage.join(\"\")\nend", "  # TODO: your code here\nend", "  message.chars.map\
    \ do |char|\n    if char =~ /[aeiou]/i\n      char = char.next.next\n    else\n\
    \      char.swapcase\n    end\n  end.join\nend", "  # TODO: Implement this method\n\
    end", "  vowels = \"aeiou\"\n  message.downcase.tr(vowels, vowels[2..-1] + vowels[0..1]).tr(\"\
    a-z\", \"A-Z\")\nend", "  message.downcase.tr('a-z', 'cdefghijklmnopqrstuvwxyzab')\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  message.split(\"\").map\
    \ do |letter|\n    if letter == letter.upcase\n      letter.downcase\n    elsif\
    \ letter == letter.downcase\n      letter.upcase\n    elsif vowels.include?(letter)\n\
    \      vowels[(vowels.index(letter) + 2) % 5]\n    else\n      letter\n    end\n\
    \  end.join(\"\")\nend", "  vowels = \"aeiou\"\n  message.chars.map do |char|\n\
    \    if vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      char = vowels[(index + 2) % 5]\n    end\n    char == char.upcase ? char.downcase\
    \ : char.upcase\n  end.join\nend", "  message.downcase.tr('aeiou', 'eioau')\n\
    end", "  message.chars.map do |char|\n    if char =~ /[aeiou]/i\n      char =\
    \ char.next.next\n    else\n      char.swapcase\n    end\n  end.join\nend", " \
    \ message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n      char = char.next.next\n\
    \    else\n      char = char.swapcase\n    end\n  end.join\nend", "  message.downcase.tr(\"\
    aeiou\", \"eioau\")\nend", "  message.split(\"\").map do |char|\n    if char.match(/[aeiou]/i)\n\
    \      char = char.next.next\n    else\n      char = char.swapcase\n    end\n\
    \  end.join\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      index = (index + 2) % 5\n      encoded_message += vowels[index].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  encoded_message =\
    \ \"\"\n  message.each_char do |char|\n    if char.match(/[a-z]/i)\n      encoded_message\
    \ << encode_letter(char)\n    else\n      encoded_message << char\n    end\n \
    \ end\n  encoded_message\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\n\
    end", "  # Your code here\nend", "  # your code here\nend", "  message.chars.map\
    \ do |char|\n    if char.match(/[aeiou]/i)\n      char.next.next\n    else\n \
    \     char.swapcase\n    end\n  end.join\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n\
    \      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\nend",
  "\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tmessage.split(\"\").map do |char|\n\
    \t\tif vowels.include?(char.downcase)\n\t\t\tvowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n\t\telse\n\t\t\tchar.swapcase\n\t\tend\n\tend.join(\"\")\nend", " \
    \ message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  message.downcase.gsub(/[aeiou]/, 'a' => 'c', 'e' => 'g',\
    \ 'i' => 'k', 'o' => 'q', 'u' => 's').upcase\nend", "  message.split(\"\").map\
    \ do |letter|\n    if letter.match(/[aeiou]/i)\n      letter = letter.next.next\n\
    \    else\n      letter = letter.swapcase\n    end\n  end.join(\"\")\nend", " \
    \ message.chars.map do |char|\n    if char =~ /[aeiou]/i\n      char.next.next\n\
    \    else\n      char.swapcase\n    end\n  end.join\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  vowels = %w(a e i o u)\n  message.downcase.chars.map do |char|\n\
    \    if vowels.include?(char)\n      vowels[(vowels.index(char) + 2) % 5]\n  \
    \  else\n      char\n    end\n  end.join.upcase\nend", "  message.chars.map do\
    \ |char|\n    if char =~ /[aeiou]/i\n      if char == 'u'\n        'a'\n     \
    \ elsif char == 'U'\n        'A'\n      else\n        char.next.next\n      end\n\
    \    else\n      char\n    end\n  end.join\nend", "  vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  # TODO: implement this method\nend", "  message.downcase.tr(\"aeiou\"\
    , \"eioau\")\nend", "  message.downcase.tr(\"aeiou\", \"eioau\")\nend", "  # TODO\n\
    end", "  message.chars.map do |char|\n    if char =~ /[aeiou]/i\n      char =\
    \ char.next.next\n    else\n      char.swapcase\n    end\n  end.join\nend", " \
    \ message.downcase.tr('aeiou', 'eioua')\nend", "  vowels = \"aeiou\"\n  message.downcase.tr(vowels,\
    \ vowels[2..-1] + vowels[0..1]).tr(\"a-z\", \"A-Z\")\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  message.chars.map do |char|\n    if char\
    \ =~ /[aeiou]/i\n      char.next.next\n    else\n      char.swapcase\n    end\n\
    \  end.join\nend", "  message.downcase!\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.match(/[aeiou]/)\n      encoded_message << (char.ord\
    \ + 2).chr\n    else\n      encoded_message << char\n    end\n  end\n  encoded_message.upcase!\n\
    end", "  message.chars.map do |char|\n    if char.match(/[a-z]/i)\n      if char.match(/[aeiou]/i)\n\
    \        char.next.next\n      else\n        char.swapcase\n      end\n    else\n\
    \      char\n    end\n  end.join\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioau\")\nend", "  # TODO: Implement\
    \ this method\nend", "  vowels = \"aeiou\"\n  message.split(\"\").map do |letter|\n\
    \    if vowels.include?(letter.downcase)\n      index = vowels.index(letter.downcase)\n\
    \      index += 2\n      index = index % 5\n      letter = vowels[index]\n   \
    \ end\n    letter.swapcase\n  end.join(\"\")\nend", "  vowels = \"aeiou\"\n  message.downcase.chars.map\
    \ do |char|\n    if vowels.include?(char)\n      index = vowels.index(char)\n\
    \      vowels[(index + 2) % 5]\n    else\n      char.upcase\n    end\n  end.join\n\
    end", "  message.downcase.gsub(/[aeiou]/, 'a' => 'c', 'e' => 'g', 'i' => 'k',\
    \ 'o' => 'q', 'u' => 's').upcase\nend", "  message.downcase.tr(\"a-z\", \"cdefghijklmnopqrstuvwxyzab\"\
    )\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  message.split(\"\"\
    ).map do |letter|\n    if vowels.include?(letter.downcase)\n      if letter.downcase\
    \ == \"u\"\n        \"a\"\n      else\n        vowels[vowels.index(letter.downcase)\
    \ + 2]\n      end\n    else\n      letter.swapcase\n    end\n  end.join(\"\")\n\
    end", "  message.split(\"\").map do |char|\n    if char.match(/[a-z]/i)\n    \
    \  if char.match(/[aeiou]/i)\n        char = char.next.next\n      end\n     \
    \ char.swapcase\n    else\n      char\n    end\n  end.join\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  message.split(\"\").map do |char|\n    if\
    \ char =~ /[aeiou]/i\n      char = char.next.next\n    else\n      char = char.swapcase\n\
    \    end\n  end.join(\"\")\nend", "  message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n\
    \      char = char.next.next\n    else\n      char = char.swapcase\n    end\n\
    \  end.join\nend", "  message.split(\"\").map { |char| \n    if char.match(/[a-zA-Z]/)\n\
    \      if char.match(/[aeiou]/i)\n        char = char.next.next\n      else\n\
    \        char = char.next\n      end\n    end\n    char.swapcase\n  }.join(\"\"\
    )\nend", "  message.downcase.tr(\"aeiou\", \"eioau\")\nend", "  message.chars.map\
    \ do |char|\n    if char.match(/[aeiou]/i)\n      char = char.next.next\n    else\n\
    \      char = char.swapcase\n    end\n  end.join\nend", "  message.split('').map\
    \ do |char|\n    if char.match(/[a-z]/i)\n      if char.match(/[aeiou]/i)\n  \
    \      char = char.next.next\n      else\n        char = char.next\n      end\n\
    \    end\n    char.swapcase\n  end.join\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
