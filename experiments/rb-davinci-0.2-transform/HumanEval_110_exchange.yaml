name: HumanEval_110_exchange
language: rb
prompt: "# In this problem, you will implement a function that takes two lists of\
  \ numbers,\n# and determines whether it is possible to perform an exchange of elements\n\
  # between them to make lst1 a list of only even numbers.\n# There is no limit on\
  \ the number of exchanged elements between lst1 and lst2.\n# If it is possible to\
  \ exchange elements between the lst1 and lst2 to make\n# all the elements of lst1\
  \ to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>>\
  \ exchange.call([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange.call([1,\
  \ 2, 3, 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input lists will be\
  \ non-empty.\ndef exchange(lst1, lst2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_exchange\n\
  \    candidate = method(:exchange)\n    assert_equal(\"YES\", candidate.call([1,\
  \ 2, 3, 4], [1, 2, 3, 4]))\n    assert_equal(\"NO\", candidate.call([1, 2, 3, 4],\
  \ [1, 5, 3, 4]))\n    assert_equal(\"YES\", candidate.call([1, 2, 3, 4], [2, 1,\
  \ 4, 3]))\n    assert_equal(\"YES\", candidate.call([5, 7, 3], [2, 6, 4]))\n   \
  \ assert_equal(\"NO\", candidate.call([5, 7, 3], [2, 6, 3]))\n    assert_equal(\"\
  NO\", candidate.call([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]))\n    assert_equal(\"\
  YES\", candidate.call([100, 200], [200, 200]))\n  end\nend\n"
completions: ["  lst1.each do |x|\n    if x.odd?\n      lst2.each do |y|\n       \
    \ if y.even?\n          return \"YES\"\n        end\n      end\n    end\n  end\n\
    \  return \"NO\"\nend", "  # TODO: implement this method\nend", "  lst1.each do\
    \ |e|\n    if e.odd?\n      lst2.each do |f|\n        if f.even?\n          lst1[lst1.index(e)]\
    \ = f\n          lst2[lst2.index(f)] = e\n          return \"YES\"\n        end\n\
    \      end\n    end\n  end\n  \"NO\"\nend", "  lst1.each do |x|\n    if x.odd?\n\
    \      lst2.each do |y|\n        if y.even?\n          return \"YES\"\n      \
    \  end\n      end\n    end\n  end\n  return \"NO\"\nend", "  # Write your code\
    \ here.\nend", "  lst1.each do |num|\n    if num.odd?\n      lst2.each do |num2|\n\
    \        if num2.even?\n          return \"YES\"\n        end\n      end\n   \
    \ end\n  end\n  return \"NO\"\nend", "  # Your code here\nend", "  lst1.each do\
    \ |x|\n    if x.odd?\n      lst2.each do |y|\n        if y.even?\n          return\
    \ \"YES\"\n        end\n      end\n    end\n  end\n  return \"NO\"\nend", "  lst1.each\
    \ do |num|\n    if num.odd?\n      lst2.each do |num2|\n        if num2.even?\n\
    \          return \"YES\"\n        end\n      end\n    end\n  end\n  return \"\
    NO\"\nend", "  lst1.each do |num|\n    if num.odd?\n      lst2.each do |num2|\n\
    \        if num2.even?\n          return \"YES\"\n        end\n      end\n   \
    \ end\n  end\n  return \"NO\"\nend", "  lst1.each do |num|\n    if num.odd?\n\
    \      lst2.each do |num2|\n        if num2.even?\n          return \"YES\"\n\
    \        end\n      end\n    end\n  end\n  return \"NO\"\nend", "  # Your code\
    \ here\nend", "  lst1.each do |x|\n    lst2.each do |y|\n      if (x + y) % 2\
    \ == 0\n        return \"YES\"\n      end\n    end\n  end\n  return \"NO\"\nend",
  "  lst1.each do |n|\n    if n.odd?\n      lst2.each do |m|\n        if m.even?\n\
    \          return \"YES\"\n        end\n      end\n    end\n  end\n  return \"\
    NO\"\nend", "  lst1.each do |x|\n    lst2.each do |y|\n      if x % 2 == 1 &&\
    \ y % 2 == 0\n        return \"YES\"\n      end\n    end\n  end\n  return \"NO\"\
    \nend", "  lst1.each do |x|\n    if x.odd?\n      lst2.each do |y|\n        if\
    \ y.even?\n          return \"YES\"\n        end\n      end\n    end\n  end\n\
    \  return \"NO\"\nend", "  lst1.each do |x|\n    if x.odd?\n      lst2.each do\
    \ |y|\n        if y.even?\n          lst1.delete(x)\n          lst2.delete(y)\n\
    \          lst1.push(y)\n          lst2.push(x)\n          break\n        end\n\
    \      end\n    end\n  end\n  lst1.all?(&:even?) ? \"YES\" : \"NO\"\nend", " \
    \ lst1.each do |x|\n    if x.odd?\n      lst2.each do |y|\n        if y.even?\n\
    \          return \"YES\"\n        end\n      end\n    end\n  end\n  return \"\
    NO\"\nend", "  lst1.each do |num|\n    if num.odd?\n      lst2.each do |num2|\n\
    \        if num2.even?\n          return \"YES\"\n        end\n      end\n   \
    \ end\n  end\n  return \"NO\"\nend", "  lst1.each do |x|\n    if x.odd?\n    \
    \  lst2.each do |y|\n        if y.even?\n          return \"YES\"\n        end\n\
    \      end\n    end\n  end\n  return \"NO\"\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
