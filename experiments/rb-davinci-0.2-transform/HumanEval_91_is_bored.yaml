name: HumanEval_91_is_bored
language: rb
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored.call(\"Hello\
  \ world\")\n# 0\n# >>> is_bored.call(\"The sky is blue. The sun is shining. I love\
  \ this weather\")\n# 1\ndef is_bored(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n\
  \    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"Hello world\"\
  ))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n    assert_equal(1,\
  \ candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"bIt\"))\n\
  \    assert_equal(2, candidate.call(\"I feel good today. I will be productive. will\
  \ kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for a walk\"\
  ))\n  end\nend\n"
completions: ["  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend", "  s.scan(/I/).count\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select { |sentence|\
    \ sentence.strip.start_with?(\"I\") }.count\nend", "  s.split(/[.?!]/).count {\
    \ |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select\
    \ { |sentence| sentence.start_with?(\"I\") }.count\nend", "  s.split(/[.?!]/).select\
    \ { |s| s.strip.start_with?(\"I\") }.count\nend", "  s.split(/[.?!]/).count {\
    \ |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select\
    \ { |sentence| sentence.strip.start_with?(\"I\") }.count\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select\
    \ { |sentence| sentence.strip.start_with?('I') }.count\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select\
    \ { |s| s.strip.start_with?(\"I\") }.size\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
