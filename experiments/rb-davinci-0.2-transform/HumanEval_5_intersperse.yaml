name: HumanEval_5_intersperse
language: rb
prompt: "# Insert a number 'delimeter' between every two consecutive elements of input\
  \ list `numbers'\n# >>> intersperse.call([], 4)\n# []\n# >>> intersperse.call([1,\
  \ 2, 3], 4)\n# [1, 4, 2, 4, 3]\ndef intersperse(numbers, delimeter)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersperse\n\
  \    candidate = method(:intersperse)\n    assert_equal([], candidate.call([], 7))\n\
  \    assert_equal([5, 8, 6, 8, 3, 8, 2], candidate.call([5, 6, 3, 2], 8))\n    assert_equal([2,\
  \ 2, 2, 2, 2], candidate.call([2, 2, 2], 2))\n  end\nend\n"
completions: ["  numbers.inject([]) do |result, number|\n    result << number\n  \
    \  result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\
    \ unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |acc, n|\n    acc << n\n    acc << delimeter unless acc.length == numbers.length\
    \ * 2 - 1\n    acc\n  end\nend", "  numbers.inject([]) do |result, number|\n \
    \   result << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.each_with_object([]) do |number, result|\n\
    \    result << number\n    result << delimeter unless result.last == numbers.last\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.map.with_index { |n, i| i.zero? ? n : [delimeter, n] }.flatten\nend",
  "  numbers.each_with_object([]) do |number, result|\n    result << number\n    result\
    \ << delimeter unless number == numbers.last\n  end\nend", "  numbers.inject([])\
    \ { |result, number| result.push(number, delimeter) }.pop\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter\n  end.pop\nend", " \
    \ numbers.inject([]) do |result, number|\n    result << number\n    result <<\
    \ delimeter unless result.length == numbers.length * 2 - 1\n    result\n  end\n\
    end", "  numbers.inject([]) { |result, number| result << number << delimeter }[0..-2]\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n \
    \   result << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
