name: HumanEval_40_triples_sum_to_zero
language: rb
prompt: "# triples_sum_to_zero takes a list of integers as an input.\n# it returns\
  \ True if there are three distinct elements in the list that\n# sum to zero, and\
  \ False otherwise.\n# >>> triples_sum_to_zero.call([1, 3, 5, 0])\n# false\n# >>>\
  \ triples_sum_to_zero.call([1, 3, -2, 1])\n# true\n# >>> triples_sum_to_zero.call([1,\
  \ 2, 3, 7])\n# false\n# >>> triples_sum_to_zero.call([2, 4, -5, 3, 9, 7])\n# true\n\
  # >>> triples_sum_to_zero.call([1])\n# false\ndef triples_sum_to_zero(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triples_sum_to_zero\n\
  \    candidate = method(:triples_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
  \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, 5, -1]))\n    assert_equal(true,\
  \ candidate.call([1, 3, -2, 1]))\n    assert_equal(false, candidate.call([1, 2,\
  \ 3, 7]))\n    assert_equal(false, candidate.call([1, 2, 5, 7]))\n    assert_equal(true,\
  \ candidate.call([2, 4, -5, 3, 9, 7]))\n    assert_equal(false, candidate.call([1]))\n\
  \    assert_equal(false, candidate.call([1, 3, 5, -100]))\n    assert_equal(false,\
  \ candidate.call([100, 3, 5, -100]))\n  end\nend\n"
completions: ["  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n  \
    \    l.each_with_index do |z, k|\n        if i != j && i != k && j != k\n    \
    \      return true if x + y + z == 0\n        end\n      end\n    end\n  end\n\
    \  false\nend", "  if l.length < 3\n    return false\n  end\n  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      l.each_with_index do |z, k|\n\
    \        if i != j && i != k && j != k\n          if x + y + z == 0\n        \
    \    return true\n          end\n        end\n      end\n    end\n  end\n  return\
    \ false\nend", "  l.each_with_index do |e1, i|\n    l.each_with_index do |e2,\
    \ j|\n      l.each_with_index do |e3, k|\n        if i != j && i != k && j !=\
    \ k\n          if e1 + e2 + e3 == 0\n            return true\n          end\n\
    \        end\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      l.each_with_index do |z, k|\n\
    \        if x + y + z == 0 && i != j && i != k && j != k\n          return true\n\
    \        end\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      l.each_with_index do |z, k|\n\
    \        if i != j && i != k && j != k\n          return true if x + y + z ==\
    \ 0\n        end\n      end\n    end\n  end\n  false\nend", "  l.each_with_index\
    \ do |num1, i|\n    l.each_with_index do |num2, j|\n      l.each_with_index do\
    \ |num3, k|\n        if i != j && i != k && j != k\n          if num1 + num2 +\
    \ num3 == 0\n            return true\n          end\n        end\n      end\n\
    \    end\n  end\n  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      l.each_with_index do |z, k|\n        if i != j && i != k &&\
    \ j != k\n          return true if x + y + z == 0\n        end\n      end\n  \
    \  end\n  end\n  false\nend", "  l.each_with_index do |num, index|\n    l.each_with_index\
    \ do |num2, index2|\n      l.each_with_index do |num3, index3|\n        if num\
    \ + num2 + num3 == 0 && index != index2 && index != index3 && index2 != index3\n\
    \          return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      l.each_with_index\
    \ do |z, k|\n        if i != j && i != k && j != k\n          return true if x\
    \ + y + z == 0\n        end\n      end\n    end\n  end\n  false\nend", "  l.each_with_index\
    \ do |n, i|\n    l.each_with_index do |m, j|\n      l.each_with_index do |o, k|\n\
    \        if i != j && i != k && j != k\n          return true if n + m + o ==\
    \ 0\n        end\n      end\n    end\n  end\n  false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      l.each_with_index do |z, k|\n\
    \        if i != j && i != k && j != k\n          return true if x + y + z ==\
    \ 0\n        end\n      end\n    end\n  end\n  false\nend", "  return false if\
    \ l.length < 3\n  l.each_with_index do |a, i|\n    l.each_with_index do |b, j|\n\
    \      l.each_with_index do |c, k|\n        if i != j && i != k && j != k\n  \
    \        return true if a + b + c == 0\n        end\n      end\n    end\n  end\n\
    \  false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n\
    \      l.each_with_index do |z, k|\n        if i != j && i != k && j != k\n  \
    \        if x + y + z == 0\n            return true\n          end\n        end\n\
    \      end\n    end\n  end\n  return false\nend", "  l.each_with_index do |a,\
    \ i|\n    l.each_with_index do |b, j|\n      l.each_with_index do |c, k|\n   \
    \     if i != j && i != k && j != k\n          if a + b + c == 0\n           \
    \ return true\n          end\n        end\n      end\n    end\n  end\n  return\
    \ false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n\
    \      l.each_with_index do |z, k|\n        if x + y + z == 0 && i != j && i !=\
    \ k && j != k\n          return true\n        end\n      end\n    end\n  end\n\
    \  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do\
    \ |y, j|\n      l.each_with_index do |z, k|\n        if i != j && i != k && j\
    \ != k\n          return true if x + y + z == 0\n        end\n      end\n    end\n\
    \  end\n  false\nend", "  l.each_with_index do |e, i|\n    l.each_with_index do\
    \ |f, j|\n      l.each_with_index do |g, k|\n        if i != j && i != k && j\
    \ != k\n          if e + f + g == 0\n            return true\n          end\n\
    \        end\n      end\n    end\n  end\n  return false\nend", "  # YOUR CODE\
    \ HERE\nend", "  l.each_with_index do |num1, i|\n    l.each_with_index do |num2,\
    \ j|\n      l.each_with_index do |num3, k|\n        if num1 + num2 + num3 == 0\
    \ && i != j && j != k && i != k\n          return true\n        end\n      end\n\
    \    end\n  end\n  return false\nend", "  l.each_with_index do |e, i|\n    l.each_with_index\
    \ do |f, j|\n      l.each_with_index do |g, k|\n        if i != j && i != k &&\
    \ j != k\n          if e + f + g == 0\n            return true\n          end\n\
    \        end\n      end\n    end\n  end\n  return false\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
