name: HumanEval_160_do_algebra
language: rb
prompt: "# Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n# the second list is a list of integers. Use the two given lists\
  \ to build the algebric \n# expression and return the evaluation of this expression.\n\
  # The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication\
  \ ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+',\
  \ '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n\
  # Note:\n# The length of operator list is equal to the length of operand list minus\
  \ one.\n# Operand is a list of of non-negative integers.\n# Operator list has at\
  \ least one operator, and operand list has at least two operands.\ndef do_algebra(operator,\
  \ operand)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
  \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\"\
  , \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\"\
  , \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
  \ 3, 4]))\n  end\nend\n"
completions: ["  result = operand[0]\n  i = 0\n  while i < operator.length\n    case\
    \ operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n    \
    \  result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n    when\
    \ '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  result = operand[0]\n  for i in 0..operator.length-1\n    if operator[i] == '+'\n\
    \      result += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n  end\n  return result\nend", "  #your code\
    \ here\nend", "  #your code here\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  operand.each_with_index.inject(0) do |result, (operand, index)|\n    result.send(operator[index],\
    \ operand)\n  end\nend", "  #your code here\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend", "  result = operand[0]\n  operator.each_with_index do |op, i|\n\
    \    result = result.send(op, operand[i+1])\n  end\n  result\nend", "  result\
    \ = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while\
    \ i < operator.length\n    if operator[i] == '+'\n      result += operand[i+1]\n\
    \    elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  result = operand[0]\n  operand.each_with_index do |num, i|\n    next if i ==\
    \ 0\n    result = result.send(operator[i-1], num)\n  end\n  result\nend", "  result\
    \ = operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n    when\
    \ '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  operand.each_with_index.inject(0) do |result, (operand, index)|\n    result.send(operator[index],\
    \ operand)\n  end\nend", "  #your code here\n  result = operand[0]\n  i = 0\n\
    \  while i < operator.length\n    if operator[i] == '+'\n      result += operand[i+1]\n\
    \    elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n \
    \   case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  operand.each_with_index.reduce(0) do\
    \ |result, (operand, index)|\n    result.send(operator[index], operand)\n  end\n\
    end", "    #your code here\n    result = operand[0]\n    for i in 0..operator.length-1\n\
    \        case operator[i]\n        when \"+\"\n            result += operand[i+1]\n\
    \        when \"-\"\n            result -= operand[i+1]\n        when \"*\"\n\
    \            result *= operand[i+1]\n        when \"//\"\n            result /=\
    \ operand[i+1]\n        when \"**\"\n            result **= operand[i+1]\n   \
    \     end\n    end\n    return result\nend", "  operator.each_with_index.inject(operand[0])\
    \ do |result, (op, i)|\n    result.send(op, operand[i + 1])\n  end\nend", "  result\
    \ = operand[0]\n  operator.each_with_index do |op, i|\n    case op\n    when '+'\n\
    \      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n  \
    \  when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "    result = operand[0]\n    for i in 0..operator.length-1\n        case operator[i]\n\
    \        when '+'\n            result += operand[i+1]\n        when '-'\n    \
    \        result -= operand[i+1]\n        when '*'\n            result *= operand[i+1]\n\
    \        when '//'\n            result /= operand[i+1]\n        when '**'\n  \
    \          result **= operand[i+1]\n        end\n    end\n    return result\n\
    end", "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result\
    \ = result.send(op, operand[i+1])\n  end\n  result\nend", "  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend", "  # your code here\nend", "  # your code here\nend",
  "  #your code here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  operand.each_with_index\
    \ do |num, index|\n    next if index == 0\n    result = result.send(operator[index\
    \ - 1], num)\n  end\n  result\nend", "  operand.each_with_index.inject(0) do |result,\
    \ (operand, index)|\n    result = result.send(operator[index], operand)\n  end\n\
    end", "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result\
    \ = result.send(op, operand[i+1])\n  end\n  result\nend", "  #your code here\n\
    end", "  #your code here\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  operand.each_with_index.inject(0) do\
    \ |result, (operand, index)|\n    result.send(operator[index], operand)\n  end\n\
    end", "  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  # your code here\n  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    if operator[i] == \"+\"\n      result += operand[i+1]\n    elsif operator[i]\
    \ == \"-\"\n      result -= operand[i+1]\n    elsif operator[i] == \"*\"\n   \
    \   result *= operand[i+1]\n    elsif operator[i] == \"//\"\n      result /= operand[i+1]\n\
    \    elsif operator[i] == \"**\"\n      result **= operand[i+1]\n    end\n   \
    \ i += 1\n  end\n  result\nend", "  # your code here\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when \"+\"\n\
    \      result += operand[i+1]\n    when \"-\"\n      result -= operand[i+1]\n\
    \    when \"*\"\n      result *= operand[i+1]\n    when \"//\"\n      result /=\
    \ operand[i+1]\n    when \"**\"\n      result **= operand[i+1]\n    end\n    i\
    \ += 1\n  end\n  result\nend", "    result = operand[0]\n    i = 0\n    while\
    \ i < operator.length\n        if operator[i] == '+'\n            result += operand[i+1]\n\
    \        elsif operator[i] == '-'\n            result -= operand[i+1]\n      \
    \  elsif operator[i] == '*'\n            result *= operand[i+1]\n        elsif\
    \ operator[i] == '//'\n            result = result.floor / operand[i+1]\n    \
    \    elsif operator[i] == '**'\n            result **= operand[i+1]\n        end\n\
    \        i += 1\n    end\n    return result\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend", "  result = operand[0]\n  operator.each_with_index do |op, i|\n \
    \   case op\n    when '+'\n      result += operand[i+1]\n    when '-'\n      result\
    \ -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n    when '//'\n\
    \      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i <\
    \ operator.length\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n\
    \    when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == '+'\n          \
    \  result += operand[i+1]\n        elsif operator[i] == '-'\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == '*'\n            result *= operand[i+1]\n\
    \        elsif operator[i] == '//'\n            result /= operand[i+1]\n     \
    \   elsif operator[i] == '**'\n            result **= operand[i+1]\n        end\n\
    \    end\n    return result\nend", "  #your code here\nend", "  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "    # your code here\n    result = operand[0]\n    for i in 0..operator.length-1\n\
    \        case operator[i]\n        when \"+\"\n            result += operand[i+1]\n\
    \        when \"-\"\n            result -= operand[i+1]\n        when \"*\"\n\
    \            result *= operand[i+1]\n        when \"//\"\n            result =\
    \ result.to_f / operand[i+1]\n        when \"**\"\n            result **= operand[i+1]\n\
    \        end\n    end\n    return result\nend", "  #your code here\nend", "  result\
    \ = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  #your code here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    if operator[i] == '+'\n      result += operand[i+1]\n    elsif operator[i]\
    \ == '-'\n      result -= operand[i+1]\n    elsif operator[i] == '*'\n      result\
    \ *= operand[i+1]\n    elsif operator[i] == '//'\n      result /= operand[i+1]\n\
    \    elsif operator[i] == '**'\n      result **= operand[i+1]\n    end\n    i\
    \ += 1\n  end\n  result\nend", "  #your code here\nend", "    result = operand[0]\n\
    \    operator.each_with_index do |op, i|\n        result = result.send(op, operand[i+1])\n\
    \    end\n    result\nend", "  operator.each_with_index.inject(operand[0]) do\
    \ |result, (op, i)|\n    result.send(op, operand[i + 1])\n  end\nend", "  result\
    \ = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    case op\n    when '+'\n      result += operand[i+1]\n    when\
    \ '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n  end\n  result\nend", "  #your code here\nend", "  operand.each_with_index.inject(0)\
    \ do |acc, (operand, index)|\n    acc.send(operator[index], operand)\n  end\n\
    end", "  # your code here\n  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    if operator[i] == \"+\"\n      result += operand[i+1]\n    elsif operator[i]\
    \ == \"-\"\n      result -= operand[i+1]\n    elsif operator[i] == \"*\"\n   \
    \   result *= operand[i+1]\n    elsif operator[i] == \"//\"\n      result /= operand[i+1]\n\
    \    elsif operator[i] == \"**\"\n      result **= operand[i+1]\n    end\n   \
    \ i += 1\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i <\
    \ operator.length\n    if operator[i] == '+'\n      result += operand[i+1]\n \
    \   elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  #your code here\nend", "  #your\
    \ code here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    if operator[i] == '+'\n      result += operand[i+1]\n    elsif operator[i]\
    \ == '-'\n      result -= operand[i+1]\n    elsif operator[i] == '*'\n      result\
    \ *= operand[i+1]\n    elsif operator[i] == '//'\n      result /= operand[i+1]\n\
    \    elsif operator[i] == '**'\n      result **= operand[i+1]\n    end\n    i\
    \ += 1\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    if operator[i] == '+'\n      result += operand[i+1]\n    elsif operator[i]\
    \ == '-'\n      result -= operand[i+1]\n    elsif operator[i] == '*'\n      result\
    \ *= operand[i+1]\n    elsif operator[i] == '//'\n      result /= operand[i+1]\n\
    \    elsif operator[i] == '**'\n      result **= operand[i+1]\n    end\n    i\
    \ += 1\n  end\n  result\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n\
    \    if operator[i] == '+'\n      result += operand[i+1]\n    elsif operator[i]\
    \ == '-'\n      result -= operand[i+1]\n    elsif operator[i] == '*'\n      result\
    \ *= operand[i+1]\n    elsif operator[i] == '//'\n      result /= operand[i+1]\n\
    \    elsif operator[i] == '**'\n      result **= operand[i+1]\n    end\n  end\n\
    \  return result\nend", "  # your code here\nend", "    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == '+'\n   \
    \         result += operand[i+1]\n        elsif operator[i] == '-'\n         \
    \   result -= operand[i+1]\n        elsif operator[i] == '*'\n            result\
    \ *= operand[i+1]\n        elsif operator[i] == '//'\n            result /= operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result **= operand[i+1]\n    \
    \    end\n        i += 1\n    end\n    return result\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend", "  # your code here\n  result = operand[0]\n  for i in 0..operator.length-1\n\
    \    case operator[i]\n    when \"+\"\n      result += operand[i+1]\n    when\
    \ \"-\"\n      result -= operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n\
    \    when \"//\"\n      result /= operand[i+1]\n    when \"**\"\n      result\
    \ **= operand[i+1]\n    end\n  end\n  return result\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n  end\n  return result\nend",
  "  operand.each_with_index.inject(0) do |result, (operand, index)|\n    result.send(operator[index],\
    \ operand)\n  end\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    if operator[i] == '+'\n      result += operand[i+1]\n    elsif operator[i]\
    \ == '-'\n      result -= operand[i+1]\n    elsif operator[i] == '*'\n      result\
    \ *= operand[i+1]\n    elsif operator[i] == '//'\n      result /= operand[i+1]\n\
    \    elsif operator[i] == '**'\n      result **= operand[i+1]\n    end\n    i\
    \ += 1\n  end\n  result\nend", "    result = operand[0]\n    i = 0\n    while\
    \ i < operator.length\n        if operator[i] == '+'\n            result += operand[i+1]\n\
    \        elsif operator[i] == '-'\n            result -= operand[i+1]\n      \
    \  elsif operator[i] == '*'\n            result *= operand[i+1]\n        elsif\
    \ operator[i] == '//'\n            result /= operand[i+1]\n        elsif operator[i]\
    \ == '**'\n            result **= operand[i+1]\n        end\n        i += 1\n\
    \    end\n    return result\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    case op\n   \
    \ when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "    result = operand[0]\n    for i in 0..operator.length-1\n        if\
    \ operator[i] == \"+\"\n            result += operand[i+1]\n        elsif operator[i]\
    \ == \"-\"\n            result -= operand[i+1]\n        elsif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elsif operator[i] == \"//\"\n\
    \            result /= operand[i+1]\n        elsif operator[i] == \"**\"\n   \
    \         result **= operand[i+1]\n        end\n    end\n    return result\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  operand.each_with_index.inject(0) do\
    \ |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend", "  #your code here\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while\
    \ i < operator.length\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n\
    \    when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result = result.to_f / operand[i+1]\n    when '**'\n   \
    \   result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "  result\
    \ = operand[0]\n  (1...operand.length).each do |i|\n    result = result.send(operator[i-1],\
    \ operand[i])\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while\
    \ i < operator.length\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n\
    \    when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "  operator.each_with_index.inject(operand[0])\
    \ do |result, (op, i)|\n    result.send(op, operand[i + 1])\n  end\nend", "  result\
    \ = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n \
    \   when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result\
    \ = result.send(op, operand[i+1])\n  end\n  result\nend", "  # your code here\n\
    \  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when \"+\"\n      result += operand[i+1]\n    when \"-\"\n      result -=\
    \ operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n    when \"//\"\n\
    \      result /= operand[i+1]\n    when \"**\"\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  #your code here\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n \
    \   case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n\
    \  while i < operator.length\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  operator.each_with_index { |op, i| result = result.send(op,\
    \ operand[i+1]) }\n  result\nend", "  result = operand[0]\n  i = 0\n  while i\
    \ < operator.length\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n\
    \    when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "  #your code here\n\
    end", "  #your code here\nend", "  #your code here\nend", "  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result\
    \ = result.send(op, operand[i+1])\n  end\n  result\nend", "  #your code here\n\
    end", "  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  #your code here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  (1...operand.length).each\
    \ do |i|\n    result = result.send(operator[i-1], operand[i])\n  end\n  result\n\
    end", "  result = operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n\
    \    when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  #your code here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  #your code here\nend", "  result\
    \ = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n \
    \   when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  operand.each_with_index.inject(0) do |result, (value, index)|\n    result.send(operator[index],\
    \ value)\n  end\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  operand.each_with_index.inject(0) do |result, (op, index)|\n    result\
    \ = result.send(operator[index], op)\n  end\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while\
    \ i < operator.length\n    if operator[i] == '+'\n      result += operand[i+1]\n\
    \    elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n\
    \    when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "    result = operand[0]\n    i = 0\n    while i < operator.length\n        case\
    \ operator[i]\n        when '+'\n            result += operand[i+1]\n        when\
    \ '-'\n            result -= operand[i+1]\n        when '*'\n            result\
    \ *= operand[i+1]\n        when '//'\n            result /= operand[i+1]\n   \
    \     when '**'\n            result **= operand[i+1]\n        end\n        i +=\
    \ 1\n    end\n    result\nend", "  result = operand[0]\n  (1...operand.length).each\
    \ do |i|\n    result = result.send(operator[i-1], operand[i])\n  end\n  result\n\
    end", "  result = operand[0]\n  for i in 0..operator.length-1\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n  end\n  return result\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  #your code here\nend", "  result =\
    \ operand[0]\n  (1...operand.length).each do |i|\n    result = result.send(operator[i-1],\
    \ operand[i])\n  end\n  result\nend", "    result = operand[0]\n    i = 0\n  \
    \  while i < operator.length\n        case operator[i]\n        when '+'\n   \
    \         result += operand[i+1]\n        when '-'\n            result -= operand[i+1]\n\
    \        when '*'\n            result *= operand[i+1]\n        when '//'\n   \
    \         result /= operand[i+1]\n        when '**'\n            result **= operand[i+1]\n\
    \        end\n        i += 1\n    end\n    result\nend", "  #your code here\n\
    end", "  result = operand[0]\n  operator.each_with_index do |op, i|\n    case\
    \ op\n    when '+'\n      result += operand[i+1]\n    when '-'\n      result -=\
    \ operand[i+1]\n    when '*'\n      result *= operand[i+1]\n    when '//'\n  \
    \    result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n  \
    \  end\n  end\n  result\nend", "    #your code here\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == \"+\"\n \
    \           result += operand[i+1]\n        elsif operator[i] == \"-\"\n     \
    \       result -= operand[i+1]\n        elsif operator[i] == \"*\"\n         \
    \   result *= operand[i+1]\n        elsif operator[i] == \"//\"\n            result\
    \ /= operand[i+1]\n        elsif operator[i] == \"**\"\n            result **=\
    \ operand[i+1]\n        end\n        i += 1\n    end\n    return result\nend",
  "  #your code here\nend", "    result = operand[0]\n    for i in 0..operator.length-1\n\
    \        if operator[i] == '+'\n            result += operand[i+1]\n        elsif\
    \ operator[i] == '-'\n            result -= operand[i+1]\n        elsif operator[i]\
    \ == '*'\n            result *= operand[i+1]\n        elsif operator[i] == '//'\n\
    \            result /= operand[i+1]\n        elsif operator[i] == '**'\n     \
    \       result **= operand[i+1]\n        end\n    end\n    return result\nend",
  "  #your code here\nend", "  #your code here\nend", "  result = operand[0]\n  operand.each_with_index\
    \ do |num, index|\n    next if index == 0\n    result = result.send(operator[index\
    \ - 1], num)\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while\
    \ i < operator.length\n    if operator[i] == '+'\n      result += operand[i+1]\n\
    \    elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  for i in\
    \ 0..operator.length-1\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n\
    \    when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n  end\n  result\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n  \
    \  case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend", "  result = operand[0]\n  operator.each_with_index do |op, i|\n \
    \   result = result.send(op, operand[i+1])\n  end\n  result\nend", "  result =\
    \ operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n    when\
    \ '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  result = operand[0]\n  i = 0\n  while i < operator.length\n    result = result.send(operator[i],\
    \ operand[i+1])\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n \
    \ operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  operator.each_with_index.reduce(operand[0]) do |result, (op, index)|\n    result.send(op,\
    \ operand[index + 1])\n  end\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while\
    \ i < operator.length\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n\
    \    when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n \
    \   if operator[i] == '+'\n      result += operand[i+1]\n    elsif operator[i]\
    \ == '-'\n      result -= operand[i+1]\n    elsif operator[i] == '*'\n      result\
    \ *= operand[i+1]\n    elsif operator[i] == '//'\n      result /= operand[i+1]\n\
    \    elsif operator[i] == '**'\n      result **= operand[i+1]\n    end\n    i\
    \ += 1\n  end\n  result\nend", "  # your code here\nend", "  #your code here\n\
    \  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result\
    \ = result.send(op, operand[i+1])\n  end\n  result\nend", "  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    result = result.send(operator[i], operand[i+1])\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  operator.each_with_index do |op, i|\n    case\
    \ op\n    when '+'\n      result += operand[i+1]\n    when '-'\n      result -=\
    \ operand[i+1]\n    when '*'\n      result *= operand[i+1]\n    when '//'\n  \
    \    result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n  \
    \  end\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  for i in\
    \ 0..operator.length-1\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n\
    \    when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n  end\n  result\nend", "  result = operand[0]\n  i =\
    \ 0\n  while i < operator.length\n    if operator[i] == '+'\n      result += operand[i+1]\n\
    \    elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n\
    \  while i < operator.length\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result\
    \ = result.send(op, operand[i+1])\n  end\n  result\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend", "  #your code here\n  result = operand[0]\n  operand.each_with_index\
    \ do |num, index|\n    if index == 0\n      next\n    end\n    result = result.send(operator[index-1],\
    \ num)\n  end\n  result\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "    result = operand[0]\n    for i in 0..operator.length-1\n        if operator[i]\
    \ == '+'\n            result += operand[i+1]\n        elsif operator[i] == '-'\n\
    \            result -= operand[i+1]\n        elsif operator[i] == '*'\n      \
    \      result *= operand[i+1]\n        elsif operator[i] == '//'\n           \
    \ result /= operand[i+1]\n        elsif operator[i] == '**'\n            result\
    \ **= operand[i+1]\n        end\n    end\n    return result\nend", "  result =\
    \ operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  #your code here\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == \"+\"\n      result\
    \ += operand[i+1]\n    elsif operator[i] == \"-\"\n      result -= operand[i+1]\n\
    \    elsif operator[i] == \"*\"\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == \"//\"\n      result /= operand[i+1]\n    elsif operator[i] == \"**\"\n \
    \     result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", " \
    \ #your code here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n\
    \  while i < operator.length\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "    result = operand[0]\n    for i in 0..operator.length-1\n        result\
    \ = result.send(operator[i], operand[i+1])\n    end\n    return result\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while\
    \ i < operator.length\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n\
    \    when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "  #your code here\n\
    end", "  operand.each_with_index.inject(0) do |result, (operand, index)|\n   \
    \ result.send(operator[index], operand)\n  end\nend", "  #your code here\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  #your code here\nend", "  result =\
    \ operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n\
    \      result += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "  result\
    \ = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n \
    \   when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  # your code here\n  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    if operator[i] == '+'\n      result += operand[i+1]\n    elsif operator[i]\
    \ == '-'\n      result -= operand[i+1]\n    elsif operator[i] == '*'\n      result\
    \ *= operand[i+1]\n    elsif operator[i] == '//'\n      result /= operand[i+1]\n\
    \    elsif operator[i] == '**'\n      result **= operand[i+1]\n    end\n    i\
    \ += 1\n  end\n  result\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend", "  operand.each_with_index.inject(0) do |result,\
    \ (operand, index)|\n    result = result.send(operator[index], operand)\n  end\n\
    end", "  result = operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n\
    \    when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  operand.each_with_index.inject(0) do |result, (operand, index)|\n    result.send(operator[index],\
    \ operand)\n  end\nend", "  operand.each_with_index.reduce(0) do |result, (operand,\
    \ index)|\n    result.send(operator[index], operand)\n  end\nend", "  result =\
    \ operand[0]\n  operator.each_with_index do |op, i|\n    case op\n    when '+'\n\
    \      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n  \
    \  when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  #your code here\nend", "  # your code\
    \ here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
