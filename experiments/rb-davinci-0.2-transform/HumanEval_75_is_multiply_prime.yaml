name: HumanEval_75_is_multiply_prime
language: rb
prompt: "# Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100.\
  \ \n# Example:\n# >>> is_multiply_prime.call(30)\n# true\n# 30 = 2 * 3 * 5\ndef\
  \ is_multiply_prime(a)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_multiply_prime\n\
  \    candidate = method(:is_multiply_prime)\n    assert_equal(false, candidate.call(5))\n\
  \    assert_equal(true, candidate.call(30))\n    assert_equal(true, candidate.call(8))\n\
  \    assert_equal(false, candidate.call(10))\n    assert_equal(true, candidate.call(125))\n\
  \    assert_equal(true, candidate.call(105))\n    assert_equal(false, candidate.call(126))\n\
  \    assert_equal(false, candidate.call(729))\n    assert_equal(false, candidate.call(891))\n\
  \    assert_equal(true, candidate.call(1001))\n  end\nend\n"
completions: ["  primes = []\n  (2..a).each do |i|\n    primes << i if is_prime?(i)\n\
    \  end\n  primes.each do |i|\n    primes.each do |j|\n      primes.each do |k|\n\
    \        return true if i * j * k == a\n      end\n    end\n  end\n  false\nend",
  "  prime_numbers = []\n  (2..a).each do |i|\n    prime_numbers << i if is_prime?(i)\n\
    \  end\n  prime_numbers.each do |i|\n    if a % i == 0\n      a = a / i\n    \
    \  if is_prime?(a)\n        return true\n      end\n    end\n  end\n  false\n\
    end", "  return false if a < 6\n  (2..a).each do |i|\n    (2..a).each do |j|\n\
    \      (2..a).each do |k|\n        return true if i * j * k == a\n      end\n\
    \    end\n  end\n  false\nend", "  (2..a).each do |i|\n    (2..a).each do |j|\n\
    \      (2..a).each do |k|\n        return true if i * j * k == a\n      end\n\
    \    end\n  end\n  false\nend", "  (2..a).each do |i|\n    if a % i == 0\n   \
    \   a = a / i\n      if a == 1\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  primes = []\n  (2..a).each do |i|\n    primes << i if\
    \ is_prime?(i)\n  end\n  primes.each do |i|\n    primes.each do |j|\n      primes.each\
    \ do |k|\n        return true if i * j * k == a\n      end\n    end\n  end\n \
    \ false\nend", "  primes = []\n  (2..a).each do |i|\n    primes << i if is_prime(i)\n\
    \  end\n  primes.each do |i|\n    primes.each do |j|\n      primes.each do |k|\n\
    \        return true if i * j * k == a\n      end\n    end\n  end\n  false\nend",
  "  primes = []\n  (2..a).each do |i|\n    primes << i if (2..i-1).all? { |j| i %\
    \ j != 0 }\n  end\n  primes.each do |i|\n    primes.each do |j|\n      primes.each\
    \ do |k|\n        return true if i * j * k == a\n      end\n    end\n  end\n \
    \ false\nend", "  primes = []\n  (2..a).each do |i|\n    primes << i if is_prime?(i)\n\
    \  end\n  primes.each do |i|\n    primes.each do |j|\n      primes.each do |k|\n\
    \        return true if i * j * k == a\n      end\n    end\n  end\n  false\nend",
  "  primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97]\n  primes.each do |i|\n    primes.each do |j|\n\
    \      primes.each do |k|\n        return true if a == i * j * k\n      end\n\
    \    end\n  end\n  false\nend", "  return false if a < 6\n  primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n  primes.each do |p|\n    if a % p == 0\n      return true if is_multiply_prime(a\
    \ / p)\n    end\n  end\n  false\nend", "  primes = []\n  (2..a).each do |n|\n\
    \    primes << n if (2..n-1).all? { |i| n % i != 0 }\n  end\n  primes.each do\
    \ |p|\n    primes.each do |q|\n      primes.each do |r|\n        return true if\
    \ p * q * r == a\n      end\n    end\n  end\n  false\nend", "  (1..a).each do\
    \ |i|\n    (i..a).each do |j|\n      (j..a).each do |k|\n        return true if\
    \ i * j * k == a && is_prime(i) && is_prime(j) && is_prime(k)\n      end\n   \
    \ end\n  end\n  false\nend", "  primes = []\n  (2..a).each do |i|\n    primes\
    \ << i if is_prime?(i)\n  end\n  primes.each do |i|\n    primes.each do |j|\n\
    \      primes.each do |k|\n        return true if i * j * k == a\n      end\n\
    \    end\n  end\n  false\nend", "  primes = []\n  (2..a).each do |i|\n    if is_prime?(i)\n\
    \      primes << i\n    end\n  end\n  primes.each do |i|\n    primes.each do |j|\n\
    \      primes.each do |k|\n        if i * j * k == a\n          return true\n\
    \        end\n      end\n    end\n  end\n  return false\nend", "  require 'prime'\n\
    \  prime_numbers = Prime.take_while {|p| p < a }\n  prime_numbers.each do |p|\n\
    \    if a % p == 0\n      a = a / p\n      if a == 1\n        return true\n  \
    \    end\n    end\n  end\n  return false\nend", "  primes = []\n  (2..a).each\
    \ do |i|\n    primes << i if is_prime?(i)\n  end\n  primes.each do |i|\n    primes.each\
    \ do |j|\n      primes.each do |k|\n        return true if i * j * k == a\n  \
    \    end\n    end\n  end\n  false\nend", "  return false if a < 6\n  primes =\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n  primes.each do |prime|\n    if a % prime == 0\n     \
    \ return true if is_multiply_prime(a / prime)\n    end\n  end\n  false\nend",
  "  (2..a).each do |i|\n    if a % i == 0\n      a = a / i\n      if a == 1\n   \
    \     return true\n      end\n    end\n  end\n  return false\nend", "  return\
    \ false if a < 6\n  primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  primes.each do |prime|\n\
    \    return true if a % prime == 0 && is_multiply_prime(a / prime)\n  end\n  false\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
