language: rb
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmputohjb4d\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmputohjb4d.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.01139034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.79 tests/s, 87.79 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    return\
    \ [x, i] if x.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih6_qac2\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpih6_qac2.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009171963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.03 tests/s, 109.03 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo84txkvw

    Started

    .

    Finished in 0.001086256 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    920.59 tests/s, 7364.75 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_arr = arr.select\
    \ { |num| num.even? }\n  return [] if even_arr.empty?\n  even_arr.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxxewqin9\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpxxewqin9.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009689403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.21 tests/s, 103.21 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_arr = arr.select\
    \ { |num| num.even? }\n  return [] if even_arr.empty?\n  even_arr.min\n  even_arr.each_with_index\
    \ do |num, i|\n    return [num, i] if num == even_arr.min\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp08s14o_d\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp08s14o_d.rb:40:in `test_pluck'\n \
    \    37:   def test_pluck\n     38:     candidate = method(:pluck)\n     39: \
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n  => 40:     assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n     41:     assert_equal([], candidate.call([]))\n\
    \     42:     assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     43:\
    \     assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n<[2, 1]> expected\
    \ but was\n<[2, 0]>\n\ndiff:\n? [2, 1]\n?     0 \n?     ? \n===============================================================================\n\
    \nFinished in 0.008909442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.24 tests/s, 224.48 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_arr = arr.select { |num| num.even?\
    \ }\n  even_arr.empty? ? [] : [even_arr.min, arr.index(even_arr.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvbvf1uk8

    Started

    .

    Finished in 0.000915311 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1092.52 tests/s, 8740.20 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3tq874pn

    Started

    .

    Finished in 0.000955999 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1046.03 tests/s, 8368.21 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |num, index|\n \
    \   return [num, index] if num.even?\n  end\n  []\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5e3ppib_\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp5e3ppib_.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.01139039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.79 tests/s, 87.79 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_numbers = arr.select { |x| x.even?\
    \ }\n  return [] if even_numbers.empty?\n  even_numbers.min\n  even_numbers.each\
    \ do |x|\n    if x == even_numbers.min\n      return [x, arr.index(x)]\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp47c7nzy2

    Started

    .

    Finished in 0.000942379 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1061.14 tests/s, 8489.15 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n  [evens.first,\
    \ arr.index(evens.first)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp15ill39e

    Started

    .

    Finished in 0.000963015 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1038.41 tests/s, 8307.24 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo84txkvw

    Started

    .

    Finished in 0.001086256 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    920.59 tests/s, 7364.75 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwy0xwqmz

    Started

    .

    Finished in 0.000927024 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1078.72 tests/s, 8629.77 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_nums =\
    \ arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n  even_nums.min\n\
    \  [even_nums.min, arr.index(even_nums.min)]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n\
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4xt8yxo

    Started

    .

    Finished in 0.001068217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    936.14 tests/s, 7489.12 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    if x.even?\n\
    \      return [x, i]\n    end\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9vcmc956\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp9vcmc956.rb:38:in `test_pluck'\n \
    \    35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_pluck\n\
    \     37:     candidate = method(:pluck)\n  => 38:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     39:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 40:     assert_equal([], candidate.call([]))\n     41:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.0096611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.51 tests/s, 103.51 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |num| num.even? }\n  return [] if evens.empty?\n  evens.sort!\n  [evens.first,\
    \ arr.index(evens.first)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpj770g0ra

    Started

    .

    Finished in 0.000568028 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1760.48 tests/s, 14083.81 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_arr = arr.select\
    \ { |x| x.even? }\n  return [] if even_arr.empty?\n  even_arr.min\n  even_arr.each_with_index\
    \ do |x, i|\n    return [x, i] if x == even_arr.min\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpikdez0hq\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpikdez0hq.rb:40:in `test_pluck'\n \
    \    37:   def test_pluck\n     38:     candidate = method(:pluck)\n     39: \
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n  => 40:     assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n     41:     assert_equal([], candidate.call([]))\n\
    \     42:     assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     43:\
    \     assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n<[2, 1]> expected\
    \ but was\n<[2, 0]>\n\ndiff:\n? [2, 1]\n?     0 \n?     ? \n===============================================================================\n\
    \nFinished in 0.007657043 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.60 tests/s, 261.20 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_numbers = arr.select { |num| num.even?\
    \ }\n  return [] if even_numbers.empty?\n  even_numbers.min\n  [even_numbers.min,\
    \ arr.index(even_numbers.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6cdonsvt

    Started

    .

    Finished in 0.000881128 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1134.91 tests/s, 9079.27 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |n, i|\n    return\
    \ [n, i] if n.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkfu0odpo\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpkfu0odpo.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.01289051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.58 tests/s, 77.58 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_arr = arr.select\
    \ { |num| num.even? }\n  return [] if even_arr.empty?\n  even_arr.min\n  [even_arr.min,\
    \ arr.index(even_arr.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpsz0p5uto

    Started

    .

    Finished in 0.000794936 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1257.96 tests/s, 10063.70 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x } || []\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n   \
    \ assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1], candidate.call([1,\
    \ 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0, 1],\
    \ candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoom48q6u

    Started

    .

    Finished in 0.000577995 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1730.12 tests/s, 13840.95 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.select(&:even?).min_by { |x| [x, arr.index(x)]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsx0b8u1o\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpsx0b8u1o.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007688808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.06 tests/s, 130.06 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    return\
    \ [x, i] if x.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih6_qac2\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpih6_qac2.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009171963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.03 tests/s, 109.03 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmputohjb4d\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmputohjb4d.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.01139034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.79 tests/s, 87.79 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphxh9wu78\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmphxh9wu78.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.012203236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.95 tests/s, 81.95 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |e, i|\n    return\
    \ [e, i] if e.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4anlawzq\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4anlawzq.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.008691985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.05 tests/s, 115.05 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    if x.even?\n\
    \      return [x, i]\n    end\n  end\n  return []\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp73e4ymmx\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp73e4ymmx.rb:38:in `test_pluck'\n \
    \    35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_pluck\n\
    \     37:     candidate = method(:pluck)\n  => 38:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     39:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 40:     assert_equal([], candidate.call([]))\n     41:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.011150234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.68 tests/s, 89.68 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |num, index|\n \
    \   return [num, index] if num.even?\n  end\n  []\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5e3ppib_\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp5e3ppib_.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.01139039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.79 tests/s, 87.79 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |v, i|\n    return\
    \ [v, i] if v.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxiey_xhm\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpxiey_xhm.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.010919446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.58 tests/s, 91.58 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc3l4wi4t\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpc3l4wi4t.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010505429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.19 tests/s, 285.57 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  return [] if even_nums.empty?\n  even_nums.min\n  even_nums.each_with_index\
    \ do |num, idx|\n    return [num, idx] if num == even_nums.min\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaj6mrvc2\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpaj6mrvc2.rb:39:in `test_pluck'\n \
    \    36:   def test_pluck\n     37:     candidate = method(:pluck)\n     38: \
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n  => 39:     assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n     40:     assert_equal([], candidate.call([]))\n\
    \     41:     assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     42:\
    \     assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n<[2, 1]> expected\
    \ but was\n<[2, 0]>\n\ndiff:\n? [2, 1]\n?     0 \n?     ? \n===============================================================================\n\
    \nFinished in 0.010438821 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.80 tests/s, 191.59 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, i| [x, i] } || []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqb7x2_hh

    Started

    .

    Finished in 0.000840833 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1189.30 tests/s, 9514.37 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo84txkvw

    Started

    .

    Finished in 0.001086256 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    920.59 tests/s, 7364.75 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_numbers\
    \ = arr.select { |num| num.even? }\n  return [] if even_numbers.empty?\n  even_numbers.min\
    \ == even_numbers.max ? [even_numbers.min, arr.index(even_numbers.min)] : [even_numbers.min,\
    \ arr.index(even_numbers.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpow3c284s

    Started

    .

    Finished in 0.000837998 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1193.32 tests/s, 9546.56 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x } || []\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n   \
    \ assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1], candidate.call([1,\
    \ 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0, 1],\
    \ candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoom48q6u

    Started

    .

    Finished in 0.000577995 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1730.12 tests/s, 13840.95 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3tq874pn

    Started

    .

    Finished in 0.000955999 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1046.03 tests/s, 8368.21 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.select(&:even?).min_by { |x| [x, arr.index(x)]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsx0b8u1o\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpsx0b8u1o.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007688808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.06 tests/s, 130.06 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo84txkvw

    Started

    .

    Finished in 0.001086256 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    920.59 tests/s, 7364.75 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_nums =\
    \ arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n  even_nums.min\n\
    \  even_nums.each_with_index do |num, idx|\n    if num == even_nums.min\n    \
    \  return [num, idx]\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3r0g_683\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp3r0g_683.rb:42:in `test_pluck'\n \
    \    39:   def test_pluck\n     40:     candidate = method(:pluck)\n     41: \
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n  => 42:     assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n     43:     assert_equal([], candidate.call([]))\n\
    \     44:     assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     45:\
    \     assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n<[2, 1]> expected\
    \ but was\n<[2, 0]>\n\ndiff:\n? [2, 1]\n?     0 \n?     ? \n===============================================================================\n\
    \nFinished in 0.010170465 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.32 tests/s, 196.65 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.min_by { |x, _i| x.even?\
    \ ? x : Float::INFINITY }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcrgzhrlz\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpcrgzhrlz.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008024132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.62 tests/s, 373.87 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    if x.even?\n\
    \      return [x, i]\n    end\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9vcmc956\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp9vcmc956.rb:38:in `test_pluck'\n \
    \    35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_pluck\n\
    \     37:     candidate = method(:pluck)\n  => 38:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     39:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 40:     assert_equal([], candidate.call([]))\n     41:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.0096611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.51 tests/s, 103.51 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnx2jqjja

    Started

    .

    Finished in 0.000816731 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1224.39 tests/s, 9795.15 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |val, idx|\n   \
    \ return [val, idx] if val.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n\
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpanxjsmf7\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpanxjsmf7.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.010221232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.84 tests/s, 97.84 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |i| i.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvlgd3sba

    Started

    .

    Finished in 0.000742463 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1346.87 tests/s, 10774.95 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz2v24_nm

    Started

    .

    Finished in 0.000775045 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1290.25 tests/s, 10321.98 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.select(&:even?).min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2kcbb25u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp2kcbb25u.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009661799 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.50 tests/s, 103.50 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |num, index|\n \
    \   if num.even?\n      return [num, index]\n    end\n  end\n  []\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpj22dwevx\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpj22dwevx.rb:38:in `test_pluck'\n \
    \    35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_pluck\n\
    \     37:     candidate = method(:pluck)\n  => 38:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     39:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 40:     assert_equal([], candidate.call([]))\n     41:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.007484472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.61 tests/s, 133.61 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpv8d7sxyn

    Started

    .

    Finished in 0.000780174 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1281.77 tests/s, 10254.12 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_arr = arr.select\
    \ { |num| num.even? }\n  return [] if even_arr.empty?\n  even_arr.min\n  [even_arr.min,\
    \ arr.index(even_arr.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpsz0p5uto

    Started

    .

    Finished in 0.000794936 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1257.96 tests/s, 10063.70 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  return [] if even_nums.empty?\n  even_nums.min\n  even_nums.each_with_index\
    \ do |num, index|\n    return [num, index] if num == even_nums.min\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_y87d_ko\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp_y87d_ko.rb:39:in `test_pluck'\n \
    \    36:   def test_pluck\n     37:     candidate = method(:pluck)\n     38: \
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n  => 39:     assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n     40:     assert_equal([], candidate.call([]))\n\
    \     41:     assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     42:\
    \     assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n<[2, 1]> expected\
    \ but was\n<[2, 0]>\n\ndiff:\n? [2, 1]\n?     0 \n?     ? \n===============================================================================\n\
    \nFinished in 0.007380791 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.49 tests/s, 270.97 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_numbers\
    \ = arr.select { |num| num.even? }\n  return [] if even_numbers.empty?\n  even_numbers.min\n\
    \  [even_numbers.min, arr.index(even_numbers.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpllw6ul3c

    Started

    .

    Finished in 0.000456192 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2192.06 tests/s, 17536.48 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_numbers = arr.select { |num| num.even?\
    \ }\n  even_numbers.empty? ? [] : [even_numbers.min, arr.index(even_numbers.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbzokhfwe

    Started

    .

    Finished in 0.00050749 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1970.48 tests/s, 15763.86 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc3l4wi4t\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpc3l4wi4t.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010505429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.19 tests/s, 285.57 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphxh9wu78\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmphxh9wu78.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.012203236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.95 tests/s, 81.95 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphxh9wu78\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmphxh9wu78.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.012203236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.95 tests/s, 81.95 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo84txkvw

    Started

    .

    Finished in 0.001086256 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    920.59 tests/s, 7364.75 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc3l4wi4t\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpc3l4wi4t.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010505429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.19 tests/s, 285.57 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.min_by { |x, _| x.even?\
    \ ? x : Float::INFINITY }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmps_stoxbv\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmps_stoxbv.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006345903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.58 tests/s, 472.75 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    if x.even?\n\
    \      return [x, i]\n    end\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9vcmc956\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp9vcmc956.rb:38:in `test_pluck'\n \
    \    35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_pluck\n\
    \     37:     candidate = method(:pluck)\n  => 38:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     39:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 40:     assert_equal([], candidate.call([]))\n     41:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.0096611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.51 tests/s, 103.51 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_arr = arr.select { |n| n.even? }\n\
    \  even_arr.empty? ? [] : [even_arr.min, arr.index(even_arr.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpou2qpitj

    Started

    .

    Finished in 0.000647934 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1543.37 tests/s, 12346.94 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo84txkvw

    Started

    .

    Finished in 0.001086256 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    920.59 tests/s, 7364.75 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo1mu1gci

    Started

    .

    Finished in 0.000504046 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1983.95 tests/s, 15871.57 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    return\
    \ [x, i] if x.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih6_qac2\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpih6_qac2.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009171963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.03 tests/s, 109.03 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  return [] if evens.empty?\n  evens.min\n  arr.index(evens.min)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_kknjtyv\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp_kknjtyv.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<1>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.006596281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.60 tests/s, 151.60 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |e, i|\n    return\
    \ [e, i] if e.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4anlawzq\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4anlawzq.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.008691985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.05 tests/s, 115.05 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.select(&:even?).min_by { |e| [arr.index(e),\
    \ e] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcqh3fehk\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpcqh3fehk.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<4>\n===============================================================================\n\
    \nFinished in 0.007244182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.04 tests/s, 138.04 assertions/s\n"
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4lu097_k\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4lu097_k.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007071518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.41 tests/s, 141.41 assertions/s\n"
  timestamp: 1659798524
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |val, idx|\n   \
    \ return [val, idx] if val.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n\
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpanxjsmf7\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpanxjsmf7.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.010221232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.84 tests/s, 97.84 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |v, i|\n    return\
    \ [v, i] if v.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxiey_xhm\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpxiey_xhm.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.010919446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.58 tests/s, 91.58 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.select { |x| x.even? }.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7915gr7f\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp7915gr7f.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009902685 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.98 tests/s, 100.98 assertions/s\n"
  timestamp: 1659798524
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  return [] if even_nums.empty?\n  even_nums.min\n  even_nums.each_with_index\
    \ do |num, idx|\n    return [num, idx] if num == even_nums.min\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaj6mrvc2\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpaj6mrvc2.rb:39:in `test_pluck'\n \
    \    36:   def test_pluck\n     37:     candidate = method(:pluck)\n     38: \
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n  => 39:     assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n     40:     assert_equal([], candidate.call([]))\n\
    \     41:     assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     42:\
    \     assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n<[2, 1]> expected\
    \ but was\n<[2, 0]>\n\ndiff:\n? [2, 1]\n?     0 \n?     ? \n===============================================================================\n\
    \nFinished in 0.010438821 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.80 tests/s, 191.59 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo84txkvw

    Started

    .

    Finished in 0.001086256 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    920.59 tests/s, 7364.75 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |e, i|\n    return\
    \ [e, i] if e.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4anlawzq\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4anlawzq.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.008691985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.05 tests/s, 115.05 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |e, i|\n    return\
    \ [e, i] if e.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4anlawzq\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4anlawzq.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.008691985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.05 tests/s, 115.05 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min == evens.max ? [evens.min,\
    \ arr.index(evens.min)] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptbww1a88

    Started

    .

    Finished in 0.00079474 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1258.27 tests/s, 10066.19 assertions/s

    '
  stdout: ''
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo84txkvw

    Started

    .

    Finished in 0.001086256 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    920.59 tests/s, 7364.75 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_numbers\
    \ = arr.select { |num| num.even? }\n  return [] if even_numbers.empty?\n  even_numbers.min\n\
    \  [even_numbers.min, arr.index(even_numbers.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpllw6ul3c

    Started

    .

    Finished in 0.000456192 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2192.06 tests/s, 17536.48 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |e, i|\n    return\
    \ [e, i] if e.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4anlawzq\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4anlawzq.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.008691985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.05 tests/s, 115.05 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4lu097_k\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4lu097_k.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007071518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.41 tests/s, 141.41 assertions/s\n"
  timestamp: 1659798524
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |num, index|\n \
    \   if num.even?\n      return [num, index]\n    end\n  end\n  []\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpj22dwevx\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpj22dwevx.rb:38:in `test_pluck'\n \
    \    35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_pluck\n\
    \     37:     candidate = method(:pluck)\n  => 38:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     39:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 40:     assert_equal([], candidate.call([]))\n     41:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.007484472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.61 tests/s, 133.61 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_numbers = arr.select { |num| num.even?\
    \ }\n  return [] if even_numbers.empty?\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmp2hlmsonz.rb:91: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmp2hlmsonz.rb:103: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc3l4wi4t\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpc3l4wi4t.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010505429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.19 tests/s, 285.57 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo84txkvw

    Started

    .

    Finished in 0.001086256 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    920.59 tests/s, 7364.75 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    return\
    \ [x, i] if x.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih6_qac2\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpih6_qac2.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009171963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.03 tests/s, 109.03 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc3l4wi4t\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpc3l4wi4t.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010505429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.19 tests/s, 285.57 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    if x.even?\n\
    \      return [x, i]\n    end\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9vcmc956\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp9vcmc956.rb:38:in `test_pluck'\n \
    \    35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_pluck\n\
    \     37:     candidate = method(:pluck)\n  => 38:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     39:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 40:     assert_equal([], candidate.call([]))\n     41:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.0096611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.51 tests/s, 103.51 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc3l4wi4t\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpc3l4wi4t.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010505429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.19 tests/s, 285.57 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_numbers = arr.select { |x| x.even?\
    \ }\n  return [] if even_numbers.empty?\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpk431l_6o.rb:91: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpk431l_6o.rb:103: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    return\
    \ [x, i] if x.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih6_qac2\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpih6_qac2.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009171963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.03 tests/s, 109.03 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  arr.index(evens.min)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp82s6g0i4\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp82s6g0i4.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<1>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.010202082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.02 tests/s, 98.02 assertions/s\n"
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.min_by { |v, i| v.even?\
    \ ? v : Float::INFINITY }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5m7ny047\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp5m7ny047.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006364881 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.11 tests/s, 471.34 assertions/s\n"
  timestamp: 1659798524
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    return\
    \ [x, i] if x.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih6_qac2\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpih6_qac2.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009171963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.03 tests/s, 109.03 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_arr = arr.select { |num| num.even?\
    \ }\n  even_arr.empty? ? [] : [even_arr.min, arr.index(even_arr.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvbvf1uk8

    Started

    .

    Finished in 0.000915311 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1092.52 tests/s, 8740.20 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmputohjb4d\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmputohjb4d.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.01139034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.79 tests/s, 87.79 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |e, i|\n    return\
    \ [e, i] if e.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4anlawzq\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4anlawzq.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.008691985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.05 tests/s, 115.05 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzyv5dquy

    Started

    .

    Finished in 0.000727486 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1374.60 tests/s, 10996.78 assertions/s

    '
  stdout: ''
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_arr = arr.select { |num| num.even?\
    \ }\n  return [] if even_arr.empty?\n  even_arr.min\n  [even_arr.min, arr.index(even_arr.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoo43uel3

    Started

    .

    Finished in 0.000486476 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2055.60 tests/s, 16444.80 assertions/s

    '
  stdout: ''
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo84txkvw

    Started

    .

    Finished in 0.001086256 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    920.59 tests/s, 7364.75 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo1mu1gci

    Started

    .

    Finished in 0.000504046 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1983.95 tests/s, 15871.57 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwy0xwqmz

    Started

    .

    Finished in 0.000927024 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1078.72 tests/s, 8629.77 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |value, index|\n\
    \    if value.even?\n      return [value, index]\n    end\n  end\n  []\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpoqknpl8c\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpoqknpl8c.rb:38:in `test_pluck'\n \
    \    35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_pluck\n\
    \     37:     candidate = method(:pluck)\n  => 38:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     39:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 40:     assert_equal([], candidate.call([]))\n     41:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.008057937 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.10 tests/s, 124.10 assertions/s\n"
  timestamp: 1659798524
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.min\n  evens.index(evens.min)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptgxw4sno\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmptgxw4sno.rb:37:in `test_pluck'\n \
    \    34: class TestHumanEval < Test::Unit::TestCase\n     35:   def test_pluck\n\
    \     36:     candidate = method(:pluck)\n  => 37:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     38:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 39:     assert_equal([], candidate.call([]))\n     40:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<1>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.006352735 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.41 tests/s, 157.41 assertions/s\n"
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3tq874pn

    Started

    .

    Finished in 0.000955999 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1046.03 tests/s, 8368.21 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |num, index|\n \
    \   if num.even?\n      return [num, index]\n    end\n  end\n  []\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpj22dwevx\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpj22dwevx.rb:38:in `test_pluck'\n \
    \    35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_pluck\n\
    \     37:     candidate = method(:pluck)\n  => 38:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     39:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 40:     assert_equal([], candidate.call([]))\n     41:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.007484472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.61 tests/s, 133.61 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc3l4wi4t\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpc3l4wi4t.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010505429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.19 tests/s, 285.57 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc3l4wi4t\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpc3l4wi4t.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010505429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.19 tests/s, 285.57 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select(&:even?)\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplepts512

    Started

    .

    Finished in 0.000536144 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1865.17 tests/s, 14921.36 assertions/s

    '
  stdout: ''
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_numbers\
    \ = arr.select { |num| num.even? }\n  even_numbers.empty? ? [] : [even_numbers.min,\
    \ arr.index(even_numbers.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpktenwjso

    Started

    .

    Finished in 0.000760632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1314.70 tests/s, 10517.57 assertions/s

    '
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |n, i|\n    return\
    \ [n, i] if n.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkfu0odpo\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpkfu0odpo.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.01289051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.58 tests/s, 77.58 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpq0x4t_nc\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpq0x4t_nc.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006543851 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.82 tests/s, 152.82 assertions/s\n"
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_numbers = arr.select { |num| num.even?\
    \ }\n  even_numbers.empty? ? [] : [even_numbers.min, arr.index(even_numbers.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbzokhfwe

    Started

    .

    Finished in 0.00050749 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1970.48 tests/s, 15763.86 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc3l4wi4t\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpc3l4wi4t.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010505429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.19 tests/s, 285.57 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplzp87mxe

    Started

    .

    Finished in 0.000427404 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2339.71 tests/s, 18717.65 assertions/s

    '
  stdout: ''
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  return [] if even_nums.empty?\n  even_nums.min\n  even_nums.each_with_index\
    \ do |num, index|\n    return [num, index] if num == even_nums.min\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_y87d_ko\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp_y87d_ko.rb:39:in `test_pluck'\n \
    \    36:   def test_pluck\n     37:     candidate = method(:pluck)\n     38: \
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n  => 39:     assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n     40:     assert_equal([], candidate.call([]))\n\
    \     41:     assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     42:\
    \     assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n<[2, 1]> expected\
    \ but was\n<[2, 0]>\n\ndiff:\n? [2, 1]\n?     0 \n?     ? \n===============================================================================\n\
    \nFinished in 0.007380791 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.49 tests/s, 270.97 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |e| e.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3jevakj1

    Started

    .

    Finished in 0.00043272 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2310.96 tests/s, 18487.71 assertions/s

    '
  stdout: ''
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnx2jqjja

    Started

    .

    Finished in 0.000816731 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1224.39 tests/s, 9795.15 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4lu097_k\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4lu097_k.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007071518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.41 tests/s, 141.41 assertions/s\n"
  timestamp: 1659798524
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmputohjb4d\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmputohjb4d.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.01139034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.79 tests/s, 87.79 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphxh9wu78\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmphxh9wu78.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.012203236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.95 tests/s, 81.95 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.select(&:even?).min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2kcbb25u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp2kcbb25u.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009661799 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.50 tests/s, 103.50 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3tq874pn

    Started

    .

    Finished in 0.000955999 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1046.03 tests/s, 8368.21 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |num| num.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo84txkvw

    Started

    .

    Finished in 0.001086256 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    920.59 tests/s, 7364.75 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo1mu1gci

    Started

    .

    Finished in 0.000504046 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1983.95 tests/s, 15871.57 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    return\
    \ [x, i] if x.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih6_qac2\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpih6_qac2.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009171963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.03 tests/s, 109.03 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    return\
    \ [x, i] if x.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih6_qac2\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpih6_qac2.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009171963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.03 tests/s, 109.03 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3tq874pn

    Started

    .

    Finished in 0.000955999 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1046.03 tests/s, 8368.21 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_arr = arr.select\
    \ { |x| x.even? }\n  return [] if even_arr.empty?\n  even_arr.min\n  arr.index(even_arr.min)\n\
    \  [even_arr.min, arr.index(even_arr.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpj_vezw7o

    Started

    .

    Finished in 0.000432252 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2313.47 tests/s, 18507.72 assertions/s

    '
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.select(&:even?).min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2kcbb25u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp2kcbb25u.rb:33:in `test_pluck'\n \
    \    30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_pluck\n\
    \     32:     candidate = method(:pluck)\n  => 33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.009661799 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.50 tests/s, 103.50 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |n, i| n.even?\
    \ }.min_by { |n, i| n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg85ey2_9\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpg85ey2_9.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00628303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.16 tests/s, 477.48 assertions/s\n"
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    if x.even?\n\
    \      return [x, i]\n    end\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9vcmc956\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp9vcmc956.rb:38:in `test_pluck'\n \
    \    35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_pluck\n\
    \     37:     candidate = method(:pluck)\n  => 38:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     39:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 40:     assert_equal([], candidate.call([]))\n     41:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.0096611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.51 tests/s, 103.51 assertions/s\n"
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n    if x.even?\n\
    \      return [x, i]\n    end\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9vcmc956\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp9vcmc956.rb:38:in `test_pluck'\n \
    \    35: class TestHumanEval < Test::Unit::TestCase\n     36:   def test_pluck\n\
    \     37:     candidate = method(:pluck)\n  => 38:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     39:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 40:     assert_equal([], candidate.call([]))\n     41:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.0096611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.51 tests/s, 103.51 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_numbers = arr.select { |num| num.even?\
    \ }\n  return [] if even_numbers.empty?\n  even_numbers.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzgdw00sq\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpzgdw00sq.rb:35:in `test_pluck'\n \
    \    32: class TestHumanEval < Test::Unit::TestCase\n     33:   def test_pluck\n\
    \     34:     candidate = method(:pluck)\n  => 35:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     36:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 37:     assert_equal([], candidate.call([]))\n     38:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.006376852 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.82 tests/s, 156.82 assertions/s\n"
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3tq874pn

    Started

    .

    Finished in 0.000955999 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1046.03 tests/s, 8368.21 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnx2jqjja

    Started

    .

    Finished in 0.000816731 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1224.39 tests/s, 9795.15 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3tq874pn

    Started

    .

    Finished in 0.000955999 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1046.03 tests/s, 8368.21 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_numbers\
    \ = arr.select { |num| num.even? }\n  return [] if even_numbers.empty?\n  even_numbers.min\n\
    \  [even_numbers.min, arr.index(even_numbers.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpllw6ul3c

    Started

    .

    Finished in 0.000456192 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2192.06 tests/s, 17536.48 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_arr = arr.select\
    \ { |n| n.even? }\n  return [] if even_arr.empty?\n  even_arr.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi4x48c3y\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpi4x48c3y.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.006291569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.94 tests/s, 158.94 assertions/s\n"
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_numbers = arr.select { |num| num.even?\
    \ }\n  even_numbers.empty? ? [] : [even_numbers.min, arr.index(even_numbers.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbzokhfwe

    Started

    .

    Finished in 0.00050749 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1970.48 tests/s, 15763.86 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzyv5dquy

    Started

    .

    Finished in 0.000727486 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1374.60 tests/s, 10996.78 assertions/s

    '
  stdout: ''
  timestamp: 1659798524
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphxh9wu78\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmphxh9wu78.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.012203236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.95 tests/s, 81.95 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo1mu1gci

    Started

    .

    Finished in 0.000504046 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1983.95 tests/s, 15871.57 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |e, i|\n    return\
    \ [e, i] if e.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4anlawzq\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4anlawzq.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.008691985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.05 tests/s, 115.05 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3tq874pn

    Started

    .

    Finished in 0.000955999 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1046.03 tests/s, 8368.21 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwy0xwqmz

    Started

    .

    Finished in 0.000927024 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1078.72 tests/s, 8629.77 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select(&:even?)\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplepts512

    Started

    .

    Finished in 0.000536144 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1865.17 tests/s, 14921.36 assertions/s

    '
  stdout: ''
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc3l4wi4t\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpc3l4wi4t.rb:35:in `test_pluck'\n \
    \    32:     candidate = method(:pluck)\n     33:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     34:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 35:     assert_equal([], candidate.call([]))\n     36:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     37:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     38:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010505429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.19 tests/s, 285.57 assertions/s\n"
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  even_nums = arr.select { |num| num.even?\
    \ }\n  return [] if even_nums.empty?\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpcn74ttlt.rb:91: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpcn74ttlt.rb:103: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzb6djfxq

    Started

    .

    Finished in 0.001249509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    800.31 tests/s, 6402.51 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4lu097_k\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4lu097_k.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007071518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.41 tests/s, 141.41 assertions/s\n"
  timestamp: 1659798524
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo1mu1gci

    Started

    .

    Finished in 0.000504046 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1983.95 tests/s, 15871.57 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_nums =\
    \ arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n  even_nums.min\n\
    \  [even_nums.min, arr.index(even_nums.min)]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n\
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4xt8yxo

    Started

    .

    Finished in 0.001068217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    936.14 tests/s, 7489.12 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_nums =\
    \ arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n  even_nums.min\n\
    \  [even_nums.min, arr.index(even_nums.min)]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n\
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy4xt8yxo

    Started

    .

    Finished in 0.001068217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    936.14 tests/s, 7489.12 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo1mu1gci

    Started

    .

    Finished in 0.000504046 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1983.95 tests/s, 15871.57 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuqywcsyh

    Started

    .

    Finished in 0.000825237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1211.77 tests/s, 9694.18 assertions/s

    '
  stdout: ''
  timestamp: 1659798523
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>>\
    \ pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example\
    \ 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n# so we will choose the first zero,\
    \ which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n\
    # * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4lu097_k\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4lu097_k.rb:36:in `test_pluck'\n \
    \    33: class TestHumanEval < Test::Unit::TestCase\n     34:   def test_pluck\n\
    \     35:     candidate = method(:pluck)\n  => 36:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     37:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 38:     assert_equal([], candidate.call([]))\n     39:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.007071518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.41 tests/s, 141.41 assertions/s\n"
  timestamp: 1659798524
