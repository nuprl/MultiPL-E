name: HumanEval_90_next_smallest
language: rb
prompt: "# You are given a list of integers.\n# Write a function next_smallest() that\
  \ returns the 2nd smallest element of the list.\n# Return None if there is no such\
  \ element.\n# >>> next_smallest.call([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest.call([5,\
  \ 1, 4, 3, 2])\n# 2\n# >>> next_smallest.call([])\n# nil\n# >>> next_smallest.call([1,\
  \ 1])\n# nil\ndef next_smallest(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest\n\
  \    candidate = method(:next_smallest)\n    assert_equal(2, candidate.call([1,\
  \ 2, 3, 4, 5]))\n    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))\n    assert_equal(nil,\
  \ candidate.call([]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(1,\
  \ candidate.call([1, 1, 1, 1, 0]))\n    assert_equal(nil, candidate.call([1, 1]))\n\
  \    assert_equal(-35, candidate.call([-35, 34, 12, -45]))\n  end\nend\n"
completions: ["  return nil if lst.length < 2\n  lst.sort.uniq[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  lst.sort!\n  lst.each_with_index do |num, i|\n    if lst[i + 1] != num\n\
    \      return lst[i + 1]\n    end\n  end\n  return nil\nend", "  return nil if\
    \ lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  return\
    \ nil if lst.length < 2\n  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend",
  "  return nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty? || lst.uniq.length == 1\n  lst.sort[1]\nend",
  "  lst.sort!\n  lst.each_with_index do |item, index|\n    if lst[index + 1] != item\n\
    \      return lst[index + 1]\n    end\n  end\n  return nil\nend", "  lst.sort!\n\
    \  lst.uniq!\n  lst.length > 1 ? lst[1] : nil\nend", "  lst.sort!\n  lst.uniq!\n\
    \  lst.length > 1 ? lst[1] : nil\nend", "  return nil if lst.empty? || lst.uniq.length\
    \ == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n  return nil if lst.uniq.size\
    \ == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n  lst.sort!\n  lst.each_with_index\
    \ do |n, i|\n    return lst[i + 1] if lst[i + 1] != n\n  end\n  nil\nend", " \
    \ lst.sort!\n  lst.uniq!\n  lst.length > 1 ? lst[1] : nil\nend", "  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst.length > 1 ? lst[1] : nil\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend",
  "  lst.sort!\n  lst.each_with_index do |e, i|\n    return lst[i+1] if lst[i+1] !=\
    \ e\n  end\n  nil\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
