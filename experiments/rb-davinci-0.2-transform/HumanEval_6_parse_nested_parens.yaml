name: HumanEval_6_parse_nested_parens
language: rb
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens.call(\"(()()) ((())) () ((())()())\"\
  )\n# [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
  \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
  (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
  () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
  ))\n  end\nend\n"
completions: ["  paren_string.split(\" \").map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_level, char|\n      if char == \"(\"\n        max_level += 1\n     \
    \ elsif char == \")\"\n        max_level -= 1\n      end\n      max_level\n  \
    \  end\n  end\nend", "  # TODO: Implement this function\nend", "  paren_string.split(\"\
    \ \").map { |paren_group| paren_group.scan(/\\(/).count }\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == \"(\"\n        max_nesting + 1\n      elsif char == \")\"\n\
    \        max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n\
    \  end\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_nesting, char|\n      case char\n      when '('\n        max_nesting\
    \ + 1\n      when ')'\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    end\n  end\nend", "  paren_string.split(' ').map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == '('\n\
    \        max_depth += 1\n      elsif char == ')'\n        max_depth -= 1\n   \
    \   end\n      max_depth\n    end\n  end\nend", "  paren_string.split(\" \").map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n    \
    \    max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth + 1\n      elsif char == \")\"\n  \
    \      max_depth - 1\n      else\n        max_depth\n      end\n    }\n  }\nend",
  "  paren_string.split(\" \").map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |acc, char|\n      if char == \"(\"\n        acc += 1\n      elsif char ==\
    \ \")\"\n        acc -= 1\n      end\n      acc\n    end\n  end\nend", "  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend", "  paren_string.split(\" \"\
    ).map { |paren_group|\n    paren_group.chars.reduce(0) { |max_level, char|\n \
    \     if char == \"(\"\n        max_level + 1\n      elsif char == \")\"\n   \
    \     max_level - 1\n      else\n        max_level\n      end\n    }\n  }\nend",
  "  paren_string.split(\" \").map { |group|\n    group.chars.reduce(0) { |max_level,\
    \ char|\n      if char == \"(\"\n        max_level + 1\n      elsif char == \"\
    )\"\n        max_level - 1\n      else\n        max_level\n      end\n    }\n\
    \  }\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_nesting, char|\n      if char == '('\n        max_nesting + 1\n    \
    \  elsif char == ')'\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    end\n  end\nend", "  paren_string.split(\" \").map { |paren_group|\n\
    \    paren_group.chars.reduce(0) { |max_nesting, char|\n      if char == \"(\"\
    \n        max_nesting + 1\n      elsif char == \")\"\n        max_nesting - 1\n\
    \      else\n        max_nesting\n      end\n    }\n  }\nend", "  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend", "  paren_string.split(' ').map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_level, char|\n      char == \"(\" ? max_level + 1 : max_level - 1\n \
    \   }\n  }\nend", "  paren_string.split(\" \").map { |paren_group|\n    max_depth\
    \ = 0\n    current_depth = 0\n    paren_group.each_char do |char|\n      if char\
    \ == \"(\"\n        current_depth += 1\n        max_depth = current_depth if current_depth\
    \ > max_depth\n      elsif char == \")\"\n        current_depth -= 1\n      end\n\
    \    end\n    max_depth\n  }\nend", "  paren_string.split.map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == '('\n\
    \        max_depth + 1\n      elsif char == ')'\n        max_depth - 1\n     \
    \ else\n        max_depth\n      end\n    end\n  end\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth + 1\n      elsif char == ')'\n        max_depth\
    \ - 1\n      else\n        max_depth\n      end\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n \
    \       max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend", "  paren_string.split(\" \"\
    ).map do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth + 1\n      elsif char == ')'\n        max_depth -\
    \ 1\n      else\n        max_depth\n      end\n    end\n  end\nend", "  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') - paren_group.count(')') }\nend",
  "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_level, char|\n      if char == '('\n        max_level += 1\n      elsif\
    \ char == ')'\n        max_level -= 1\n      end\n      max_level\n    end\n \
    \ end\nend", "  paren_string.split.map { |paren_group| paren_group.scan(/\\(/).size\
    \ }\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth + 1\n      elsif\
    \ char == ')'\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    end\n  end\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_nesting, char|\n      max_nesting += 1 if char == '('\n      max_nesting\
    \ -= 1 if char == ')'\n      max_nesting\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n \
    \       max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == \"(\"\n        max_level += 1\n      elsif char == \")\"\n \
    \       max_level -= 1\n      end\n      max_level\n    end\n  end\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth + 1\n      elsif char == ')'\n        max_depth\
    \ - 1\n      else\n        max_depth\n      end\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth + 1\n      elsif char == \")\"\n  \
    \      max_depth - 1\n      else\n        max_depth\n      end\n    }\n  }\nend",
  "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting,\
    \ char|\n      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n\
    \        max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n\
    \  end\nend", "  paren_string.split(\" \").map { |parens| parens.scan(/\\(/).count\
    \ }\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_nesting, char|\n      if char == '('\n        max_nesting + 1\n    \
    \  elsif char == ')'\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    end\n  end\nend", "  paren_string.split(\" \").map { |paren_group|\n\
    \    paren_group.chars.reduce(0) { |max_depth, char|\n      if char == \"(\"\n\
    \        max_depth + 1\n      elsif char == \")\"\n        max_depth - 1\n   \
    \   else\n        max_depth\n      end\n    }\n  }\nend", "  paren_string.split(\"\
    \ \").map { |paren_group|\n    paren_group.chars.reduce([0, 0]) { |(max_nesting,\
    \ current_nesting), char|\n      if char == \"(\"\n        [max_nesting, current_nesting\
    \ + 1]\n      elsif char == \")\"\n        [max_nesting, current_nesting - 1]\n\
    \      else\n        [max_nesting, current_nesting]\n      end\n    }.first\n\
    \  }\nend", "  paren_string.split.map { |parens| parens.chars.count('(') - parens.chars.count(')')\
    \ }\nend", "  paren_string.split(' ').map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_level, char|\n      if char == '('\n        max_level + 1\n      elsif\
    \ char == ')'\n        max_level - 1\n      else\n        max_level\n      end\n\
    \    }\n  }\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_nesting, char|\n      if char == '('\n        max_nesting + 1\n    \
    \  elsif char == ')'\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    end\n  end\nend", "  paren_string.split(\" \").map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == \"(\"\n\
    \        max_depth += 1\n      elsif char == \")\"\n        max_depth -= 1\n \
    \     end\n      max_depth\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -=\
    \ 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_nesting, char|\n      if char == \"(\"\n        max_nesting + 1\n   \
    \   elsif char == \")\"\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    }\n  }\nend", "  paren_string.split(' ').map { |paren_group|\n\
    \    paren_group.chars.reduce(0) { |max_level, char|\n      char == '(' ? max_level\
    \ + 1 : max_level - 1\n    }\n  }\nend", "  paren_string.split.map { |paren_group|\
    \ paren_group.count('(') }\nend", "  paren_string.split.map { |paren_group|\n\
    \    paren_group.chars.reduce(0) { |max_depth, char|\n      if char == '('\n \
    \       max_depth + 1\n      elsif char == ')'\n        max_depth - 1\n      else\n\
    \        max_depth\n      end\n    }\n  }\nend", "  paren_string.split.map { |paren_group|\
    \ paren_group.scan(/\\(/).size }\nend", "  paren_string.split(\" \").map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == \"(\"\n\
    \        max_depth += 1\n      elsif char == \")\"\n        max_depth -= 1\n \
    \     end\n      max_depth\n    end\n  end\nend", "  paren_string.split.map {\
    \ |paren_group|\n    paren_group.chars.reduce(0) { |max_nesting, char|\n     \
    \ if char == '('\n        max_nesting + 1\n      elsif char == ')'\n        max_nesting\
    \ - 1\n      else\n        max_nesting\n      end\n    }\n  }\nend", "  paren_string.split.map\
    \ { |parens| parens.count('(') - parens.count(')') }\nend", "  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_nesting, char|\n      if char\
    \ == '('\n        max_nesting + 1\n      elsif char == ')'\n        max_nesting\
    \ - 1\n      else\n        max_nesting\n      end\n    end\n  end\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end", "  paren_string.split(\" \").map { |parens| parens.count(\"(\") - parens.count(\"\
    )\") }\nend", "  paren_string.split.map { |group| group.count('(') - group.count(')')\
    \ }\nend", "  paren_string.split(\" \").map do |group|\n    max_depth = 0\n  \
    \  current_depth = 0\n    group.each_char do |char|\n      if char == \"(\"\n\
    \        current_depth += 1\n        max_depth = current_depth if current_depth\
    \ > max_depth\n      elsif char == \")\"\n        current_depth -= 1\n      end\n\
    \    end\n    max_depth\n  end\nend", "  paren_string.split.map { |paren_group|\
    \ paren_group.count('(') }\nend", "  paren_string.split.map { |paren_group|\n\
    \    paren_group.chars.reduce(0) { |max_nesting, char|\n      if char == '('\n\
    \        max_nesting + 1\n      elsif char == ')'\n        max_nesting - 1\n \
    \     else\n        max_nesting\n      end\n    }\n  }\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == \"(\"\n        max_level += 1\n      elsif char == \")\"\n \
    \       max_level -= 1\n      end\n      max_level\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map { |parens|\n    parens.chars.reduce(0) { |max_depth, char|\n      char\
    \ == \"(\" ? max_depth + 1 : max_depth - 1\n    }\n  }\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      max_depth += 1 if char == '('\n      max_depth -= 1 if char == ')'\n  \
    \    max_depth\n    end\n  end\nend", "  paren_string.split.map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == '('\n\
    \        max_depth + 1\n      elsif char == ')'\n        max_depth - 1\n     \
    \ else\n        max_depth\n      end\n    end\n  end\nend", "  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend", "  paren_string.split.map do\
    \ |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n    \
    \  if char == '('\n        max_nesting + 1\n      elsif char == ')'\n        max_nesting\
    \ - 1\n      else\n        max_nesting\n      end\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.inject(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth + 1\n      elsif char == \")\"\n  \
    \      max_depth - 1\n      else\n        max_depth\n      end\n    }\n  }\nend",
  "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting,\
    \ char|\n      case char\n      when '('\n        max_nesting + 1\n      when\
    \ ')'\n        max_nesting - 1\n      else\n        max_nesting\n      end\n \
    \   end\n  end\nend", "  paren_string.split(\" \").map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_nesting, char|\n      if char == \"(\"\n        max_nesting + 1\n  \
    \    elsif char == \")\"\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    end\n  end\nend", "  paren_string.split(\" \").map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == \"(\"\n\
    \        max_depth += 1\n      elsif char == \")\"\n        max_depth -= 1\n \
    \     end\n      max_depth\n    end\n  end\nend", "  paren_string.split(\" \"\
    ).map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n \
    \     if char == \"(\"\n        max_depth + 1\n      elsif char == \")\"\n   \
    \     max_depth - 1\n      else\n        max_depth\n      end\n    }\n  }\nend",
  "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting,\
    \ char|\n      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n\
    \        max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n\
    \  end\nend", "  paren_string.split(' ').map { |paren_group| paren_group.count('(')\
    \ - paren_group.count(')') }\nend", "  paren_string.split(' ').map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == '('\n\
    \        max_depth += 1\n      elsif char == ')'\n        max_depth -= 1\n   \
    \   end\n      max_depth\n    end\n  end\nend", "  paren_string.split(\" \").map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n    \
    \    max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     max_nesting += 1 if char == '('\n      max_nesting -= 1 if char == ')'\n\
    \      max_nesting\n    end\n  end\nend", "  paren_string.split(' ').map { |parens|\
    \ parens.count('(') - parens.count(')') }\nend", "  paren_string.split(\" \").map\
    \ do |paren_group|\n    max_depth = 0\n    current_depth = 0\n    paren_group.each_char\
    \ do |char|\n      if char == \"(\"\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == \")\"\n  \
    \      current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend", " \
    \ paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0) do\
    \ |max_nesting, char|\n      if char == '('\n        max_nesting + 1\n      elsif\
    \ char == ')'\n        max_nesting - 1\n      else\n        max_nesting\n    \
    \  end\n    end\n  end\nend", "  paren_string.split(\" \").map { |paren_group|\n\
    \    paren_group.chars.reduce([0, 0]) { |acc, char|\n      if char == \"(\"\n\
    \        acc[0] += 1\n        acc[1] = acc[0] if acc[0] > acc[1]\n      elsif\
    \ char == \")\"\n        acc[0] -= 1\n      end\n      acc\n    }[1]\n  }\nend",
  "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting,\
    \ char|\n      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n\
    \        max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n\
    \  end\nend", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |level, char|\n      char == \"(\" ? level + 1 : level - 1\n    }\n  }\nend",
  "  paren_string.split.map { |paren_group| paren_group.count(\"(\") }\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == \"(\"\n        max_nesting + 1\n      elsif char == \")\"\n\
    \        max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n\
    \  end\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth + 1\n      elsif\
    \ char == ')'\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    end\n  end\nend", "  paren_string.split(\" \").map do |paren_group|\n   \
    \ paren_group.chars.reduce(0) do |level, char|\n      if char == \"(\"\n     \
    \   level += 1\n      elsif char == \")\"\n        level -= 1\n      end\n   \
    \   level\n    end\n  end\nend", "  paren_string.split.map { |paren_group| paren_group.count('(')\
    \ }\nend", "  paren_string.split.map { |paren_group| paren_group.count('(') }\n\
    end", "  paren_string.split(\" \").map { |parens| parens.count(\"(\") - parens.count(\"\
    )\") }\nend", "  paren_string.split(' ').map do |paren_group|\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    paren_group.chars.each do |char|\n      if\
    \ char == '('\n        current_nesting += 1\n        max_nesting = current_nesting\
    \ if current_nesting > max_nesting\n      elsif char == ')'\n        current_nesting\
    \ -= 1\n      end\n    end\n    max_nesting\n  end\nend", "  paren_string.split(\"\
    \ \").map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth + 1\n      elsif char == \")\"\n  \
    \      max_depth - 1\n      else\n        max_depth\n      end\n    }\n  }\nend",
  "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth,\
    \ char|\n      if char == '('\n        max_depth + 1\n      elsif char == ')'\n\
    \        max_depth - 1\n      else\n        max_depth\n      end\n    end\n  end\n\
    end", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth + 1\n      elsif\
    \ char == ')'\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    end\n  end\nend", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_nesting, char|\n      if char == \"(\"\n        max_nesting + 1\n   \
    \   elsif char == \")\"\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    }\n  }\nend", "  paren_string.split.map { |paren_group| paren_group.count('(')\
    \ }\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_level, char|\n      if char == '('\n        max_level += 1\n      elsif\
    \ char == ')'\n        max_level -= 1\n      end\n      max_level\n    end\n \
    \ end\nend", "  paren_string.split.map { |parens| parens.count('(') - parens.count(')')\
    \ }\nend", "  paren_string.split.map { |parens| parens.count('(') - parens.count(')')\
    \ }\nend", "  paren_string.split(' ').map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |acc, char|\n      if char == '('\n        acc + 1\n      elsif char == ')'\n\
    \        acc - 1\n      else\n        acc\n      end\n    }\n  }\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     case char\n      when '('\n        max_nesting + 1\n      when ')'\n   \
    \     max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n \
    \ end\nend", "  paren_string.split(\" \").map { |parens| parens.count(\"(\") -\
    \ parens.count(\")\") }\nend", "  paren_string.split(\" \").map { |paren_group|\
    \ paren_group.count(\"(\") }\nend", "  paren_string.split(' ').map { |paren_group|\
    \ paren_group.count('(') - paren_group.count(')') }\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    max_level = 0\n    current_level = 0\n    paren_group.each_char\
    \ do |char|\n      if char == \"(\"\n        current_level += 1\n        max_level\
    \ = current_level if current_level > max_level\n      elsif char == \")\"\n  \
    \      current_level -= 1\n      end\n    end\n    max_level\n  end\nend", " \
    \ paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0) do\
    \ |max_depth, char|\n      if char == '('\n        max_depth + 1\n      elsif\
    \ char == ')'\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    end\n  end\nend", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_level, char|\n      if char == \"(\"\n        max_level + 1\n      elsif\
    \ char == \")\"\n        max_level - 1\n      else\n        max_level\n      end\n\
    \    }\n  }\nend", "  paren_string.split.map { |group| group.scan(/\\(/).count\
    \ }\nend", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_level, char|\n      if char == \"(\"\n        max_level + 1\n      elsif\
    \ char == \")\"\n        max_level - 1\n      else\n        max_level\n      end\n\
    \    }\n  }\nend", "  paren_string.split(\" \").map do |paren_group|\n    max_depth\
    \ = 0\n    current_depth = 0\n    paren_group.each_char do |char|\n      if char\
    \ == \"(\"\n        current_depth += 1\n        max_depth = current_depth if current_depth\
    \ > max_depth\n      elsif char == \")\"\n        current_depth -= 1\n      end\n\
    \    end\n    max_depth\n  end\nend", "  paren_string.split(\" \").map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == \"(\"\n\
    \        max_depth += 1\n      elsif char == \")\"\n        max_depth -= 1\n \
    \     end\n      max_depth\n    end\n  end\nend", "  paren_string.split(\" \"\
    ).map { |paren_group| paren_group.scan(/\\(/).size }\nend", "  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == '('\n        max_depth + 1\n      elsif char == ')'\n      \
    \  max_depth - 1\n      else\n        max_depth\n      end\n    }\n  }\nend",
  "  paren_string.split(\" \").map { |parens| parens.scan(/\\(/).size }\nend", " \
    \ paren_string.split.map do |parens|\n    parens.chars.reduce(0) do |max_depth,\
    \ char|\n      max_depth += 1 if char == '('\n      max_depth -= 1 if char ==\
    \ ')'\n      max_depth\n    end\n  end\nend", "  paren_string.split(\" \").map\
    \ { |parens|\n    parens.chars.reduce(0) { |max_nesting, char|\n      if char\
    \ == \"(\"\n        max_nesting + 1\n      elsif char == \")\"\n        max_nesting\
    \ - 1\n      else\n        max_nesting\n      end\n    }\n  }\nend", "  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth + 1\n      elsif char == ')'\n        max_depth -\
    \ 1\n      else\n        max_depth\n      end\n    end\n  end\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth + 1\n      elsif\
    \ char == ')'\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    end\n  end\nend", "  paren_string.split.map { |parens| parens.chars.reduce(0)\
    \ { |acc, char| char == '(' ? acc + 1 : acc - 1 } }\nend", "  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend", "  paren_string.split(' ').map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end", "  paren_string.split.map { |paren_group|\n    paren_group.chars.inject(0)\
    \ { |max_depth, char|\n      max_depth += 1 if char == '('\n      max_depth -=\
    \ 1 if char == ')'\n      max_depth\n    }\n  }\nend", "  paren_string.split(\"\
    \ \").map do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n     \
    \ if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n      \
    \  max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth + 1\n      elsif char == ')'\n        max_depth\
    \ - 1\n      else\n        max_depth\n      end\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == \"(\"\n        max_level += 1\n      elsif char == \")\"\n \
    \       max_level -= 1\n      end\n      max_level\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n \
    \       max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth + 1\n      elsif char == \")\"\n  \
    \      max_depth - 1\n      else\n        max_depth\n      end\n    }\n  }\nend",
  "  paren_string.split(' ').map do |parens|\n    parens.chars.reduce(0) do |max_depth,\
    \ char|\n      if char == '('\n        max_depth += 1\n      elsif char == ')'\n\
    \        max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", " \
    \ paren_string.split(' ').map { |paren_group| parse_nested_parens_helper(paren_group)\
    \ }\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth += 1\n      elsif\
    \ char == ')'\n        max_depth -= 1\n      end\n      max_depth\n    end\n \
    \ end\nend", "  paren_string.split.map { |paren_group| paren_group.chars.reduce(0)\
    \ { |max_depth, char| char == '(' ? max_depth + 1 : max_depth - 1 } }\nend", " \
    \ paren_string.split.map do |paren_group|\n    max_nesting = 0\n    current_nesting\
    \ = 0\n    paren_group.each_char do |char|\n      if char == '('\n        current_nesting\
    \ += 1\n        max_nesting = current_nesting if current_nesting > max_nesting\n\
    \      elsif char == ')'\n        current_nesting -= 1\n      end\n    end\n \
    \   max_nesting\n  end\nend", "  paren_string.split.map do |paren_group|\n   \
    \ paren_group.chars.reduce(0) do |max_depth, char|\n      max_depth += 1 if char\
    \ == '('\n      max_depth -= 1 if char == ')'\n      max_depth\n    end\n  end\n\
    end", "  paren_string.split.map { |group| group.count('(') - group.count(')')\
    \ }\nend", "  paren_string.split(\" \").map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_level, char|\n      if char == \"(\"\n        max_level += 1\n     \
    \ elsif char == \")\"\n        max_level -= 1\n      end\n      max_level\n  \
    \  end\n  end\nend", "  paren_string.split(' ').map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_level, char|\n      char == '(' ? max_level + 1 : max_level - 1\n   \
    \ }\n  }\nend", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.inject(0)\
    \ { |max_depth, char|\n      if char == \"(\"\n        max_depth + 1\n      elsif\
    \ char == \")\"\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    }\n  }\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      max_depth += 1 if char == '('\n      max_depth -=\
    \ 1 if char == ')'\n      max_depth\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n \
    \       max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == \"(\"\n        max_nesting + 1\n      elsif char == \")\"\n\
    \        max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n\
    \  end\nend", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_depth, char|\n      if char == \"(\"\n        max_depth + 1\n      elsif\
    \ char == \")\"\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    }\n  }\nend", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_depth, char|\n      if char == \"(\"\n        max_depth + 1\n      elsif\
    \ char == \")\"\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    }\n  }\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth + 1\n      elsif\
    \ char == ')'\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    end\n  end\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth += 1\n      elsif\
    \ char == ')'\n        max_depth -= 1\n      end\n      max_depth\n    end\n \
    \ end\nend", "  paren_string.split.map { |group| group.count('(') - group.count(')')\
    \ }\nend", "  paren_string.split(\" \").map { |group| group.count(\"(\") - group.count(\"\
    )\") }\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth += 1\n      elsif\
    \ char == ')'\n        max_depth -= 1\n      end\n      max_depth\n    end\n \
    \ end\nend", "  paren_string.split(\" \").map { |group| group.count(\"(\") }\n\
    end", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_nesting, char|\n      if char == \"(\"\n        max_nesting + 1\n   \
    \   elsif char == \")\"\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    }\n  }\nend", "  paren_string.split(\" \").map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_nesting, char|\n      if char == \"(\"\
    \n        max_nesting + 1\n      elsif char == \")\"\n        max_nesting - 1\n\
    \      else\n        max_nesting\n      end\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map { |parens| parens.scan(/\\(/).size }\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n \
    \       max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |level, char|\n\
    \      if char == '('\n        level += 1\n      elsif char == ')'\n        level\
    \ -= 1\n      end\n      level\n    end\n  end\nend", "  paren_string.split.map\
    \ { |parens| parens.scan(/\\(/).count }\nend", "  paren_string.split(\" \").map\
    \ { |paren_group|\n    paren_group.chars.reduce(0) { |max_nesting, char|\n   \
    \   case char\n      when \"(\"\n        max_nesting + 1\n      when \")\"\n \
    \       max_nesting - 1\n      else\n        max_nesting\n      end\n    }\n \
    \ }\nend", "  paren_string.split(\" \").map do |paren_group|\n    max_depth =\
    \ 0\n    current_depth = 0\n    paren_group.each_char do |char|\n      if char\
    \ == \"(\"\n        current_depth += 1\n        max_depth = current_depth if current_depth\
    \ > max_depth\n      elsif char == \")\"\n        current_depth -= 1\n      end\n\
    \    end\n    max_depth\n  end\nend", "  paren_string.split(\" \").map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_level, char|\n      if char == \"(\"\n\
    \        max_level += 1\n      elsif char == \")\"\n        max_level -= 1\n \
    \     end\n      max_level\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n     \
    \ if char == '('\n        max_depth + 1\n      elsif char == ')'\n        max_depth\
    \ - 1\n      else\n        max_depth\n      end\n    }\n  }\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    max_depth = 0\n    current_depth = 0\n    paren_group.each_char\
    \ do |char|\n      if char == \"(\"\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == \")\"\n  \
    \      current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend", " \
    \ paren_string.split(' ').map { |parens| parens.scan(/\\(/).size }\nend", "  paren_string.split(\"\
    \ \").map { |paren_group|\n    paren_group.chars.reduce(0) { |max_nesting, char|\n\
    \      if char == \"(\"\n        max_nesting + 1\n      elsif char == \")\"\n\
    \        max_nesting - 1\n      else\n        max_nesting\n      end\n    }\n\
    \  }\nend", "  paren_string.split(' ').map { |group| group.chars.reduce(0) { |max,\
    \ char| char == '(' ? max + 1 : max - 1 } }\nend", "  paren_string.split(\" \"\
    ).map { |paren_group|\n    paren_group.chars.reduce(0) { |level, char|\n     \
    \ char == \"(\" ? level + 1 : level - 1\n    }\n  }\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend", "  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') - paren_group.count(')') }\nend",
  "  paren_string.split(\" \").map do |paren_group|\n    max_nesting = 0\n    current_nesting\
    \ = 0\n    paren_group.each_char do |char|\n      if char == \"(\"\n        current_nesting\
    \ += 1\n        max_nesting = current_nesting if current_nesting > max_nesting\n\
    \      elsif char == \")\"\n        current_nesting -= 1\n      end\n    end\n\
    \    max_nesting\n  end\nend", "  paren_string.split.map { |paren_group|\n   \
    \ paren_group.chars.reduce(0) { |max_depth, char|\n      max_depth += 1 if char\
    \ == '('\n      max_depth -= 1 if char == ')'\n      max_depth\n    }\n  }\nend",
  "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_depth, char|\n      if char == \"(\"\n        max_depth + 1\n      elsif\
    \ char == \")\"\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    }\n  }\nend", "  paren_string.split(\" \").map do |parens|\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    parens.each_char do |char|\n      if char\
    \ == \"(\"\n        current_nesting += 1\n        max_nesting = current_nesting\
    \ if current_nesting > max_nesting\n      elsif char == \")\"\n        current_nesting\
    \ -= 1\n      end\n    end\n    max_nesting\n  end\nend", "  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    }\n  }\n\
    end", "  paren_string.split(\" \").map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == \"(\"\n        max_depth += 1\n     \
    \ elsif char == \")\"\n        max_depth -= 1\n      end\n      max_depth\n  \
    \  end\n  end\nend", "  paren_string.split.map do |parens|\n    parens.chars.reduce(0)\
    \ do |max_depth, char|\n      char == '(' ? max_depth + 1 : max_depth - 1\n  \
    \  end\n  end\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth += 1\n      elsif\
    \ char == ')'\n        max_depth -= 1\n      end\n      max_depth\n    end\n \
    \ end\nend", "  paren_string.split.map { |paren_group| paren_group.count('(')\
    \ }\nend", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_nesting, char|\n      if char == \"(\"\n        max_nesting + 1\n   \
    \   elsif char == \")\"\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    }\n  }\nend", "  paren_string.split.map do |paren_group|\n   \
    \ paren_group.chars.reduce(0) do |max_nesting, char|\n      if char == '('\n \
    \       max_nesting + 1\n      elsif char == ')'\n        max_nesting - 1\n  \
    \    else\n        max_nesting\n      end\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map { |paren_group| paren_group.count(\"(\") }\nend", "  paren_string.split(\"\
    \ \").map { |paren_group|\n    paren_group.chars.reduce(0) { |max_nesting, char|\n\
    \      if char == \"(\"\n        max_nesting + 1\n      elsif char == \")\"\n\
    \        max_nesting - 1\n      else\n        max_nesting\n      end\n    }\n\
    \  }\nend", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce([0,\
    \ 0]) { |acc, char|\n      if char == \"(\"\n        acc[0] += 1\n        acc[1]\
    \ = acc[0] if acc[0] > acc[1]\n      elsif char == \")\"\n        acc[0] -= 1\n\
    \      end\n      acc\n    }[1]\n  }\nend", "  paren_string.split.map { |paren_group|\
    \ paren_group.count('(') }\nend", "  paren_string.split.map { |paren_group|\n\
    \    paren_group.chars.reduce(0) { |max_depth, char|\n      case char\n      when\
    \ '('\n        max_depth + 1\n      when ')'\n        max_depth - 1\n      else\n\
    \        max_depth\n      end\n    }\n  }\nend", "  paren_string.split(\" \").map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == \"(\"\n        max_nesting + 1\n      elsif char == \")\"\n \
    \       max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n\
    \  end\nend", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_depth, char|\n      if char == \"(\"\n        max_depth + 1\n      elsif\
    \ char == \")\"\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    }\n  }\nend", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_nesting, char|\n      if char == \"(\"\n        max_nesting + 1\n   \
    \   elsif char == \")\"\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    }\n  }\nend", "  # TODO: Implement this function\nend", "  paren_string.split.map\
    \ { |group| group.count('(') - group.count(')') }\nend", "  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_level, char|\n      if char\
    \ == '('\n        max_level + 1\n      elsif char == ')'\n        max_level -\
    \ 1\n      else\n        max_level\n      end\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n \
    \       max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend", "  paren_string.split.map {\
    \ |paren_group| paren_group.count('(') }\nend", "  # TODO: Implement this function\n\
    end", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_level, char|\n      if char == '('\n        max_level + 1\n      elsif\
    \ char == ')'\n        max_level - 1\n      else\n        max_level\n      end\n\
    \    end\n  end\nend", "  paren_string.split(\" \").map { |paren_group|\n    paren_group.chars.reduce([0,\
    \ 0]) { |(max_depth, depth), char|\n      if char == \"(\"\n        [max_depth,\
    \ depth + 1]\n      elsif char == \")\"\n        [max_depth > depth ? max_depth\
    \ : depth, depth - 1]\n      else\n        [max_depth, depth]\n      end\n   \
    \ }.first\n  }\nend", "  paren_string.split(\" \").map { |paren_group| paren_group.count(\"\
    (\") }\nend", "  paren_string.split(' ').map do |paren_group|\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    paren_group.each_char do |char|\n      if\
    \ char == '('\n        current_nesting += 1\n        max_nesting = current_nesting\
    \ if current_nesting > max_nesting\n      elsif char == ')'\n        current_nesting\
    \ -= 1\n      end\n    end\n    max_nesting\n  end\nend", "  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_level, char|\n\
    \      if char == '('\n        max_level + 1\n      elsif char == ')'\n      \
    \  max_level - 1\n      else\n        max_level\n      end\n    }\n  }\nend",
  "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting,\
    \ char|\n      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n\
    \        max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n\
    \  end\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      case char\n      when '('\n        max_depth + 1\n\
    \      when ')'\n        max_depth - 1\n      end\n    end\n  end\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end", "  paren_string.split(\" \").map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_level, char|\n      if char == \"(\"\n        max_level += 1\n     \
    \ elsif char == \")\"\n        max_level -= 1\n      end\n      max_level\n  \
    \  end\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
