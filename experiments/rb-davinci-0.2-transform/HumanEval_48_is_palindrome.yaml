name: HumanEval_48_is_palindrome
language: rb
prompt: "# Checks if given string is a palindrome\n# >>> is_palindrome.call(\"\")\n\
  # true\n# >>> is_palindrome.call(\"aba\")\n# true\n# >>> is_palindrome.call(\"aaaaa\"\
  )\n# true\n# >>> is_palindrome.call(\"zbcd\")\n# false\ndef is_palindrome(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_palindrome\n\
  \    candidate = method(:is_palindrome)\n    assert_equal(true, candidate.call(\"\
  \"))\n    assert_equal(true, candidate.call(\"aba\"))\n    assert_equal(true, candidate.call(\"\
  aaaaa\"))\n    assert_equal(false, candidate.call(\"zbcd\"))\n    assert_equal(true,\
  \ candidate.call(\"xywyx\"))\n    assert_equal(false, candidate.call(\"xywyz\"))\n\
  \    assert_equal(false, candidate.call(\"xywzx\"))\n  end\nend\n"
completions: ["  text == text.reverse\nend", "  text == text.reverse\nend", "  text\
    \ == text.reverse\nend", "  text == text.reverse\nend", "  text.reverse == text\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text.reverse == text\nend", "  text.reverse == text\n\
    end", "  text == text.reverse\nend", "  text == text.reverse\nend", "  text ==\
    \ text.reverse\nend", "  text == text.reverse\nend", "  text == text.reverse\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
