name: HumanEval_118_get_closest_vowel
language: rb
prompt: "# You are given a word. Your task is to find the closest vowel that stands\
  \ between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# >>> get_closest_vowel.call(\"yogurt\"\
  )\n# \"u\"\n# >>> get_closest_vowel.call(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel.call(\"\
  quick\")\n# \"\"\n# >>> get_closest_vowel.call(\"ab\")\n# \"\"\ndef get_closest_vowel(word)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_closest_vowel\n\
  \    candidate = method(:get_closest_vowel)\n    assert_equal(\"u\", candidate.call(\"\
  yogurt\"))\n    assert_equal(\"u\", candidate.call(\"full\"))\n    assert_equal(\"\
  \", candidate.call(\"easy\"))\n    assert_equal(\"\", candidate.call(\"eAsy\"))\n\
  \    assert_equal(\"\", candidate.call(\"ali\"))\n    assert_equal(\"a\", candidate.call(\"\
  bad\"))\n    assert_equal(\"o\", candidate.call(\"most\"))\n    assert_equal(\"\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"\", candidate.call(\"ba\"))\n    assert_equal(\"\
  \", candidate.call(\"quick\"))\n    assert_equal(\"i\", candidate.call(\"anime\"\
  ))\n    assert_equal(\"\", candidate.call(\"Asia\"))\n    assert_equal(\"o\", candidate.call(\"\
  Above\"))\n  end\nend\n"
completions: ["  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  word.reverse.each_char.with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      return char if index >\
    \ 0 && !vowels.include?(word[-index - 1])\n    end\n  end\n  \"\"\nend", "  vowels\
    \ = %w(a e i o u)\n  word.reverse.each_char.with_index do |char, index|\n    if\
    \ vowels.include?(char)\n      return char if index == 0\n      return char if\
    \ !vowels.include?(word[-index-1])\n    end\n  end\n  \"\"\nend", "  vowels =\
    \ %w(a e i o u A E I O U)\n  word.reverse.each_char.with_index do |char, index|\n\
    \    if vowels.include?(char)\n      return char if index > 0 && !vowels.include?(word[-index-1])\n\
    \    end\n  end\n  \"\"\nend", "  vowels = %w(a e i o u)\n  word.reverse.split('').each_with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      return char if index ==\
    \ 0\n      return char if !vowels.include?(word[-index-1])\n    end\n  end\n \
    \ ''\nend", "  vowels = %w(a e i o u A E I O U)\n  word.reverse.each_char.with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      return char if vowels.include?(word[-index-2])\n\
    \    end\n  end\n  \"\"\nend", "  vowels = \"aeiouAEIOU\"\n  consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n  word.reverse.each_char.with_index do |char, index|\n    if vowels.include?(char)\n\
    \      if consonants.include?(word[-index-2])\n        return char\n      end\n\
    \    end\n  end\n  \"\"\nend", "  word.reverse.each_char.with_index do |char,\
    \ index|\n    if char =~ /[aeiou]/\n      return char if word[-index-2] =~ /[^aeiou]/\n\
    \    end\n  end\n  return \"\"\nend", "  # your code here\nend", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  word.reverse.each_char.with_index do |char,\
    \ index|\n    if vowels.include?(char)\n      return char if index != 0 && !vowels.include?(word[-index-1])\n\
    \    end\n  end\n  \"\"\nend", "  vowels = %w(a e i o u)\n  word.reverse.chars.each_with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      return char if index >\
    \ 0 && !vowels.include?(word[-index-1])\n    end\n  end\n  \"\"\nend", "  vowels\
    \ = %w(a e i o u)\n  word.reverse.each_char.with_index do |char, index|\n    return\
    \ char if vowels.include?(char) && vowels.include?(word[-index-2])\n  end\n  ''\n\
    end", "  vowels = %w(a e i o u A E I O U)\n  word.reverse.each_char.with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      return char if index ==\
    \ 0 || !vowels.include?(word[-index - 2])\n    end\n  end\n  ''\nend", "  vowels\
    \ = %w(a e i o u A E I O U)\n  word.reverse.each_char.with_index do |char, index|\n\
    \    if vowels.include?(char)\n      return char if index > 0 && !vowels.include?(word[-index\
    \ - 1])\n    end\n  end\n  \"\"\nend", "  vowels = \"aeiouAEIOU\"\n  word.reverse.each_char.with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      return char if word[-index-2]\
    \ =~ /[^aeiou]/i\n    end\n  end\n  \"\"\nend", "  vowels = %w(a e i o u)\n  word.split('').reverse.each_with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      if index == 0\n      \
    \  return char\n      elsif !vowels.include?(word[-index - 1])\n        return\
    \ char\n      end\n    end\n  end\n  ''\nend", "  vowels = \"AEIOUaeiou\"\n  word.reverse.each_char.with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      if index == 0\n      \
    \  return \"\"\n      elsif !vowels.include?(word[-index-1])\n        return char\n\
    \      end\n    end\n  end\n  \"\"\nend", "  vowels = %w(a e i o u A E I O U)\n\
    \  word.reverse.each_char.with_index do |char, index|\n    return char if vowels.include?(char)\
    \ && vowels.include?(word[-index-2])\n  end\n  \"\"\nend", "  vowels = %w(a e\
    \ i o u)\n  word.reverse.split('').each_with_index do |char, index|\n    if vowels.include?(char)\n\
    \      return char if index > 0 && !vowels.include?(word[-index-1])\n    end\n\
    \  end\n  ''\nend", "  vowels = %w(a e i o u)\n  word.reverse.each_char.with_index\
    \ do |char, i|\n    if vowels.include?(char)\n      if i == 0 || vowels.include?(word[-i-1])\n\
    \        next\n      else\n        return char\n      end\n    end\n  end\n  \"\
    \"\nend", "  vowels = %w(a e i o u A E I O U)\n  word.reverse.each_char.with_index\
    \ do |char, index|\n    if vowels.include?(char)\n      return char if word[-index-2]\
    \ && !vowels.include?(word[-index-2])\n    end\n  end\n  \"\"\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
