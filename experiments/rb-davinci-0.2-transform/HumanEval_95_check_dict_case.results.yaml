language: rb
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key == key.downcase } || dict.keys.all? { |key| key.is_a?(String)\
    \ && key == key.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp86jwq0dh\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp86jwq0dh.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007288228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.21 tests/s, 411.62 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.downcase == key\n   \
    \     return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptibxgala\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptibxgala.rb:32:in `test_check_dict_case'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_check_dict_case\n\
    \     31:     candidate = method(:check_dict_case)\n  => 32:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     34:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.007546466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.51 tests/s, 132.51 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.class != String\n      return false\n    end\n \
    \ end\n  if dict.keys[0].downcase == dict.keys[0]\n    dict.each do |key, value|\n\
    \      if key.upcase == key\n        return false\n      end\n    end\n  else\n\
    \    dict.each do |key, value|\n      if key.downcase == key\n        return false\n\
    \      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzvrqo8r6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzvrqo8r6.rb:46:in `test_check_dict_case'\n\
    \     43:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     44:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     45:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 46:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     47:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     48:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     49:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007630818 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.05 tests/s, 524.19 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |k| k.is_a? String }\n    return dict.keys.all? { |k| k.upcase == k } || dict.keys.all?\
    \ { |k| k.downcase == k }\n  end\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsv_eh2yr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsv_eh2yr.rb:30:in `test_check_dict_case'\n\
    \     27:     candidate = method(:check_dict_case)\n     28:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     33:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00752697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.86 tests/s, 398.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv7zujv1n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv7zujv1n.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00756396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.21 tests/s, 264.41 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  first_key\
    \ = dict.keys[0]\n  if first_key.is_a?(String)\n    if first_key == first_key.downcase\n\
    \      dict.keys.each do |key|\n        if key != key.downcase\n          return\
    \ false\n        end\n      end\n    elsif first_key == first_key.upcase\n   \
    \   dict.keys.each do |key|\n        if key != key.upcase\n          return false\n\
    \        end\n      end\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqjbhhd4d\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqjbhhd4d.rb:47:in `test_check_dict_case'\n\
    \     44:     candidate = method(:check_dict_case)\n     45:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     46:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 47:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     48:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     49:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     50:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007473989 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.80 tests/s, 401.39 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.class != String\n      return false\n    end\n \
    \ end\n  if dict.keys.all? { |key| key == key.downcase }\n    return true\n  elsif\
    \ dict.keys.all? { |key| key == key.upcase }\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvsckdg3z\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvsckdg3z.rb:38:in `test_check_dict_case'\n\
    \     35:     candidate = method(:check_dict_case)\n     36:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     39:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     40:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     41:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007248738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.96 tests/s, 413.87 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a? String }\n    return dict.keys.all? { |key| key.upcase ==\
    \ key } || dict.keys.all? { |key| key.downcase == key }\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpswel2kyl\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpswel2kyl.rb:30:in `test_check_dict_case'\n\
    \     27:     candidate = method(:check_dict_case)\n     28:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     33:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007793805 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.31 tests/s, 384.92 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key\n  \
    \      return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmm_29cj9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmm_29cj9.rb:32:in `test_check_dict_case'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_check_dict_case\n\
    \     31:     candidate = method(:check_dict_case)\n  => 32:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     34:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.007482559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.64 tests/s, 133.64 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |k| k.is_a? String }\n    if dict.keys.all? { |k| k.upcase == k }\n      return\
    \ true\n    elsif dict.keys.all? { |k| k.downcase == k }\n      return true\n\
    \    else\n      return false\n    end\n  else\n    return false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0exg0_ag\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp0exg0_ag.rb:37:in `test_check_dict_case'\n\
    \     34:     candidate = method(:check_dict_case)\n     35:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     36:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 37:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     38:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     39:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     40:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00763443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.99 tests/s, 392.96 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  keys =\
    \ dict.keys\n  if keys.all? { |k| k.is_a? String }\n    if keys.all? { |k| k.upcase\
    \ == k }\n      return true\n    elsif keys.all? { |k| k.downcase == k }\n   \
    \   return true\n    end\n  end\n  return false\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppoa6dlwk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppoa6dlwk.rb:35:in `test_check_dict_case'\n\
    \     32:     candidate = method(:check_dict_case)\n     33:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     34:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 35:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     36:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     37:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     38:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007183253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.21 tests/s, 417.64 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv7zujv1n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv7zujv1n.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00756396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.21 tests/s, 264.41 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphtyp1y_1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphtyp1y_1.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007531681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.77 tests/s, 398.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphtyp1y_1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphtyp1y_1.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007531681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.77 tests/s, 398.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp1ittk6j\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpp1ittk6j.rb:22:in `test_check_dict_case'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_check_dict_case\n\
    \     21:     candidate = method(:check_dict_case)\n  => 22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007326089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.50 tests/s, 136.50 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphtyp1y_1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphtyp1y_1.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007531681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.77 tests/s, 398.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } ||\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9tl7wcdn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9tl7wcdn.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010038059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.62 tests/s, 298.86 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.class != String\n      return false\n    end\n \
    \ end\n  if dict.keys.all? { |key| key.upcase == key }\n    return true\n  elsif\
    \ dict.keys.all? { |key| key.downcase == key }\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_kgq3v_w\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_kgq3v_w.rb:38:in `test_check_dict_case'\n\
    \     35:     candidate = method(:check_dict_case)\n     36:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     39:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     40:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     41:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007739367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.21 tests/s, 387.63 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  # Your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7rdi0pny\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7rdi0pny.rb:22:in `test_check_dict_case'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_check_dict_case\n\
    \     21:     candidate = method(:check_dict_case)\n  => 22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007337055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.29 tests/s, 136.29 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a?(String) && key.upcase == key }\n    return true\n  elsif dict.keys.all?\
    \ { |key| key.is_a?(String) && key.downcase == key }\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_360pr4l\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_360pr4l.rb:33:in `test_check_dict_case'\n\
    \     30:     candidate = method(:check_dict_case)\n     31:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     34:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     35:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     36:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007498045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.37 tests/s, 400.10 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.is_a? String\n\
    \      if key.downcase != key\n        lower_case = false\n      end\n      if\
    \ key.upcase != key\n        upper_case = false\n      end\n    else\n      return\
    \ false\n    end\n  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnjyojlhk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnjyojlhk.rb:41:in `test_check_dict_case'\n\
    \     38:     candidate = method(:check_dict_case)\n     39:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     40:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 41:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     42:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     43:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     44:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007076798 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.31 tests/s, 423.92 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.class != String\n      return false\n    end\n \
    \ end\n  if dict.keys.all? { |key| key.upcase == key }\n    return true\n  elsif\
    \ dict.keys.all? { |key| key.downcase == key }\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_kgq3v_w\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_kgq3v_w.rb:38:in `test_check_dict_case'\n\
    \     35:     candidate = method(:check_dict_case)\n     36:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     39:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     40:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     41:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007739367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.21 tests/s, 387.63 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.each do |key,\
    \ value|\n    return false if key.class != String\n  end\n  dict.each do |key,\
    \ value|\n    return false if key.upcase != key && key.downcase != key\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3tm169yj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3tm169yj.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007194851 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.99 tests/s, 277.98 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a? String }\n    if dict.keys.all? { |key| key.upcase == key\
    \ }\n      return true\n    elsif dict.keys.all? { |key| key.downcase == key }\n\
    \      return true\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgjvy3rj1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgjvy3rj1.rb:37:in `test_check_dict_case'\n\
    \     34:     candidate = method(:check_dict_case)\n     35:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     36:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 37:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     38:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     39:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     40:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007600233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.57 tests/s, 394.72 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k, v|\n    if k.class == String\n      if k.upcase == k\n        return\
    \ true\n      elsif k.downcase == k\n        return true\n      else\n       \
    \ return false\n      end\n    else\n      return false\n    end\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfgz9tp5k\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfgz9tp5k.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007971336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.45 tests/s, 250.90 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.class == String\n      if key.upcase == key\n  \
    \      return true\n      elsif key.downcase == key\n        return true\n   \
    \   else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm0gtiip2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpm0gtiip2.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006631212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.80 tests/s, 301.60 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv7zujv1n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv7zujv1n.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00756396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.21 tests/s, 264.41 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } || dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppv7bsqel\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppv7bsqel.rb:24:in `test_check_dict_case'\n\
    \     21:     candidate = method(:check_dict_case)\n     22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     27:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007033083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.19 tests/s, 426.56 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphtyp1y_1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphtyp1y_1.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007531681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.77 tests/s, 398.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key == key.downcase } || dict.keys.all? { |key| key.is_a?(String)\
    \ && key == key.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp86jwq0dh\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp86jwq0dh.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007288228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.21 tests/s, 411.62 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      if key.downcase != key && key.upcase != key\n        return false\n   \
    \   end\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpraff06k2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpraff06k2.rb:32:in `test_check_dict_case'\n\
    \     29:   def test_check_dict_case\n     30:     candidate = method(:check_dict_case)\n\
    \     31:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     33:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     34:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     35:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006602533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.46 tests/s, 302.91 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      else\n        return false\n      end\n    else\n    \
    \  return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjt3cvq75\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpjt3cvq75.rb:35:in `test_check_dict_case'\n\
    \     32: class TestHumanEval < Test::Unit::TestCase\n     33:   def test_check_dict_case\n\
    \     34:     candidate = method(:check_dict_case)\n  => 35:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     36:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     37:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     38:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.006657674 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.20 tests/s, 150.20 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv7zujv1n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv7zujv1n.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00756396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.21 tests/s, 264.41 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.class != String\n      return false\n    end\n \
    \ end\n  if dict.keys.all? { |key| key == key.downcase }\n    return true\n  elsif\
    \ dict.keys.all? { |key| key == key.upcase }\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvsckdg3z\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvsckdg3z.rb:38:in `test_check_dict_case'\n\
    \     35:     candidate = method(:check_dict_case)\n     36:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     39:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     40:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     41:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007248738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.96 tests/s, 413.87 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key\n  \
    \      return true\n      elsif key.upcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzznv_rkj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzznv_rkj.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006568048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.25 tests/s, 304.50 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphtyp1y_1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphtyp1y_1.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007531681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.77 tests/s, 398.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.downcase == key\n   \
    \     return true\n      elsif key.upcase == key\n        return true\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv_2ktb6_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv_2ktb6_.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006469953 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.56 tests/s, 309.12 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase != key && key.upcase\
    \ != key\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpz490fubm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpz490fubm.rb:35:in `test_check_dict_case'\n\
    \     32:   def test_check_dict_case\n     33:     candidate = method(:check_dict_case)\n\
    \     34:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 35:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     36:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     37:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006776614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.57 tests/s, 295.13 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key == key.downcase } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key == key.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnoj6p2le\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnoj6p2le.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006775372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.59 tests/s, 442.78 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a? String }\n    if dict.keys.all? { |key| key.upcase == key\
    \ }\n      return true\n    elsif dict.keys.all? { |key| key.downcase == key }\n\
    \      return true\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgjvy3rj1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgjvy3rj1.rb:37:in `test_check_dict_case'\n\
    \     34:     candidate = method(:check_dict_case)\n     35:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     36:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 37:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     38:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     39:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     40:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007600233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.57 tests/s, 394.72 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  keys =\
    \ dict.keys\n  if keys.all? { |key| key.is_a? String }\n    if keys.all? { |key|\
    \ key.downcase == key }\n      return true\n    elsif keys.all? { |key| key.upcase\
    \ == key }\n      return true\n    else\n      return false\n    end\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyawkxmul\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpyawkxmul.rb:38:in `test_check_dict_case'\n\
    \     35:     candidate = method(:check_dict_case)\n     36:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     39:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     40:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     41:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006545435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.78 tests/s, 458.33 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key\n  \
    \      return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmm_29cj9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmm_29cj9.rb:32:in `test_check_dict_case'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_check_dict_case\n\
    \     31:     candidate = method(:check_dict_case)\n  => 32:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     34:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.007482559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.64 tests/s, 133.64 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv7zujv1n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv7zujv1n.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00756396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.21 tests/s, 264.41 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.class != String\n      return false\n    end\n \
    \ end\n  if dict.keys.all? { |key| key == key.downcase }\n    return true\n  elsif\
    \ dict.keys.all? { |key| key == key.upcase }\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvsckdg3z\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvsckdg3z.rb:38:in `test_check_dict_case'\n\
    \     35:     candidate = method(:check_dict_case)\n     36:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     39:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     40:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     41:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007248738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.96 tests/s, 413.87 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key\n  \
    \      return true\n      elsif key.upcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzznv_rkj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzznv_rkj.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006568048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.25 tests/s, 304.50 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.each do |key,\
    \ value|\n    return false if key.class != String\n  end\n  dict.each do |key,\
    \ value|\n    return false if key.upcase != key && key.downcase != key\n  end\n\
    \  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9btkduif\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9btkduif.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006525435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.25 tests/s, 306.49 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k, v|\n    if k.is_a? String\n      if k.upcase == k\n        return true\n\
    \      elsif k.downcase == k\n        return true\n      else\n        return\
    \ false\n      end\n    else\n      return false\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp26ascxlv\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp26ascxlv.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006511548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.57 tests/s, 307.15 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.downcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.upcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptvtxr9uz\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptvtxr9uz.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010625619 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.11 tests/s, 282.34 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key == key.downcase } || dict.keys.all? { |key| key.is_a?(String)\
    \ && key == key.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp86jwq0dh\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp86jwq0dh.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007288228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.21 tests/s, 411.62 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp1ittk6j\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpp1ittk6j.rb:22:in `test_check_dict_case'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_check_dict_case\n\
    \     21:     candidate = method(:check_dict_case)\n  => 22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007326089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.50 tests/s, 136.50 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  keys = dict.keys\n\
    \  keys.all? { |key| key.is_a?(String) && key.upcase == key } || keys.all? { |key|\
    \ key.is_a?(String) && key.downcase == key }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfiisxxfp\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfiisxxfp.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006604354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.42 tests/s, 454.25 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } || dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3oi90e19\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3oi90e19.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006105921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.78 tests/s, 491.33 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.class == String\n      if key.downcase != key\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnt8oqnh9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnt8oqnh9.rb:36:in `test_check_dict_case'\n\
    \     33:     candidate = method(:check_dict_case)\n     34:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 36:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     39:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006522766 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.31 tests/s, 459.93 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a? String }\n    if dict.keys.all? { |key| key.downcase == key\
    \ }\n      return true\n    elsif dict.keys.all? { |key| key.upcase == key }\n\
    \      return true\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqyu_d5t8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqyu_d5t8.rb:37:in `test_check_dict_case'\n\
    \     34:     candidate = method(:check_dict_case)\n     35:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     36:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 37:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     38:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     39:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     40:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00641431 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.90 tests/s, 467.70 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  # Your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7rdi0pny\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7rdi0pny.rb:22:in `test_check_dict_case'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_check_dict_case\n\
    \     21:     candidate = method(:check_dict_case)\n  => 22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007337055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.29 tests/s, 136.29 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k, v|\n    if k.is_a? String\n      if k.upcase == k\n        return true\n\
    \      elsif k.downcase == k\n        return true\n      else\n        return\
    \ false\n      end\n    else\n      return false\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp26ascxlv\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp26ascxlv.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006511548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.57 tests/s, 307.15 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k, v|\n    if k.is_a?(String)\n      if k.upcase == k\n        return true\n\
    \      elsif k.downcase == k\n        return true\n      else\n        return\
    \ false\n      end\n    else\n      return false\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprmsndh09\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmprmsndh09.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006706945 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.10 tests/s, 298.20 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key == key.downcase\n  \
    \      return true\n      elsif key == key.upcase\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjs8ym0rn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpjs8ym0rn.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006396077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.35 tests/s, 312.69 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k, v|\n    if k.is_a?(String)\n      if k.downcase == k\n        return\
    \ true\n      elsif k.upcase == k\n        return true\n      else\n        return\
    \ false\n      end\n    else\n      return false\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp44z8luom\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp44z8luom.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006511822 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.57 tests/s, 307.13 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.each do\
    \ |key|\n    return false if key.class != String\n  end\n  dict.keys.each do |key|\n\
    \    return false if key.upcase != key && key.downcase != key\n  end\n  true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp87gi0gj8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp87gi0gj8.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006609571 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.30 tests/s, 302.59 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return false if dict.key?(key.downcase)\n      elsif key.downcase == key\n\
    \        return false if dict.key?(key.upcase)\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return true\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1om7ye33\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp1om7ye33.rb:39:in `test_check_dict_case'\n\
    \     36:   def test_check_dict_case\n     37:     candidate = method(:check_dict_case)\n\
    \     38:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 39:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     40:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     41:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     42:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006539913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.91 tests/s, 305.81 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv7zujv1n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv7zujv1n.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00756396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.21 tests/s, 264.41 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.downcase == key\n   \
    \     return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptibxgala\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptibxgala.rb:32:in `test_check_dict_case'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_check_dict_case\n\
    \     31:     candidate = method(:check_dict_case)\n  => 32:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     34:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.007546466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.51 tests/s, 132.51 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.each do |k, v|\n\
    \    return false if k.class != String\n  end\n  dict.each do |k, v|\n    return\
    \ false if k.downcase != k && k.upcase != k\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpubw9t2_6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpubw9t2_6.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006373537 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.90 tests/s, 313.80 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.downcase != key && key.upcase\
    \ != key\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3nfvmyib\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3nfvmyib.rb:35:in `test_check_dict_case'\n\
    \     32:   def test_check_dict_case\n     33:     candidate = method(:check_dict_case)\n\
    \     34:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 35:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     36:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     37:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006781973 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.45 tests/s, 294.90 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  if dict.keys.all?\
    \ { |k| k.is_a?(String) && k.downcase == k }\n    true\n  elsif dict.keys.all?\
    \ { |k| k.is_a?(String) && k.upcase == k }\n    true\n  else\n    false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp24yzrfs2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp24yzrfs2.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009216771 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.50 tests/s, 325.49 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } ||\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9tl7wcdn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9tl7wcdn.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010038059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.62 tests/s, 298.86 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key\n  \
    \      return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmm_29cj9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmm_29cj9.rb:32:in `test_check_dict_case'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_check_dict_case\n\
    \     31:     candidate = method(:check_dict_case)\n  => 32:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     34:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.007482559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.64 tests/s, 133.64 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } ||\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9tl7wcdn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9tl7wcdn.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010038059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.62 tests/s, 298.86 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.downcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.upcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl5abuvyn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpl5abuvyn.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006598592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.55 tests/s, 454.64 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase != key && key.upcase\
    \ != key\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpz490fubm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpz490fubm.rb:35:in `test_check_dict_case'\n\
    \     32:   def test_check_dict_case\n     33:     candidate = method(:check_dict_case)\n\
    \     34:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 35:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     36:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     37:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006776614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.57 tests/s, 295.13 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n     \
    \   return true\n      elsif key.downcase == key\n        return true\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5tansbx6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5tansbx6.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006891067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.12 tests/s, 290.23 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphtyp1y_1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphtyp1y_1.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007531681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.77 tests/s, 398.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n     \
    \   return true\n      elsif key.downcase == key\n        return true\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5tansbx6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5tansbx6.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006891067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.12 tests/s, 290.23 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.keys.each\
    \ do |key|\n    if key.class != String\n      return false\n    end\n  end\n \
    \ if dict.keys.all? { |key| key == key.downcase }\n    return true\n  elsif dict.keys.all?\
    \ { |key| key == key.upcase }\n    return true\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp82dyp8e8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp82dyp8e8.rb:38:in `test_check_dict_case'\n\
    \     35:     candidate = method(:check_dict_case)\n     36:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     39:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     40:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     41:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006617713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.11 tests/s, 453.33 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n     \
    \   return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpdbn1q6ax\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpdbn1q6ax.rb:35:in `test_check_dict_case'\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     37:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     38:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006833906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.33 tests/s, 585.32 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase != key && key.upcase\
    \ != key\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpz490fubm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpz490fubm.rb:35:in `test_check_dict_case'\n\
    \     32:   def test_check_dict_case\n     33:     candidate = method(:check_dict_case)\n\
    \     34:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 35:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     36:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     37:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006776614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.57 tests/s, 295.13 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.class != String\n      return false\n    end\n \
    \ end\n  if dict.keys.all? { |key| key.downcase == key }\n    return true\n  elsif\
    \ dict.keys.all? { |key| key.upcase == key }\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9ia6luys\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9ia6luys.rb:38:in `test_check_dict_case'\n\
    \     35:     candidate = method(:check_dict_case)\n     36:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     39:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     40:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     41:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00717274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.42 tests/s, 418.25 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv7zujv1n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv7zujv1n.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00756396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.21 tests/s, 264.41 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a? String }\n    return dict.keys.all? { |key| key.upcase ==\
    \ key } || dict.keys.all? { |key| key.downcase == key }\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpswel2kyl\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpswel2kyl.rb:30:in `test_check_dict_case'\n\
    \     27:     candidate = method(:check_dict_case)\n     28:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     33:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007793805 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.31 tests/s, 384.92 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n     \
    \   return true\n      elsif key.downcase == key\n        return true\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5tansbx6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5tansbx6.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006891067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.12 tests/s, 290.23 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.downcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.upcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptvtxr9uz\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptvtxr9uz.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010625619 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.11 tests/s, 282.34 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return false if dict.key?(key.downcase)\n      elsif key.downcase == key\n\
    \        return false if dict.key?(key.upcase)\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return true\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1om7ye33\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp1om7ye33.rb:39:in `test_check_dict_case'\n\
    \     36:   def test_check_dict_case\n     37:     candidate = method(:check_dict_case)\n\
    \     38:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 39:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     40:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     41:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     42:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006539913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.91 tests/s, 305.81 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.class != String\n      return false\n    end\n \
    \ end\n  if dict.keys.all? { |key| key == key.downcase }\n    return true\n  elsif\
    \ dict.keys.all? { |key| key == key.upcase }\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvsckdg3z\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvsckdg3z.rb:38:in `test_check_dict_case'\n\
    \     35:     candidate = method(:check_dict_case)\n     36:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     39:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     40:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     41:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007248738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.96 tests/s, 413.87 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    return false if key.class\
    \ != String\n  end\n  dict.keys.each do |key|\n    return false if key.downcase\
    \ != key && key.upcase != key\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpj1fo2ebq\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpj1fo2ebq.rb:29:in `test_check_dict_case'\n\
    \     26:   def test_check_dict_case\n     27:     candidate = method(:check_dict_case)\n\
    \     28:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 29:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     30:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     31:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006599859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.52 tests/s, 303.04 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k == k.downcase } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k == k.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp11md0uku\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp11md0uku.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006871154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.54 tests/s, 436.61 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv7zujv1n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv7zujv1n.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00756396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.21 tests/s, 264.41 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphtyp1y_1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphtyp1y_1.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007531681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.77 tests/s, 398.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv7zujv1n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv7zujv1n.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00756396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.21 tests/s, 264.41 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  keys =\
    \ dict.keys\n  if keys.all? { |k| k.is_a? String }\n    if keys.all? { |k| k.downcase\
    \ == k }\n      return true\n    elsif keys.all? { |k| k.upcase == k }\n     \
    \ return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnkb8d4v3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnkb8d4v3.rb:38:in `test_check_dict_case'\n\
    \     35:     candidate = method(:check_dict_case)\n     36:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     39:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     40:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     41:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006461096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.77 tests/s, 464.32 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  return false if dict.keys.any?\
    \ { |k| !k.is_a?(String) }\n  return false if dict.keys.any? { |k| k.upcase !=\
    \ k && k.downcase != k }\n  return true if dict.keys.all? { |k| k.upcase == k\
    \ }\n  return true if dict.keys.all? { |k| k.downcase == k }\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmea7cwa6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmea7cwa6.rb:29:in `test_check_dict_case'\n\
    \     26:     candidate = method(:check_dict_case)\n     27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007247982 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.97 tests/s, 413.91 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |k| k.is_a? String }\n    return dict.keys.all? { |k| k.upcase == k } || dict.keys.all?\
    \ { |k| k.downcase == k }\n  end\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsv_eh2yr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsv_eh2yr.rb:30:in `test_check_dict_case'\n\
    \     27:     candidate = method(:check_dict_case)\n     28:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     33:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00752697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.86 tests/s, 398.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.class == String\n      if key.upcase == key\n  \
    \      return true\n      elsif key.downcase == key\n        return true\n   \
    \   else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm0gtiip2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpm0gtiip2.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006631212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.80 tests/s, 301.60 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } || dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3oi90e19\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3oi90e19.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006105921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.78 tests/s, 491.33 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.downcase == key\n   \
    \     return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptibxgala\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptibxgala.rb:32:in `test_check_dict_case'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_check_dict_case\n\
    \     31:     candidate = method(:check_dict_case)\n  => 32:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     34:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.007546466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.51 tests/s, 132.51 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.downcase == key\n   \
    \     return false\n      elsif key.upcase == key\n        return false\n    \
    \  end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpldozxogp\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpldozxogp.rb:34:in `test_check_dict_case'\n\
    \     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_check_dict_case\n\
    \     33:     candidate = method(:check_dict_case)\n  => 34:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     36:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.006600812 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.50 tests/s, 151.50 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.downcase == key\n   \
    \     return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptibxgala\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptibxgala.rb:32:in `test_check_dict_case'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_check_dict_case\n\
    \     31:     candidate = method(:check_dict_case)\n  => 32:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     34:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.007546466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.51 tests/s, 132.51 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n     \
    \   return false if dict.key?(key.downcase)\n      elsif key.downcase == key\n\
    \        return false if dict.key?(key.upcase)\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return true\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzbg68ziy\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzbg68ziy.rb:39:in `test_check_dict_case'\n\
    \     36:   def test_check_dict_case\n     37:     candidate = method(:check_dict_case)\n\
    \     38:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 39:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     40:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     41:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     42:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006484596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.21 tests/s, 308.42 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.to_s.upcase == k.to_s } || dict.keys.all? { |k| k.to_s.downcase == k.to_s\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpftv8q3mj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpftv8q3mj.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006344855 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.61 tests/s, 472.82 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k, v|\n    if k.class != String\n      return false\n    end\n  end\n  if\
    \ dict.keys.all? { |k| k == k.downcase }\n    return true\n  elsif dict.keys.all?\
    \ { |k| k == k.upcase }\n    return true\n  else\n    return false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkrtz0e3y\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpkrtz0e3y.rb:38:in `test_check_dict_case'\n\
    \     35:     candidate = method(:check_dict_case)\n     36:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     39:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     40:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     41:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006381056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.71 tests/s, 470.14 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k, v|\n    if k.is_a?(String)\n      if k.upcase == k\n        return true\n\
    \      elsif k.downcase == k\n        return true\n      else\n        return\
    \ false\n      end\n    else\n      return false\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprmsndh09\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmprmsndh09.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006706945 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.10 tests/s, 298.20 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphtyp1y_1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphtyp1y_1.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007531681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.77 tests/s, 398.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase != key && key.upcase\
    \ != key\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpz490fubm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpz490fubm.rb:35:in `test_check_dict_case'\n\
    \     32:   def test_check_dict_case\n     33:     candidate = method(:check_dict_case)\n\
    \     34:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 35:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     36:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     37:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006776614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.57 tests/s, 295.13 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k, v|\n    if k.is_a?(String)\n      if k.upcase == k\n        return true\n\
    \      elsif k.downcase == k\n        return true\n      else\n        return\
    \ false\n      end\n    else\n      return false\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprmsndh09\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmprmsndh09.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006706945 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.10 tests/s, 298.20 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  if dict.keys.all?\
    \ { |k| k.is_a?(String) && k.downcase == k }\n    true\n  elsif dict.keys.all?\
    \ { |k| k.is_a?(String) && k.upcase == k }\n    true\n  else\n    false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp24yzrfs2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp24yzrfs2.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009216771 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.50 tests/s, 325.49 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key || key.upcase\
    \ == key\n        return true\n      else\n        return false\n      end\n \
    \   else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaswzgylu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpaswzgylu.rb:36:in `test_check_dict_case'\n\
    \     33:   def test_check_dict_case\n     34:     candidate = method(:check_dict_case)\n\
    \     35:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 36:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     37:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     38:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     39:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006415775 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.87 tests/s, 311.73 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphtyp1y_1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphtyp1y_1.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007531681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.77 tests/s, 398.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k, v|\n    if k.is_a? String\n      if k.downcase != k && k.upcase != k\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpid6095ul\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpid6095ul.rb:35:in `test_check_dict_case'\n\
    \     32:   def test_check_dict_case\n     33:     candidate = method(:check_dict_case)\n\
    \     34:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 35:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     36:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     37:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     38:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007138334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.09 tests/s, 280.18 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n\tif dict.empty?\n\t\treturn false\n\tend\n\tdict.each\
    \ do |key, value|\n\t\tif key.is_a? String\n\t\t\tif key.upcase == key\n\t\t\t\
    \treturn true\n\t\t\telsif key.downcase == key\n\t\t\t\treturn true\n\t\t\telse\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxf__b4h8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxf__b4h8.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006404835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.13 tests/s, 312.26 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.downcase == key\n   \
    \     return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptibxgala\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmptibxgala.rb:32:in `test_check_dict_case'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_check_dict_case\n\
    \     31:     candidate = method(:check_dict_case)\n  => 32:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     34:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.007546466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.51 tests/s, 132.51 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key\n  \
    \      return false\n      elsif key.upcase == key\n        return false\n   \
    \   end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9laimmh5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9laimmh5.rb:34:in `test_check_dict_case'\n\
    \     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_check_dict_case\n\
    \     33:     candidate = method(:check_dict_case)\n  => 34:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     36:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.006623304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.98 tests/s, 150.98 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a? String }\n    if dict.keys.all? { |key| key.downcase == key\
    \ }\n      return true\n    elsif dict.keys.all? { |key| key.upcase == key }\n\
    \      return true\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqyu_d5t8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqyu_d5t8.rb:37:in `test_check_dict_case'\n\
    \     34:     candidate = method(:check_dict_case)\n     35:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     36:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 37:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     38:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     39:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     40:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00641431 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.90 tests/s, 467.70 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key == key.downcase } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key == key.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnoj6p2le\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnoj6p2le.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006775372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.59 tests/s, 442.78 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_case\
    \ = true\n  upper_case = true\n  dict.each do |key, value|\n    if key.is_a?(String)\n\
    \      lower_case = false if key != key.downcase\n      upper_case = false if\
    \ key != key.upcase\n    else\n      return false\n    end\n  end\n  return lower_case\
    \ || upper_case\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpu79k0qb3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpu79k0qb3.rb:37:in `test_check_dict_case'\n\
    \     34:     candidate = method(:check_dict_case)\n     35:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     36:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 37:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     38:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     39:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     40:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007051186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.82 tests/s, 425.46 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key\n  \
    \      return true\n      elsif key.upcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzznv_rkj\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzznv_rkj.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006568048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.25 tests/s, 304.50 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k } || dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppv7bsqel\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppv7bsqel.rb:24:in `test_check_dict_case'\n\
    \     21:     candidate = method(:check_dict_case)\n     22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     27:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007033083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.19 tests/s, 426.56 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } || dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3oi90e19\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3oi90e19.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006105921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.78 tests/s, 491.33 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp1ittk6j\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpp1ittk6j.rb:22:in `test_check_dict_case'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_check_dict_case\n\
    \     21:     candidate = method(:check_dict_case)\n  => 22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007326089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.50 tests/s, 136.50 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.map(&:to_s).map(&:downcase).uniq.size\
    \ == 1 || dict.keys.map(&:to_s).map(&:upcase).uniq.size == 1\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxg3h9eto\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxg3h9eto.rb:23:in `test_check_dict_case'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_check_dict_case\n\
    \     22:     candidate = method(:check_dict_case)\n  => 23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.006503906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.75 tests/s, 153.75 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.each do |key|\n    return false if key.class\
    \ != String\n  end\n  dict.keys.each do |key|\n    return false if key.upcase\
    \ != key && key.downcase != key\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfjx7pimx\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfjx7pimx.rb:29:in `test_check_dict_case'\n\
    \     26:   def test_check_dict_case\n     27:     candidate = method(:check_dict_case)\n\
    \     28:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 29:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     30:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     31:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006636459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.68 tests/s, 301.37 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String) &&\
    \ k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi5xv5ajf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi5xv5ajf.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007608018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.44 tests/s, 394.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a? String }\n    return dict.keys.all? { |key| key.downcase ==\
    \ key } || dict.keys.all? { |key| key.upcase == key }\n  end\n  return false\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqh_vvcyb\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqh_vvcyb.rb:30:in `test_check_dict_case'\n\
    \     27:     candidate = method(:check_dict_case)\n     28:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     33:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007425995 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.66 tests/s, 403.99 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a?(String) && key.downcase == key }\n    return true\n  elsif\
    \ dict.keys.all? { |key| key.is_a?(String) && key.upcase == key }\n    return\
    \ true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3y0ex__9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3y0ex__9.rb:33:in `test_check_dict_case'\n\
    \     30:     candidate = method(:check_dict_case)\n     31:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     34:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     35:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     36:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006318879 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.26 tests/s, 474.77 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.to_s.downcase == key.to_s } || dict.keys.all? { |key| key.to_s.upcase ==\
    \ key.to_s }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_xv5739x\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_xv5739x.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006087362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.27 tests/s, 492.82 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.downcase == k } || dict.keys.all? { |k| k.is_a?(String)\
    \ && k.upcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyvw7qhk4\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpyvw7qhk4.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006458968 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.82 tests/s, 464.47 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp1ittk6j\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpp1ittk6j.rb:22:in `test_check_dict_case'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_check_dict_case\n\
    \     21:     candidate = method(:check_dict_case)\n  => 22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007326089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.50 tests/s, 136.50 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.downcase == key\n  \
    \      return false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmm_29cj9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpmm_29cj9.rb:32:in `test_check_dict_case'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_check_dict_case\n\
    \     31:     candidate = method(:check_dict_case)\n  => 32:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     34:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.007482559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.64 tests/s, 133.64 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.each do\
    \ |key|\n    return false if !key.is_a?(String)\n  end\n  dict.keys.each do |key|\n\
    \    return false if key.upcase != key && key.downcase != key\n  end\n  true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_fsqg56h\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_fsqg56h.rb:30:in `test_check_dict_case'\n\
    \     27:   def test_check_dict_case\n     28:     candidate = method(:check_dict_case)\n\
    \     29:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     31:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     32:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006301303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.70 tests/s, 317.39 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv7zujv1n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv7zujv1n.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00756396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.21 tests/s, 264.41 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |key, value|\n    if key.is_a?(String)\n      if key.upcase == key\n    \
    \    return true\n      elsif key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv7zujv1n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpv7zujv1n.rb:38:in `test_check_dict_case'\n\
    \     35:   def test_check_dict_case\n     36:     candidate = method(:check_dict_case)\n\
    \     37:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     39:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     40:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     41:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00756396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.21 tests/s, 264.41 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphtyp1y_1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphtyp1y_1.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007531681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.77 tests/s, 398.32 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |key| key.is_a?(String) && key.downcase == key }\n    return true\n  elsif\
    \ dict.keys.all? { |key| key.is_a?(String) && key.upcase == key }\n    return\
    \ true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3y0ex__9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp3y0ex__9.rb:33:in `test_check_dict_case'\n\
    \     30:     candidate = method(:check_dict_case)\n     31:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 33:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     34:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     35:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     36:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006318879 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.26 tests/s, 474.77 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  if dict.keys.all?\
    \ { |k| k.is_a? String }\n    return dict.keys.all? { |k| k.upcase == k } || dict.keys.all?\
    \ { |k| k.downcase == k }\n  end\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsv_eh2yr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsv_eh2yr.rb:30:in `test_check_dict_case'\n\
    \     27:     candidate = method(:check_dict_case)\n     28:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 30:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     33:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00752697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.86 tests/s, 398.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |k|\
    \ k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpih0ff0_b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpih0ff0_b.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007184464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.19 tests/s, 417.57 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.to_s.downcase == key.to_s } || dict.keys.all? { |key| key.to_s.upcase ==\
    \ key.to_s }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_xv5739x\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_xv5739x.rb:25:in `test_check_dict_case'\n\
    \     22:     candidate = method(:check_dict_case)\n     23:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     28:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006087362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.27 tests/s, 492.82 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  dict.each\
    \ do |k, v|\n    if k.class == String\n      if k.downcase == k\n        return\
    \ false\n      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfw1_e5zc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfw1_e5zc.rb:32:in `test_check_dict_case'\n\
    \     29: class TestHumanEval < Test::Unit::TestCase\n     30:   def test_check_dict_case\n\
    \     31:     candidate = method(:check_dict_case)\n  => 32:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     34:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     35:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.006046957 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.37 tests/s, 165.37 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  dict.keys.all? { |key| key.to_s.upcase == key.to_s\
    \ } || dict.keys.all? { |key| key.to_s.downcase == key.to_s }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9m4wzglk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9m4wzglk.rb:24:in `test_check_dict_case'\n\
    \     21:     candidate = method(:check_dict_case)\n     22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     27:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006288152 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.03 tests/s, 477.09 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  lower_keys\
    \ = dict.keys.select { |key| key.downcase == key }\n  upper_keys = dict.keys.select\
    \ { |key| key.upcase == key }\n  return lower_keys.length == dict.length || upper_keys.length\
    \ == dict.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg19zgqz7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpg19zgqz7.rb:29:in `test_check_dict_case'\n\
    \     26:     candidate = method(:check_dict_case)\n     27:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 29:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     32:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006279503 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.25 tests/s, 477.74 assertions/s\n"
  timestamp: 1659799911
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  # your code here\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp1ittk6j\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpp1ittk6j.rb:22:in `test_check_dict_case'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_check_dict_case\n\
    \     21:     candidate = method(:check_dict_case)\n  => 22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007326089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.50 tests/s, 136.50 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  return false if dict.empty?\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.downcase == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxmuwp_b3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxmuwp_b3.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009116887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 329.06 assertions/s\n"
  timestamp: 1659799910
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
    \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\
    def check_dict_case(dict)\n  if dict.empty?\n    return false\n  end\n  keys =\
    \ dict.keys\n  if keys.all? { |key| key.is_a? String }\n    if keys.all? { |key|\
    \ key.downcase == key }\n      return true\n    elsif keys.all? { |key| key.upcase\
    \ == key }\n      return true\n    else\n      return false\n    end\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyawkxmul\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpyawkxmul.rb:38:in `test_check_dict_case'\n\
    \     35:     candidate = method(:check_dict_case)\n     36:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     37:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 38:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     39:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     40:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     41:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006545435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.78 tests/s, 458.33 assertions/s\n"
  timestamp: 1659799911
