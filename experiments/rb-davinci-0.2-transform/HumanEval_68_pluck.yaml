name: HumanEval_68_pluck
language: rb
prompt: "# \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
  \ plucked node should be the node with the smallest even value.\n# If multiple nodes\
  \ with the same smallest even value are found return the node that has smallest\
  \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n# If there are no even values or the given array is empty, return [].\n\
  # Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck.call([1,\
  \ 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example 4:\n# >>>\
  \ pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the smallest value,\
  \ but  there are two zeros,\n# so we will choose the first zero, which has the smallest\
  \ index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n\
  def pluck(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
  \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
  \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
  \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n\
  \    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
  \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
  \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
completions: ["  return [] if arr.empty?\n  evens = arr.select { |n| n.even? }\n \
    \ return [] if evens.empty?\n  evens.min\nend", "  evens = arr.select { |x| x.even?\
    \ }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend", "  arr.each_with_index\
    \ do |x, i|\n    return [x, i] if x.even?\n  end\n  []\nend", "  evens = arr.select\
    \ { |num| num.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  even_arr = arr.select { |num| num.even? }\n\
    \  return [] if even_arr.empty?\n  even_arr.min\nend", "  return [] if arr.empty?\n\
    \  even_arr = arr.select { |num| num.even? }\n  return [] if even_arr.empty?\n\
    \  even_arr.min\n  even_arr.each_with_index do |num, i|\n    return [num, i] if\
    \ num == even_arr.min\n  end\nend", "  even_arr = arr.select { |num| num.even?\
    \ }\n  even_arr.empty? ? [] : [even_arr.min, arr.index(even_arr.min)]\nend", " \
    \ even_nums = arr.select { |num| num.even? }\n  even_nums.empty? ? [] : [even_nums.min,\
    \ arr.index(even_nums.min)]\nend", "  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  arr.each_with_index do |num,\
    \ index|\n    return [num, index] if num.even?\n  end\n  []\nend", "  evens =\
    \ arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  evens = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  even_numbers = arr.select { |x| x.even? }\n\
    \  return [] if even_numbers.empty?\n  even_numbers.min\n  even_numbers.each do\
    \ |x|\n    if x == even_numbers.min\n      return [x, arr.index(x)]\n    end\n\
    \  end\nend", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n\
    \  return [] if evens.empty?\n  evens.sort!\n  [evens.first, arr.index(evens.first)]\n\
    end", "  evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  evens = arr.select { |num| num.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\n  [evens.min,\
    \ arr.index(evens.min)]\nend", "  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n\
    \  even_nums = arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n\
    \  even_nums.min\n  [even_nums.min, arr.index(even_nums.min)]\nend", "  arr.each_with_index\
    \ do |x, i|\n    if x.even?\n      return [x, i]\n    end\n  end\n  []\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |num| num.even? }\n  return []\
    \ if evens.empty?\n  evens.sort!\n  [evens.first, arr.index(evens.first)]\nend",
  "  return [] if arr.empty?\n  even_arr = arr.select { |x| x.even? }\n  return []\
    \ if even_arr.empty?\n  even_arr.min\n  even_arr.each_with_index do |x, i|\n \
    \   return [x, i] if x == even_arr.min\n  end\nend", "  even_numbers = arr.select\
    \ { |num| num.even? }\n  return [] if even_numbers.empty?\n  even_numbers.min\n\
    \  [even_numbers.min, arr.index(even_numbers.min)]\nend", "  evens = arr.select\
    \ { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend",
  "  arr.each_with_index do |n, i|\n    return [n, i] if n.even?\n  end\n  []\nend",
  "  evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  even_arr = arr.select { |num| num.even? }\n\
    \  return [] if even_arr.empty?\n  even_arr.min\n  [even_arr.min, arr.index(even_arr.min)]\n\
    end", "  arr.each_with_index.select { |x, _| x.even? }.min_by { |x, _| x } ||\
    \ []\nend", "  arr.select(&:even?).min_by { |x| [x, arr.index(x)] }\nend", " \
    \ arr.each_with_index do |x, i|\n    return [x, i] if x.even?\n  end\n  []\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if\
    \ evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  evens\
    \ = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  arr.each_with_index do |e, i|\n    return [e, i] if e.even?\n  end\n\
    \  []\nend", "  arr.each_with_index do |x, i|\n    if x.even?\n      return [x,\
    \ i]\n    end\n  end\n  return []\nend", "  arr.each_with_index do |num, index|\n\
    \    return [num, index] if num.even?\n  end\n  []\nend", "  arr.each_with_index\
    \ do |v, i|\n    return [v, i] if v.even?\n  end\n  []\nend", "  arr.each_with_index.select\
    \ { |x, _| x.even? }.min_by { |x, _| x }\nend", "  even_nums = arr.select { |num|\
    \ num.even? }\n  return [] if even_nums.empty?\n  even_nums.min\n  even_nums.each_with_index\
    \ do |num, idx|\n    return [num, idx] if num == even_nums.min\n  end\nend", " \
    \ evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  arr.each_with_index.select { |x, _| x.even? }.min_by { |x, i| [x, i]\
    \ } || []\nend", "  evens = arr.select { |num| num.even? }\n  evens.empty? ? []\
    \ : [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  even_numbers\
    \ = arr.select { |num| num.even? }\n  return [] if even_numbers.empty?\n  even_numbers.min\
    \ == even_numbers.max ? [even_numbers.min, arr.index(even_numbers.min)] : [even_numbers.min,\
    \ arr.index(even_numbers.min)]\nend", "  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x } || []\nend", "  even_nums = arr.select { |num| num.even?\
    \ }\n  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\nend",
  "  evens = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  arr.select(&:even?).min_by { |x| [x, arr.index(x)] }\nend", "  evens\
    \ = arr.select { |num| num.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  even_nums = arr.select { |num| num.even? }\n\
    \  return [] if even_nums.empty?\n  even_nums.min\n  even_nums.each_with_index\
    \ do |num, idx|\n    if num == even_nums.min\n      return [num, idx]\n    end\n\
    \  end\nend", "  arr.each_with_index.min_by { |x, _i| x.even? ? x : Float::INFINITY\
    \ }\nend", "  arr.each_with_index do |x, i|\n    if x.even?\n      return [x,\
    \ i]\n    end\n  end\n  []\nend", "  evens = arr.select { |n| n.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend",
  "  arr.each_with_index do |val, idx|\n    return [val, idx] if val.even?\n  end\n\
    \  []\nend", "  evens = arr.select { |i| i.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  evens = arr.select { |n| n.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  arr.select(&:even?).min\n\
    end", "  arr.each_with_index do |num, index|\n    if num.even?\n      return [num,\
    \ index]\n    end\n  end\n  []\nend", "  evens = arr.select { |x| x.even? }\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return\
    \ [] if arr.empty?\n  even_arr = arr.select { |num| num.even? }\n  return [] if\
    \ even_arr.empty?\n  even_arr.min\n  [even_arr.min, arr.index(even_arr.min)]\n\
    end", "  even_nums = arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n\
    \  even_nums.min\n  even_nums.each_with_index do |num, index|\n    return [num,\
    \ index] if num == even_nums.min\n  end\nend", "  evens = arr.select { |n| n.even?\
    \ }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend", "  return\
    \ [] if arr.empty?\n  even_numbers = arr.select { |num| num.even? }\n  return\
    \ [] if even_numbers.empty?\n  even_numbers.min\n  [even_numbers.min, arr.index(even_numbers.min)]\n\
    end", "  even_numbers = arr.select { |num| num.even? }\n  even_numbers.empty?\
    \ ? [] : [even_numbers.min, arr.index(even_numbers.min)]\nend", "  evens = arr.select\
    \ { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend",
  "  evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  evens\
    \ = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  evens = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\n\
    end", "  evens = arr.select { |num| num.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend", "  arr.each_with_index.min_by { |x, _| x.even?\
    \ ? x : Float::INFINITY }\nend", "  arr.each_with_index do |x, i|\n    if x.even?\n\
    \      return [x, i]\n    end\n  end\n  []\nend", "  even_arr = arr.select { |n|\
    \ n.even? }\n  even_arr.empty? ? [] : [even_arr.min, arr.index(even_arr.min)]\n\
    end", "  evens = arr.select { |num| num.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend",
  "  arr.each_with_index do |x, i|\n    return [x, i] if x.even?\n  end\n  []\nend",
  "  evens = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  evens = arr.select { |num| num.even? }\n  return [] if evens.empty?\n\
    \  evens.min\n  arr.index(evens.min)\nend", "  arr.each_with_index do |e, i|\n\
    \    return [e, i] if e.even?\n  end\n  []\nend", "  evens = arr.select { |n|\
    \ n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend", " \
    \ arr.select(&:even?).min_by { |e| [arr.index(e), e] }\nend", "  evens = arr.select\
    \ { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  evens.min\nend", "  arr.each_with_index do |val, idx|\n    return\
    \ [val, idx] if val.even?\n  end\n  []\nend", "  arr.each_with_index do |v, i|\n\
    \    return [v, i] if v.even?\n  end\n  []\nend", "  evens = arr.select { |x|\
    \ x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend", " \
    \ arr.select { |x| x.even? }.min\nend", "  even_nums = arr.select { |num| num.even?\
    \ }\n  return [] if even_nums.empty?\n  even_nums.min\n  even_nums.each_with_index\
    \ do |num, idx|\n    return [num, idx] if num == even_nums.min\n  end\nend", " \
    \ evens = arr.select { |num| num.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  arr.each_with_index do |e, i|\n    return [e, i] if e.even?\n  end\n\
    \  []\nend", "  arr.each_with_index do |e, i|\n    return [e, i] if e.even?\n\
    \  end\n  []\nend", "  return [] if arr.empty?\n  evens = arr.select { |n| n.even?\
    \ }\n  return [] if evens.empty?\n  evens.min == evens.max ? [evens.min, arr.index(evens.min)]\
    \ : [evens.min, arr.index(evens.min)]\nend", "  evens = arr.select { |num| num.even?\
    \ }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend", "  return\
    \ [] if arr.empty?\n  even_numbers = arr.select { |num| num.even? }\n  return\
    \ [] if even_numbers.empty?\n  even_numbers.min\n  [even_numbers.min, arr.index(even_numbers.min)]\n\
    end", "  arr.each_with_index do |e, i|\n    return [e, i] if e.even?\n  end\n\
    \  []\nend", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n\
    \  return [] if evens.empty?\n  evens.min\nend", "  arr.each_with_index do |num,\
    \ index|\n    if num.even?\n      return [num, index]\n    end\n  end\n  []\n\
    end", "  even_numbers = arr.select { |num| num.even? }\n  return [] if even_numbers.empty?\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n",
  "  arr.each_with_index.select { |x, _| x.even? }.min_by { |x, _| x }\nend", "  evens\
    \ = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  evens = arr.select { |num| num.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  arr.each_with_index do |x,\
    \ i|\n    return [x, i] if x.even?\n  end\n  []\nend", "  arr.each_with_index.select\
    \ { |x, _| x.even? }.min_by { |x, _| x }\nend", "  arr.each_with_index do |x,\
    \ i|\n    if x.even?\n      return [x, i]\n    end\n  end\n  []\nend", "  evens\
    \ = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  arr.each_with_index.select { |x, _| x.even? }.min_by { |x, _| x }\nend",
  "  even_numbers = arr.select { |x| x.even? }\n  return [] if even_numbers.empty?\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n\
    \  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n  even_numbers.min\n",
  "  evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  arr.each_with_index do |x, i|\n    return [x, i] if x.even?\n  end\n\
    \  []\nend", "  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  evens.min\n  arr.index(evens.min)\nend", "  evens = arr.select { |n| n.even?\
    \ }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend", "  evens =\
    \ arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  arr.each_with_index.min_by { |v, i| v.even? ? v : Float::INFINITY }\n\
    end", "  arr.each_with_index do |x, i|\n    return [x, i] if x.even?\n  end\n\
    \  []\nend", "  even_arr = arr.select { |num| num.even? }\n  even_arr.empty? ?\
    \ [] : [even_arr.min, arr.index(even_arr.min)]\nend", "  evens = arr.select {\
    \ |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if\
    \ evens.empty?\n  evens.min\nend", "  arr.each_with_index do |e, i|\n    return\
    \ [e, i] if e.even?\n  end\n  []\nend", "  evens = arr.select { |n| n.even? }\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend", "  return [] if\
    \ arr.empty?\n  evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  even_arr = arr.select { |num| num.even? }\n\
    \  return [] if even_arr.empty?\n  even_arr.min\n  [even_arr.min, arr.index(even_arr.min)]\n\
    end", "  evens = arr.select { |num| num.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  evens = arr.select { |x|\
    \ x.even? }\n  return [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select(&:even?)\n  return [] if\
    \ evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend", "  arr.each_with_index\
    \ do |value, index|\n    if value.even?\n      return [value, index]\n    end\n\
    \  end\n  []\nend", "  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.min\n  evens.index(evens.min)\nend", " \
    \ evens = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  even_nums = arr.select { |num| num.even? }\n  even_nums.empty? ? [] :\
    \ [even_nums.min, arr.index(even_nums.min)]\nend", "  evens = arr.select { |x|\
    \ x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend", " \
    \ arr.each_with_index do |num, index|\n    if num.even?\n      return [num, index]\n\
    \    end\n  end\n  []\nend", "  arr.each_with_index.select { |x, _| x.even? }.min_by\
    \ { |x, _| x }\nend", "  arr.each_with_index.select { |x, _| x.even? }.min_by\
    \ { |x, _| x }\nend", "  evens = arr.select { |x| x.even? }\n  evens.empty? ?\
    \ [] : [evens.min, arr.index(evens.min)]\nend", "  evens = arr.select(&:even?)\n\
    \  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend", "  return [] if\
    \ arr.empty?\n  even_numbers = arr.select { |num| num.even? }\n  even_numbers.empty?\
    \ ? [] : [even_numbers.min, arr.index(even_numbers.min)]\nend", "  arr.each_with_index\
    \ do |n, i|\n    return [n, i] if n.even?\n  end\n  []\nend", "  # your code here\n\
    end", "  evens = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  even_numbers = arr.select { |num| num.even?\
    \ }\n  even_numbers.empty? ? [] : [even_numbers.min, arr.index(even_numbers.min)]\n\
    end", "  evens = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  arr.each_with_index.select\
    \ { |x, _| x.even? }.min_by { |x, _| x }\nend", "  return [] if arr.empty?\n \
    \ evens = arr.select(&:even?)\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  even_nums = arr.select { |num| num.even? }\n\
    \  return [] if even_nums.empty?\n  even_nums.min\n  even_nums.each_with_index\
    \ do |num, index|\n    return [num, index] if num == even_nums.min\n  end\nend",
  "  evens = arr.select { |e| e.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if\
    \ evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  evens\
    \ = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  arr.select(&:even?).min\nend", "  even_nums = arr.select { |num| num.even?\
    \ }\n  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\nend",
  "  evens = arr.select { |num| num.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  evens = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  evens = arr.select { |x|\
    \ x.even? }\n  return [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\n\
    end", "  arr.each_with_index do |x, i|\n    return [x, i] if x.even?\n  end\n\
    \  []\nend", "  arr.each_with_index do |x, i|\n    return [x, i] if x.even?\n\
    \  end\n  []\nend", "  even_nums = arr.select { |num| num.even? }\n  even_nums.empty?\
    \ ? [] : [even_nums.min, arr.index(even_nums.min)]\nend", "  return [] if arr.empty?\n\
    \  even_arr = arr.select { |x| x.even? }\n  return [] if even_arr.empty?\n  even_arr.min\n\
    \  arr.index(even_arr.min)\n  [even_arr.min, arr.index(even_arr.min)]\nend", " \
    \ arr.select(&:even?).min\nend", "  arr.each_with_index.select { |n, i| n.even?\
    \ }.min_by { |n, i| n }\nend", "  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  arr.each_with_index do |x,\
    \ i|\n    if x.even?\n      return [x, i]\n    end\n  end\n  []\nend", "  arr.each_with_index\
    \ do |x, i|\n    if x.even?\n      return [x, i]\n    end\n  end\n  []\nend",
  "  evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  even_numbers = arr.select { |num| num.even? }\n  return [] if even_numbers.empty?\n\
    \  even_numbers.min\nend", "  even_nums = arr.select { |num| num.even? }\n  even_nums.empty?\
    \ ? [] : [even_nums.min, arr.index(even_nums.min)]\nend", "  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\n\
    end", "  evens = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  even_nums = arr.select { |num| num.even? }\n\
    \  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\nend", " \
    \ return [] if arr.empty?\n  even_numbers = arr.select { |num| num.even? }\n \
    \ return [] if even_numbers.empty?\n  even_numbers.min\n  [even_numbers.min, arr.index(even_numbers.min)]\n\
    end", "  return [] if arr.empty?\n  even_arr = arr.select { |n| n.even? }\n  return\
    \ [] if even_arr.empty?\n  even_arr.min\nend", "  even_numbers = arr.select {\
    \ |num| num.even? }\n  even_numbers.empty? ? [] : [even_numbers.min, arr.index(even_numbers.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\n\
    end", "  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  arr.each_with_index do |e, i|\n\
    \    return [e, i] if e.even?\n  end\n  []\nend", "  even_nums = arr.select {\
    \ |num| num.even? }\n  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select(&:even?)\n  return [] if\
    \ evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend", "  evens\
    \ = arr.select(&:even?)\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  arr.each_with_index.select { |x, _| x.even?\
    \ }.min_by { |x, _| x }\nend", "  evens = arr.select { |n| n.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  even_nums = arr.select {\
    \ |num| num.even? }\n  return [] if even_nums.empty?\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n  even_nums.min\n\
    \  even_nums.min\n  even_nums.min\n  even_nums.min\n", "  evens = arr.select {\
    \ |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  evens.min\nend", "  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend",
  "  return [] if arr.empty?\n  even_nums = arr.select { |num| num.even? }\n  return\
    \ [] if even_nums.empty?\n  even_nums.min\n  [even_nums.min, arr.index(even_nums.min)]\n\
    end", "  return [] if arr.empty?\n  even_nums = arr.select { |num| num.even? }\n\
    \  return [] if even_nums.empty?\n  even_nums.min\n  [even_nums.min, arr.index(even_nums.min)]\n\
    end", "  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  evens = arr.select { |x| x.even?\
    \ }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  evens.min\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
