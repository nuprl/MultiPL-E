name: HumanEval_87_get_row
language: rb
prompt: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
  \ to matrix, however, unlike matrices,\n# each row may contain a different number\
  \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return\
  \ list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate\
  \ - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending\
  \ order.\n# Also, sort coordinates of the row by columns in descending order.\n\
  # Examples:\n# >>> get_row.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
  \ 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row.call([],\
  \ 1)\n# []\n# >>> get_row.call([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\ndef get_row(lst,\
  \ x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
  \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
  \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5,\
  \ 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0,\
  \ 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6,\
  \ 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3,\
  \ 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
  \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
  \ [1, 2, 3]], 3))\n  end\nend\n"
completions: ["  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |cell, cell_index|\n      [row_index, cell_index] if cell == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |row, _| row }.sort_by { |_, cell| -cell }\n\
    end", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |row,\
    \ col| [row, -col] }\nend", "  result = []\n  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |elem, j|\n      result << [i, j] if elem == x\n \
    \   end\n  end\n  result.sort_by { |i, j| [i, -j] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |row, col| [row, -col] }\n\
    end", "  # your code here\nend", "  result = []\n  lst.each_with_index do |row,\
    \ row_index|\n    row.each_with_index do |column, column_index|\n      result\
    \ << [row_index, column_index] if column == x\n    end\n  end\n  result.sort_by\
    \ { |row, column| [row, -column] }\nend", "  lst.each_with_index.map do |row,\
    \ i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n  \
    \  end\n  end.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", "  result =\
    \ []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index do |col,\
    \ col_index|\n      result << [row_index, col_index] if col == x\n    end\n  end\n\
    \  result.sort_by { |row, col| [row, -col] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend",
  "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map\
    \ do |row, row_index|\n    row.each_with_index.map do |column, column_index|\n\
    \      [row_index, column_index] if column == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend", "  lst.each_with_index.with_object([])\
    \ do |(row, row_index), result|\n    row.each_with_index do |element, column_index|\n\
    \      result << [row_index, column_index] if element == x\n    end\n  end.sort_by\
    \ { |row, column| [row, -column] }\nend", "  lst.each_with_index.map do |row,\
    \ i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n  \
    \  end\n  end.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", "  lst.each_with_index.map\
    \ { |row, row_index|\n    row.each_with_index.map { |column, column_index|\n \
    \     [row_index, column_index] if column == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend", "  lst.each_with_index.map { |row, i|\n\
    \    row.each_with_index.map { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  # your code here\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      result << [i, j] if\
    \ col == x\n    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend",
  "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem, j|\n\
    \      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i, j|\
    \ [i, -j] }\nend", "  lst.each_with_index.map { |row, i|\n    row.each_with_index.map\
    \ { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |a, b| [a, -b] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |column, column_index|\n      result << [row_index,\
    \ column_index] if column == x\n    end\n  end\n  result.sort_by { |row, column|\
    \ [row, -column] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |x, y| [x, -y] }\nend", "  lst.each_with_index.map do |row, row_index|\n \
    \   row.each_with_index.map do |element, column_index|\n      [row_index, column_index]\
    \ if element == x\n    end\n  end.flatten(1).compact.sort_by { |row, column| [row,\
    \ -column] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |column, column_index|\n      result << [row_index,\
    \ column_index] if column == x\n    end\n  end\n  result.sort_by { |row, column|\
    \ [row, -column] }\nend", "  lst.each_with_index.map do |row, row_index|\n   \
    \ row.each_with_index.map do |col, col_index|\n      [row_index, col_index] if\
    \ col == x\n    end\n  end.flatten(1).compact.sort_by { |row, col| [row, -col]\
    \ }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.map.with_index do |row, i|\n    row.map.with_index\
    \ do |e, j|\n      [i, j] if e == x\n    end\n  end.flatten(1).compact.sort do\
    \ |a, b|\n    if a[0] == b[0]\n      b[1] <=> a[1]\n    else\n      a[0] <=> b[0]\n\
    \    end\n  end\nend", "  # your code here\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if\
    \ elem == x\n    end\n  end\n  result.sort_by { |elem| [elem[0], -elem[1]] }\n\
    end", "  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i,\
    \ j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", " \
    \ lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |element, column_index|\n      [row_index, column_index] if element == x\n \
    \   end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend",
  "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |item,\
    \ j|\n      result << [i, j] if item == x\n    end\n  end\n  result.sort_by {\
    \ |item| [item[0], -item[1]] }\nend", "  result = []\n  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if elem\
    \ == x\n    end\n  end\n  result.sort_by { |x, y| [x, -y] }\nend", "  lst.each_with_index.map\
    \ do |row, row_index|\n    row.each_with_index.map do |column, column_index|\n\
    \      [row_index, column_index] if column == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend", "  result = []\n  lst.each_with_index\
    \ do |row, row_index|\n    row.each_with_index do |column, column_index|\n   \
    \   result << [row_index, column_index] if column == x\n    end\n  end\n  result.sort_by\
    \ { |row, column| [row, -column] }\nend", "  lst.each_with_index.map { |row, i|\
    \ row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.map do |row, i|\n \
    \   row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  lst.each_with_index.map { |row, i|\n    row.each_with_index.map\
    \ { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ row_index|\n    row.each_with_index do |column, column_index|\n      result\
    \ << [row_index, column_index] if column == x\n    end\n  end\n  result.sort_by\
    \ { |row, column| [row, -column] }\nend", "  lst.each_with_index.map do |row,\
    \ row_index|\n    row.each_with_index.map do |col, col_index|\n      [row_index,\
    \ col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by { |row, col|\
    \ [row, -col] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |column, column_index|\n      [row_index, column_index] if column == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\n\
    end", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |item, item_index|\n      [row_index, item_index] if item == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |row, _| row }.map { |row, item| [item, row]\
    \ }.sort.reverse.map { |item, row| [row, item] }\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      result << [i, j] if\
    \ col == x\n    end\n  end\n  result.sort_by { |a, b| [a, -b] }\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map { |row, i|\n    row.each_with_index.map\
    \ { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |element, column_index|\n      [row_index, column_index] if element == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\n\
    end", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if elem ==\
    \ x\n    end\n  end\n  result.sort_by { |elem| [elem[0], -elem[1]] }\nend", " \
    \ lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem, j|\n\
    \      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e| [e[0],\
    \ -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |x, y| [x, -y] }\nend", "  lst.each_with_index.map do |row, row_index|\n \
    \   row.each_with_index.map do |element, column_index|\n      [row_index, column_index]\
    \ if element == x\n    end\n  end.flatten(1).compact.sort_by { |row, column| [row,\
    \ -column] }\nend", "  lst.each_with_index.map { |row, i|\n    row.each_with_index.map\
    \ { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |column, column_index|\n      [row_index, column_index] if column == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\n\
    end", "  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i,\
    \ j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", " \
    \ lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem, j|\n\
    \      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e| [e[0],\
    \ -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |x, y| [x, -y] }\nend", "  result = []\n  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      result << [i, j] if col == x\n   \
    \ end\n  end\n  result.sort_by { |a, b| [a, -b] }\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n\
    \    row.each_with_index.map do |element, column_index|\n      [row_index, column_index]\
    \ if element == x\n    end\n  end.flatten(1).compact.sort_by { |row, column| [row,\
    \ -column] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |element, column_index|\n      result << [row_index,\
    \ column_index] if element == x\n    end\n  end\n  result.sort_by { |row, column|\
    \ [row, -column] }\nend", "  lst.each_with_index.map do |row, row_index|\n   \
    \ row.each_with_index.map do |col, col_index|\n      [row_index, col_index] if\
    \ col == x\n    end\n  end.flatten(1).compact.sort_by { |row, col| [row, -col]\
    \ }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |a, b| [a, -b] }\nend", "  # TODO: Implement me!\nend", "  result = []\n \
    \ lst.each_with_index do |row, row_index|\n    row.each_with_index do |element,\
    \ column_index|\n      result << [row_index, column_index] if element == x\n \
    \   end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n\
    \    row.each_with_index.map do |column, column_index|\n      [row_index, column_index]\
    \ if column == x\n    end\n  end.flatten(1).compact.sort_by do |row_index, column_index|\n\
    \    [row_index, -column_index]\n  end\nend", "  lst.map.with_index { |row, i|\
    \ row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |a, b| [a, -b] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |el, j|\n      [i, j] if el == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |el| [el[0], -el[1]] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  # your code here\nend", "  lst.each_with_index.with_object([])\
    \ do |(row, row_index), result|\n    row.each_with_index do |item, col_index|\n\
    \      result << [row_index, col_index] if item == x\n    end\n  end.sort_by {\
    \ |row, col| [row, -col] }\nend", "  lst.each_with_index.map do |row, i|\n   \
    \ row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n    end\n \
    \ end.flatten(1).compact.sort_by { |x, y| [x, -y] }\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.map do |row, i|\n \
    \   row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map\
    \ do |row, row_index|\n    row.each_with_index.map do |column, column_index|\n\
    \      [row_index, column_index] if column == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend", "  lst.each_with_index.map do |row,\
    \ row_index|\n    row.each_with_index.map do |column, column_index|\n      [row_index,\
    \ column_index] if column == x\n    end\n  end.flatten(1).compact.sort_by { |row,\
    \ column| [row, -column] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if elem ==\
    \ x\n    end\n  end\n  result.sort_by { |elem| [elem[0], -elem[1]] }\nend", " \
    \ lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |element, column_index|\n      [row_index, column_index] if element == x\n \
    \   end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend",
  "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |row, col|\
    \ [row, -col] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |element, column_index|\n      [row_index, column_index] if element == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\n\
    end", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |item, item_index|\n      [row_index, item_index] if item == x\n    end\n\
    \  end.flatten(1).compact.sort_by do |row_index, item_index|\n    [row_index,\
    \ -item_index]\n  end\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |item, j|\n      [i, j] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |i, j| [i, -j] }\n\
    end", "  lst.each_with_index.with_object([]) do |(row, row_index), result|\n \
    \   row.each_with_index do |value, column_index|\n      result << [row_index,\
    \ column_index] if value == x\n    end\n  end.sort_by { |row, column| [row, -column]\
    \ }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |element, column_index|\n      [row_index, column_index] if element == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\n\
    end", "  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i,\
    \ j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", " \
    \ lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend",
  "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do |col,\
    \ col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |a, b| [a, -b] }\n\
    end", "  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map\
    \ { |column, column_index|\n      [row_index, column_index] if column == x\n \
    \   }\n  }.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend",
  "  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map { |col,\
    \ col_index|\n      [row_index, col_index] if col == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.flat_map do |row, row_index|\n\
    \    row.each_with_index.map do |element, column_index|\n      [row_index, column_index]\
    \ if element == x\n    end\n  end.compact.sort_by { |row, column| [row, -column]\
    \ }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend", "  result =\
    \ []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index do |column,\
    \ column_index|\n      result << [row_index, column_index] if column == x\n  \
    \  end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend", "  # your\
    \ code here\nend", "  lst.map.with_index { |row, i| row.map.with_index { |e, j|\
    \ [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend",
  "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend",
  "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend",
  "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do |column,\
    \ column_index|\n      [row_index, column_index] if column == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend", "  lst.each_with_index.map do |row,\
    \ i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n  \
    \  end\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  result\
    \ = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |item, j|\n\
    \      result << [i, j] if item == x\n    end\n  end\n  result.sort_by { |x| [x[0],\
    \ -x[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  lst.each_with_index.map { |row, i| row.map { |e| [i, row.index(e)]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", " \
    \ lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |a, b|\
    \ [a, -b] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |element, column_index|\n      [row_index, column_index] if element == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\n\
    end", "  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i,\
    \ j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", " \
    \ lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem, j|\n\
    \      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a, b|\
    \ [a, -b] }\nend", "  # your code here\nend", "  lst.each_with_index.map do |row,\
    \ i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n  \
    \  end\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |x, y| [x, -y] }\nend", " \
    \ lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem, j|\n\
    \      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by do |elem|\n\
    \    [elem[0], -elem[1]]\n  end\nend", "  lst.each_with_index.map do |row, i|\n\
    \    row.each_with_index.map do |col, j|\n      [i, j] if col == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |x, y| [x, -y] }\nend", "  lst.each_with_index.map\
    \ do |row, row_index|\n    row.each_with_index.map do |column, column_index|\n\
    \      [row_index, column_index] if column == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, _| row }.map { |row, column| [row, -column] }.sort_by { |_, column|\
    \ column }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |x, y| [x, -y] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.map do |row, i|\n \
    \   row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", "  lst.each_with_index.map\
    \ do |row, row_index|\n    row.each_with_index.map do |element, column_index|\n\
    \      [row_index, column_index] if element == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      result << [i, j] if\
    \ col == x\n    end\n  end\n  result.sort_by { |x| [x[0], -x[1]] }\nend", "  result\
    \ = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index do\
    \ |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend",
  "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem, j|\n\
    \      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by do |i, j|\n\
    \    [i, -j]\n  end\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |item, item_index|\n      result << [row_index, item_index] if item == x\n\
    \    end\n  end\n  result.sort_by { |item| [item[0], -item[1]] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |a, b| [a, -b] }\nend", " \
    \ lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem, j|\n\
    \      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |x, y|\
    \ [x, -y] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |col, col_index|\n      result << [row_index, col_index]\
    \ if col == x\n    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend",
  "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  result = []\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |elem, j|\n    \
    \  result << [i, j] if elem == x\n    end\n  end\n  result.sort_by { |x, y| [x,\
    \ -y] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n   \
    \ row.each_with_index do |column, column_index|\n      result << [row_index, column_index]\
    \ if column == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column]\
    \ }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n\
    \    row.each_with_index.map do |col, col_index|\n      [row_index, col_index]\
    \ if col == x\n    end\n  end.flatten(1).compact.sort_by { |row, col| [row, -col]\
    \ }\nend", "  lst.each_with_index.flat_map do |row, i|\n    row.each_with_index.map\
    \ do |e, j|\n      e == x ? [i, j] : nil\n    end.compact\n  end.sort_by do |i,\
    \ j|\n    [i, -j]\n  end\nend", "  lst.each_with_index.map do |row, row_index|\n\
    \    row.each_with_index.map do |col, col_index|\n      [row_index, col_index]\
    \ if col == x\n    end\n  end.flatten(1).compact.sort_by { |row, col| [row, -col]\
    \ }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |x, y| [x, -y] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, _| row }.map { |row, col| [row, -col] }.sort_by { |_, col| col }.map\
    \ { |row, _| [row, -col] }\nend", "  lst.each_with_index.map do |row, i|\n   \
    \ row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n    end\n \
    \ end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |row, col| [row, -col] }\n\
    end", "  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i,\
    \ j] if e == x } }.flatten(1).compact.sort { |a, b| a[0] == b[0] ? b[1] <=> a[1]\
    \ : a[0] <=> b[0] }\nend", "  lst.each_with_index.reduce([]) do |acc, (row, row_index)|\n\
    \    row.each_with_index do |elem, col_index|\n      acc << [row_index, col_index]\
    \ if elem == x\n    end\n    acc\n  end.sort_by { |row, col| [row, -col] }\nend",
  "  lst.map.with_index { |row, row_index| row.map.with_index { |col, col_index| [row_index,\
    \ col_index] if col == x } }.flatten(1).compact.sort_by { |row, col| [row, -col]\
    \ }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |element, column_index|\n      [row_index, column_index] if element == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\n\
    end", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by do\
    \ |row, col|\n    [row, -col]\n  end\nend", "  lst.each_with_index.map do |row,\
    \ i|\n    row.each_with_index.map do |el, j|\n      [i, j] if el == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |row, col| [row, -col] }\nend", "  result\
    \ = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |elem, j|\n\
    \      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by { |elem|\
    \ [elem[0], -elem[1]] }\nend", "  lst.each_with_index.map { |row, row_index|\n\
    \    row.each_with_index.map { |element, column_index|\n      [row_index, column_index]\
    \ if element == x\n    }\n  }.flatten(1).compact.sort_by { |row, column| [row,\
    \ -column] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |element, j|\n      result << [i, j] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend", " \
    \ lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |x, y|\
    \ [x, -y] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |element, column_index|\n      result << [row_index,\
    \ column_index] if element == x\n    end\n  end\n  result.sort_by { |row, column|\
    \ [row, -column] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |x, y| [x, -y] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |x, y| [x, -y] }\nend", "  lst.each_with_index.map do |row, row_index|\n \
    \   row.each_with_index.map do |item, item_index|\n      [row_index, item_index]\
    \ if item == x\n    end\n  end.flatten(1).compact.sort_by { |x| [x[0], -x[1]]\
    \ }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map { |row, i|\n    row.each_with_index.map\
    \ { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |x, y| [x, -y] }\nend", "  lst.each_with_index.map { |row, i|\n    row.each_with_index.map\
    \ { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |element, column_index|\n      [row_index, column_index] if element == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\n\
    end", "  lst.each_with_index.flat_map do |row, i|\n    row.each_with_index.map\
    \ do |el, j|\n      [i, j] if el == x\n    end\n  end.compact.sort_by { |i, j|\
    \ [i, -j] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n\
    \    row.each_with_index.map do |column, column_index|\n      [row_index, column_index]\
    \ if column == x\n    end\n  end.flatten(1).compact.sort_by { |row, column| [row,\
    \ -column] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n\
    \    row.each_with_index.map do |item, column_index|\n      [row_index, column_index]\
    \ if item == x\n    end\n  end.flatten(1).compact.sort_by { |row, column| [row,\
    \ -column] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |x, y| [x, -y] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  # your code here\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if\
    \ elem == x\n    end\n  end\n  result.sort_by { |elem| [elem[0], -elem[1]] }\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", " \
    \ lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend",
  "  lst.each_with_index.flat_map do |row, row_index|\n    row.each_with_index.map\
    \ do |item, column_index|\n      [row_index, column_index] if item == x\n    end\n\
    \  end.compact.sort_by do |row_index, column_index|\n    [row_index, -column_index]\n\
    \  end\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map {\
    \ |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\n\
    end", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.map do |row, i|\n \
    \   row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", "  result = []\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ result << [i, j] if col == x\n    end\n  end\n  result.sort_by { |x| [x[0],\
    \ -x[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |element, column_index|\n      [row_index, column_index] if element == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\n\
    end", "  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i,\
    \ j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", " \
    \ result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by { |x|\
    \ [x[0], -x[1]] }\nend", "  lst.map.with_index { |row, row_idx| row.map.with_index\
    \ { |col, col_idx| [row_idx, col_idx] if col == x } }.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |row, col| [row, -col] }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
