name: HumanEval_114_minSubArraySum
language: rb
prompt: "# Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])\n\
  # 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
  \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
  \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
  \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
  \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
  \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
  \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n\
  \    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10,\
  \ candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n    assert_equal(-1,\
  \ candidate.call([1, -1]))\n  end\nend\n"
completions: ["  min_sum = nums[0]\n  current_sum = 0\n  nums.each do |num|\n    current_sum\
    \ += num\n    min_sum = current_sum if current_sum < min_sum\n    current_sum\
    \ = 0 if current_sum < 0\n  end\n  min_sum\nend", "  return 0 if nums.empty?\n\
    \  min_sum = nums[0]\n  curr_sum = 0\n  nums.each do |num|\n    curr_sum += num\n\
    \    min_sum = curr_sum if curr_sum < min_sum\n    curr_sum = 0 if curr_sum <\
    \ 0\n  end\n  min_sum\nend", "  min_sum = nums[0]\n  current_sum = 0\n  nums.each\
    \ do |num|\n    current_sum += num\n    min_sum = current_sum if current_sum <\
    \ min_sum\n    current_sum = 0 if current_sum < 0\n  end\n  min_sum\nend", " \
    \ min_sum = nums[0]\n  current_sum = 0\n  nums.each do |num|\n    current_sum\
    \ += num\n    min_sum = current_sum if current_sum < min_sum\n    current_sum\
    \ = 0 if current_sum < 0\n  end\n  min_sum\nend", "  min_sum = nums[0]\n  current_sum\
    \ = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum = current_sum\
    \ if current_sum < min_sum\n    current_sum = 0 if current_sum < 0\n  end\n  min_sum\n\
    end", "  min_sum = nums[0]\n  current_sum = nums[0]\n  (1...nums.length).each\
    \ do |i|\n    current_sum = [nums[i], current_sum + nums[i]].min\n    min_sum\
    \ = [min_sum, current_sum].min\n  end\n  min_sum\nend", "  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend", "  min_sum = nums[0]\n  current_sum = nums[0]\n \
    \ (1...nums.length).each do |i|\n    current_sum = [nums[i], current_sum + nums[i]].min\n\
    \    min_sum = [min_sum, current_sum].min\n  end\n  min_sum\nend", "  min_sum\
    \ = nums[0]\n  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum\
    \ if sum < min_sum\n    sum = 0 if sum < 0\n  end\n  min_sum\nend", "  min_sum\
    \ = nums[0]\n  curr_sum = 0\n  nums.each do |num|\n    curr_sum += num\n    min_sum\
    \ = curr_sum if curr_sum < min_sum\n    curr_sum = 0 if curr_sum < 0\n  end\n\
    \  min_sum\nend", "  return nil if nums.empty?\n  min_sum = nums[0]\n  current_sum\
    \ = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum = current_sum\
    \ if current_sum < min_sum\n    current_sum = 0 if current_sum < 0\n  end\n  min_sum\n\
    end", "  min_sum = Float::INFINITY\n  current_sum = 0", "  return 0 if nums.empty?\n\
    \  min_sum = nums[0]\n  current_sum = nums[0]\n  (1...nums.length).each do |i|\n\
    \    current_sum = [nums[i], current_sum + nums[i]].min\n    min_sum = [min_sum,\
    \ current_sum].min\n  end\n  min_sum\nend", "  min_sum = nums[0]\n  current_sum\
    \ = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum = current_sum\
    \ if current_sum < min_sum\n    current_sum = 0 if current_sum < 0\n  end\n  min_sum\n\
    end", "  min_sum = nums[0]\n  curr_sum = 0\n  nums.each do |num|\n    curr_sum\
    \ += num\n    min_sum = curr_sum if curr_sum < min_sum\n    curr_sum = 0 if curr_sum\
    \ < 0\n  end\n  min_sum\nend", "  return 0 if nums.empty?\n  return nums.min if\
    \ nums.length == 1", "  min_sum = nums[0]\n  current_sum = 0\n  nums.each do |num|\n\
    \    current_sum += num\n    min_sum = current_sum if current_sum < min_sum\n\
    \    current_sum = 0 if current_sum < 0\n  end\n  min_sum\nend", "  min_sum =\
    \ nums[0]\n  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n \
    \   min_sum = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum\
    \ < 0\n  end\n  min_sum\nend", "  min_sum = nums[0]\n  current_sum = 0\n  nums.each\
    \ do |num|\n    current_sum += num\n    min_sum = current_sum if current_sum <\
    \ min_sum\n    current_sum = 0 if current_sum < 0\n  end\n  min_sum\nend", " \
    \ min_sum = nums[0]\n  curr_sum = 0\n  nums.each do |num|\n    curr_sum += num\n\
    \    min_sum = curr_sum if curr_sum < min_sum\n    curr_sum = 0 if curr_sum <\
    \ 0\n  end\n  min_sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
