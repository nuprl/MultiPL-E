name: HumanEval_82_prime_length
language: rb
prompt: "# Write a function that takes a string and returns True if the string\n#\
  \ length is a prime number or False otherwise\n# Examples\n# >>> prime_length.call(\"\
  Hello\")\n# true\n# >>> prime_length.call(\"abcdcba\")\n# true\n# >>> prime_length.call(\"\
  kittens\")\n# true\n# >>> prime_length.call(\"orange\")\n# false\ndef prime_length(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_length\n\
  \    candidate = method(:prime_length)\n    assert_equal(true, candidate.call(\"\
  Hello\"))\n    assert_equal(true, candidate.call(\"abcdcba\"))\n    assert_equal(true,\
  \ candidate.call(\"kittens\"))\n    assert_equal(false, candidate.call(\"orange\"\
  ))\n    assert_equal(true, candidate.call(\"wow\"))\n    assert_equal(true, candidate.call(\"\
  world\"))\n    assert_equal(true, candidate.call(\"MadaM\"))\n    assert_equal(true,\
  \ candidate.call(\"Wow\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(true,\
  \ candidate.call(\"HI\"))\n    assert_equal(true, candidate.call(\"go\"))\n    assert_equal(false,\
  \ candidate.call(\"gogo\"))\n    assert_equal(false, candidate.call(\"aaaaaaaaaaaaaaa\"\
  ))\n    assert_equal(true, candidate.call(\"Madam\"))\n    assert_equal(false, candidate.call(\"\
  M\"))\n    assert_equal(false, candidate.call(\"0\"))\n  end\nend\n"
completions: ["  length = string.length\n  return false if length <= 1\n  (2..length-1).each\
    \ do |x|\n    return false if length % x == 0\n  end\n  true\nend", "  string.length.prime?\n\
    end", "  return false if string.length < 2\n  (2..string.length-1).each do |i|\n\
    \    return false if string.length % i == 0\n  end\n  true\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  if string.length\
    \ == 2 || string.length == 3 || string.length == 5 || string.length == 7\n   \
    \ return true\n  else\n    return false\n  end\nend", "  if string.length == 2\
    \ || string.length == 3 || string.length == 5 || string.length == 7\n    return\
    \ true\n  else\n    return false\n  end\nend", "  string_length = string.length\n\
    \  if string_length == 2 || string_length == 3 || string_length == 5 || string_length\
    \ == 7\n    return true\n  else\n    return false\n  end\nend", "  if string.length\
    \ == 2 || string.length == 3 || string.length == 5 || string.length == 7\n   \
    \ true\n  else\n    false\n  end\nend", "  return false if string.length < 2\n\
    \  (2..string.length - 1).each do |i|\n    return false if string.length % i ==\
    \ 0\n  end\n  true\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  # Your code here\nend", "  length = string.length\n  if length == 2 ||\
    \ length == 3 || length == 5 || length == 7\n    return true\n  elsif length %\
    \ 2 == 0 || length % 3 == 0 || length % 5 == 0 || length % 7 == 0\n    return\
    \ false\n  else\n    return true\n  end\nend", "  string.length.prime?\nend",
  "  length = string.length\n  return false if length == 0\n  return true if length\
    \ == 1\n  (2..length-1).each do |i|\n    return false if length % i == 0\n  end\n\
    \  true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
