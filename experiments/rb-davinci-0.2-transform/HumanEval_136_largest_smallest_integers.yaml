name: HumanEval_136_largest_smallest_integers
language: rb
prompt: "# Create a function that returns a tuple (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n\
  # If there is no negative or positive integers, return them as None.\n# Examples:\n\
  # >>> largest_smallest_integers.call([2, 4, 1, 3, 5, 7])\n# [nil, 1]\n# >>> largest_smallest_integers.call([])\n\
  # [nil, nil]\n# >>> largest_smallest_integers.call([0])\n# [nil, nil]\ndef largest_smallest_integers(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n\
  \    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1],\
  \ candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2,\
  \ 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5,\
  \ 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n\
  \    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil,\
  \ nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n\
  \    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1,\
  \ nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6,\
  \ -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100,\
  \ 1]))\n  end\nend\n"
completions: ["  # TODO: implement me\nend", "  # Your code here\nend", "  # your\
    \ code here\nend", "  # Your code goes here.\nend", "  # TODO: implement this\
    \ function\nend", "  # TODO: implement this function\nend", "  lst.select { |x|\
    \ x < 0 }.max || nil, lst.select { |x| x > 0 }.min || nil\nend", "  if lst.empty?\n\
    \    [nil, nil]\n  else\n    lst.select! { |x| x < 0 }\n    lst.max = nil if lst.empty?\n\
    \    lst.select! { |x| x > 0 }\n    lst.min = nil if lst.empty?\n    [lst.max,\
    \ lst.min]\n  end\nend", "  # TODO: implement this function\nend", "  # TODO:\
    \ implement this function\nend", "  # TODO: Implement me!\nend", "  lst.select!\
    \ { |x| x < 0 }\n  a = lst.max\n  lst.select! { |x| x > 0 }\n  b = lst.min\n \
    \ [a, b]\nend", "  # TODO: implement me\nend", "  a = lst.select { |x| x < 0 }.max\n\
    \  b = lst.select { |x| x > 0 }.min\n  [a, b]\nend", "  a = lst.select { |x| x\
    \ < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  [a, b]\nend", "  # TODO: implement\
    \ this function\nend", "  # TODO: Implement me\nend", "  # TODO: implement this\
    \ function\nend", "  # TODO: implement this function\nend", "  # your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  # TODO: implement this function\nend", "  # TODO: implement\nend", " \
    \ # Your code here\nend", "  # TODO: implement this function\nend", "  # TODO:\
    \ implement this method\nend", "  # TODO: Implement me\nend", "  # TODO: implement\
    \ this function\nend", "  # TODO: implement this function\nend", "  # TODO: Implement\
    \ this function\nend", "  # TODO: implement this function\nend", "  positives\
    \ = lst.select { |x| x > 0 }\n  negatives = lst.select { |x| x < 0 }\n  [negatives.max,\
    \ positives.min]\nend", "  # your code here\nend", "  # TODO: implement this function\n\
    end", "  # TODO: implement this function\nend", "  # TODO: implement\nend", " \
    \ # TODO: Implement me!\nend", "  lst.select! { |x| x < 0 }\n  lst.max\nend",
  "  # TODO: implement\nend", "  # TODO: Implement me\nend", "  # TODO: implement\
    \ this function\nend", "  # TODO: implement this function\nend", "  # your code\
    \ here\nend", "  # TODO: implement this function\nend", "  # TODO: implement this\
    \ function\nend", "  # TODO: implement this function\nend", "  # TODO: Implement\
    \ me!\nend", "  # TODO: Implement me\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # TODO: implement this function\nend", "  # TODO: implement\
    \ this function\nend", "  lst.select! { |x| x < 0 || x > 0 }\n  if lst.empty?\n\
    \    [nil, nil]\n  else\n    [lst.max, lst.min]\n  end\nend", "  neg = lst.select\
    \ { |i| i < 0 }.max\n  pos = lst.select { |i| i > 0 }.min\n  [neg, pos]\nend",
  "  # TODO: Implement this function\nend", "  # TODO: implement this function\nend",
  "  # Your code here\nend", "  # TODO: implement me\nend", "  # TODO: implement me\n\
    end", "  # Your code here\nend", "  # TODO: implement me\nend", "  # TODO: Implement\
    \ this method\nend", "  # TODO: Implement this function\nend", "  # TODO: implement\
    \ this function\nend", "  # TODO: implement\nend", "  # TODO: Implement this function\n\
    end", "  # TODO: implement this function\nend", "  # TODO: implement this function\n\
    end", "  # TODO: implement this function\nend", "  # TODO: Implement this function\n\
    end", "  # Your code here\nend", "  # TODO: Implement me\nend", "  # TODO: implement\
    \ this function\nend", "  # Your code here\nend", "  # Your code here\nend", " \
    \ # TODO: implement this function\nend", "  # TODO: Implement this function\n\
    end", "  # TODO: implement this method\nend", "  # your code here\nend", "  #\
    \ Your code here\nend", "  # your code here\nend", "  # TODO: Implement this function\n\
    end", "  # your code here\nend", "  # TODO: implement this function\nend", " \
    \ # TODO: implement this function\nend", "  # Write your code here\nend", "  #\
    \ TODO: Implement me\nend", "  if lst.empty?\n    [nil, nil]\n  else\n    negatives\
    \ = lst.select { |x| x < 0 }\n    positives = lst.select { |x| x > 0 }\n    [negatives.max,\
    \ positives.min]\n  end\nend", "  # TODO: implement this function\nend", "  #\
    \ TODO: Implement me\nend", "  # your code here\nend", "  # TODO: implement this\
    \ function\nend", "  # TODO: Implement this function\nend", "  # TODO: implement\
    \ this function\nend", "  # TODO: implement this function\nend", "  # TODO: Implement\
    \ me\nend", "  # TODO: implement this function\nend", "  # your code here\nend",
  "  # TODO: implement this function\nend", "  # TODO: implement this function\nend",
  "  # TODO: implement this function\nend", "  # TODO: Implement this function\nend",
  "  # your code here\nend", "  # TODO: Implement this function\nend", "  # Your code\
    \ here\nend", "  # TODO: implement this function\nend", "  # Your code goes here\n\
    end", "  if lst.empty?\n    [nil, nil]\n  else\n    [lst.select { |x| x < 0 }.max,\
    \ lst.select { |x| x > 0 }.min]\n  end\nend", "  # TODO: Implement this function\n\
    end", "  # TODO: implement me\nend", "  # TODO: implement this function\nend",
  "  # TODO: implement this function\nend", "  # TODO: implement this function\nend",
  "  # Your code here\nend", "  if lst.empty?\n    [nil, nil]\n  else\n    negatives\
    \ = lst.select { |n| n < 0 }\n    positives = lst.select { |n| n > 0 }\n    [negatives.max,\
    \ positives.min]\n  end\nend", "  # TODO: implement this function\nend", "  #\
    \ TODO: Implement this function\nend", "  # your code here\nend", "  lst.select!\
    \ { |x| x < 0 }\n  a = lst.max\n  lst.select! { |x| x > 0 }\n  b = lst.min\n \
    \ [a, b]\nend", "  # TODO: Implement me!\nend", "  # TODO: Implement this function\n\
    end", "  # TODO: Implement me\nend", "  # TODO: Implement me\nend", "  # TODO:\
    \ implement this function\nend", "  # TODO: implement this function\nend", " \
    \ # TODO: implement this function\nend", "  # TODO: Implement this method\nend",
  "  # TODO: implement this function\nend", "  # TODO: implement this method\nend",
  "  # Write your code here\nend", "  # TODO: Implement this method\nend", "  # Your\
    \ code here\nend", "  # TODO: Implement this function\nend", "  # TODO: Implement\
    \ this function\nend", "  a = lst.select { |n| n < 0 }.max\n  b = lst.select {\
    \ |n| n > 0 }.min\n  [a, b]\nend", "  # TODO: implement this function\nend", " \
    \ # TODO: implement this function\nend", "  # TODO: Implement this function\n\
    end", "  # Your code here\nend", "  # TODO: implement\nend", "  # TODO: Implement\
    \ me\nend", "  a = lst.select { |i| i < 0 }.max\n  b = lst.select { |i| i > 0\
    \ }.min\n  [a, b]\nend", "  # TODO: implement this function\nend", "  # TODO:\
    \ implement this function\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select\
    \ { |x| x > 0 }.min\n  [a, b]\nend", "  # TODO: implement this function\nend",
  "  # TODO: Implement me\nend", "  # TODO: implement this function\nend", "  # TODO:\
    \ implement this function\nend", "  # TODO: implement this function\nend", " \
    \ # TODO: implement this function\nend", "  # TODO: Implement this function\n\
    end", "  lst.select! { |x| x < 0 }\n  a = lst.max\n  lst.select! { |x| x > 0 }\n\
    \  b = lst.min\n  [a, b]\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # TODO: implement this function\nend", " \
    \ # TODO: implement this function\nend", "  # TODO: implement this function\n\
    end", "  # Your code goes here.\nend", "  # TODO: implement this function\nend",
  "  # Your code here\nend", "  # TODO: implement this method\nend", "  # TODO: implement\
    \ this function\nend", "  # TODO: implement this function\nend", "  # TODO: Implement\
    \ this function\nend", "  lst.select { |x| x < 0 }.max || nil, lst.select { |x|\
    \ x > 0 }.min || nil\nend", "  # TODO: implement this function\nend", "  # TODO:\
    \ Implement me!\nend", "  # TODO: implement this function\nend", "  # your code\
    \ here\nend", "  # TODO: implement this function\nend", "  # TODO: implement this\
    \ function\nend", "  # TODO: implement this function\nend", "  # TODO: implement\
    \ this function\nend", "  # Your code here\nend", "  # TODO: implement this function\n\
    end", "  # TODO: Implement this function\nend", "  # TODO: implement\nend", " \
    \ # TODO: implement this function\nend", "  # TODO: Implement this function\n\
    end", "  # TODO: implement this function\nend", "  # TODO: Implement this function\n\
    end", "  # TODO: implement me\nend", "  # TODO: implement this function\nend",
  "  # your code here\nend", "  # TODO: implement this function\nend", "  # TODO:\
    \ implement this function\nend", "  # Write your code here\nend", "  # TODO: implement\
    \ this function\nend", "  # TODO: implement me\nend", "  # your code here\nend",
  "  # TODO: Implement this function\nend", "  # TODO: implement this function\nend",
  "  # TODO: implement this function\nend", "  # TODO: implement this function\nend",
  "  # TODO: implement this function\nend", "  # TODO: implement this function\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
