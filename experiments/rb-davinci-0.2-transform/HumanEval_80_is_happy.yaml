name: HumanEval_80_is_happy
language: rb
prompt: "# You are given a string s.\n# Your task is to check if the string is happy\
  \ or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n# For example:\n# >>> is_happy.call(a)\n# false\n# >>> is_happy.call(aa)\n\
  # false\n# >>> is_happy.call(abcd)\n# true\n# >>> is_happy.call(aabb)\n# false\n\
  # >>> is_happy.call(adb)\n# true\n# >>> is_happy.call(xyy)\n# false\ndef is_happy(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
  \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"\
  ))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"\
  abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true,\
  \ candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n \
  \   assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"\
  iopaxioi\"))\n  end\nend\n"
completions: ["  # your code here\nend", "  s.length >= 3 && s.each_char.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend", "  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend", "  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend", "  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend", "  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend", "  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.scan(/.../).length\nend", "  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend", "  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend", "  # your code here\nend", " \
    \ return false if s.length < 3\n  s.chars.each_cons(3).all? { |a, b, c| a != b\
    \ && b != c && a != c }\nend", "  # write your code here\nend", "  # your code\
    \ here\nend", "  s.length >= 3 && s.chars.each_cons(3).all? { |a, b, c| a != b\
    \ && b != c && a != c }\nend", "  # Your code here\nend", "  s.length >= 3 &&\
    \ s.chars.each_cons(3).all? { |x, y, z| x != y && y != z && x != z }\nend", " \
    \ s.length >= 3 && s.scan(/.../).uniq.length == s.scan(/.../).length\nend", " \
    \ s.length >= 3 && s.chars.each_cons(3).all? { |a, b, c| a != b && b != c && a\
    \ != c }\nend", "  s.length >= 3 && s.chars.each_cons(3).all? { |a, b, c| a !=\
    \ b && b != c && a != c }\nend", "  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
