name: HumanEval_24_largest_divisor
language: rb
prompt: "# For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n# >>> largest_divisor.call(15)\n# 5\ndef largest_divisor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n\
  \    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n\
  \    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n\
  \    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n\
  \  end\nend\n"
completions: ["  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n-1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(1) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(1) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n\
    \ % i == 0\n  end\nend", "  (n-1).downto(1) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n-1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n-1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(1)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(1) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n-1).downto(1) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n-1).downto(1) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (1..n).select { |x| n % x == 0 }.max\nend", "  (n-1).downto(1) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n - 1).downto(1) do |i|\n    return i if n\
    \ % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i ==\
    \ 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
