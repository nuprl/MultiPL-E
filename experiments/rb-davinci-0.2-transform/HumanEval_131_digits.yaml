name: HumanEval_131_digits
language: rb
prompt: "# Given a positive integer n, return the product of the odd digits.\n# Return\
  \ 0 if all digits are even.\n# For example:\n# >>> digits.call(1)\n# 1\n# >>> digits.call(4)\n\
  # 0\n# >>> digits.call(235)\n# 15\ndef digits(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digits\n\
  \    candidate = method(:digits)\n    assert_equal(5, candidate.call(5))\n    assert_equal(5,\
  \ candidate.call(54))\n    assert_equal(1, candidate.call(120))\n    assert_equal(5,\
  \ candidate.call(5014))\n    assert_equal(315, candidate.call(98765))\n    assert_equal(2625,\
  \ candidate.call(5576543))\n    assert_equal(0, candidate.call(2468))\n  end\nend\n"
completions: ["  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", " \
    \ n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\n\
    end", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  # your code here\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\n\
    end", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select { |e| e.odd? }.reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\n\
    end", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\n\
    end", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  return 0 if\
    \ n.digits.all?(&:even?)\n  n.digits.select(&:odd?).reduce(:*)\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\n\
    end", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select { |x| x.odd? }.reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select\
    \ { |x| x.odd? }.reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select { |x| x.odd? }.reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  return 0 if n == 0\n  n.to_s.split('').map(&:to_i).select { |x| x.odd? }.reduce(:*)\n\
    end", "  n.to_s.chars.map(&:to_i).select { |x| x.odd? }.reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\n\
    end", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", " \
    \ n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select { |x| x.odd? }.reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select { |x| x.odd? }.reduce(:*) ||\
    \ 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", " \
    \ n.to_s.split('').map(&:to_i).select { |digit| digit.odd? }.reduce(:*) || 0\n\
    end", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", " \
    \ n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  # your code here\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select { |i| i.odd? }.reduce(:*) || 0\nend", " \
    \ n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select { |x| x.odd? }.reduce(:*) ||\
    \ 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", " \
    \ return 0 if n == 0\n  n % 10 % 2 == 0 ? digits(n / 10) : n % 10 * digits(n /\
    \ 10)\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\n\
    end", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.digits.select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\n\
    end", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select { |i| i.odd? }.reduce(:*) || 0\nend", " \
    \ n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\n\
    end", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select\
    \ { |i| i.odd? }.reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\n\
    end", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.split('').map(&:to_i).select { |x| x.odd? }.reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  return 0 if n.to_s.chars.map(&:to_i).all?(&:even?)\n  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\n\
    end", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select { |x| x.odd? }.reduce(:*) || 0\nend", " \
    \ n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.split('').map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.split('').map(&:to_i).select\
    \ { |i| i.odd? }.reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend",
  "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*) || 0\nend", "  n.to_s.chars.map(&:to_i).select(&:odd?).reduce(:*)\
    \ || 0\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
