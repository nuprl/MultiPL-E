name: HumanEval_105_by_length
language: rb
prompt: "# Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n# reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length.call([2,\
  \ 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
  Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>>\
  \ by_length.call([])\n# []\n# If the array has any strange number ignore it:\n#\
  \ >>> by_length.call([1, -1, 55])\n# [\"One\"]\ndef by_length(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_by_length\n\
  \    candidate = method(:by_length)\n    assert_equal([\"Eight\", \"Five\", \"Four\"\
  , \"Three\", \"Two\", \"Two\", \"One\", \"One\"], candidate.call([2, 1, 1, 4, 5,\
  \ 8, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([\"One\"\
  ], candidate.call([1, -1, 55]))\n    assert_equal([\"Three\", \"Two\", \"One\"],\
  \ candidate.call([1, -1, 3, 2]))\n    assert_equal([\"Nine\", \"Eight\", \"Four\"\
  ], candidate.call([9, 4, 8]))\n  end\nend\n"
completions: ["  arr.select { |x| x.between?(1, 9) }.sort.reverse.map { |x| x.to_s\
    \ }\nend", "  arr.select { |num| num.between?(1, 9) }.sort.reverse.map { |num|\
    \ num.to_s }\nend", "  arr.select { |x| x.between?(1, 9) }.sort.reverse.map {\
    \ |x| x.to_s }\nend", "  arr.select { |e| e.between?(1, 9) }.sort.reverse.map\
    \ { |e| %w(One Two Three Four Five Six Seven Eight Nine)[e - 1] }\nend", "  arr.select\
    \ { |x| x.between?(1, 9) }.sort.reverse.map { |x| x.to_s }\nend", "  arr.select\
    \ { |num| num.between?(1, 9) }.sort.reverse.map { |num| num_to_word(num) }\nend",
  "  arr.select { |num| num.between?(1, 9) }.sort.reverse.map { |num| num.to_s }\n\
    end", "  arr.select { |x| x.between?(1, 9) }.sort.reverse.map { |x| x.to_s }\n\
    end", "  arr.select { |n| n.between?(1, 9) }.sort.reverse.map { |n| %w(One Two\
    \ Three Four Five Six Seven Eight Nine)[n - 1] }\nend", "  arr.select { |x| x.between?(1,\
    \ 9) }.sort.reverse.map { |x| x.to_s }\nend", "  arr.select { |x| x.between?(1,\
    \ 9) }.sort.reverse.map { |x| x.to_s }\nend", "  arr.select { |x| x.between?(1,\
    \ 9) }.sort.reverse.map { |x| %w(One Two Three Four Five Six Seven Eight Nine)[x\
    \ - 1] }\nend", "  arr.select { |x| x.between?(1, 9) }.sort.reverse.map { |x|\
    \ x.to_s }\nend", "  arr.select { |x| x.between?(1, 9) }.sort.reverse.map { |x|\
    \ x.to_s }\nend", "  arr.select { |i| i.between?(1, 9) }.sort.reverse.map { |i|\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"][i - 1] }\nend", "  arr.select { |e| (1..9).include?(e) }.sort.reverse.map\
    \ { |e| e.to_s }\nend", "  arr.select { |x| x.between?(1, 9) }.sort.reverse.map\
    \ { |x| x.to_s }\nend", "  arr.select { |x| x.between?(1, 9) }.sort.reverse.map\
    \ { |x| %w(One Two Three Four Five Six Seven Eight Nine)[x - 1] }\nend", "  arr.select\
    \ { |x| (1..9).include?(x) }.sort.reverse.map { |x| x.to_s }\nend", "  arr.select\
    \ { |x| x.between?(1, 9) }.sort.reverse.map { |x| x.to_s }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
