name: HumanEval_100_make_a_pile
language: rb
prompt: "# Given a positive integer n, you have to make a pile of n levels of stones.\n\
  # The first level has n stones.\n# The number of stones in the next level is:\n\
  # - the next odd number if n is odd.\n# - the next even number if n is even.\n#\
  \ Return the number of stones in each level in a list, where element at index\n\
  # i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile.call(3)\n\
  # [3, 5, 7]\ndef make_a_pile(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_a_pile\n\
  \    candidate = method(:make_a_pile)\n    assert_equal([3, 5, 7], candidate.call(3))\n\
  \    assert_equal([4, 6, 8, 10], candidate.call(4))\n    assert_equal([5, 7, 9,\
  \ 11, 13], candidate.call(5))\n    assert_equal([6, 8, 10, 12, 14, 16], candidate.call(6))\n\
  \    assert_equal([8, 10, 12, 14, 16, 18, 20, 22], candidate.call(8))\n  end\nend\n"
completions: ["  (1..n).map { |i| (i * 2) + 1 }\nend", "  (1..n).map { |i| i * 2 +\
    \ 1 }\nend", "  (1..n).map { |i| n + 2 * i - 1 }\nend", "  (1..n).map { |i| (i\
    \ * 2) + 1 }\nend", "  (1..n).map { |i| i * 2 + 1 }\nend", "  (1..n).map { |i|\
    \ i * 2 + 1 }\nend", "  (1..n).map { |i| n + 2 * i - 1 }\nend", "  (1..n).map\
    \ { |i| i * 2 + 1 }\nend", "  (1..n).map { |i| n + 2 * i - 1 }\nend", "  (1..n).map\
    \ { |i| i * 2 + 1 }\nend", "  (1..n).map { |i| n + 2 * i - 1 }\nend", "  (1..n).map\
    \ { |i| i * 2 + 1 }\nend", "  (1..n).map { |i| i * 2 + 1 }\nend", "  (1..n).map\
    \ { |i| n + (i % 2 == 0 ? 1 : 2) * i }\nend", "  (1..n).map { |i| n + 2 * i -\
    \ 1 }\nend", "  result = [n]\n  while n > 1\n    n = n.even? ? n - 1 : n + 1\n\
    \    result << n\n  end\n  result\nend", "  (1..n).map { |i| n + 2 * i - 1 }\n\
    end", "  (1..n).map { |i| i * 2 + 1 }\nend", "  (1..n).map { |i| n + 2 * i - 1\
    \ }\nend", "  (1..n).map { |i| n + 2 * i - 1 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
