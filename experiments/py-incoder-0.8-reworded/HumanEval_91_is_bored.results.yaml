language: py
name: HumanEval_91_is_bored
results:
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for w in S.split() if w == 'I')\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiuln9dh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxiuln9dh.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxiuln9dh.py\", line 22,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Get the count of sentences that start with the word\
    \ \"I\".\n    count = 0\n    for word in S.split():\n        if word == 'I':\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3vgvqlu9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3vgvqlu9.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3vgvqlu9.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    S = S.lower()\n    boredom = 0\n    boredom_words = ['i','a','the']\n\
    \    boredom_letters = ['.', '!', '?']\n    for word in S:\n        if word.lower()\
    \ in boredom_words:\n            boredom = 1\n        if word.lower() in boredom_letters:\n\
    \            boredom = 0\n    return boredom\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3wx5rwf9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3wx5rwf9.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3wx5rwf9.py\", line 27,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    # Your code here\n    for sentence in\
    \ S.split('.'):\n        if sentence.startswith(\"I\"):\n            boredoms\
    \ += 1\n    return boredoms\n</cell>\n<cell>\nassert is_bored('Hello world') ==\
    \ 0\nassert is_bored('The sky is blue. The sun is shining. I love this weather.')\
    \ == 1\n</cell>\n<text>\n6. Capitalization conversion\nThe remainder of this section\
    \ will teach you how to convert strings to\nlowercase, uppercase and titlecase.\n\
    \n.lower() - converts all the characters in a string to lowercase.\n.upper() -\
    \ converts all the characters in a string to uppercase.\n.title() - converts the\
    \ first character of each word to uppercase and the rest to lowercase.\n\nDon't\
    \ be surprised if your solutions don't produce the same results each time. That's\
    \ ok! The point of this is to gain practice writing solutions that are robust\
    \ to small differences in spelling.\n\n\n</text>\n<cell>\ntext = 'Hello World'\n\
    print(text.lower())\nprint(text.upper())\nprint(text.title())\n</cell>\n<text>\n\
    You can read about string methods in the documentation.\n\n\n</text>\n<cell>\n\
    text = 'Hello World'\nprint(text.lower())\nprint(text.upper())\nprint(text.title())\n\
    </cell>\n<text>\nTo perform string operations in Python, be sure to use the print(\
    \ ) function rather than print statement.\n\nYou will often find the print( )\
    \ function useful as a \"debugging tool,\" as it lets you inspect and validate\
    \ your variables more easily.\n\n\n</text>\n<text>\nTo convert a whole string\
    \ into lowercase or uppercase, you can use the lower( ) or upper( ) method.\n\n\
    The title( ) method will convert your entire string into uppercase and give the\
    \ first letter of each word in a title case format.\n\nLet's see some examples:\n\
    \n\n</text>\n<cell>\ntext = 'Hello World'\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp259abxat.py\", line 33\n    Don't be surprised if your\
    \ solutions don't produce the same results each time. That's ok! The point of\
    \ this is to gain practice writing solutions that are robust to small differences\
    \ in spelling.\n                                                             \
    \                          ^\nSyntaxError: unterminated string literal (detected\
    \ at line 33)\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len(S.split(\".\") if \".\" in S else S.split(\"\
    ? \") if \"? \" in S else S.split(\"! \") if \"! \" in S else [])\n</cell>\n<cell>\n\
    assert is_bored(\"Hello world\") == 0\nassert is_bored(\"The sky is blue\") ==\
    \ 1\nassert is_bored(\"The sun is shining\") == 1\nassert is_bored(\"I love this\
    \ weather.\") == 1\n</cell>\n<text>\nImplement a function is_hungry that takes\
    \ in an activity string and returns the number of \"hungry\" things you can do\
    \ to the activity. For example, is_hungry(\"Walking on the Moon\") should return\
    \ 1, and is_hungry(\"Playing guitar\") should return 0.\n\nTo better understand\
    \ the boredom problem we will have to think about counting boredoms in a string.\
    \ When you think about it think of how many times we would need to call is_bored\
    \ to figure out if someone is bored. Let's say that is_bored returns 2 if the\
    \ string starts with \"I\" and 0 otherwise. Then the boredom count is given by\
    \ the following formula:\n\n$$ X=\\begin{cases}\n    (I) &\\text{ if } is_bored\
    \ (\\text{ first word }) \\text{ return }2 \\\n    (II) &\\text{ if } is_bored\
    \ (\\text{ second word }) \\text{ return }2 \\\n    (III) &\\text{ if } is_bored\
    \ (\\text{ third word }) \\text{ return }2 \\\n    (IV) &\\text{ if } is_bored\
    \ (\\text{ last word }) \\text{ return }2 \\\n\\end{cases}\n$$\n\nLet's define\
    \ an helper function that will help us solve the problem. One of the great things\
    \ about Jupyter notebooks is that we can simply define helper functions and then\
    \ pass them into other functions as arguments and they will be able to use them!\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmprem8setf.py\", line 24\n    To better understand the boredom\
    \ problem we will have to think about counting boredoms in a string. When you\
    \ think about it think of how many times we would need to call is_bored to figure\
    \ out if someone is bored. Let's say that is_bored returns 2 if the string starts\
    \ with \"I\" and 0 otherwise. Then the boredom count is given by the following\
    \ formula:\n                                                                 \
    \                                                                            \
    \                                                                            \
    \    ^\nSyntaxError: unterminated string literal (detected at line 24)\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    #Your code here\n    return 1 if S[0] in \"I\" else 0\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq585nfc_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq585nfc_.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq585nfc_.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    S = S.lower()\n    boredoms = [w.lower() for w in boredom_words\
    \ if w.startswith(S.lower())]\n    return len(boredoms)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_7goo7y.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmph_7goo7y.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmph_7goo7y.py\", line 19,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmph_7goo7y.py\"\
    , line 14, in is_bored\n    boredoms = [w.lower() for w in boredom_words if w.startswith(S.lower())]\n\
    NameError: name 'boredom_words' is not defined\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredom += 1\n    return boredom\n\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2q4d05fl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2q4d05fl.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2q4d05fl.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vrw7fn_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4vrw7fn_.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4vrw7fn_.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Complete the bored_count function below.\n    bored_count\
    \ = 0\n    \n    \n    \n    return bored_count\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp78xvo684.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp78xvo684.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp78xvo684.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum([word in 'I. !?' for word in S.split('.')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz95nncoo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz95nncoo.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpz95nncoo.py\", line 19,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    for w in S.split('.'):\n        if w.startswith('I'):\n\
    \            bored += 1\n    return bored\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6a4sc9xf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6a4sc9xf.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6a4sc9xf.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum([1 for sent in S.split() if sent.startswith('I')]\
    \ or [1 if S.strip().lower().startswith('i') else 0])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqcuk9ou1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqcuk9ou1.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqcuk9ou1.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpt3qpv1wa.py\", line 14\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_sentences = 0\n    for word in S.split():\n    \
    \    if word[0] == 'I':\n            bored_sentences += 1\n    return bored_sentences\n\
    </cell>\n<cell>\nassert is_bored('Hello world') == 0\nassert is_bored('The sky\
    \ is blue. The sun is shining. I love this weather') == 1\n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmps5rejcq1.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    # your code here\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxxf9jqxy.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxxf9jqxy.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxxf9jqxy.py\", line 20,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # BEGIN Practice #\n    return boredom(S)\n    # END Practice\
    \ #\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa2mfotbb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpa2mfotbb.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa2mfotbb.py\", line 18,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpa2mfotbb.py\"\
    , line 14, in is_bored\n    return boredom(S)\nNameError: name 'boredom' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return boredoms(S, 'I', '.', '?' or '!')\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptucyxjrx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptucyxjrx.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptucyxjrx.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmptucyxjrx.py\"\
    , line 13, in is_bored\n    return boredoms(S, 'I', '.', '?' or '!')\nNameError:\
    \ name 'boredoms' is not defined\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # BEGIN PROBLEM 1\n    # This is a function template.\n\
    \    return 0\n    # END PROBLEM 1\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpot1343iq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpot1343iq.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpot1343iq.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n\n    # write your code here\n    for i in\
    \ range(len(S)):\n        if S[i] == '.':\n            boredom += 1\n        elif\
    \ S[i] == '?':\n            boredom += 1\n        elif S[i] == '!':\n        \
    \    boredom += 1\n    \n    return boredom\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcc4tlxw7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpcc4tlxw7.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcc4tlxw7.py\", line 28,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = []\n    \n    bored = False\n    \n    for\
    \ word in S.split():\n        if word.lower().startswith(\"i\"):\n           \
    \ bored = True\n        elif bored:\n            boredoms.append(word)\n    \n\
    \    if len(boredoms) > 0:\n        return 1\n    \n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zzas4cj.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp5zzas4cj.py\", line 38,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5zzas4cj.py\", line 31,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    num_boredoms = 0\n    for word in S.split():\n       \
    \ if word.lower() == 'i':\n            num_boredoms += 1\n    return num_boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5mm7sic.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpw5mm7sic.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpw5mm7sic.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    sentences = S.split('.')\n    for sentence\
    \ in sentences:\n        if sentence.startswith('I'):\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp83sa4v95.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp83sa4v95.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp83sa4v95.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for item in S.split('.'):\n        for\
    \ item in item.split('?'):\n            if item == 'I':\n                count\
    \ += 1\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp07omq_hs.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp07omq_hs.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp07omq_hs.py\", line 23,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in range(len(S)):\n\
    \        if S[i] == '.' or S[i] == '?' or S[i] == '!':\n            count += 1\
    \ \n    return count\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuajumnre.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpuajumnre.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpuajumnre.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    i = 0\n    count = 0\n    words = S.split()\n    start\
    \ = words[0].lower()\n    end = words[-1].lower()\n    for word in words:\n  \
    \      if word == 'I':\n            i += 1\n        if word == start and i ==\
    \ 2:\n            count += 1\n        if word == end and i == 2:\n           \
    \ count += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjugi1bj.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpwjugi1bj.py\", line 37,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjugi1bj.py\", line 31,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n\n    S = S.lower()\n    S = S.strip()\n\
    \    S = S.split()\n    S = list(S)\n\n    for word in S:\n        word = str(word)\n\
    \n        if word.startswith(\"i\") and word != \"i\":\n            boredoms =\
    \ boredoms + 1\n\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf3u3non6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpf3u3non6.py\", line 38,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf3u3non6.py\", line 31,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for s in S.split('.')[0].split('?') if s.lower()\
    \ == 'i')\n</cell>\n<text>\nYour code should return an integer that represents\
    \ the number of boredoms present in the given string.\n\n\n</text>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpyme74w9b.py\", line 14\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    sentence = S.split('.')\n    \n    for\
    \ sentence in sentence:\n        if \"I\" in sentence.lower():\n            count\
    \ += 1\n    \n    return count\n    \n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqpljsb7a.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqpljsb7a.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqpljsb7a.py\", line 26,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_count = 0\n    for sentence in S:\n        if boredom_pattern.search(sentence):\n\
    \            bored_count += 1\n    return bored_count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5774kif.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpr5774kif.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpr5774kif.py\", line 20,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpr5774kif.py\"\
    , line 15, in is_bored\n    if boredom_pattern.search(sentence):\nNameError: name\
    \ 'boredom_pattern' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum([1 for w in S.split(\" \") if w.lower().startswith(\"\
    i\")]) > 0\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20rg70w5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp20rg70w5.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp20rg70w5.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = ['I']\n    bored_count = 1\n    i = 0\n   \
    \ while i < len(S):\n        if S[i] in boredoms:\n            bored_count +=\
    \ 1\n            boredoms.append(S[i])\n        i += 1\n    return bored_count\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpodb1uza7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpodb1uza7.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpodb1uza7.py\", line 24,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 if S[i] not in {'.', '?', '!', 'I'} else\
    \ 0 for i in range(len(S)))\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2mhpjbx7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp2mhpjbx7.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2mhpjbx7.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_count = 0\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            bored_count += 1\n    return bored_count\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpisrar5nx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpisrar5nx.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpisrar5nx.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    length = len(S)\n    for i in range(length):\n\
    \        if S[i] in [\".\",\"?\",\"!\"]:\n            boredom += 1\n    return\
    \ boredom\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm1hg0b50.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpm1hg0b50.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpm1hg0b50.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    count = 0\n    sentence_list = S.split('.')\n\
    \    sentence_list = [x for x in sentence_list if x != '']\n    for x in sentence_list:\n\
    \        if x.startswith('I'):\n            count += 1\n    boredoms = count\n\
    \    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyauh0wnn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpyauh0wnn.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyauh0wnn.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    \n    # Your code here\n    return count\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpqhx4w9u7.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for i in S.split():\n        if i[0] ==\
    \ 'I':\n            count += 1\n    return count\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmphldr075g.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for sentence in S.split('.'):\n       \
    \ if sentence.lower().startswith('i'):\n            count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvb2hwf0h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpvb2hwf0h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvb2hwf0h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return count_boredoms(S) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0bo0wmrv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0bo0wmrv.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0bo0wmrv.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp0bo0wmrv.py\"\
    , line 13, in is_bored\n    return count_boredoms(S) == 0\nNameError: name 'count_boredoms'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 if S[i].lower() == 'i' else 0 for i in range(len(S)))\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybew4te7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpybew4te7.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpybew4te7.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split(\" \"):\n       \
    \ if word.startswith((\"I\", \"me\", \"you\", \"I\", \"we\", \"us\", \"you\",\
    \ \"I\", \"our\", \"our\", \"you\", \"your\", \"your\")):\n            boredom\
    \ += 1\n    return boredom\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8zeaus_i.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8zeaus_i.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8zeaus_i.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms_count = 0\n    if S == '':\n\
    \        return 0\n    \n    for w in S.split():\n        if 'I' in w[:len(w)-1]:\n\
    \            boredoms_count += 1\n    \n    return boredoms_count\n</cell>\n<text>\n\
    Problem 2b\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpqtq5rfpd.py\", line 25\n    Problem 2b\n            ^\n\
    SyntaxError: invalid decimal literal\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    words = list(filter(lambda x: x != '.',\
    \ S.split(' ')))\n    for word in words:\n        if word != 'I':\n          \
    \  count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjp2ew2b4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjp2ew2b4.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjp2ew2b4.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpabevxh86.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpabevxh86.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpabevxh86.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = []\n    boredoms.append(S[:S.index('.') - 1])\n\
    \    boredoms.append(S[:S.index('?') - 1])\n    boredoms.append(S[:S.index('!')\
    \ - 1])\n    return len(boredoms)\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqn2jyghq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqn2jyghq.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqn2jyghq.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpqn2jyghq.py\"\
    , line 14, in is_bored\n    boredoms.append(S[:S.index('.') - 1])\nValueError:\
    \ substring not found\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return boredom.count(S[0])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpemoos8el.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpemoos8el.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpemoos8el.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpemoos8el.py\"\
    , line 13, in is_bored\n    return boredom.count(S[0])\nNameError: name 'boredom'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for i in range(len(S) - 1, -1, -1):\n \
    \       if S[i] == '.' or S[i] == '?' or S[i] == '!':\n            count += 1\n\
    \        else:\n            break\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7qj1ehxo.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7qj1ehxo.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7qj1ehxo.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # TODO implement the is_bored function here\n    return\
    \ len(S) == 0 or S.find('I') == 0 or S.find('.')\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpixxgg3qa.py\", line 15\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word[0]\
    \ in \"I!?.\":\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpdb46vw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwpdb46vw.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwpdb46vw.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    for i in S:\n        if i.lower() == 'i'\
    \ or i.lower() == '!':\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiga096d7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpiga096d7.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpiga096d7.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len(list(filter(lambda word: word.startswith('I'),\
    \ S.split('.'))))\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn6_4idmy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpn6_4idmy.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpn6_4idmy.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if '.' in S else 0\n    boredoms += 1 if '?' in S else 0\n\
    \    boredoms += 1 if '!' in S else 0\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz36ha6wi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpz36ha6wi.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpz36ha6wi.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for w in S.split() if w.startswith('I'))\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpawgsmb0y.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpawgsmb0y.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpawgsmb0y.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    splits = S.split('.')\n    for split\
    \ in splits:\n        if split[0] == 'I':\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuhh9llt8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpuhh9llt8.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpuhh9llt8.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom_count = 0\n    for word in S.split('.'):\n   \
    \     boredom_count += word.startswith('I')\n    return boredom_count\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt1xpvd_n.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpt1xpvd_n.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpt1xpvd_n.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S:\n        if word.lower()\
    \ == 'i':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpreh_foog.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpreh_foog.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpreh_foog.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    S = S.split('.')\n    if len(S) < 3:\n        return 0\n\
    \    elif S[0] == 'I':\n        return 1\n    else:\n        return sum(is_bored(sentence)\
    \ for sentence in S[1:])\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0piparsr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0piparsr.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0piparsr.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    S = S.lower()\n    S = S.replace('.',\
    \ ' ')\n    S = S.replace('?', ' ')\n    S = S.replace('!', ' ')\n    for word\
    \ in S.split():\n        if word.lower() == 'i':\n            boredoms += 1\n\
    \    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdedj_2gd.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdedj_2gd.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdedj_2gd.py\", line 30,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = [i for i,s in enumerate(S) if s.lower() in\
    \ ['i','u','a','o']]\n    return len(boredoms)\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp11c76q8b.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp11c76q8b.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp11c76q8b.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    boredoms = []\n    for sentence in S.split('.'):\n\
    \        boredoms.extend(sentence.split('?'))\n        boredoms.extend(sentence.split('!'))\n\
    \        boredoms.extend(sentence.split('.'))\n    boredoms = [x for x in boredoms\
    \ if not x.startswith('I')]\n    for boredom in boredoms:\n        if boredom.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nc5t6kh.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9nc5t6kh.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nc5t6kh.py\", line 29,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 if s[0] == 'I' else 0 for s in S.split('.'))\
    \ + 1\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n   \
    \ assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It !')\
    \ == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good today.\
    \ I will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4racx6xc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp4racx6xc.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4racx6xc.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return 1 if S[0]==\"I\" else 0\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc77jahrz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpc77jahrz.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpc77jahrz.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    word_list = S.split('.')\n    for word\
    \ in word_list:\n        if 'I' in word:\n            count = count + 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa274yzgd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpa274yzgd.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa274yzgd.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # return 0 for non-bored sentences\n    # return 1 for\
    \ bored sentences\n    # return 0 for non-bored sentences followed by a bored\
    \ sentence\n\n    boredom_counts = 0\n    if 'I' in S:\n        boredom_counts\
    \ += 1\n    for s in S:\n        if s == '.' or s == '?' or s == '!':\n      \
    \      boredom_counts += 1\n    return boredom_counts\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpef_d8l99.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpef_d8l99.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpef_d8l99.py\", line 28,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    boredom = 0\n    if S.startswith('I'):\n       \
    \ boredom = 1\n        S = S[1:]\n    for char in S:\n        if char == '.' or\
    \ char == '?' or char == '!':\n            boredom = boredom + is_bored(S[char+1:])\n\
    \    return boredom\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpobv8pdcy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpobv8pdcy.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpobv8pdcy.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\n  File \"/tmp/tmpobv8pdcy.py\"\
    , line 20, in is_bored\n    boredom = boredom + is_bored(S[char+1:])\nTypeError:\
    \ can only concatenate str (not \"int\") to str\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return boredom_count(S, 'I')\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprp5cvzig.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmprp5cvzig.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprp5cvzig.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmprp5cvzig.py\"\
    , line 13, in is_bored\n    return boredom_count(S, 'I')\nNameError: name 'boredom_count'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredom += 1\n    return boredom\n\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2q4d05fl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2q4d05fl.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2q4d05fl.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # +++your code here+++\n    boredoms = [i for i in S.split('.')\
    \ if i not in (\"?\",\"!\")]\n    boredom_count = boredoms.count(\"I\")\n    return\
    \ boredom_count\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf3h8lkp3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpf3h8lkp3.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf3h8lkp3.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return bored(S, \"I\")\n\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38saisth.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp38saisth.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp38saisth.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp38saisth.py\"\
    , line 13, in is_bored\n    return bored(S, \"I\")\nNameError: name 'bored' is\
    \ not defined. Did you mean: 'sorted'?\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    i = 0\n    boredom_count = 0\n    boredom_words = S\n\
    \    for word in boredom_words:\n        if word == 'I':\n            i += 1\n\
    \        elif word == '.' or word == '?' or word == '!':\n            pass\n \
    \       else:\n            i += 1\n        boredom_count += i\n    return boredom_count\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7rlwbr1w.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7rlwbr1w.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7rlwbr1w.py\", line 27,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S:\n        if word == '.'\
    \ or word == '?' or word == '!':\n            count += 1\n    return count\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb45gtm8n.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb45gtm8n.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpb45gtm8n.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_count = 0\n    i = 0\n    while(i != len(S)):\n\
    \        if(S[i] == 'I'):\n            bored_count += 1\n        i += 1\n    return\
    \ bored_count\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmw7ee0k8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmw7ee0k8.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmw7ee0k8.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for i in range(len(S)):\n        if\
    \ S[i] == \"I\" and i > 0 and S[i - 1] == \".\" and S[i - 2] == \"!\":\n     \
    \       boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ffhzx32.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9ffhzx32.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9ffhzx32.py\", line 23,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    for i in S:\n\
    \        if i == 'I':\n            boredom += 1\n        elif i == '.' or i ==\
    \ '?' or i == '!':\n            boredom_count += 1\n    return boredom_count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkcaramzn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkcaramzn.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkcaramzn.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Your code here\n    return sum(not bored(sentence.split())\
    \ for sentence in S.split('.'))\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm8e2ounl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpm8e2ounl.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpm8e2ounl.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpm8e2ounl.py\"\
    , line 14, in is_bored\n    return sum(not bored(sentence.split()) for sentence\
    \ in S.split('.'))\n  File \"/tmp/tmpm8e2ounl.py\", line 14, in <genexpr>\n  \
    \  return sum(not bored(sentence.split()) for sentence in S.split('.'))\nNameError:\
    \ name 'bored' is not defined. Did you mean: 'sorted'?\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    # your code here\n    boredom = 0\n    \n    # check\
    \ first and last character\n    if S[0] == 'I':\n        boredom += 1\n    # check\
    \ middle characters\n    if S[0] in '?!' and S[len(S)-1] in '?!':\n        boredom\
    \ += 1\n    \n    return boredom\n</cell>\n<cell>\nassert is_bored(\"Hello world\"\
    ) == 0, \"Bad bored\"\nassert is_bored(\"The sky is blue.\") == 1, \"Bad bored\"\
    \nassert is_bored(\"The sun is shining!\") == 0, \"Bad bored\"\nassert is_bored(\"\
    I love this weather.\") == 1, \"Good bored\"\n</cell>\n<text>\nTask\nCan you find\
    \ a way to make this function faster?\nYou can assume that the boredom string\
    \ only contains characters '.', '!' or '?'.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp0tzyhp1v.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([x for x in S.split(\" \") if x.startswith(\"\
    I\")])\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpl2osy2qz.py\", line 14\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n\n    for word in S.split():\n        if\
    \ word[0] == 'I':\n            boredoms += 1\n    return boredoms\n</code>\n<|/\
    \ a |>\n<| a |>\n<code>\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpn645nb4v.py\", line 19\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_count = 0\n    bored_list = ['.', '?', '!']\n  \
    \  for bored_character in bored_list:\n        if bored_character in S:\n    \
    \        bored_count += 1\n    return bored_count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj5krfr_y.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpj5krfr_y.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpj5krfr_y.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    if S == \"\":\n        return 0\n\n    count = 0\n   \
    \ for w in S.split():\n        if w == \"I\":\n            count += 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmgtx4znp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmgtx4znp.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmgtx4znp.py\", line 28,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    num_boredom = 0\n    for word in S.split():\n        if\
    \ word == 'I':\n            num_boredom += 1\n    return num_boredom\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt7kjzei7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpt7kjzei7.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpt7kjzei7.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count=0\n    words=S.split(' ')\n    for word in words:\n\
    \        if word.startswith(\"I\"):\n            count+=1\n    return count\n\
    \    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3s96aqk5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3s96aqk5.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3s96aqk5.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl06b7wp_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpl06b7wp_.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpl06b7wp_.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    # Your code here\n    return 0\n    \n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8gg1z9wp.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = []\n    boredoms.append(S.split(\".\")[0])\n\
    \    return len(boredoms)\n</cell>\n<cell>\nis_bored(\"Hello World\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp0znabsyb.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # get the first word\n    w = S[0]\n    count = 0\n  \
    \  # loop over all the words\n    for i in range(len(S)):\n        if S[i] ==\
    \ '.':\n            if S[i-1] != '.':\n                count += 1\n        else:\n\
    \            if S[i-1] == '.':\n                if S[i-2] != '.':\n          \
    \          count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lyhah68.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp9lyhah68.py\", line 36,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9lyhah68.py\", line 30,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    if S == \"\":\n        return 0\n    elif S in [\".\"\
    , \"?\", \"!\"]:\n        return 0\n    else:\n        return 1\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_c2xmp1p.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_count = 0\n\n    words = S.split()\n    for word\
    \ in words:\n        if word[0] == 'I':\n            bored_count += 1\n    return\
    \ bored_count\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxajo2tyr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxajo2tyr.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxajo2tyr.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_sents = []\n    for sentence in S.split('.'):\n\
    \        if sentence.startswith('I'):\n            bored_sents.append(sentence)\n\
    \    return len(bored_sents)\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb94i2cjf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb94i2cjf.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpb94i2cjf.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # write your code here\n    count = 0\n    S = S.lower()\n\
    \    if \"boredom\" in S:\n        return 1\n    if \"is\" in S:\n        return\
    \ 1\n    if \"isn't\" in S:\n        return 1\n    if \"are\" in S:\n        return\
    \ 1\n    if \"was\" in S:\n        return 1\n    if \"were\" in S:\n        return\
    \ 1\n    if \"can\" in S:\n        return 1\n    if \"can't\" in S:\n        return\
    \ 1\n    if \"do\" in S:\n        return 1\n    if \"doesn't\" in S:\n       \
    \ return 1\n    if \"could\" in S:\n        return 1\n    if \"couldn't\" in S:\n\
    \        return 1\n    if \"might\" in S:\n        return 1\n    if \"mightn't\"\
    \ in S:\n        return 1\n    if \"really\" in S:\n        return 1\n    if \"\
    really\" in S:\n        return 1\n    if \"may\" in S:\n        return 1\n   \
    \ if \"doesn't\" in S:\n        return 1\n    if \"should\" in S:\n        return\
    \ 1\n    if \"shouldn't\" in S:\n        return 1\n    if \"would\" in S:\n  \
    \      return 1\n    if \"wouldn't\" in S:\n        return 1\n    if \"could\"\
    \ in S:\n        return 1\n    if \"couldn't\" in S:\n        return 1\n    if\
    \ \"shouldn't\" in S:\n        return 1\n    if \"wouldn't\" in S:\n        return\
    \ 1\n    if \"should\" in S:\n        return 1\n    if \"isn't\" in S:\n     \
    \   return 1\n    if \"is\" in S:\n        return 1\n    if \"do\" in S:\n   \
    \     return 1\n    if \"don't\" in S:\n        return 1\n    if \"did\" in S:\n\
    \        return 1\n    if \"wouldn't\" in S:\n        return 1\n    if \"shouldn't\"\
    \ in S:\n        return 1\n    if \"isn't\" in S:\n        return 1\n    if \"\
    could\" in S:\n        return 1\n    if \"couldn't\" in S:\n        return 1\n\
    \    if \"could\" in S:\n        return 1\n    if \"really\" in S:\n        return\
    \ 1\n    if \"really\" in S:\n        return 1\n    if \"doesn't\" in S:\n   \
    \     return 1\n    if \"shouldn't\" in S:\n        return 1\n    if \"really\"\
    \ in S:\n        return 1\n    if \"can't\" in S:\n        return 1\n    if \"\
    couldn't\" in S:\n        return 1\n    if \"might\" in S:\n        return 1\n\
    \    if \"mightn't\" in S:\n        return 1\n    if \"should\" in S:\n      \
    \  return 1\n    if \"should\" in S:\n        return 1\n    if \"do\" in S:\n\
    \        return 1\n    if \"wouldn't\" in S:\n        return 1\n    if \"mightn't\"\
    \ in S:\n        return 1\n    if \"might\" in S:\n        return 1\n    if \"\
    mightn't\" in S:\n        return 1\n    if \"did\" in S:\n        return 1\n \
    \   if \"does\" in S:\n        return 1\n    if \"don't\" in S:\n        return\
    \ 1\n    if \"does\" in S:\n        return 1\n    if \"doesn't\" in S:\n     \
    \   return 1\n    if \"really\" in S:\n        return 1\n    if \"really\" in\
    \ S:\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6bgli5xd.py\", line 138\n    def check(candidate):\nIndentationError:\
    \ expected an indented block after 'if' statement on line 136\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_count = 0\n    \n    for sentence in S.split('.'):\
    \ # split sentences by \".\", \"?\" or \"!\" \n        if sentence == sentence[0]:\
    \ \n            bored_count += 1\n        else:\n            break\n    \n   \
    \ return bored_count\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9iy4wsuf.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9iy4wsuf.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9iy4wsuf.py\", line 27,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum([1 if w.startswith('I') else 0 for w in S.split()])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw8dxv9ga.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpw8dxv9ga.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpw8dxv9ga.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(word.startswith('I') for word in S.split())\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6i3b3ky1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6i3b3ky1.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6i3b3ky1.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count = count + 1\n    return count\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprk1z87cb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprk1z87cb.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprk1z87cb.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    words = S.split(' ')\n    count = 0\n    for word in words:\n\
    \        if word.startswith('I'):\n            count += 1\n    return count\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpusqxpf_y.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpusqxpf_y.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpusqxpf_y.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S:\n        if word == 'I'\
    \ and boredoms == 0:\n            boredoms = 1\n        elif word == 'I' and boredoms\
    \ == 1:\n            boredoms += 1\n        else:\n            boredoms = 0\n\
    \    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp58hdwrwt.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp58hdwrwt.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp58hdwrwt.py\", line 26,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = sum(word.startswith('I') for word in S.split('.'))\n\
    \    return boredoms \n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk08h_prr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpk08h_prr.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpk08h_prr.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word.lower()\
    \ == 'i':\n            boredom += 1\n    return boredom\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp903cuq3n.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp903cuq3n.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp903cuq3n.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    boredoms = 0\n    for word in S.split():\n     \
    \   if word[0].lower() == 'i':\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpol85it4n.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpol85it4n.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpol85it4n.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    # Split the sentence into words, and return 1 if\
    \ the word starts with \"I\".\n    return sum([1 for w in S.split() if w.lower().startswith('i')])\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnw8lz4bd.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_count = 0\n    for sentence in S.split('.'):\n \
    \       sentence_bored = any(sentence == x for x in ['I','i','!','.'])\n     \
    \   if sentence_bored == True:\n            bored_count = bored_count + 1\n  \
    \  return bored_count\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqcb8juh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfqcb8juh.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfqcb8juh.py\", line 23,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # BEGIN SOLUTION\n    boredoms = re.findall(r\"\\bI\"\
    , S)\n    return len(boredoms)\n    # END SOLUTION\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfyysl12y.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfyysl12y.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfyysl12y.py\", line 20,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpfyysl12y.py\"\
    , line 14, in is_bored\n    boredoms = re.findall(r\"\\bI\", S)\nNameError: name\
    \ 're' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return boredom_counter(S).boredoms()\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xrwmijz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9xrwmijz.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9xrwmijz.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp9xrwmijz.py\"\
    , line 13, in is_bored\n    return boredom_counter(S).boredoms()\nNameError: name\
    \ 'boredom_counter' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    count = 0\n    if S.startswith(\"I\"):\n       \
    \ count += 1\n    else:\n        \n        for char in S:\n            if char\
    \ in '.?!':\n                if char == '.':\n                    count += 1\n\
    \                else:\n                    if count == 1:\n                 \
    \       count = 0\n                count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgs4hx9a9.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpgs4hx9a9.py\", line 38,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgs4hx9a9.py\", line 31,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    return len(S.replace(\" \", \"\")) == 1 and S[0]\
    \ == 'I'\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcjibtuco.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcjibtuco.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcjibtuco.py\", line 20,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    return bored(S,'I',0)\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0xowonsh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0xowonsh.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0xowonsh.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp0xowonsh.py\"\
    , line 14, in is_bored\n    return bored(S,'I',0)\nNameError: name 'bored' is\
    \ not defined. Did you mean: 'sorted'?\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    words = S.split(\" \")\n    for word in\
    \ words:\n        if \"I\" in word:\n            count += 1\n    return count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq8opb1qe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpq8opb1qe.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq8opb1qe.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(map(is_bored, S.split('.')))\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_2ndu27.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpg_2ndu27.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpg_2ndu27.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpg_2ndu27.py\"\
    , line 13, in is_bored\n    return sum(map(is_bored, S.split('.')))\n  File \"\
    /tmp/tmpg_2ndu27.py\", line 13, in is_bored\n    return sum(map(is_bored, S.split('.')))\n\
    \  File \"/tmp/tmpg_2ndu27.py\", line 13, in is_bored\n    return sum(map(is_bored,\
    \ S.split('.')))\n  [Previous line repeated 496 more times]\nRecursionError: maximum\
    \ recursion depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    i = 0\n    while i < len(S):\n     \
    \   if S[i] in ('.', '?'):\n            boredoms += 1\n            i += 1\n  \
    \      i += 1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4km4u5yt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4km4u5yt.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4km4u5yt.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Your code here\n    boredoms = 0\n    for word in S.split():\n\
    \        if word == 'I' or word == '.' or word == '?' or word == '!':\n      \
    \      boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsavi1i4m.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsavi1i4m.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsavi1i4m.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_count = 0\n\n    # Your code here!\n    return bored_count\n\
    </cell>\n<cell>\nassert is_bored('Hello world') == 0\nassert is_bored('The sky\
    \ is blue. The sun is shining. I love this weather') == 1\n</cell>\n<text>\nFin!\
    \ Time to start writing/solving some problems! We have now completed your first\
    \ problem: \"Bored?\"\n\nOne final challenge: can you find words that appear three\
    \ or more times in a row? Return True or False accordingly.\n\n Input  Output\
    \  Test Cases \n\n I  Hello world!  0 \n I  He is good  0 \n I  I am fine  0 \n\
    \ I  He is good man  0 \n I  He is good man  1 \n I  I love this weather  0 \n\
    \ I  I love this weather He is good  1 \n I  I love this weather He is good man\
    \  1 \n I  I love this weather He is good man He is good  1 \n\nInstructions\n\
    Complete the function three_letter_is_bored as follows:\n\nUse a for loop to iterate\
    \ over each word in the sentence (split into a list)\nFor each word, check if\
    \ the word starts with the letter 'I'.\nIf the word starts with the letter 'I',\
    \ check if the word has a letter after it that is also a letter.\nKeep a count\
    \ of the number of times each letter appears in the word (use a dictionary)\n\
    If the count of the letter appears in the word is 3, return True. Otherwise, return\
    \ False.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnic714xk.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(s.startswith('I') for s in S.lower().split('.'))\
    \ + sum(s.startswith('!') or s.startswith('?') for s in S.lower().split('.'))\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4pw350s3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp4pw350s3.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4pw350s3.py\", line 18,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    S=S.lower()\n    if S[0] == 'i':\n        return S.count('.')\n\
    \    elif S[0] == 'a':\n        return S.count('!')\n    elif S[0] == 'e':\n \
    \       return S.count('?')\n    return 0\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjxq2ux3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkjxq2ux3.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkjxq2ux3.py\", line 25,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum([1 for i in range(0,len(S)) if S[i] == '.'\
    \ or S[i] == '?' or S[i] == '!'])\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz9iatpoj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpz9iatpoj.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpz9iatpoj.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n    \n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpooyq0xhk.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split(\" \"):\n       \
    \ if word.lower().startswith(\"i\"):\n            boredom+=1\n    return boredom\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy78ilv5k.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpy78ilv5k.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy78ilv5k.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl06b7wp_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpl06b7wp_.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpl06b7wp_.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    #return 0\n    count = 0\n    for s in S:\n    \
    \    if s.startswith('I'):\n            count = count + 1\n    return count\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhlesics.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvhlesics.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvhlesics.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(w in S[:5] for w in \"I love this weather\"\
    .split()) \n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiugqmc93.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiugqmc93.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpiugqmc93.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    for word in S.split():\n        if word.startswith(\"\
    I\"):\n            bored += 1\n    return bored\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1guirbn5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1guirbn5.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1guirbn5.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentence_list = S.split(\".\")\n   \
    \ \n    for s in sentence_list:\n        if s.startswith(\"I\"):\n           \
    \ boredoms += 1\n    \n    return boredoms\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rhpu49m.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp2rhpu49m.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2rhpu49m.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.lower().startswith('i'):\n\
    \            count += 1\n    return count\n</cell>\n<cell>\nassert is_bored('Hello\
    \ world') == 0\nassert is_bored('The sky is blue. The sun is shining. I love this\
    \ weather') == 1\n</cell>\n<text>\nCount the number of valid words in a sentence\n\
    Now that you have an is_bored function that counts number of boredoms, you can\
    \ combine it with another function that checks if the word is a valid word.\n\n\
    Define is_valid_word\nWrite a function that takes in a word and returns True if\
    \ that word is valid. Otherwise, your function should return False.\nis_valid_word\
    \ has the following parameters and returns True or False:\n\nA single string (word).\n\
    \n\nA list of the words in the string.\n\n\n\n\_Tip: Try writing some tests for\
    \ your is_valid_word function before you write your is_bored function.\n\n\n\n\
    </text>\n<cell>\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpqjlq8x_v.py\", line 38\n    \_Tip: Try writing some tests\
    \ for your is_valid_word function before you write your is_bored function.\n \
    \   ^\nSyntaxError: invalid non-printable character U+00A0\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for word in S.split('.') if word.startswith('I'))\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b58hi6e.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5b58hi6e.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5b58hi6e.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    for word in S.split(\" \"):\n        if\
    \ word.startswith(\"I\"):\n            bored += 1\n    return bored\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr7zot5ho.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpr7zot5ho.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpr7zot5ho.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    boredom = [\".\", \"?\", \"!\"]\n    for\
    \ word in S:\n        if word.lower() in boredom:\n            count += 1\n  \
    \  return count\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfysz0u93.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfysz0u93.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfysz0u93.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    \n    # TODO Complete this function and\
    \ return count\n\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpac2akqn9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpac2akqn9.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpac2akqn9.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return is_boredom(\". ? !\", S)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3re613eo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3re613eo.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3re613eo.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp3re613eo.py\"\
    , line 13, in is_bored\n    return is_boredom(\". ? !\", S)\nNameError: name 'is_boredom'\
    \ is not defined. Did you mean: 'is_bored'?\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = [word for word in S.lower().split() if word.startswith('i')]\n\
    \    return len(boredoms)\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuppz73fr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpuppz73fr.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpuppz73fr.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len(S) == 0 and S.startswith('I') or S.startswith('.')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbpp0x6k.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzbpp0x6k.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzbpp0x6k.py\", line 18,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len(S) > 0 and S[0] == 'I' and (S.count('.') >=\
    \ 2 or\n                                           S.count('!') >= 2 or\n    \
    \                                       S.count('?') >= 2)\n\n\n\"\"\"\n====================================================================\n\
    String Compression:\nWrite a program that given a string S and a set of words\
    \ D, prints out\nthe string after applying the following transformation:\n\"S\"\
    \ is the string to be transformed into a compressed string using the words in\n\
    D as dictionary words. Each dictionary word must have the same number of\ncharacters.\
    \ \nFor example, if D = {'I', 'am', 'happy', 'to', 'be', 'happy', '!'}, then \n\
    after transforming \"I am  happy to be  happy !\" into \"I ah !\", the output\
    \ string\nshould be \"I ah!\"\nInput:\nThe first line of the input contains the\
    \ string S.\nThe second line contains D which contains words.\nThe third line\
    \ contains the string D.\nOutput:\nThe output string after transforming S using\
    \ D.\nConstraints:\n1 <= S.len <= 10^5\n1 <= |D| <= 10^5\n1 <= |S| <= 10^5\n1\
    \ <= |word| <= 10^5\nExample:\nInput:\nS = \"Hello world\"\nD = {\"I\", \"am\"\
    , \"happy\"}\nOutput:\n\"I ah!\"\n\"\"\"\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iin3dz2.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp0iin3dz2.py\", line 57,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0iin3dz2.py\", line 51,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Get the index of the first '.', '?' or '!' in the string\n\
    \    boredom = S.find('.') if '.' in S else S.find('?') if '?' in S else S.find('!')\n\
    \n    # Count the number of 'I' occurrences in between the '.', '?' or '!'\n \
    \   # characters in the string\n    return boredom - 1\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4lu2d2cd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4lu2d2cd.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4lu2d2cd.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    boredom = ['.', '?', '!']\n    for i in\
    \ range(len(S) - 1):\n        if S[i] == boredom[0]:\n            count = count\
    \ + 1\n            if S[i + 1] == boredom[1]:\n                count = count +\
    \ 1\n                if S[i + 2] == boredom[2]:\n                    count = count\
    \ + 1\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqw3v85yp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqw3v85yp.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqw3v85yp.py\", line 27,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(\n        [\n            1 if i == 0 and S.startswith(('I',\
    \ 'I')) else 0\n            for i in S.split('.')\n        ]\n    )\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpne2koba2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpne2koba2.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpne2koba2.py\", line 23,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    boredoms = ['.', '?', '!']\n    for s in\
    \ S:\n        if s in boredoms:\n            count = count + 1\n    return count\n\
    \    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59ww15fe.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp59ww15fe.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp59ww15fe.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # TODO:\n    return None\n    \ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoqco9vwv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpoqco9vwv.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpoqco9vwv.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0 \n    for i in S:\n        if i == ' ':\n\
    \            continue\n        elif i == '.' or i == '?' or i == '!':\n      \
    \      boredoms += 1\n    return boredoms \n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk0ug_qtr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpk0ug_qtr.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpk0ug_qtr.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    if S == '':\n        return 0\n    i\
    \ = 0\n    while i < len(S):\n        if S[i] in ['.', '?', '!']:\n          \
    \  if S[i] == '.':\n                i = i + 1\n                continue\n    \
    \        boredoms = boredoms + 1\n            if S[i] == '?':\n              \
    \  i = i + 1\n            if S[i] == '!':\n                i = i + 1\n       \
    \ i=i+1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpby5a75ed.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpby5a75ed.py\", line 39,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpby5a75ed.py\", line 32,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\n  File \"/tmp/tmpby5a75ed.py\"\
    , line 25, in is_bored\n    if S[i] == '!':\nIndexError: string index out of range\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    words = S.split()\n    i = 0\n    while\
    \ i < len(words):\n        if words[i][0] == 'I':\n            boredoms += 1\n\
    \        i += 1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_e1nlni8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_e1nlni8.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_e1nlni8.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # initialize num_bored_count = 0\n    num_bored_count\
    \ = 0\n    \n    # complete this function\n    \n    return num_bored_count\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgjey20v8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgjey20v8.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgjey20v8.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Your code here\n    count = 0\n    for word in S.split():\n\
    \        if word[0] == 'I':\n            count += 1\n    return count\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp9ytx0wuo.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([True for w in S.split('.') if 'I' in w]) >\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n   \
    \ assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It !')\
    \ == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good today.\
    \ I will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnnqsu7a2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpnnqsu7a2.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpnnqsu7a2.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for i, v in enumerate(S) if v == 'I' and\
    \ S[i-1] == '.')\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprgsrk6bb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmprgsrk6bb.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprgsrk6bb.py\", line 19,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    words = S.split(' ')\n    for word in words:\n\
    \        if word.startswith('I'):\n            count += 1\n    return count\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp2kna9wil.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for s in S:\n        if s.lower() in\
    \ [\"i\", \"the\", \"to\", \"of\"]:\n            boredom += 1\n    return boredom\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfj8tbbxi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfj8tbbxi.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfj8tbbxi.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum([boredom_in_sentence[sentence[0]] for sentence\
    \ in S.split('.')])\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rwvfjc8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6rwvfjc8.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6rwvfjc8.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp6rwvfjc8.py\"\
    , line 13, in is_bored\n    return sum([boredom_in_sentence[sentence[0]] for sentence\
    \ in S.split('.')])\n  File \"/tmp/tmp6rwvfjc8.py\", line 13, in <listcomp>\n\
    \    return sum([boredom_in_sentence[sentence[0]] for sentence in S.split('.')])\n\
    NameError: name 'boredom_in_sentence' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 if c=='I' or (c.isalpha() and c=='?') else\
    \ 0 for c in S)\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbrbjwiny.py\", line 14\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for word,_ in bored.items() if word.startswith(S))\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpur17dxq3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpur17dxq3.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpur17dxq3.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpur17dxq3.py\"\
    , line 13, in is_bored\n    return sum(1 for word,_ in bored.items() if word.startswith(S))\n\
    NameError: name 'bored' is not defined. Did you mean: 'sorted'?\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_count = 0\n    for word in S.split():\n        if\
    \ word.lower().startswith('i'):\n            bored_count += 1\n    return bored_count\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgju1ofem.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgju1ofem.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgju1ofem.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for _, _, sentence in S.partition('.')[:3]\
    \ if sentence == '?')\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmqg4wvs1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmqg4wvs1.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmqg4wvs1.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpmqg4wvs1.py\"\
    , line 13, in is_bored\n    return sum(1 for _, _, sentence in S.partition('.')[:3]\
    \ if sentence == '?')\n  File \"/tmp/tmpmqg4wvs1.py\", line 13, in <genexpr>\n\
    \    return sum(1 for _, _, sentence in S.partition('.')[:3] if sentence == '?')\n\
    ValueError: too many values to unpack (expected 3)\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len(S.split(\"I\")) == 0 and len(S.split(\".\"\
    ))==1 and len(S.split(\"?\")) == 0 and len(S.split(\"!\")) == 0\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0xyasc_u.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0xyasc_u.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0xyasc_u.py\", line 18,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    return len(S.lower().split(' ')) > 0 and 'i' in\
    \ S.lower() and len(S.lower().split(' ')) < len(S.lower().split('.'))\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz8ttmdpt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz8ttmdpt.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpz8ttmdpt.py\", line 19,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 if w[0]=='I' else 0 for w in S.split('.'))\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxawbf8nn.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxawbf8nn.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxawbf8nn.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    S = S.split()\n    return 1 if 'I' in S else 0\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpw7ew4wua.py\", line 15\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptanq7tus.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptanq7tus.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptanq7tus.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split(' '):\n        if word\
    \ == 'I':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgx1akeci.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgx1akeci.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgx1akeci.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            bored += 1\n    return bored\n    \n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpyzhd6bys.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    if S == '':\n        return 0\n    \n\
    \    for sentence in S.split('.'):\n        if S.startswith('I'):\n          \
    \  boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3raayac3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3raayac3.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3raayac3.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.lower()\
    \ in ['i', 'you', 'he', 'she']:\n            count += 1\n    return count\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg2ur5d6g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg2ur5d6g.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpg2ur5d6g.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for i in range(len(S)) if S[i] == '.')\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7r0vo3sj.py\", line 14\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len([x for x in S.split('.') if x[0] == 'I']) >\
    \ 0\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_99tnqrb.py\", line 14\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    \n    for word in S.split():\n        if\
    \ word[0] == 'I':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb_s18n_w.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpb_s18n_w.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpb_s18n_w.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    words = []\n    for i in S:\n       \
    \ if i in '?!.':\n            boredom += 1\n            words.append(i)\n    if\
    \ len(words) == 0 or boredom > len(S):\n        return 0\n    else:\n        return\
    \ boredom\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzz1t6t0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpdzz1t6t0.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdzz1t6t0.py\", line 27,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    boredoms = 0\n    sentence = S.split('.')\n    boredoms\
    \ += sentence[0].strip().split()[0] == 'I'\n    \n    return boredoms\n    \n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjl2swkvj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjl2swkvj.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjl2swkvj.py\", line 25,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for sentence\
    \ in sentences:\n        if sentence == '?' or sentence == '!':\n            boredoms\
    \ += 2\n            continue\n        if sentence == '.':\n            boredoms\
    \ += 1\n            continue\n        if sentence[0] == 'I':\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprrsae247.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmprrsae247.py\", line 36,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprrsae247.py\", line 29,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms_count = 0\n    if S[0] == 'I':\n        for word\
    \ in S:\n            if word.startswith('I'):\n                boredoms_count\
    \ += 1\n    return boredoms_count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9afvj7tf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9afvj7tf.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9afvj7tf.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = collections.defaultdict(int)\n    for sentence\
    \ in S.split('.'):\n        for word in sentence.split():\n            if word.lower()\
    \ == 'i':\n                boredoms[word] += 1\n    return boredoms['i']\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpri_kcuir.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpri_kcuir.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpri_kcuir.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpri_kcuir.py\"\
    , line 13, in is_bored\n    boredoms = collections.defaultdict(int)\nNameError:\
    \ name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len(boredoms(S).split()) == 3\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyej4dxxv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyej4dxxv.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyej4dxxv.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpyej4dxxv.py\"\
    , line 13, in is_bored\n    return len(boredoms(S).split()) == 3\nNameError: name\
    \ 'boredoms' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    count = 0\n    for i in S:\n        if i.lower()\
    \ in 'i i i i i i'.split():\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwd96_5cd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwd96_5cd.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwd96_5cd.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for s in S.split('.')) if '.' in S else sum(1\
    \ for s in S.split('?')) \\\n        if '.' in S else sum(1 for s in S.split('!'))\
    \ \\\n        if '.' in S else 0\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkptqevdt.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkptqevdt.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkptqevdt.py\", line 20,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum([1 for word in S.lower().split() if not is_bored(word)])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfxoqq4fq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfxoqq4fq.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfxoqq4fq.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpfxoqq4fq.py\"\
    , line 13, in is_bored\n    return sum([1 for word in S.lower().split() if not\
    \ is_bored(word)])\n  File \"/tmp/tmpfxoqq4fq.py\", line 13, in <listcomp>\n \
    \   return sum([1 for word in S.lower().split() if not is_bored(word)])\n  File\
    \ \"/tmp/tmpfxoqq4fq.py\", line 13, in is_bored\n    return sum([1 for word in\
    \ S.lower().split() if not is_bored(word)])\n  File \"/tmp/tmpfxoqq4fq.py\", line\
    \ 13, in <listcomp>\n    return sum([1 for word in S.lower().split() if not is_bored(word)])\n\
    \  File \"/tmp/tmpfxoqq4fq.py\", line 13, in is_bored\n    return sum([1 for word\
    \ in S.lower().split() if not is_bored(word)])\n  File \"/tmp/tmpfxoqq4fq.py\"\
    , line 13, in <listcomp>\n    return sum([1 for word in S.lower().split() if not\
    \ is_bored(word)])\n  File \"/tmp/tmpfxoqq4fq.py\", line 13, in is_bored\n   \
    \ return sum([1 for word in S.lower().split() if not is_bored(word)])\n  File\
    \ \"/tmp/tmpfxoqq4fq.py\", line 13, in <listcomp>\n    return sum([1 for word\
    \ in S.lower().split() if not is_bored(word)])\n  File \"/tmp/tmpfxoqq4fq.py\"\
    , line 13, in is_bored\n    return sum([1 for word in S.lower().split() if not\
    \ is_bored(word)])\n  File \"/tmp/tmpfxoqq4fq.py\", line 13, in <listcomp>\n \
    \   return sum([1 for word in S.lower().split() if not is_bored(word)])\n  File\
    \ \"/tmp/tmpfxoqq4fq.py\", line 13, in is_bored\n    return sum([1 for word in\
    \ S.lower().split() if not is_bored(word)])\n  File \"/tmp/tmpfxoqq4fq.py\", line\
    \ 13, in <listcomp>\n    return sum([1 for word in S.lower().split() if not is_bored(word)])\n\
    \  File \"/tmp/tmpfxoqq4fq.py\", line 13, in is_bored\n    return sum([1 for word\
    \ in S.lower().split() if not is_bored(word)])\n  File \"/tmp/tmpfxoqq4fq.py\"\
    , line 13, in <listcomp>\n    return sum([1 for word in S.lower().split() if not\
    \ is_bored(word)])\n  File \"/tmp/tmpfxoqq4fq.py\", line 13, in is_bo"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    arr = S.split(\".\")\n    for i in arr:\n\
    \        if i[0] == \"I\":\n            count += 1\n    return count\n</cell>\n\
    <text>\nLet's test your code. Try is_bored('Hello world'), what do you get?\n\n\
    \n</text>\n<cell>\nprint(is_bored('Hello world'))\n</cell>\n<text>\nFor some assistance,\
    \ try the test cases below (including the boredom-introduction test case). Write\
    \ some code to\n\nget the list of valid words (the list of words in the file words.txt\
    \ - see Solution Notebook)\nget the list of valid boredoms (the list of boredoms\
    \ in the file boredoms.txt) - see Solution Notebook)\nfind the number of valid\
    \ words that start with the boredom \"B\" (see Solution Notebook)\n\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp31lxlgs9.py\", line 21\n    Let's test your code. Try\
    \ is_bored('Hello world'), what do you get?\n                                \
    \                   ^\nSyntaxError: unterminated string literal (detected at line\
    \ 21)\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    boredoms = S.split(' ')\n    for b in boredoms:\n\
    \        if b.startswith('i'):\n            count += 1\n    return count\n</cell>\n\
    <text>\n3. Counting Vowels\nYou will now count the number of vowels used in a\
    \ string. \nThis exercise will help you solve the homework problems concerning\
    \ vowel counting\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpb25ewtzr.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len(filter(lambda x: x != 'I' and x[0] == '.' and\
    \ x[-1] == '.', S.split(' ')))\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd8g23nht.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpd8g23nht.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpd8g23nht.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpd8g23nht.py\"\
    , line 13, in is_bored\n    return len(filter(lambda x: x != 'I' and x[0] == '.'\
    \ and x[-1] == '.', S.split(' ')))\nTypeError: object of type 'filter' has no\
    \ len()\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # get the string without the dots\n    S = S.lower()\n\
    \n    # get the index of the first letter of the word I\n    I = S.index(\"i\"\
    )\n\n    # get the index of the last letter of the word I\n    J = S.rfind(\"\
    i\")\n\n    # if the word starts with I, count the boredom\n    if I == 0 and\
    \ J != -1:\n        return 1\n    \n    # if the word ends with I, count the boredom\n\
    \    elif I == len(S) - 1 and J != -1:\n        return 1\n    \n    # get the\
    \ index of the letter after the last letter of the word I\n    K = J + 1\n\n \
    \   # if the word ends with I, count the boredom\n    if K == len(S):\n      \
    \  return 1\n\n    # else count the boredom\n    else:\n        return 0\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7rpgo7b.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp_7rpgo7b.py\", line 50,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_7rpgo7b.py\", line 42,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp_7rpgo7b.py\"\
    , line 17, in is_bored\n    I = S.index(\"i\")\nValueError: substring not found\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    # BEGIN Question 2\n    boredoms = []\n    for s\
    \ in S:\n        if s.startswith('I'):\n            boredoms.append(s)\n    return\
    \ len(boredoms)\n    # END Question 2\n\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5bekscok.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += boredoms_count('bore', S)\n\
    \    boredoms += boredoms_count('bored', S)\n    boredoms += boredoms_count('is',\
    \ S)\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn7azrvna.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpn7azrvna.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpn7azrvna.py\", line 20,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpn7azrvna.py\"\
    , line 14, in is_bored\n    boredoms += boredoms_count('bore', S)\nNameError:\
    \ name 'boredoms_count' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    \n    for word in S:\n        if word ==\
    \ 'I':\n            count += 1\n    return count\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp1h3p90dn.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    words = S.split('.')\n    for word in\
    \ words:\n        if word[0]=='I':\n            boredom+=1\n    return boredom\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxm47r0xj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxm47r0xj.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxm47r0xj.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return bored(S, 'I')\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpz575vcux.py\", line 14\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count=0\n    for word in S.split():\n        if word ==\
    \ 'I':\n            count+=1\n    return count\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpqpz1kne7.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = [word for word in S if word[0] == 'I']\n  \
    \  return len(boredoms)\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdkcfi7op.py\", line 15\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    words = S.split(' ')\n    bored_count = 0\n    for word\
    \ in words:\n        if word.lower() == 'i':\n            bored_count += 1\n \
    \   return bored_count\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsvz3043c.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsvz3043c.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsvz3043c.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    \n    return sum([1 for word in S.splitlines() if\
    \ word.startswith('I')]) > 0\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4qc5b5_j.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4qc5b5_j.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4qc5b5_j.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    S = S.lower()\n    boredom_count = 0\n    for word in\
    \ S.split('.'):\n        word = word.lower()\n        if word.startswith('i'):\n\
    \            boredom_count += 1\n    return boredom_count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdp1kn0n6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdp1kn0n6.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdp1kn0n6.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    boredom = 0\n    for s in S.split():\n        if\
    \ s.startswith('I'):\n            boredom += 1\n    return boredom\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdpjqw09l.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdpjqw09l.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdpjqw09l.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n\n    words = S.split()\n    i = 0\n   \
    \ while i < len(words):\n        if words[i] == 'I' and len(words[i+1]) == 1 and\
    \ \\\n           words[i+1][0] in '?!.':\n            boredoms += 1\n        i\
    \ += 1\n\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsf0f9t6j.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpsf0f9t6j.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsf0f9t6j.py\", line 29,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return boredom.count(S.split()[0])\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuadd36de.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpuadd36de.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpuadd36de.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpuadd36de.py\"\
    , line 13, in is_bored\n    return boredom.count(S.split()[0])\nNameError: name\
    \ 'boredom' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_count = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence.startswith('I'):\n            bored_count\
    \ += 1\n    return bored_count\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyck_jz3i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpyck_jz3i.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyck_jz3i.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # BEGIN Question 4\n    return 1 if S == 'I' else 0\n\
    \    # END Question 4\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyed62gfv.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpyed62gfv.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyed62gfv.py\", line 21,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = []\n    if S[0] == 'I':\n        return 1\n\
    \    else:\n        boredoms.append(S)\n    for S in boredoms:\n        if len(S.split(\"\
    .\")) > 1 and len(S.split(\"?\"))>1 and len(S.split(\"!\")) > 1:\n           \
    \ return 1\n    return 0\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvyovrl3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpzvyovrl3.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzvyovrl3.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum([bool(word.startswith('I')) for word in S.strip().split('\
    \ ')])\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw33gjk2o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw33gjk2o.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpw33gjk2o.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    \n    bored = 0\n    bored_sent = \"I \"\n    \n    for\
    \ word in S.split():\n        if word == bored_sent:\n            bored += 1\n\
    \    return bored\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7inkgp5m.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # your code here\n    boredoms = 0\n    sentences = S.split('.')\n\
    \    i = 0\n    while i < len(sentences):\n        if sentences[i] == 'I':\n \
    \           i += 1\n            if i < len(sentences):\n                boredoms\
    \ += 1\n            i += 1\n        else:\n            i += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6a2bkend.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp6a2bkend.py\", line 36,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6a2bkend.py\", line 30,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return boredom_count(S).__bool__()\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpacgfmnu8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpacgfmnu8.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpacgfmnu8.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpacgfmnu8.py\"\
    , line 13, in is_bored\n    return boredom_count(S).__bool__()\nNameError: name\
    \ 'boredom_count' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom_count = 0\n    for sentence in S.split('.')+['']:\n\
    \        boredom_count += 1 if 'I' in sentence.lower() else 0\n    return boredom_count\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpp64c27sc.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Add your code here\n    count = 0\n    words = S.split('\
    \ ')\n    if words[0] == 'I':\n        count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8pohkrm0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8pohkrm0.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8pohkrm0.py\", line 25,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count=0\n    sentence=S.split('.')\n    for word in sentence:\n\
    \        if word.startswith('I'):\n            count+=1\n    return count\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpwdpiga3i.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len(S) - S.count('I') \n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv7y84tlu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv7y84tlu.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpv7y84tlu.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    count = 0\n    for word in S.split():\n\
    \        if word.startswith('I'):\n            count += 1\n        elif word ==\
    \ '.' or word == '?' or word == '!':\n            pass\n        else:\n      \
    \      count += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp73ngyjw_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp73ngyjw_.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp73ngyjw_.py\", line 26,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
