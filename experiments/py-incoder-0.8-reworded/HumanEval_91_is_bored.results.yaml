language: py
name: HumanEval_91_is_bored
results:
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum(1 for w in S.split() if w == 'I')\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiuln9dh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxiuln9dh.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxiuln9dh.py\", line 22,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Get the count of sentences that start with the word\
    \ \"I\".\n    count = 0\n    for word in S.split():\n        if word == 'I':\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3vgvqlu9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3vgvqlu9.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3vgvqlu9.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    S = S.lower()\n    boredom = 0\n    boredom_words = ['i','a','the']\n\
    \    boredom_letters = ['.', '!', '?']\n    for word in S:\n        if word.lower()\
    \ in boredom_words:\n            boredom = 1\n        if word.lower() in boredom_letters:\n\
    \            boredom = 0\n    return boredom\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3wx5rwf9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3wx5rwf9.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3wx5rwf9.py\", line 27,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    # Your code here\n    for sentence in\
    \ S.split('.'):\n        if sentence.startswith(\"I\"):\n            boredoms\
    \ += 1\n    return boredoms\n</cell>\n<cell>\nassert is_bored('Hello world') ==\
    \ 0\nassert is_bored('The sky is blue. The sun is shining. I love this weather.')\
    \ == 1\n</cell>\n<text>\n6. Capitalization conversion\nThe remainder of this section\
    \ will teach you how to convert strings to\nlowercase, uppercase and titlecase.\n\
    \n.lower() - converts all the characters in a string to lowercase.\n.upper() -\
    \ converts all the characters in a string to uppercase.\n.title() - converts the\
    \ first character of each word to uppercase and the rest to lowercase.\n\nDon't\
    \ be surprised if your solutions don't produce the same results each time. That's\
    \ ok! The point of this is to gain practice writing solutions that are robust\
    \ to small differences in spelling.\n\n\n</text>\n<cell>\ntext = 'Hello World'\n\
    print(text.lower())\nprint(text.upper())\nprint(text.title())\n</cell>\n<text>\n\
    You can read about string methods in the documentation.\n\n\n</text>\n<cell>\n\
    text = 'Hello World'\nprint(text.lower())\nprint(text.upper())\nprint(text.title())\n\
    </cell>\n<text>\nTo perform string operations in Python, be sure to use the print(\
    \ ) function rather than print statement.\n\nYou will often find the print( )\
    \ function useful as a \"debugging tool,\" as it lets you inspect and validate\
    \ your variables more easily.\n\n\n</text>\n<text>\nTo convert a whole string\
    \ into lowercase or uppercase, you can use the lower( ) or upper( ) method.\n\n\
    The title( ) method will convert your entire string into uppercase and give the\
    \ first letter of each word in a title case format.\n\nLet's see some examples:\n\
    \n\n</text>\n<cell>\ntext = 'Hello World'\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp259abxat.py\", line 33\n    Don't be surprised if your\
    \ solutions don't produce the same results each time. That's ok! The point of\
    \ this is to gain practice writing solutions that are robust to small differences\
    \ in spelling.\n                                                             \
    \                          ^\nSyntaxError: unterminated string literal (detected\
    \ at line 33)\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return len(S.split(\".\") if \".\" in S else S.split(\"\
    ? \") if \"? \" in S else S.split(\"! \") if \"! \" in S else [])\n</cell>\n<cell>\n\
    assert is_bored(\"Hello world\") == 0\nassert is_bored(\"The sky is blue\") ==\
    \ 1\nassert is_bored(\"The sun is shining\") == 1\nassert is_bored(\"I love this\
    \ weather.\") == 1\n</cell>\n<text>\nImplement a function is_hungry that takes\
    \ in an activity string and returns the number of \"hungry\" things you can do\
    \ to the activity. For example, is_hungry(\"Walking on the Moon\") should return\
    \ 1, and is_hungry(\"Playing guitar\") should return 0.\n\nTo better understand\
    \ the boredom problem we will have to think about counting boredoms in a string.\
    \ When you think about it think of how many times we would need to call is_bored\
    \ to figure out if someone is bored. Let's say that is_bored returns 2 if the\
    \ string starts with \"I\" and 0 otherwise. Then the boredom count is given by\
    \ the following formula:\n\n$$ X=\\begin{cases}\n    (I) &\\text{ if } is_bored\
    \ (\\text{ first word }) \\text{ return }2 \\\n    (II) &\\text{ if } is_bored\
    \ (\\text{ second word }) \\text{ return }2 \\\n    (III) &\\text{ if } is_bored\
    \ (\\text{ third word }) \\text{ return }2 \\\n    (IV) &\\text{ if } is_bored\
    \ (\\text{ last word }) \\text{ return }2 \\\n\\end{cases}\n$$\n\nLet's define\
    \ an helper function that will help us solve the problem. One of the great things\
    \ about Jupyter notebooks is that we can simply define helper functions and then\
    \ pass them into other functions as arguments and they will be able to use them!\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmprem8setf.py\", line 24\n    To better understand the boredom\
    \ problem we will have to think about counting boredoms in a string. When you\
    \ think about it think of how many times we would need to call is_bored to figure\
    \ out if someone is bored. Let's say that is_bored returns 2 if the string starts\
    \ with \"I\" and 0 otherwise. Then the boredom count is given by the following\
    \ formula:\n                                                                 \
    \                                                                            \
    \                                                                            \
    \    ^\nSyntaxError: unterminated string literal (detected at line 24)\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    #Your code here\n    return 1 if S[0] in \"I\" else 0\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq585nfc_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq585nfc_.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq585nfc_.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    S = S.lower()\n    boredoms = [w.lower() for w in boredom_words\
    \ if w.startswith(S.lower())]\n    return len(boredoms)\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_7goo7y.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmph_7goo7y.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmph_7goo7y.py\", line 19,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmph_7goo7y.py\"\
    , line 14, in is_bored\n    boredoms = [w.lower() for w in boredom_words if w.startswith(S.lower())]\n\
    NameError: name 'boredom_words' is not defined\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredom += 1\n    return boredom\n\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2q4d05fl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2q4d05fl.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2q4d05fl.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n\n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            boredoms += 1\n\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vrw7fn_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4vrw7fn_.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4vrw7fn_.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # Complete the bored_count function below.\n    bored_count\
    \ = 0\n    \n    \n    \n    return bored_count\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp78xvo684.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp78xvo684.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp78xvo684.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum([word in 'I. !?' for word in S.split('.')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz95nncoo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz95nncoo.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpz95nncoo.py\", line 19,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    for w in S.split('.'):\n        if w.startswith('I'):\n\
    \            bored += 1\n    return bored\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6a4sc9xf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6a4sc9xf.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6a4sc9xf.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return sum([1 for sent in S.split() if sent.startswith('I')]\
    \ or [1 if S.strip().lower().startswith('i') else 0])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqcuk9ou1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqcuk9ou1.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqcuk9ou1.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpt3qpv1wa.py\", line 14\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored_sentences = 0\n    for word in S.split():\n    \
    \    if word[0] == 'I':\n            bored_sentences += 1\n    return bored_sentences\n\
    </cell>\n<cell>\nassert is_bored('Hello world') == 0\nassert is_bored('The sky\
    \ is blue. The sun is shining. I love this weather') == 1\n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmps5rejcq1.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    bored = 0\n    # your code here\n    return bored\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxxf9jqxy.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxxf9jqxy.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxxf9jqxy.py\", line 20,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # BEGIN Practice #\n    return boredom(S)\n    # END Practice\
    \ #\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa2mfotbb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpa2mfotbb.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa2mfotbb.py\", line 18,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpa2mfotbb.py\"\
    , line 14, in is_bored\n    return boredom(S)\nNameError: name 'boredom' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    return boredoms(S, 'I', '.', '?' or '!')\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptucyxjrx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptucyxjrx.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptucyxjrx.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmptucyxjrx.py\"\
    , line 13, in is_bored\n    return boredoms(S, 'I', '.', '?' or '!')\nNameError:\
    \ name 'boredoms' is not defined\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    # BEGIN PROBLEM 1\n    # This is a function template.\n\
    \    return 0\n    # END PROBLEM 1\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpot1343iq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpot1343iq.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpot1343iq.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n\n    # write your code here\n    for i in\
    \ range(len(S)):\n        if S[i] == '.':\n            boredom += 1\n        elif\
    \ S[i] == '?':\n            boredom += 1\n        elif S[i] == '!':\n        \
    \    boredom += 1\n    \n    return boredom\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcc4tlxw7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpcc4tlxw7.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcc4tlxw7.py\", line 28,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823092
