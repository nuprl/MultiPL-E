name: HumanEval_108_count_nums
language: py
prompt: "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    \"\
  \"\"\n    Write a function count_nums which takes an array of integers and returns\n\
  \    the number of elements which has a sum of digits > 0.\n    If a number is negative,\
  \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
  \ -1, 2, and 3.\n    >>> count_nums([])\n    0\n    >>> count_nums([-1, 11, -11])\n\
  \    1\n    >>> count_nums([1, 1, 2])\n    3\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([-1,\
  \ -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1,\
  \ 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n\
  \    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([0,\
  \ 1]) == 1\n    assert candidate([1]) == 1\n\ndef test_check():\n    check(count_nums)\n\
  \ntest_check()\n"
completions: ["    count = 0\n    for i in arr:\n        if i>0:\n            count\
    \ += i\n    return count\n", "    count = 0\n    for i in arr:\n        if not\
    \ is_positive(i):\n            i = abs(i)\n        count += sum(i)\n    return\
    \ count\n", "    return len(list(filter(lambda num: num > 0, arr)))\n\n", "  \
    \  count = 0\n    for num in arr:\n        if num < 0:\n            num /= 10\n\
    \            if num > 0:\n                num -= 1\n        count += num\n   \
    \ return count\n</code>\nThen you can easily apply this to the problem you asked\
    \ for:\n<code>", "    count = 0\n    for el in arr:\n        if el > 0:\n    \
    \        count += 1\n    return count\n\n", "    return sum(num for num in arr\
    \ if num >= 0)\n", "    pass\n", "    count = 0\n    for i in arr:\n        if\
    \ i > 0 and sum(map(int, str(i))) > 0:\n            count += 1\n    return count\n",
  "    pass\n\n", "    \n    return sum( (int(n)//10) for n in arr if n%10 > 0 ) \n",
  "    s = 0\n    for num in arr:\n        if num < 0:\n            if num == int(num\
    \ * -1):\n                s += 1\n            else:\n                num = int(num\
    \ * -1)\n        else:\n            num = int(num)\n            \n        while\
    \ num > 0:\n            num //= 10\n            s += 1\n    return s\n", "   \
    \ pass\n", "    total = 0\n    for n in arr:\n        if (n < 0) & (sum(n) < 0):\n\
    \            total += 1\n        else:\n            total += sum(map(int, str(n)))\n\
    \    return total\n\nassert count_nums([]) == 0\nassert count_nums([-1, 11, -11])\
    \ == 1\nassert count_nums([1, 1, 2]) == 3\n</cell>\n<text>\nWrite a function count_primes\
    \ that takes an array of integers and returns\nthe number of prime numbers in\
    \ that array.\n\nA prime number is a natural number greater than 1 that has no\
    \ positive\ndivisors other than 1 and itself. A prime number will have the form\
    \ $2k +\n1$ where $k$ is the number of times $2$ appears in the number until the\n\
    end.\n\nIf a number is negative, its first signed digit will be negative:\ne.g.\
    \ -123 has signed digits -1, 2, and 3.\n\n>>> count_primes([])\n0\n>>> count_primes([-1,\
    \ 11, -11])\n1\n>>> count_primes([1, 1, 2])\n1\n>>> count_primes([1, 2, 3])\n\
    2\n>>> count_primes([-1, 2, -3, 4, -5])\n2\n\"\"\"\n", "    count = 0\n    for\
    \ num in arr:\n        if num > 0:\n            count += num\n    return count\n",
  "    ans = 0\n    for x in arr:\n        if x>0:\n            ans += 1\n       \
    \ else:\n            ans += (x//10)*(x%10)\n    return ans\n", "    count_nums\
    \ = 0\n    for i in range(len(arr)):\n        if arr[i] + i > 9:\n           \
    \ count_nums += 1\n    return count_nums\n\n", "    \n    pass\n\n", "    count\
    \ = 0\n    negative_index = None\n    for i in range(len(arr)):\n        if arr[i]\
    \ < 0:\n            if negative_index is None:\n                negative_index\
    \ = i\n            else:\n                break\n        else:\n            count\
    \ = count + arr[i]\n    return count\n", "    \n    ans = 0\n    \n    for x in\
    \ arr:\n        if x < 0:\n            sign = -1\n            x = abs(x)\n   \
    \     else:\n            sign = 1\n        \n        for y in range(10, -1, -1):\n\
    \            ans += (x % y) * sign\n            x //= y\n            \n      \
    \  if sign == -1:\n            ans *= -1\n            \n    return ans\n\n", " \
    \   return len([num for num in arr if num >= 0])\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
