name: HumanEval_43_pairs_sum_to_zero
language: py
prompt: "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n\
  \    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it\
  \ returns True if there are two distinct elements in the list that\n    sum to zero,\
  \ and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n   \
  \ >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1,\
  \ 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n\
  \    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert\
  \ candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n\
  \    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) ==\
  \ False\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3,\
  \ 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n\
  \    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\ndef test_check():\n   \
  \ check(pairs_sum_to_zero)\n\ntest_check()\n"
completions: ["    sum1 = 0\n    sum2 = 0\n    pairs = 0\n    for i in l:\n      \
    \  sum1 += i\n        sum2 += i\n        pairs += 1\n        if sum1 == sum2:\n\
    \            return True\n    return False\n", "    s = set(l)\n    return not\
    \ s.issubset(range(min([len(s), 3]), -min([len(s), 3])))\n", "    length = len(l)\n\
    \    for i1 in range(length//2):\n        for i2 in range(i1+1, length//2):\n\
    \            if l[i1] + l[i2] == 0:\n                return True\n    return False\n",
  "    s = 0\n    for n in l:\n        s += n\n        if s == 0: return True\n  \
    \  return False\n", "    for i in l:\n        if l.count(i) == 2:\n          \
    \  return False\n    return True\n", "    pairs = set()\n    for a in l:\n   \
    \     pairs.add((a, -a, 0))\n\n    for a in l:\n        other_a, other_b = pairs.pop()\n\
    \        if a == other_a + other_b:\n            return False\n\n    return True\n",
  "    # Write your code here\n    if len(l) < 2:\n        return False\n    l.sort()\n\
    \    for i in range(len(l)):\n        if l[i] + l[i+1] == 0:\n            return\
    \ True\n    return False\n", "    pairs = []\n    for i, num in enumerate(l):\n\
    \        pairs.append((num, l[i]))\n        for j, num2 in enumerate(l):\n   \
    \         if i != j and pairs[i][1]-pairs[j][1] == num:\n                return\
    \ True\n    return False\n", "    def can_be_zero(a: List[int]) -> bool:\n   \
    \     \"\"\"\n        can_be_zero returns True if the list contains only a single\
    \ element and it is zero.\n        \"\"\"\n        return len(a) == 1 and a[0]\
    \ == 0\n\n    return can_be_zero(list(zip(l,l[1:])))\n", "    seen = {}\n    return\
    \ any(pair in seen or seen.update({pair: True}) for pair in l)\n", "    seen =\
    \ set()\n    l = list(l)\n    for i, num in enumerate(l):\n        if num in seen:\n\
    \            return False\n        seen.add(num)\n    return len(seen) == 2 and\
    \ l[0] + l[1] == 0\n", "    total = 0\n    for i in l:\n        total += i\n \
    \       if total < 0:\n            return False\n    if total == 0:\n        return\
    \ True\n    else:\n        return False\n", "    s = set(l)\n    if not s:\n \
    \       return True\n    return len(s) == 2 and 0 not in s\n\n", "    s = 0\n\
    \    for num in l:\n        s += num\n    if s == 0:\n        return True\n  \
    \  return False\n", "    \n    for i in range(len(l) - 1):\n        num = l[i]\
    \ + l[i + 1]\n        flag = False\n        for j in range(i + 1, len(l)):\n \
    \           l = l[:j] + [l[j]] + l[j + 1:]\n            if num == 0 and l == []:\
    \ flag = True\n    return flag\n", "    sum1 = 0\n    sum2 = 0\n    for i in l:\n\
    \        sum1 = sum1 + i\n        sum2 = sum2 + i\n    if sum1 == sum2:\n    \
    \    return True\n    else:\n        return False\n\n", "    \n    def helper(l:\
    \ List[int], result: List[int]) -> bool:\n        if l == []:\n            return\
    \ True\n        head = l.pop(0)\n        result = helper(l, [head] + result)\n\
    \        if head < 0 or head not in result:\n            return False\n      \
    \  result.remove(head)\n        return helper(l, result)\n    \n    return helper(l,\
    \ [0, 0])\n\n", "    # Write your code here\n    return len([x for x in l if x-0\
    \ != 0]) == 1\n\n", "    # Your code here\n    pairs = 0\n    for i in l:\n  \
    \      for j in l:\n            if i + j == 0:\n                pairs += 1\n \
    \   if pairs % 2 == 0:\n        return True\n    else:\n        return False\n\
    \n", "    \n    if len(l) == 1:\n        return True\n    \n    left_sum = 0\n\
    \    right_sum = 0\n    \n    for i in l:\n        left_sum += i\n        right_sum\
    \ -= i\n    \n    return (left_sum == 0 and right_sum == 0)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
