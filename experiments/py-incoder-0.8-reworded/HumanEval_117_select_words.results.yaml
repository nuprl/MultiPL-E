language: py
name: HumanEval_117_select_words
results:
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    #TODO: Write your code here\n    return []\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqcv9khj1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqcv9khj1.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqcv9khj1.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # Your code here\n    if len(s) == 0:\n        return []\n\
    \    \n    \n    words = s.split()\n    \n    \n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4w6np8wx.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp4w6np8wx.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4w6np8wx.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhfzblk2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphhfzblk2.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmphhfzblk2.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    \n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdo2bgzf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvdo2bgzf.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvdo2bgzf.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    if not s:\n        return []\n\n    words = []\n    \n\
    \    left_count=0\n    right_count=0 \n\n    while(left_count<n or right_count<n):\n\
    \n        left_index=s.index(' ',left_count)\n\n        if left_index==-1:\n \
    \           left_index=s.index(' ',left_count+1)\n\n        left_count+=1\n\n\
    \        right_index=s.index(' ',left_index)\n\n        if right_index==-1:\n\
    \            right_index=len(s)\n\n        right_count+=1\n\n        if right_index<left_index:\n\
    \            break\n\n        words.append(s[left_index:right_index].strip())\n\
    \n    return words\n\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2yr9ncv.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpq2yr9ncv.py\", line 64,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2yr9ncv.py\", line\
    \ 55, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # BEGIN Question 3\n    s = s.lower()\n    if s == \"\":\n  \
    \      return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    vowels = 'aeiouy'\n    i = 0\n    words_with_n_consonants = []\n    while\
    \ i < len(words):\n        if words[i] in consonants and words[i].count(consonants[n])\
    \ >= n:\n            words_with_n_consonants.append(words[i])\n        i += 1\n\
    \    return words_with_n_consonants\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3vz0_n8.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpu3vz0_n8.py\", line 46,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpu3vz0_n8.py\", line\
    \ 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    vowels = 'aeiou'\n    \n    s_list = s.split()\n    \n    # return\
    \ an empty list if there are no words in the string\n    if len(s_list) == 0:\n\
    \        return []\n\n    # define helper function to test if string contains\
    \ n vowels\n    def contain_n(word):\n        return all([c in vowels for c in\
    \ word])\n    \n    # return empty list if n is not positive integer\n    if not\
    \ n > 0:\n        return []\n\n    # return empty list if n is zero\n    if n\
    \ == 0:\n        return s_list\n\n    # initialize a list to hold our results\n\
    \    results = []\n\n    # populate our results list with words that contains\
    \ exactly n vowels\n    for i in range(len(s_list)):\n        if contain_n(s_list[i]):\n\
    \            results.append(s_list[i])\n            \n    return results\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvzxcve8m.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpvzxcve8m.py\", line 61,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvzxcve8m.py\", line\
    \ 52, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    if s != '':\n        result = []\n        for i in range(len(s)):\n\
    \            if s.count('consonant') >= n:\n                result.append(s[:i].lower())\n\
    \            else:\n                break\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3zvdm77.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpk3zvdm77.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpk3zvdm77.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # BEGIN Practice:\n    \n    # END Practice\n    return\
    \ []\n    \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwssk1wb3.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpwssk1wb3.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwssk1wb3.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n    \n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgtjwtj9y.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgtjwtj9y.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgtjwtj9y.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split(' ')\n    count = 0\n    for i in range(len(words)):\n\
    \        if 'a' in words[i] or 'e' in words[i] or 'i' in words[i] or 'o' in words[i]\
    \ or 'u' in words[i]:\n            count += 1\n        else:\n            break\n\
    \    if count >= n:\n        return [i for i in words if len(i) == n]\n    else:\n\
    \        return []\n</cell>\n<text>\nTask 2: Write a function called select_words_with_count\
    \ that implements the function\ndescribed above. Try your function on the string\
    \ 'Mary had a little lamb'. The expected\noutput should be ['little', 'lamb'].\n\
    \nNote: You may assume that n is always positive.\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpggcweqyf.py\", line 32\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if n < 1:\n        return []\n    return list(filter(lambda x:\
    \ len(x) == n, s.split()))\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbptchxn6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbptchxn6.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbptchxn6.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqo2i74d6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqo2i74d6.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqo2i74d6.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    vowels = \"AEIOUaeiou\"\n    vowel_count = Counter(vowels)\n\
    \    word_list = []\n    if s:\n        for i, char in enumerate(s):\n       \
    \     letter_count = vowel_count[char]\n            if letter_count == n:\n  \
    \              word_list.append(s[i:])\n    return word_list\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\nIf you can't use RegEx, you can use itertools:\n<code>\nfrom\
    \ itertools import takewhile\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdx8jy75o.py\", line 33\n    If you can't use RegEx, you\
    \ can use itertools:\n              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 33)\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # BEGIN Practice: Write your code below. Don't forget to wrap\
    \ your code in an appropriate def\n    return []\n    # END Practice\n    \n \
    \   \n    \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9mi9208.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpp9mi9208.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp9mi9208.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO Implement\n    lst = []\n    if len(s) == 0:\n       \
    \ return lst\n\n    word = s.split()\n    for w in word:\n        if countConsonants(w)\
    \ == n:\n            lst.append(w)\n    return lst\n\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgljf4uks.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgljf4uks.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgljf4uks.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpgljf4uks.py\", line 28, in select_words\n    if countConsonants(w)\
    \ == n:\nNameError: name 'countConsonants' is not defined\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    return []\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqxddjvg_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqxddjvg_.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqxddjvg_.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmdg3bu_m.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi1t4kzq2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpi1t4kzq2.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpi1t4kzq2.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    s = s.lower()\n    return list(set(s.lower().split(\" \")).difference(set(s.split(\"\
    \ \"))))[:n]\n\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3bzm_lx_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3bzm_lx_.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3bzm_lx_.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    counts = [len(w) for w in words]\n   \
    \ counts[0] = 0\n    counts[1] = 1\n    counts[2] = 1\n\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzx4_sq4p.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmpzx4_sq4p.py\", line 278,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpzx4_sq4p.py\", line\
    \ 269, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Your code here\n    # return s.split()\n    return list(filter(lambda\
    \ x: len(x)==n, s.split()))\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5q6vuaw8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5q6vuaw8.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp5q6vuaw8.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s: return []\n    seen = {}\n    words = []\n    def helper(word):\n\
    \        if word in seen: \n            return True\n        \n        seen[word]\
    \ = True\n        \n        count = 0\n        for char in word:\n           \
    \ if char in string.ascii_lowercase:\n                count += 1\n           \
    \ if count >= n:\n                words.append(word)\n                return True\n\
    \        return False\n\n    return [word for word in s.split(\" \") if helper(word)]\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfu4zrb1e.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpfu4zrb1e.py\", line 52,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfu4zrb1e.py\", line\
    \ 43, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpfu4zrb1e.py\", line 39, in select_words\n    return [word for\
    \ word in s.split(\" \") if helper(word)]\n  File \"/tmp/tmpfu4zrb1e.py\", line\
    \ 39, in <listcomp>\n    return [word for word in s.split(\" \") if helper(word)]\n\
    \  File \"/tmp/tmpfu4zrb1e.py\", line 32, in helper\n    if char in string.ascii_lowercase:\n\
    NameError: name 'string' is not defined\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s:\n        return []\n    words = s.split()\n    words\
    \ = list(set(words))\n    words.sort(key=lambda x: x.lower())\n    result = []\n\
    \    count = 1\n    for word in words:\n        if len(word) < n:\n          \
    \  continue\n        current = word.lower()\n        for letter in current:\n\
    \            if letter not in result:\n                result.append(letter)\n\
    \                count += 1\n            if count == n:\n                break\n\
    \    return result if len(result) < n else result[:n]\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp40xkflhl.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp40xkflhl.py\", line 50,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp40xkflhl.py\", line\
    \ 41, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # BEGIN Practice:\n    return [] #<- Finish this function\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqck99_li.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqck99_li.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqck99_li.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s:\n        return []\n    words = s.split()\n    ans\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            ans.append(word)\n\
    \    return ans\n\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vitrdri.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp4vitrdri.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4vitrdri.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    \n    return []\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmq4xjjf3.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    if len(s) == 0:\n        return []\n    \n    vowels =\
    \ ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    \n\
    \    ans = []\n    for i in range(len(s)):\n        \n        if s[i] in vowels:\n\
    \            ans.append(s[i])\n        elif s[i] in consonants:\n            if\
    \ i + n == len(s):\n                ans.append(s[:i + n])\n            else:\n\
    \                ans.append(s[:i + n] + s[i + n])\n                \n    return\
    \ ans\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppt7vq9de.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmppt7vq9de.py\", line 51,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppt7vq9de.py\", line\
    \ 42, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmppt7vq9de.py\", line 37, in select_words\n    ans.append(s[:i\
    \ + n] + s[i + n])\nIndexError: string index out of range\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if len(s) == 0:\n        return []\n\n    def count_vowels(s:\
    \ str) -> int:\n        return len([c for c in s if c == 'a' or c == 'e' or c\
    \ == 'i' or c == 'o' or c == 'u'])\n\n    def count_consonants(s: str) -> int:\n\
    \        return len([c for c in s if c.isalpha()])\n\n    def count_words_containing_n(s:\
    \ str, n: int) -> List[str]:\n        # Your code here\n        pass\n\n    return\
    \ count_words_containing_n(s, n)\n</code>\n<|/ a tags=python,python-3.x |>\n<|\
    \ c |>\nYou forgot to define your functions. Try `def select_words(s: str, n:\
    \ int) -> List[str]:`.\n<|/ c |>\n<| c |>\nThis solution doesn't use any fancy\
    \ stuff, only the basic functions. You still need to define them. Plus, you can\
    \ just `return [word for word in string.split() if count_consonants(word) == n]`.\n\
    <|/ c |>\n<| a |>\n<code>\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpz1m5jy82.py\", line 36\n    <|/ a tags=python,python-3.x\
    \ |>\n                              ^\nSyntaxError: invalid decimal literal\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: Your solution here\n    if len(s) == 0:\n        return\
    \ []\n    \n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n \
    \   words = ''\n    for i in s:\n        if i in vowels:\n            words +=\
    \ i\n        if i in consonants:\n            words += i\n    return words.split('\
    \ ')\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfabplmnb.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpfabplmnb.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfabplmnb.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Your code here\n    if s == \"\":\n        return []\n    res\
    \ = []\n    for i in range(len(s)):\n        if n == 0:\n            res.append(s[i])\n\
    \            break\n        for j in range(len(s)):\n            if j == i:\n\
    \                continue\n            if s[j] == s[i] and s[j+1] == s[i]:\n \
    \               n -= 1\n                if n == 0:\n                    res.append(s[j])\n\
    \    return res\n\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgtqznyox.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpgtqznyox.py\", line 49,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgtqznyox.py\", line\
    \ 40, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split(' ')\n    for w in words:\n        if len(w)\
    \ < n:\n            w = w.lower()\n            for c in w:\n                if\
    \ c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n                \
    \    pass\n                elif c == 'u':\n                    w = w.replace('u',\
    \ 't')\n                elif c == 'i':\n                    w = w.replace('i',\
    \ 'a')\n                elif c == 'o':\n                    w = w.replace('o',\
    \ 'i')\n                elif c == 'e':\n                    w = w.replace('e',\
    \ 'e')\n                elif c == 'a':\n                    w = w.replace('a',\
    \ 'a')\n                elif c == 'l':\n                    w = w.replace('l',\
    \ 'a')\n                elif c == 'd':\n                    w = w.replace('d',\
    \ 'a')\n                else:\n                    w = w.replace(c, '')\n    \
    \            if w == '':\n                    break\n        else:\n         \
    \   break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo0zgbc2.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpoo0zgbc2.py\", line 60,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpoo0zgbc2.py\", line\
    \ 51, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return s[:]\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvsgouzln.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvsgouzln.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvsgouzln.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if n == 0: return []\n    \n    words = s.split(' ')\n    \n\
    \    words_count = len(words)\n\n    for index, word in enumerate(words):\n  \
    \      \n        has_consonants = False\n\n        for consonant_letter in vowels:\n\
    \            has_consonants = has_consonants or words[index].find(consonant_letter)\
    \ != -1\n\n        if has_consonants == n:\n            \n            select_words.append(word)\n\
    \            \n    return select_words\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxty24d8h.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpxty24d8h.py\", line 50,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpxty24d8h.py\", line\
    \ 41, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpxty24d8h.py\", line 31, in select_words\n    for consonant_letter\
    \ in vowels:\nNameError: name 'vowels' is not defined\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<text>\nSolution\nClick below for the solution.\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpfhk2br_g.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    \n    \n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4xv2z66h.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4xv2z66h.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4xv2z66h.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    if len(s) == 0:\n        return []\n    \n    vowels =\
    \ ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    \n\
    \    letters = s.split(' ')\n    \n    words = []\n    \n    for i in range(len(letters)):\n\
    \        \n        letter = letters[i]\n        \n        cons = []\n        \n\
    \        for letter in letter:\n            if letter in vowels:\n           \
    \     cons += vowels\n            else:\n                cons += consonants\n\
    \        \n        cons = list(set(cons))\n        \n        if len(cons) == n:\n\
    \            words.append(letter)\n    \n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb_j89883.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpb_j89883.py\", line 61,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb_j89883.py\", line\
    \ 52, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmdg3bu_m.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return s\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv1lk9do.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmplv1lk9do.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmplv1lk9do.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    vowels_pattern = re.compile('(^[aeiou])')\n    letter_start =\
    \ '[a-zA-Z]'\n    letter_end = '[a-zA-Z]+'\n    space_pattern = re.compile('(^[\\\
    s])')\n    number_pattern = re.compile('([0-9])')\n    word_pattern = re.compile(\"\
    (?=(%s))\" % (letter_start + letter_end + space_pattern))\n    \n    words = []\n\
    \    # remove spaces, punctuations and numbers from the given string\n    s =\
    \ s.replace(' ', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n\
    \    s = s.replace('?', '') \n    s = s.replace('/', '')\n    s = s.replace('!',\
    \ '')\n    s = s.replace(':', '')\n    s = s.replace('(', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{',\
    \ '')\n    s = s.replace('}', '')\n    s = s.replace(':', '')\n    s = s.replace(';',\
    \ '')\n    s = s.replace(':', '')\n    s = s.replace(',', '')\n\n    # remove\
    \ all vowels from the given string\n    s = re.sub(vowels_pattern, '', s)\n\n\
    \    words = word_pattern.findall(s)\n    \n    words = [word for word in words\
    \ if len(word) == n]\n\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphmslyitz.py\", line\
    \ 69, in <module>\n    test_check()\n  File \"/tmp/tmphmslyitz.py\", line 67,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmphmslyitz.py\", line\
    \ 58, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmphmslyitz.py\", line 21, in select_words\n    vowels_pattern\
    \ = re.compile('(^[aeiou])')\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    if not s:\n        return []\n    \n    # your code here\n\
    \    \n    return [''.join(list(s)) for s in s.split() if len(list(s)) == n]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9n2vbjls.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp9n2vbjls.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9n2vbjls.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if s == '':\n        return []\n    words: List[str] = []\n \
    \   \n    for i in range(len(s)-n+1):\n        if s[i] not in 'aeiou':\n     \
    \       words.append(s[i:])\n        else:\n            break\n    return words\n\
    </cell>\n<text>\nQuestion 3\nA restaurant owner has a database with multiple tables.\n\
    She wants to find out how many tables are there in each database.\n\nShe has provided\
    \ a list of tables in her Excel sheet. Find out the number of tables in each database.\n\
    You will need to use pandas.read_excel to read Excel sheet.\n\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmph0c3i438.py\", line 31\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmdg3bu_m.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO implement the function\n    return []\n\n</cell>\n<text>\n\
    Challenge Solution\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8jsalwko.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Your code here\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8w0gbw0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8w0gbw0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp8w0gbw0p.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    if s is None or len(s) == 0:\n        return []\n    \n\
    \    words = s.split(' ')\n    \n    return [word for word in words if len(word)\
    \ == n]\n    \n    \n    \ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppabhij7k.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmppabhij7k.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppabhij7k.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmdg3bu_m.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # implement this function\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppzucipsa.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppzucipsa.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppzucipsa.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi1t4kzq2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpi1t4kzq2.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpi1t4kzq2.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # BEGIN PROBLEM 4\n    \n    return list(filter((lambda\
    \ word: len(word) == n), s.split()))\n    # END PROBLEM 4\n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpqzhyl5xa.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s:\n        return []\n    \n    if len(s) <= n:\n   \
    \     return [s]\n\n    words = []\n    for c in s:\n        if c == 'a' or c\
    \ == 'e' or c == 'i' or c == 'o' or c == 'u':\n            pass\n        elif\
    \ c == 'n':\n            words.append(s[s.index(c)+1])\n        elif c == 's':\n\
    \            words.append(s[s.index(c)+1])\n            words.append(s[s.index(c)+1])\n\
    \        elif c == 't':\n            words.append(s[s.index(c)+1])\n         \
    \   words.append(s[s.index(c)+1])\n            words.append(s[s.index(c)+1])\n\
    \        elif c == 'l':\n            words.append(s[s.index(c)+1])\n         \
    \   words.append(s[s.index(c)+1])\n            words.append(s[s.index(c)+1])\n\
    \            words.append(s[s.index(c)+1])\n        elif c == 'r':\n         \
    \   words.append(s[s.index(c)+1])\n            words.append(s[s.index(c)+1])\n\
    \            words.append(s[s.index(c)+1])\n            words.append(s[s.index(c)+1])\n\
    \            words.append(s[s.index(c)+1])\n            words.append(s[s.index(c)+1])\n\
    \            words.append(s[s.index(c)+1])\n            words.append(s[s.index(c)+1])\n\
    \        else:\n            words.append(c)\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi1oz9b3k.py\", line\
    \ 70, in <module>\n    test_check()\n  File \"/tmp/tmpi1oz9b3k.py\", line 68,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpi1oz9b3k.py\", line\
    \ 59, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s:\n        return []\n    vowels = 'aeiou'\n    vowel_counts\
    \ = {v : 0 for v in vowels}\n    \n    word = []\n    letters = s.lower()\n  \
    \  for l in letters:\n        if l in vowel_counts:\n            vowel_counts[l]\
    \ +=1\n        else:\n            if vowel_counts[l]== n:\n                word.append(l)\n\
    \            \n    return word\n    \n\n</cell>\n<text>\nQuestion 7\nWrite a function\
    \ that takes in a list of integers nums and a natural number k and returns a list\
    \ containing all unique integers that appear at least k times in the list of integers.\n\
    \nExample usage: select_k([1,2,2,3,4,5,5,5,6,7], 3)\nOutput: [3,3,3,7,7,7]\n\n\
    >>> select_k([1,2,2,3,4,5,5,5,6,7], 3)\n[3,3,3,7,7,7]\n\"\"\"\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpejxmvcio.py\", line 48\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 61)\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # BEGIN Question 7\n    # BEGIN Solution 7\n    if s == \"\"\
    :\n        return []\n    \n    vowels = \"aeiou\"\n    \n    results = []\n \
    \   s = s.replace(\",\", \"\")\n    s = s.replace(\"\\n\", \"\")\n    s = s.replace(\"\
    \\t\", \"\")\n    s = s.replace(\"\\r\", \"\")\n    s = s.replace(\"\\\"\", \"\
    \")\n    s = s.replace(\"\\'\", \"\")\n    s = s.replace(\"!\", \"\")\n    s =\
    \ s.replace(\"'\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"\
    ,\", \"\")\n    s = s.replace(\".\", \"\")\n    s = s.replace(\"!\", \"\")\n \
    \   s = s.replace(\"?\", \"\")\n    s = s.replace(\":\", \"\")\n    s = s.replace(\"\
    ;\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\"'\", \"\")\n \
    \   s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"\
    [\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"{\", \"\")\n \
    \   s = s.replace(\"}\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\"\
    >\", \"\")\n    s = s.replace(\"%\", \"\")\n    s = s.replace(\"!\", \"\")\n \
    \   s = s.replace(\"|\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"\
    `\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\"+\", \"\")\n \
    \   s = s.replace(\"=\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"\
    &\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"?\", \"\")\n \
    \   s = s.replace(\"@\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"\
    `\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"!\", \"\")\n \
    \   s = s.replace(\"+\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"\
    *\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"$\", \"\")\n \
    \   s = s.replace(\"?\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"\
    ^\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"&\", \"\")\n \
    \   s = s.replace(\"!\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"\
    =\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"&\", \"\")\n \
    \   s = s.replace(\"$\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"\
    @\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"`\", \"\")\n \
    \   s = s.replace(\"&\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\"\
    +\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"*\", \"\")\n \
    \   s = s.replace(\"&\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"\
    ?\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"^\", \"\")\n \
    \   s = s.replace(\"`\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"\
    !\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"=\", \"\")\n \
    \   s = s.replace(\"*\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp29q4ew5f.py\", line 108\n    s = s.\n          ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    \n    return list(filter(lambda x: len(x) == n, s.split()))\n\
    \    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4)\
    \ == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuriryek5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpuriryek5.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpuriryek5.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if n == 0:\n        return []\n    if n == len(s):\n        return\
    \ [s]\n    \n    word_list=[]\n    \n    char_list = []\n    \n    # Step 1: remove\
    \ non letters\n    letters = re.findall(r'[a-z]+', s)\n    if len(letters) ==\
    \ 0:\n        char_list.extend(list(s))\n        return char_list\n    char_list.extend(letters)\n\
    \    \n    # Step 2: remove multiple spaces\n    letters = re.findall(r'[a-z]+',\
    \ s)\n    for a in letters:\n        char_list.extend(re.findall(r'[a-z]+', a))\n\
    \    char_list.extend(list(s))\n    \n    # Step 3: remove consonants\n    letters\
    \ = re.findall(r'[a-z]+', s)\n    for a in letters:\n        char_list.extend(re.findall(r'[bcdfghjklmnpqrstvwxyz]+',\
    \ a))\n    char_list.extend(list(s))\n    \n    # Step 4: remove special characters\n\
    \    letters = re.findall(r'[a-z]+', s)\n    for a in letters:\n        char_list.extend(re.findall(r'[^A-Za-z]+',\
    \ a))\n    char_list.extend(list(s))\n    \n    # Step 5: remove numbers\n   \
    \ letters = re.findall(r'[a-z]+', s)\n    for a in letters:\n        char_list.extend(re.findall(r'[0-9]+',\
    \ a))\n    char_list.extend(list(s))\n    \n    # Step 6: remove special characters\n\
    \    letters = re.findall(r'[a-z]+', s)\n    for a in letters:\n        char_list.extend(re.findall(r'[^A-Za-z]+',\
    \ a))\n    char_list.extend(list(s))\n    \n    # Step 7: remove spaces\n    letters\
    \ = re.findall(r'[a-z]+', s)\n    for a in letters:\n        char_list.extend(re.findall(r'\\\
    s+', a))\n    char_list.extend(list(s))\n    \n    # Step 8: remove multiple spaces\n\
    \    letters = re.findall(r'[a-z]+', s)\n    for a in letters:\n        char_list.extend(re.findall(r'\\\
    s+', a))\n    char_list.extend(list(s))\n    \n    # Step 9: remove consonants\n\
    \    letters = re.findall(r'[a-z]+', s)\n    for a in letters:\n        char_list.extend(re.findall(r'[bcdfghjklmnpqrstvwxyz]+',\
    \ a))\n    char_list.extend(list(s))\n    \n    # Step 10: remove numbers\n  \
    \  letters = re.findall(r'[a-z]+', s)\n    for a in letters:\n        char_list.extend(re.findall(r'[0-9]+',\
    \ a))\n    char_list.extend(list(s))\n    \n    # Step 11: remove special characters\n\
    \    letters = re.findall(r'[a-z]+', s)\n    for a in letters:\n        char_list.extend(re.findall(r'[^A-Za-z]+',\
    \ a))\n    char_list.extend(\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5mmzt_2e.py\", line 95\n    char_list.extend(\n      \
    \              ^\nSyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    assert isinstance(n, int) and n >= 1\n    \n    def consonant(c:\
    \ str) -> str:\n        if c in [\"b\", \"p\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"n\", \"m\", \"q\", \"s\", \"x\", \"z\", \"ch\", \"sh\", \"\
    sh\", \"ch\", \"sh\"]:\n            return \"cons\"\n        else:\n         \
    \   return \"\"\n    \n    word = s[:]\n    \n    ans = []\n    \n    word = word.replace(\"\
    \ \", \"\")\n    \n    for c in word:\n        if consonant(c) in word:\n    \
    \        word = word.replace(c, \"\")\n            if len(word) != 0:\n      \
    \          ans.append(word)\n    \n    if len(ans) >= n:\n        return ans\n\
    \    else:\n        return \"\"\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdq2utpro.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmpdq2utpro.py\", line 56,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdq2utpro.py\", line\
    \ 47, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    lst: List[str] = []\n    for w in s.split():\n        if w ==\
    \ \"\" or not w.isalpha():\n            continue\n        if len(w) < n:\n   \
    \         continue\n        if w.count(\"consonants\") > n - 1:\n            continue\n\
    \        lst.append(w)\n    return lst\n</cell>\n<text>\nThe select_words() function\
    \ has passed its test cases. Now you have a solid foundation to write a solution\
    \ to the first coding exercise.\n\nThe solution:\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpb3epg3kf.py\", line 31\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if len(s) == 0:\n        return []\n    vowels = ['a','e','i','o','u']\n\
    \    vowels_used = set()\n    vowels_used.add('a')\n    vowels_used.add('e')\n\
    \    vowels_used.add('i')\n    vowels_used.add('o')\n    vowels_used.add('u')\n\
    \    words = []\n    for i in s:\n        if i not in vowels:\n            continue\n\
    \        vowels_used.discard(i)\n        vowels_used.add('a')\n        vowels_used.add('e')\n\
    \        vowels_used.add('i')\n        vowels_used.add('o')\n        vowels_used.add('u')\n\
    \        words.append(i)\n    for vowel in vowels_used:\n        if vowel in vowels:\n\
    \            continue\n        vowels_used.discard(vowel)\n        vowels_used.add('a')\n\
    \        vowels_used.add('e')\n        vowels_used.add('i')\n        vowels_used.add('o')\n\
    \        vowels_used.add('u')\n        words.append(vowel)\n    return words\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0w3e4m48.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmp0w3e4m48.py\", line 63,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0w3e4m48.py\", line\
    \ 54, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # BEGIN CODING\n    if n<0 or n>len(s):\n        return []\n\
    \    ans=[]\n    for word in s.split():\n        if select_word(word,n)>0:\n \
    \           ans.append(word)\n    return ans\n    # END CODING\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbgf8lih8.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpbgf8lih8.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbgf8lih8.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpbgf8lih8.py\", line 26, in select_words\n    if select_word(word,n)>0:\n\
    NameError: name 'select_word' is not defined. Did you mean: 'select_words'?\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if len(s)==0:\n        return []\n    \n    #your code here\n\
    \    \n    return words\n    \nprint(select_words('Mary had a little lamb', 4))\n\
    print(select_words('Mary had a little lamb', 3))\nprint(select_words('simple white\
    \ space', 2))\nprint(select_words('Hello world', 4))\nprint(select_words('Uncle\
    \ sam', 3))\n</cell>\n<text>\nDictionaries\nDictionaries are like JSON objects,\
    \ but with two differences:\n\nEach key must be unique\nEach value is also a JSON\
    \ object, which in turn can contain key-value pairs \n\nSo the basic structure\
    \ of a dictionary is as follows:\n\n{<key>: <value>, <key>: <value>, ...}\n\n\
    </text>\n<cell>\nmy_dict = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n\
    \nprint(my_dict)\n</cell>\n<cell>\nmy_dict['key4'] = 'value4'\n\nprint(my_dict)\n\
    </cell>\n<text>\nYou can add a new key value pair to your dictionary as follows:\n\
    \n\n</text>\n<cell>\nmy_dict['key4'] = 'value4'\n\nprint(my_dict)\n</cell>\n<text>\n\
    But a key must be unique!\n\n\n</text>\n<cell>\nmy_dict['key1'] = 'value1'\n\n\
    print(my_dict)\n</cell>\n<text>\nAnd you can't add duplicate keys\n\n\n</text>\n\
    <cell>\nmy_dict['key1'] = 'value1'\nmy_dict['key1'] = 'value1'\n\nprint(my_dict)\n\
    </cell>\n<text>\nIn order to add multiple key-value pairs, you can use a loop:\n\
    \n\n</text>\n<cell>\nmy_dict = {}\nfor i in range(10):\n    my_dict['key{}'.format(i)]\
    \ = 'value{}'.format(i)\n\nprint(my_dict)\n</cell>\n<text>\nOr if you want even\
    \ more brevity, use a list comprehension:\n\n\n</text>\n<cell>\nmy_dict = {f'key{i}'\
    \ : 'value{}'.format(i) for i in range(10)}\n\nprint(my_dict)\n</cell>\n<text>\n\
    Exercise 1\nCreate an empty dictionary and add some key-value pairs to it. The\
    \ dictionary should be ordered from low to high by key.\n\nThe dictionary should\
    \ look like this:\n{<key>: <value>, <key>: <value>, ...}\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp30aotbk7.py\", line 77\n    And you can't add duplicate\
    \ keys\n               ^\nSyntaxError: unterminated string literal (detected at\
    \ line 77)\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqo2i74d6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqo2i74d6.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqo2i74d6.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    \n    \n    \n\n</cell>\n<text>\nProblem 3: Function to\
    \ replace spaces with dashes\nGiven a string s with spaces replaced with dashes,\
    \ return a string with \nspaces replaced with dashes, but no other characters.\
    \ For example:\n>>> s = \"Mary had a little lamb\"\n>>> replace_spaces_with_dashes(s)\n\
    \"Mary---had---a---little---lamb\"\n>>> replace_spaces_with_dashes('Hello world')\n\
    'Hello---world'\n>>> replace_spaces_with_dashes('Uncle sam')\n'Uncle---sam'\n\
    >>> replace_spaces_with_dashes(\"\")\n\"\"\n>>> replace_spaces_with_dashes(' \
    \ ')\n''\n>>> replace_spaces_with_dashes('Mary had a little lamb')\n'Mary---had---a---little---lamb'\n\
    >>> replace_spaces_with_dashes(\"Mary had a little lamb\")\n\"Mary---had---a---little---lamb\"\
    \n\"\"\"\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5bqcllqu.py\", line 46\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 60)\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmprfsrsitx.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    pass\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr1algh0q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpr1algh0q.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpr1algh0q.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    return []\n    \n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpsskfc3zj.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    words = []\n    if n > 1:\n        words = s.split()\n\
    \    \n    return [w for w in words if w == ''.join(c for c in w if c.isalpha())]\n\
    \    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp97_b19b2.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp97_b19b2.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp97_b19b2.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    s = s.split(' ')\n    res = []\n    \n    i = 0\n    while i\
    \ < len(s) and n > 0 :\n        if s[i] not in ('', ' '):\n            if len(set(s[i]))\
    \ == n:\n                res.append(s[i])\n        i += 1\n\n    return res\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9v8rnoun.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp9v8rnoun.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9v8rnoun.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    #Your code here\n    \n    \n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    \n    words = []\n    \n    for i in s:\n        if i in vowels:\n\
    \            words.append(i)\n        else:\n            if len(words) <= n:\n\
    \                words.append(i)\n            \n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps0hichdk.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmps0hichdk.py\", line 47,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps0hichdk.py\", line\
    \ 38, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n\n    return s\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6db0hrgp.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6db0hrgp.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6db0hrgp.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if len(s) == 0:\n        return []\n    rest = []\n    for i\
    \ in range(len(s)):\n        if len(s) != 0:\n            if s[i] in vowels:\n\
    \                rest.append(s[i+1:i+n])\n                s = s[i+1:]\n      \
    \      else:\n                rest.append(s[i])\n    return rest\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp01qq1zyk.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp01qq1zyk.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp01qq1zyk.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp01qq1zyk.py\", line 26, in select_words\n    if s[i] in vowels:\n\
    NameError: name 'vowels' is not defined\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    assert isinstance(s, str), \"Please enter a string as input\"\
    \n    assert isinstance(n, int) and n >= 0, \"Please enter a positive number as\
    \ input\"\n\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    words = [word\
    \ for word in words if len(word) == n and all(char in vowels for char in word)]\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9xn72v9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpf9xn72v9.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpf9xn72v9.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s:\n        return []\n\n    return [x for x in s.split(\"\
    \ \") if n == len([consonant for consonant in x if consonant.isupper()])]\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpek2smka8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpek2smka8.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpek2smka8.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    def split_words(s: str) -> List[str]:\n        res = []\n   \
    \     prev_n = 0\n        for i, c in enumerate(s):\n            if c.isspace():\n\
    \                if prev_n == n:\n                    break\n            else:\n\
    \                prev_n = 1 if c.isupper() or c.islower() else 0\n           \
    \ res.append(c)\n        return res\n\n    if not s:\n        return []\n    else:\n\
    \        return split_words(s)\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp42y5bea.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpp42y5bea.py\", line 48,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp42y5bea.py\", line\
    \ 39, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    if s == '':\n        return []\n    \n    else:\n     \
    \   count = 0\n        word = s.split()\n        word_list = list()\n        vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n        for char in s:\n            if char not\
    \ in vowels:\n                count += 1\n                if count == n:\n   \
    \                 word_list.append(word)\n                    count = 0\n    \
    \            else:\n                    word.append(char)\n        \n        return\
    \ word_list\n</code>\n<|/ a dscore=0 |>\n<| a tags=python dscore=0 |>\n<code>\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp2ye3xm0a.py\", line 40\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return []\n</code>\nIf you want an explanation of any of them,\
    \ just ask!\n<|/ a |>\n<| a |>\nThis is my solution:\n<code>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmptap0slnu.py\", line 22\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    words = []\n    \n    if len(s) == 0: return words\n  \
    \  \n    for letter in s:\n        \n        if letter in 'aeiou': continue\n\
    \        \n        count = 0\n        \n        for char in word:\n          \
    \  if char == letter:\n                count += 1\n                \n        if\
    \ count == n:\n            words.append(letter)\n        \n    return words\n\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5cqhuaku.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp5cqhuaku.py\", line 52,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp5cqhuaku.py\", line\
    \ 43, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp5cqhuaku.py\", line 32, in select_words\n    for char in word:\n\
    NameError: name 'word' is not defined. Did you mean: 'words'?\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # BEGIN Solution\n    if not s:\n        return []\n  \
    \  \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    # Build a dict to hold\
    \ the count of how many consonants the word contains\n    count = {letter: 0 for\
    \ letter in s.lower()}\n    for letter in s.lower():\n        if letter in vowels:\n\
    \            count[letter] += 1\n    \n    # Add words that contain only one consonant\n\
    \    ones = []\n    for letter in vowels:\n        if count[letter] == 1:\n  \
    \          ones.append(letter)\n    \n    # Add words that contain two consonants\n\
    \    twos = []\n    for letter in vowels:\n        if count[letter] == 2:\n  \
    \          twos.append(letter)\n    \n    # Add words that contain three consonants\n\
    \    threes = []\n    for letter in vowels:\n        if count[letter] == 3:\n\
    \            threes.append(letter)\n    \n    # Return all the ones\n    if len(ones)\
    \ > 1:\n        ones = select_words(s, n)\n        return ones\n    \n    # Return\
    \ all the twos\n    elif len(twos) > 1:\n        twos = select_words(s, n)\n \
    \       return twos\n    \n    # Return all the threes\n    elif len(threes) >\
    \ 1:\n        threes = select_words(s, n)\n        return threes\n    \n    #\
    \ Return all words\n    else:\n        return [s]\n\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33d44tix.py\", line\
    \ 83, in <module>\n    test_check()\n  File \"/tmp/tmp33d44tix.py\", line 81,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp33d44tix.py\", line\
    \ 72, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp33d44tix.py\", line 37, in select_words\n    if count[letter]\
    \ == 1:\nKeyError: 'o'\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return []\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmppc9t2l4e.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # BEGIN problem_set_2_select_words\n    vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n    vowels_count = list(map(lambda x: s.count(x), vowels))\n    consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'y', 'z']\n    consonants_count = list(map(lambda x: s.count(x),\
    \ consonants))\n    word_list: List[str] = []\n    for vowel in vowels:\n    \
    \    if vowels_count[vowel] >= n:\n            word_list.append(vowel)\n    for\
    \ consonant in consonants:\n        if consonants_count[consonant] >= n:\n   \
    \         word_list.append(consonant)\n    return word_list\n    # END problem_set_2_select_words\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5cbpruyd.py\", line 35\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # your solution here\n    if len(s) == 0 or n == -1:\n\
    \        return []\n    else:\n        return [ word for word in s.split() if\
    \ len(word) >= n ]\n\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpugtafjhn.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpugtafjhn.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpugtafjhn.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # Your code here\n    \n    words = s.split()\n    \n \
    \   if len(words) >= n:\n        words.sort()\n        return words\n    else:\n\
    \        return words\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpczylb814.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpczylb814.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpczylb814.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhfzblk2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphhfzblk2.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmphhfzblk2.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    if n < 0: return [] \n    \n    word_list: List[str] =\
    \ s.split(' ') \n    word_list2 = [] \n    \n    for word in word_list: \n   \
    \     if word.count('a') == n: \n            word_list2.append(word)\n    \n \
    \   return word_list2\n\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpfzb1qib0.py\", line 33\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    s=s.split(\" \")\n    n=int(n)\n    list=[]\n    for word in\
    \ s:\n        if len(word)==n:\n            list.append(word)\n    return list\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw3w9atqv.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpw3w9atqv.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpw3w9atqv.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # BEGIN Question 4\n    # Work your solution here.\n  \
    \  # END Question 4\n    return []\n</cell>\n<cell>\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp9jgb5aem.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return list(filter(lambda w: len(w) == n, s.split(\" \")))\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpheyzxeu3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpheyzxeu3.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpheyzxeu3.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    return [] \n</cell>\n<text>\nPart 3 - Extracting information\
    \ from text\n\n</text>\n<text>\nProblem 2a\n\nCreate a function that receives\
    \ a sentence and returns the number of words in the sentence, regardless of their\
    \ case.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpig9km1a8.py\", line 29\n    Problem 2a\n            ^\n\
    SyntaxError: invalid decimal literal\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Add your code here\n    word = s.split(' ')\n    word1 = []\n\
    \    word2 = []\n    count = 0\n    for word in word:\n        for char in range(len(word)):\n\
    \            cons_count = (word.count(consonants[count]))\n            if cons_count\
    \ >= n:\n                if char == 0 or char == len(word) - 1:\n            \
    \        word1.append(word)\n                    word2.append(word)\n        \
    \        else:\n                    if word[char-1] != consonants[count]:\n  \
    \                      word1.append(word)\n                        word2.append(word)\n\
    \                        count+=1\n                    else:\n               \
    \         word1.append(word)\n                        word2.append(word[char+1])\n\
    \                        count+=1\n                        count+=1\n        \
    \        if count > n:\n                    break\n    if word1 == []:\n     \
    \   word1.append(word2)\n    return word1\n    \ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpueyb_wed.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpueyb_wed.py\", line 59,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpueyb_wed.py\", line\
    \ 50, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpueyb_wed.py\", line 28, in select_words\n    cons_count = (word.count(consonants[count]))\n\
    NameError: name 'consonants' is not defined\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s:\n        return []\n\n    res = []\n    # TODO\n  \
    \  return res\n\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk91ixbpt.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpk91ixbpt.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpk91ixbpt.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    \n    pass\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzl8xahd.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbzl8xahd.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbzl8xahd.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if len(s) == 0:\n        return list()\n    else:\n        #\
    \ Find position of first consonant\n        idx = s.lower().find('b')\n      \
    \  if idx < 0:\n            idx = s.lower().find('g')\n            if idx < 0:\n\
    \                idx = s.lower().find('p')\n                if idx < 0:\n    \
    \                idx = s.lower().find('w')\n                    if idx < 0:\n\
    \                        idx = s.lower().find('y')\n                        if\
    \ idx < 0:\n                            idx = s.lower().find('z')\n          \
    \  if idx < 0:\n                idx = s.lower().find('t')\n                if\
    \ idx < 0:\n                    idx = s.lower().find('u')\n                  \
    \  if idx < 0:\n                        idx = s.lower().find('a')\n          \
    \              if idx < 0:\n                            idx = s.lower().find('s')\n\
    \                            if idx < 0:\n                                idx\
    \ = s.lower().find('e')\n                                if idx < 0:\n       \
    \                             idx = s.lower().find('o')\n    \n        word_list\
    \ = []\n        word_list.append(s[:idx])\n        s = s[idx+1:]\n        idx\
    \ = s.lower().find('b')\n        if idx < 0:\n            idx = s.lower().find('g')\n\
    \            if idx < 0:\n                idx = s.lower().find('p')\n        \
    \        if idx < 0:\n                    idx = s.lower().find('w')\n        \
    \            if idx < 0:\n                        idx = s.lower().find('y')\n\
    \                        if idx < 0:\n                            idx = s.lower().find('z')\n\
    \            if idx < 0:\n                idx = s.lower().find('t')\n        \
    \        if idx < 0:\n                    idx = s.lower().find('u')\n        \
    \            if idx < 0:\n                        idx = s.lower().find('a')\n\
    \                        if idx < 0:\n                            idx = s.lower().find('s')\n\
    \                            if idx < 0:\n                                idx\
    \ = s.lower().find('e')\n                                if idx < 0:\n       \
    \                             idx = s.lower().find('o')\n\n        while len(s)\
    \ > 0 and len(word_list) < n:\n            idx = s.lower().find('b')\n       \
    \     if idx < 0:\n                idx = s.lower().find('g')\n               \
    \ if idx < 0:\n                    idx = s.lower().find('p')\n               \
    \     if idx < 0:\n                        idx = s.lower().find('w')\n       \
    \                 if idx < 0:\n                            idx = s.lower().find('y')\n\
    \                            if idx < 0:\n                                idx\
    \ = s.lower().find('z')\n            if idx < 0:\n                idx = s.lower().find('t')\n\
    \                if idx < 0:\n                    idx = s.lower().find('u')\n\
    \                    if idx < 0:\n                        idx = s.lower().find('a')\n\
    \                        if idx < 0:\n                            idx = s.lower().find('s')\n\
    \                            if idx < 0:\n                                idx\
    \ = s.lower().find('e')\n                                if idx < 0:\n       \
    \                             idx = s.lower().find('o')\n\n            word_list.append(s[:idx])\n\
    \            s = s[idx+1:]\n        return word_list\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nThis problem is similar to word breaking problem. You can use this\
    \ algorithm to break your string to words, and then you can find out how many\
    \ words of your original string contains exactly n consonant\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp1xqq1l7r.py\", line 104\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    return [w for w in words if w.count(n)\
    \ == n]\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp00o2yjic.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp00o2yjic.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp00o2yjic.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp00o2yjic.py\", line 22, in select_words\n    return [w for w\
    \ in words if w.count(n) == n]\n  File \"/tmp/tmp00o2yjic.py\", line 22, in <listcomp>\n\
    \    return [w for w in words if w.count(n) == n]\nTypeError: must be str, not\
    \ int\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    vowels = 'AEIOU'\n    \n    vowels_found = []\n    \n \
    \   for letter in s:\n        if letter in vowels:\n            vowels_found.append(letter)\n\
    \            \n    if len(vowels_found) >= n:\n        return vowels_found\n \
    \   \n    vowels_found = vowels_found + select_words(s.replace(f' {vowel} ', '\
    \ '), n)\n    \n    return vowels_found\n</cell>\n<text>\nLet's test your function\
    \ with the example in the docstring:\n\n\n</text>\n<cell>\ntest_select_words()\n\
    </cell>\n<text>\nNow let's write a tester for the select_words function using\
    \ nose2.\n\nThe tester can be run from the command line using (for example):\n\
    \nnose2 -v test_select_words.py -vv test_select_words_words.py -vvv test_select_words_words_cases.py\
    \ -vvvv test_select_words_words_cases_words.py -vvvvv test_select_words_words_cases_words_cases.py\
    \ -vvvvvv test_select_words_words_cases_words_words_cases.py\n\n</text>\n<cell>\n\
    from typing import List\n\nfrom nose.tools import assert_equal\nfrom nose.tools\
    \ import assert_true\nfrom nose.tools import raises\nfrom nose.tools import raises\n\
    \nfrom solution import select_words\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpp2mp_sha.py\", line 38\n    Let's test your function with\
    \ the example in the docstring:\n       ^\nSyntaxError: unterminated string literal\
    \ (detected at line 38)\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return [''.join(w for w in s.split) if len(w) == n and set(w)\
    \ == {'a'} | {'e'}]\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiorb3sfi.py\", line 21\n    return [''.join(w for w in\
    \ s.split) if len(w) == n and set(w) == {'a'} | {'e'}]\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    SyntaxError: expected 'else' after 'if' expression\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptwt6s_oc.py\", line\
    \ 290, in <module>\n    test_check()\n  File \"/tmp/tmptwt6s_oc.py\", line 288,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptwt6s_oc.py\", line\
    \ 279, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s:\n        return []\n    \n    letters = list(set(s))\n\
    \    \n    if len(letters) < n:\n        return []\n    \n    return letters[0\
    \ : n - 1]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7st605nu.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp7st605nu.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp7st605nu.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqo2i74d6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqo2i74d6.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqo2i74d6.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: implement the function\n    \n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp545w70bq.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp545w70bq.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp545w70bq.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Your code here\n    vowels = 'aeiou'\n    \n    \n    if s\
    \ == \"\":\n        return list()\n    else:\n        word_list = s.split()\n\
    \        ans = list()\n        \n        for i in range(len(word_list)):\n   \
    \         if len(word_list[i]) == n:\n                word = word_list[i]\n  \
    \              for vowel in vowels:\n                    if vowel in word:\n \
    \                       ans.append(word)\n                \n        return ans\n\
    \        \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7j5ndwb4.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp7j5ndwb4.py\", line 51,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp7j5ndwb4.py\", line\
    \ 42, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s:\n        return []\n    word_list = []\n    for word\
    \ in s.split():\n        words = count_vowels(word)\n        if words == n:\n\
    \            word_list.append(word)\n    return word_list\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17fi76dv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp17fi76dv.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp17fi76dv.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp17fi76dv.py\", line 25, in select_words\n    words = count_vowels(word)\n\
    NameError: name 'count_vowels' is not defined\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # TODO: Your code here\n    words = []\n    \n    idx =\
    \ 0\n    while idx < len(s):\n        if s[idx] == 'M':\n            idx += 2\n\
    \            idx += idx % 2\n            idx += idx % 2\n            idx += idx\
    \ % 2\n            idx += idx % 2\n            idx += idx % 2\n            idx\
    \ += idx % 2\n            idx += idx % 2\n            idx += idx % 2\n       \
    \     idx += idx % 2\n            idx += idx % 2\n            idx += idx % 2\n\
    \            idx += idx % 2\n            idx += idx % 2\n            idx += idx\
    \ % 2\n            idx += idx % 2\n            idx += idx % 2\n            idx\
    \ += idx % 2\n            idx += idx % 2\n            idx += idx % 2\n       \
    \     idx += idx % 2\n            idx += idx % 2\n            idx += idx % 2\n\
    \            idx += idx % 2\n            idx += idx % 2\n            idx += idx\
    \ % 2\n            idx += idx % 2\n            idx += idx % 2\n            idx\
    \ += idx % 2\n            idx += idx % 2\n            idx += idx % 2\n       \
    \     idx += idx % 2\n            idx += idx % 2\n            idx += idx % 2\n\
    \            idx += idx % 2\n            idx += idx % 2\n            idx += idx\
    \ % 2\n            idx += idx % 2\n            idx += idx % 2\n            idx\
    \ += idx % 2\n            idx += idx % 2\n            idx += idx % 2\n       \
    \     idx += idx % 2\n            idx += idx % 2\n            idx += idx % 2\n\
    \            idx += idx % 2\n            idx += idx % 2\n            idx += idx\
    \ % 2\n            idx += idx % 2\n            idx += idx % 2\n            idx\
    \ += idx % 2\n            idx += idx % 2\n            idx += idx % 2\n       \
    \     idx += idx % 2\n            idx += idx % 2\n            idx += idx % 2\n\
    \            idx += idx % 2\n            idx += idx % 2\n            idx += idx\
    \ % 2\n            idx += idx % 2\n            idx += idx % 2\n            idx\
    \ += idx % 2\n            idx += idx % 2\n            idx += idx % 2\n       \
    \     idx += idx % 2\n            idx += idx % 2\n            idx += idx % 2\n\
    \            idx += idx % 2\n            idx += idx % 2\n            idx \ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659977150
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if len(s) == 0:\n        return []\n\n    words = []\n    chars\
    \ = list(s)\n    \n    while len(chars) > n:\n        if chars[0:3] == ['U', 'n',\
    \ 'c'] and chars[3:5] == ['s', 'a'] and chars[5:7] == ['m', 'a'] and chars[7:10]\
    \ == ['d', 'a'] and chars[10:] == ['o', 'n', 'o', 't']:\n            words.append(''.join(chars[0:n]))\n\
    \        chars = chars[-n:]\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb5bnt4i6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpb5bnt4i6.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb5bnt4i6.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    return s\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb29avoc9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpb29avoc9.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb29avoc9.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    words = []\n    words = s.split(' ')\n    words.sort(key=len,\
    \ reverse=True)\n    words = list(filter(lambda x: len(x) == n, words))\n    \n\
    \    \n    return words\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7pthpobv.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp7pthpobv.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp7pthpobv.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    \n    \n\n    \n\n    \n\n    \n\n    \n    return words\n\
    \    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4)\
    \ == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc17cphox.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpc17cphox.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpc17cphox.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpc17cphox.py\", line 32, in select_words\n    return words\n\
    NameError: name 'words' is not defined\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Your code here\n    return []\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_tuq0a8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy_tuq0a8.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpy_tuq0a8.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb6j4tsxl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb6j4tsxl.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb6j4tsxl.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    \n    pass\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzl8xahd.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbzl8xahd.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbzl8xahd.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Put your code here\n    if n == 0: return []\n    if len(s)\
    \ == 0:\n        return []\n    letters = list(s)\n    letters.sort()\n    words\
    \ = []\n    for i in range(len(letters)):\n        if letters[i] == letters[i\
    \ - 1] and letters[i] == letters[i + 1]:\n            words.append(letters[i])\n\
    \    return words\n</code>\n<|/ a tags=algorithm,python-3.x,python,string |>\n\
    <| c |>\nThanks for your answer. I think this is the simplest and best way to\
    \ do it. I just need one more clarification. Why do we need to sort the list with\
    \ letters list and then apply \"i-1\" and \"i+1\"?\n<|/ c |>\n<| c |>\nYou would\
    \ have to iterate through the list twice (one for checking if the current letter\
    \ is the same as the previous and another for checking if the current letter is\
    \ the same as the next). However, if you only need to return a list of words that\
    \ contains n consonants, the only thing you would have to do is iterate through\
    \ your list once.\n<|/ c |>\n<| c |>\nAnd just to note, the first iteration through\
    \ the list will add the first letter to the words list. After that, if the current\
    \ letter is the same, the current letter will be added to the words list. After\
    \ that if the current letter is the same, the current letter will not be added\
    \ to the words list. Thus, every other time the loop runs, it will add the current\
    \ letter to the words list. Thus, the list will be returned at the end.\n<|/ c\
    \ |>\n<| a |>\n<code>\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4qpmesfi.py\", line 33\n    <|/ a tags=algorithm,python-3.x,python,string\
    \ |>\n                                 ^\nSyntaxError: invalid decimal literal\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    s = s.lower()\n    if not s:\n        return []\n\n    consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    vowels = \"aeiou\"\n\n    vowels_index = [i\
    \ for i, letter in enumerate(s) if letter in vowels]\n    consonants_index = [i\
    \ for i, letter in enumerate(s) if letter in consonants]\n\n    common_elements\
    \ = []\n\n    for consonant_index in consonants_index:\n        common_elements.append(s[consonant_index:consonant_index+n])\n\
    \n    for vowel_index in vowels_index:\n        common_elements.append(s[vowel_index:vowel_index+n])\n\
    \n    return common_elements\n    \n</cell>\n<cell>\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7nautup1.py\", line 41\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s:\n        return []\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    words = []\n    for letter in s:\n        if letter in vowels:\n \
    \           if words and len(words[-1]) == n:\n                words.append(letter)\n\
    \            else:\n                words.append([letter])\n        else:\n  \
    \          if words and len(words[-1]) == n:\n                words[-1].append(letter)\n\
    \            else:\n                words.append([letter])\n    return words\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_dzuswo.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpw_dzuswo.py\", line 48,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpw_dzuswo.py\", line\
    \ 39, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    #Your code here\n    lst = []\n    if s.strip() != '':\n    \
    \    for i in range(len(s)):\n            if s[i] in 'aeiou':\n              \
    \  if s.count(s[i]) >= n:\n                    lst.append(s[i])\n    return lst\n\
    \nassert select_words(\"Hello\", 2) == []\nassert select_words(\"Hello\", 3) ==\
    \ ['Hello']\nassert select_words(\"Hello\", 4) == ['Hello']\nassert select_words(\"\
    Hello\", 5) == ['Hello']\nassert select_words(\"Hello\", 0) == []\nassert select_words(\"\
    Hello\", -1) == []\nassert select_words(\"Hello\", 10) == []\nassert select_words(\"\
    Hello\", 0) == []\nassert select_words(\"Mary had a little lamb\", 3) == ['Mary',\
    \ 'lamb']\nassert select_words(\"Mary had a little lamb\", 4) == ['Mary', 'lamb']\n\
    assert select_words(\"Mary had a little lamb\", 5) == ['Mary', 'lamb']\nassert\
    \ select_words(\"Mary had a little lamb\", 6) == ['Mary', 'lamb']\nassert select_words(\"\
    Mary had a little lamb\", 7) == ['Mary', 'lamb']\nassert select_words(\"Mary had\
    \ a little lamb\", 8) == ['Mary', 'lamb']\nassert select_words(\"Mary had a little\
    \ lamb\", 9) == ['Mary', 'lamb']\nassert select_words(\"Mary had a little lamb\"\
    , 10) == ['Mary', 'lamb']\nassert select_words(\"Mary had a little lamb\", 11)\
    \ == ['Mary', 'lamb']\nassert select_words(\"Mary had a little lamb\", 12) ==\
    \ ['Mary', 'lamb']\nassert select_words(\"Mary had a little lamb\", 13) == ['Mary',\
    \ 'lamb']\nassert select_words(\"Mary had a little lamb\", 14) == ['Mary', 'lamb']\n\
    assert select_words(\"Mary had a little lamb\", 15) == ['Mary', 'lamb']\nassert\
    \ select_words(\"Mary had a little lamb\", 16) == ['Mary', 'lamb']\nassert select_words(\"\
    Mary had a little lamb\", 17) == ['Mary', 'lamb']\nassert select_words(\"Mary\
    \ had a little lamb\", 18) == ['Mary', 'lamb']\nassert select_words(\"Mary had\
    \ a little lamb\", 19) == ['Mary', 'lamb']\nassert select_words(\"Mary had a little\
    \ lamb\", 20) == ['Mary', 'lamb']\nassert select_words(\"Mary had a little lamb\"\
    , 21) == ['Mary', 'lamb']\nassert select_words(\"M\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7w1tf0kt.py\", line 57\n    assert select_words(\"M\n\
    \                        ^\nSyntaxError: unterminated string literal (detected\
    \ at line 57)\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    return [] \n    \n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaaikzwl1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpaaikzwl1.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpaaikzwl1.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    assert type(n) == int, \"Argument n should be an integer\"\
    \n    assert n >= 0, \"Argument n should be positive\"\n\n    s = s.lower()\n\
    \    if not s:\n        return []\n    \n    chars = list(s)\n    \n    consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n \
    \   vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \n    consonant_count =\
    \ len([char for char in chars if char in consonants])\n    \n    word_list = []\n\
    \    for char in chars:\n        if char in consonants:\n            if consonant_count\
    \ > n:\n                word_list.extend(select_words(s, n - consonant_count))\n\
    \                consonant_count = 0\n            else:\n                consonant_count\
    \ += 1\n        else:\n            if word_list:\n                word_list.append(char)\n\
    \    \n    if consonant_count > n:\n        word_list.extend(select_words(s, n\
    \ - consonant_count))\n    \n    return word_list\n\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjw7vg9ej.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpjw7vg9ej.py\", line 63,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpjw7vg9ej.py\", line\
    \ 54, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpjw7vg9ej.py\", line 40, in select_words\n    word_list.extend(select_words(s,\
    \ n - consonant_count))\n  File \"/tmp/tmpjw7vg9ej.py\", line 23, in select_words\n\
    \    assert n >= 0, \"Argument n should be positive\"\nAssertionError: Argument\
    \ n should be positive\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    pass\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppc60y7qu.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppc60y7qu.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppc60y7qu.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    assert isinstance(s, str), \"Input must be a string\"\n    assert\
    \ isinstance(n, int), \"Input must be an integer\"\n    \n    return []\n</cell>\n\
    <text>\nIn order to accomplish this task, you are going to use a list comprehension.\n\
    \nA list comprehension is a convenient way to generate a new list from another\
    \ one. It has the following syntax:\n\n[<list comprehension>]\n<list comprehension>\
    \ := [ <expression> ]\n<expression> := <value>\nFor example, the following list\
    \ comprehension generates all the odd numbers in [1, 3, 5]\n\n\n</text>\n<cell>\n\
    odd_numbers = [i for i in range(1, 6) if i % 2 != 0]\nprint(odd_numbers)\n</cell>\n\
    <text>\nYou will also be given the choice to solve the above task using list comprehensions\
    \ as well.\n\nA list comprehension is often useful in conjunction with conditional\
    \ expressions, such as if-statements or while-loops.\n\nFor example:\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_q6kzmzz.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s: return []\n    lst = []\n    for i in range(len(s)):\n\
    \        if s[i:i+n] == ' ':\n            if i == len(s) - 1:\n              \
    \  lst.append(s[: i + n])\n            else:\n                lst.append(s[: i\
    \ + n + 1] + s[i + n + 1: len(s)])\n    return lst\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmk0q8cv0.py\", line 30\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if len(s)==0:\n        return []\n    s=s.lower()\n    vowels=\"\
    aeiouy\"\n    return [w for w in s.split(\" \") if w[0].lower() in vowels and\
    \ len(w)==n]\n    \ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6zcecxpi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp6zcecxpi.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6zcecxpi.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Your code here\n    count = 0\n    res = []\n    for i in s:\n\
    \        if i.isupper() and count < n:\n            res.append(i)\n          \
    \  count += 1\n        else:\n            break\n    return res\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfnc0qwte.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpfnc0qwte.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfnc0qwte.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s:\n        return []\n    # Remove whitespace\n    s\
    \ = ''.join(s.split())\n    # Store a list to store the words and the number of\
    \ consonants\n    words = []\n    num_consonants = []\n    # Keep track of where\
    \ the current word is\n    current_word = ''\n    # Keep track of where the current\
    \ consonant is\n    current_consonant = ''\n    # Keep track of how many consonants\
    \ are in a word\n    num_consonants = 0\n    # Loop through each character in\
    \ string and count the number of consonants\n    for char in s:\n        if char\
    \ == ' ':\n            if current_word != '':\n                # We have read\
    \ a word\n                # Add the current word if it has n consonants\n    \
    \            if num_consonants == n:\n                    words.append(current_word)\n\
    \                # Increment the number of consonants found\n                num_consonants\
    \ += 1\n                # Clear the current word\n                current_word\
    \ = ''\n                # Clear the current consonant\n                current_consonant\
    \ = ''\n            # Move to the next word\n            continue\n        if\
    \ char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n \
    \           # Add the current consonant\n            current_consonant += char\n\
    \            continue\n        current_word += char\n        # Increment the number\
    \ of consonants found\n        num_consonants += 1\n    # Add the last word if\
    \ we have found n consonants\n    if num_consonants == n:\n        words.append(current_word)\n\
    \    return words\n\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmxad4l0q.py\", line\
    \ 75, in <module>\n    test_check()\n  File \"/tmp/tmpmxad4l0q.py\", line 73,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpmxad4l0q.py\", line\
    \ 64, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhfzblk2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphhfzblk2.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmphhfzblk2.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    words = list()\n    \n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpllm0kv12.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpllm0kv12.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpllm0kv12.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Your code here\n    if len(s) <= n:\n        return []\n  \
    \  else:\n        l = list(filter(lambda x: x.count('o') == 0, s.split()))\n \
    \       return l\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpixwmx2xu.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpixwmx2xu.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpixwmx2xu.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmdg3bu_m.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    #TODO: write your code here\n    return []\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp84jdi56_.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    vowels = ['A','E','I','O','U']\n    \n    words = []\n\
    \    \n    # Your code here\n    \n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9w33uqa0.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp9w33uqa0.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9w33uqa0.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return [] # Replace this line with your own implementation\n\n\
    assert 'select_words' == select_words('Mary had a little lamb', 4)\nassert 'select_words'\
    \ == select_words('Mary had a little lamb', 3)\nassert 'select_words' == select_words('simple\
    \ white space', 2)\nassert 'select_words' == select_words('Hello world', 4)\n\
    assert 'select_words' == select_words('Uncle sam', 3)\n</cell>\n<text>\nProblem\
    \ 6: count_words\nWrite a function that returns a list of tuples, each containing\
    \ the number of times \na word appears in the string s and the number of consonants\
    \ in each word.\nThe tuple should contain the number of times a word appears in\
    \ the string, and the \nnumber of consonants separately.\nAll consonants in the\
    \ string should be lowercase.\nFor example, the string \"hello world hello world\"\
    \ has 4 words, and it should return [(1, 4), (2, 2), (3, 2)]\nNote that you cannot\
    \ use any imported Python libraries in this problem.\nThe string may contain Unicode\
    \ letters, so be careful when counting words.\nExamples:\n>>> count_words('hello\
    \ world hello world')\n[(1, 4), (2, 2), (3, 2)]\n>>> count_words('hello world\
    \ hello world', 2)\n[(2, 2), (3, 2)]\n>>> count_words('hello world hello world',\
    \ 3)\n[(2, 3), (2, 3), (2, 3)]\n>>> count_words('hello world hello world', 5)\n\
    [(4, 1), (4, 1), (4, 1)]\n>>> count_words('hello world hello world', 4)\n[(4,\
    \ 2), (4, 2), (4, 2)]\n>>> count_words('hello world hello world', 6)\n[(4, 2),\
    \ (4, 2), (4, 3)]\n>>> count_words('hello world hello world', 7)\n[(4, 3), (4,\
    \ 3), (4, 4), (4, 4), (4, 4)]\n>>> count_words('hello world hello world', 8)\n\
    [(4, 3), (4, 3), (4, 4), (4, 4), (4, 5)]\n>>> count_words('hello world hello world',\
    \ 9)\n[(4, 3), (4, 3), (4, 4), (4, 4), (4, 5), (4, 5)]\n>>> count_words('hello\
    \ world hello world', 10)\n[(4, 3), (4, 3), (4, 4), (4, 4), (4, 5), (4, 5), (4,\
    \ 5)]\n>>> count_words('hello world hello world', 11)\n[(4, 3), (4, 3), (4, 4),\
    \ (4, 4), (4, 5), (4, 5), (4, 5), (4, 5)]\n>>> count_words('hello world hello\
    \ world', 12)\n[(4, 3), (4, 3), (4, 4), (4, 4), (4, 5), (4, 5), (4, 5), (4, 5),\
    \ (4, 5)]\n>>> count_word\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpblx2_wmq.py\", line 28\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmdg3bu_m.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if len(s) == 0:\n        return []\n    # your code here\n  \
    \  # return [\"s\" if i in set(s.replace(' ', '')) else i for i in s.split(\"\
    \ \") ]\n    return s.split(' ') if len(s.split(' ')) == n else []\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkgadzx4u.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpkgadzx4u.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpkgadzx4u.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    count=0\n    ans=[]\n    for i in range(len(s)-n):\n        if\
    \ s[i]==\" \":\n            count+=1\n        if count==n:\n            ans.append(s[i:i+n])\n\
    \    return ans\n</code>\n<|/ a tags=python,python-3.x,substring,string |>\n<|\
    \ a dscore=1 tags=python,python-3.x,substring,string |>\nThe best answer I found\
    \ is this one using regular expressions:\n<code>\nimport re\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpqpcm1rba.py\", line 30\n    <|/ a tags=python,python-3.x,substring,string\
    \ |>\n                              ^\nSyntaxError: invalid decimal literal\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    pass\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr1algh0q.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpr1algh0q.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpr1algh0q.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    pass\n    # ...\n    \n</cell>\n<cell>\nassert select_words('Mary\
    \ had a little lamb', 4) == ['little']\nassert select_words('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\nassert select_words('simple white space', 2)\
    \ == []\nassert select_words('Hello world', 4) == ['world']\nassert select_words('Uncle\
    \ sam', 3) == ['Uncle']\n</cell>\n<text>\nTo test your function, run the cell\
    \ below:\n\n\n</text>\n<cell>\n\"\"\"\nDO NOT MODIFY!!!\nThis cell is used for\
    \ grading purposes\nYou do not need to pass this cell\n\"\"\"\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmrq6zsz4.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    pass # implement this\n    \ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3a_zo825.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3a_zo825.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3a_zo825.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<text>\nProblem 8 (30 points)\nA function can\
    \ only have one return statement. Write a function definition \n(docstring) that\
    \ describes a function which returns a random value between \n0 and 1 inclusive.\
    \ Test your function on a few examples using assert statements. \nFinally, write\
    \ the name of the function using a single line of code.\n\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbeuf73qg.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass # Write your code here\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp1_0jyyli.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqo2i74d6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqo2i74d6.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqo2i74d6.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    vowels = \"AEIOUY\"\n    words = []\n    for index, letter in\
    \ enumerate(s):\n        if letter in vowels:\n            continue\n        if\
    \ letter.isalpha() == True:\n            if index < (len(s) - n) and s[index:index+n]\
    \ == \" \":\n                words.append(s[index:index+n])\n    return words\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1txd68q7.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp1txd68q7.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp1txd68q7.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # BEGIN Solution\n    \n    return list(filter(lambda word: len(word)\
    \ == n, s.split()))\n\n    # END Solution\n    \n    \n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp64gqa0f.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpp64gqa0f.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp64gqa0f.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    vowels = set('aeiou')\n    words = re.findall(r'([a-z]+)',\
    \ s)\n    words = [word for word in words if len(word) >= n and set(word).issubset(vowels)]\n\
    \    \n    return words\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgsnfi_zm.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpgsnfi_zm.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgsnfi_zm.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpgsnfi_zm.py\", line 23, in select_words\n    words = re.findall(r'([a-z]+)',\
    \ s)\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    s = s.strip()\n    if not s:\n        return list()\n    else:\n\
    \        res = []\n        for el in s.split():\n            count = el.count('\
    \ ')\n            if count >= n:\n                res.append(el.split(' ')[0])\n\
    \        return res\n\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit741eyi.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpit741eyi.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpit741eyi.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if len(s) == 0:\n        return []\n    else:\n        \n   \
    \     my_set = set(s)\n        return [ x for x in my_set if len(set(x)) == n\
    \ ]\n    \n</cell>\n<text>\nQuestion 3\nWrite a function that computes the word\
    \ with the fewest vowels ('aeiou') appearing in it. \nNote, you may assume that\
    \ the input string contains only letters and spaces.\nExamples:\n>>> select_words('Mary\
    \ had a little lamb', 4)\n'little'\n>>> select_words('Mary had a little lamb',\
    \ 3)\n'Mary'\n>>> select_words('simple white space', 2)\n'simple'\n>>> select_words('Hello\
    \ world', 4)\n'world'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> select_words('Uncle\
    \ sam', 3)\n'Uncle'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> select_words('Uncle\
    \ sam', 3)\n'Uncle'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> select_words('Uncle\
    \ sam', 3)\n'Uncle'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> select_words('Uncle\
    \ sam', 3)\n'Uncle'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> select_words('Uncle\
    \ sam', 3)\n'Uncle'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> select_words('Uncle\
    \ sam', 3)\n'Uncle'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> select_words('Uncle\
    \ sam', 3)\n'Uncle'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> select_words('Uncle\
    \ sam', 3)\n'Uncle'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> select_words('Uncle\
    \ sam', 3)\n'Uncle'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> select_words('Uncle\
    \ sam', 3)\n'Uncle'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> select_words('Uncle\
    \ sam', 3)\n'Uncle'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> select_words('Uncle\
    \ sam', 3)\n'Uncle'\n>>> select_words('Uncle sam', 3)\n'Uncle'\n>>> \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmptipm4nwt.py\", line 28\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<text>\nNote\nThe first cell should produce an\
    \ output. After you run it (Shift-Enter), you will see an output that is aligned\
    \ with our expectations. In order to pass the assignment, you need to use a blank\
    \ code cell.\n\nPlease read carefully through the code cell below to ensure you\
    \ understand what it's doing.\n\n\n</text>\n<cell>\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp1cesr8dw.py\", line 27\n    Please read carefully through\
    \ the code cell below to ensure you understand what it's doing.\n            \
    \                                                                          ^\n\
    SyntaxError: unterminated string literal (detected at line 27)\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if s == '':\n        return []\n    result = []\n    count =\
    \ 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o'\
    \ or i == 'u':\n            count += 1\n            if count == n:\n         \
    \       result.append(i)\n        else:\n            count = 0\n    return result\n\
    </cell>\n<cell>\nassert select_words(\"Mary had a little lamb\", 4) == ['little']\n\
    </cell>\n<cell>\nassert select_words(\"Mary had a little lamb\", 3) == ['Mary',\
    \ 'lamb']\n</cell>\n<cell>\nassert select_words(\"simple white space\", 2) ==\
    \ []\n</cell>\n<cell>\nassert select_words(\"Hello world\", 4) == ['world']\n\
    </cell>\n<cell>\nassert select_words(\"Uncle sam\", 3) == ['Uncle']\n</cell>\n\
    <text>\nExercise 6: Write a function that takes a list and returns the length\
    \ of the longest sublist. For example, the longest sublist of [1,2,3,4,5,6,7,8,9]\
    \ would be [1,2,3,4,5,6,7].\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmphz44_rnv.py\", line 33\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Your code here\n    return []\n    \ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydqiubc6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpydqiubc6.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpydqiubc6.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmdg3bu_m.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # Your code here\n    \n    \n    return \n\n</cell>\n\
    <text>\nWrite your answer here, replacing this text.\n\n\n</text>\n<cell>\nselect_words('Mary\
    \ had a little lamb', 4)\n</cell>\n<text>\nProblem 9\nWhat is the result of the\
    \ following expression?\n\n>>> 'Mary had a little lamb'.split('Mary had a little\
    \ lamb')\n['']\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpv652curb.py\", line 27\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return s\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6sv38sq6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6sv38sq6.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6sv38sq6.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    return []\n    \n</cell>\n<text>\nProblem 3\nImplement\
    \ a function that counts all the words in the \"word_count\" dictionary\nthat\
    \ begin with the letter 'r'.\nFor example:\n>>> count_words('the quick rat rated\
    \ a rat', 1, word_count)\n{'a': 4, 'rat': 3, 'quick': 1, 'the': 2}\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5y3yavha.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return \n    # Solution code here\n    return []\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4tgamxd4.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    \n    if len(s) ==\
    \ 0:\n        return []\n    \n    words = []\n\n    letters = list(s)\n    \n\
    \    for i in letters:\n        if i in vowels:\n            count += 1\n    \
    \    \n        if count == n:\n            words.append(i)\n            count\
    \ = 0\n            \n    if count > 0:\n        words.append(letters[len(letters)-1])\n\
    \n    return words\n\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsbvrmuyq.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpsbvrmuyq.py\", line 55,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpsbvrmuyq.py\", line\
    \ 46, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhfzblk2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphhfzblk2.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmphhfzblk2.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    vowels = 'aeiouy'\n    count = 0\n    words = []\n    \n    for\
    \ word in s.split():\n        if word.isalnum():\n            count += 1 \n  \
    \      if count == n:\n            words.append(word)\n            count = 0\n\
    \n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp__wnm3m.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpp__wnm3m.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp__wnm3m.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # BEGIN PSEUDOCODE <-- Remove this comment when you code this\
    \ function\n    # TODO: Your code here\n    # END PSEUDOCODE\n    return []\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpelsrq_6l.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpelsrq_6l.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpelsrq_6l.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<cell>\nassert len(select_words('Mary had a little\
    \ lamb', 4)) == 4\nassert len(select_words('Mary had a little lamb', 3)) == 3\n\
    assert len(select_words('simple white space', 2)) == 0\nassert len(select_words('Hello\
    \ world', 4)) == 1\nassert len(select_words('Uncle sam', 3)) == 1\n</cell>\n<text>\n\
    Selection sort\nNow implement the select_words function using the selection sort\
    \ algorithm.\n\nRun the cell below to test your implementation.\n\n\n</text>\n\
    <cell>\nfrom helpers import run_test\nrun_test('select_words', select_words)\n\
    </cell>\n<text>\nThe cell below will run your function against an arbitrary choice\
    \ of words. After running the cell you can click the output to see the sorted\
    \ list.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3o92paeb.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    \n    \n\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp1grm984.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpp1grm984.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp1grm984.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    assert isinstance(s, str), 'Inputs should be strings.'\n\
    \    assert isinstance(n, int) and n >= 0, 'Inputs should be natural numbers.'\n\
    \n    words = []\n    for word in s.split():\n        if len(word) <= n:\n   \
    \         words.append(word)\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr_prpbe1.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpr_prpbe1.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpr_prpbe1.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if n == 0:\n        return []\n    else:\n        word_list =\
    \ s.split()\n        selection = []\n        count = 0\n        for word in word_list:\n\
    \            count += len(word) - 1\n            if count == n:\n            \
    \    selection.append(word)\n        return selection\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnaretceg.py\", line 32\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    \n    \n\n    # Your code here!\n    return []\n\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeprjqcvj.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpeprjqcvj.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpeprjqcvj.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO Implement\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfic560w0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfic560w0.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfic560w0.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmdg3bu_m.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Your code here\n    \n    pass\n    \n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpspogbi_f.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Your code here\n    return []\n\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_tuq0a8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy_tuq0a8.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpy_tuq0a8.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return s\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv1lk9do.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmplv1lk9do.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmplv1lk9do.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    s = s.replace(' ', '') # replace spaces with nothing\n    if\
    \ n == 0: return []\n    else:\n        result = []\n        for letter in s:\n\
    \            word = s.split()\n            consonants = [c for c in letter if\
    \ c in 'bcdfghjklmnpqrstvwxyz']\n            not_consonants = [c for c in letter\
    \ if c not in consonants]\n            if len(not_consonants) == n:\n        \
    \        result.append(word[0])\n        if len(result) == 0:\n            result.append(s)\n\
    \        return result\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpno4e9wef.py\", line 34\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # Your code here\n    word_list = list(filter(lambda x:\
    \ len(x)==n, s.split()))\n    if len(word_list) > 0:\n        return word_list\n\
    \    else:\n        return []\n    \n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0gufxmb1.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp0gufxmb1.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0gufxmb1.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    s = s.split()\n    \n    count=0\n    words=[]\n    \n\
    \    for word in s:\n        count=count+len(word)\n        \n        if count==n:\n\
    \            words.append(word)\n    \n    return words\n\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6wfis6fh.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp6wfis6fh.py\", line 46,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6wfis6fh.py\", line\
    \ 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if s == \"\":\n        return []\n    vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n    vowel_counts = collections.Counter(vowels)\n    vowel_counts_set\
    \ = set(vowel_counts.keys())\n    letters_counts = collections.Counter(s)\n  \
    \  letters_counts_set = set(letters_counts.keys())\n    letters_intersection =\
    \ letters_counts_set & vowel_counts_set\n    letters_difference_counts = {\n \
    \       k: letters_counts[k] - vowel_counts[k] for k in vowel_counts_set}\n  \
    \  letters_difference_counts_set = set(letters_difference_counts.keys())\n   \
    \ letters_difference_set = letters_difference_counts_set - vowel_counts_set\n\
    \    letters_difference_counts_intersection_counts = {\n        k:\n        letters_difference_counts[k]\
    \ -\n        letters_intersection[k]\n        for k in letters_difference_counts_set}\n\
    \    letters_difference_counts_intersection_set = {\n        k: letters_intersection[k]\
    \ for k in letters_intersection}\n    letters_difference_counts_intersection_union_set\
    \ = {\n        k: letters_intersection[k] for k in letters_intersection} | vowel_counts_set\n\
    \    letters_difference_counts_intersection_union_counts = {\n        k:\n   \
    \     letters_difference_counts[k] -\n        letters_intersection[k] -\n    \
    \    vowel_counts[k]\n        for k in letters_difference_counts_set}\n    letters_difference_counts_union_union_difference_counts\
    \ = {\n        k:\n        letters_difference_counts[k] -\n        vowel_counts[k]\
    \ -\n        letters_difference_counts[k]\n        for k in vowel_counts_set}\n\
    \    letters_difference_counts_union_difference_counts_intersection_union = {\n\
    \        k:\n        letters_difference_counts[k] -\n        letters_intersection[k]\
    \ -\n        vowel_counts[k] -\n        letters_difference_counts[k] -\n     \
    \   letters_intersection[k] -\n        vowel_counts[k] -\n        letters_difference_counts[k]\n\
    \        for k in vowel_counts_set}\n    letters_difference_counts_union_difference_counts_intersection_union_set\
    \ = {\n        k:\n        letters_difference_counts[k] -\n        letters_intersection[k]\
    \ -\n        vowel_counts[k] -\n        letters_difference_counts[k] -\n     \
    \   letters_intersection[k] -\n        vowel_counts[k] -\n        letters_difference_counts[k]\
    \ -\n        vowel_counts[k]\n        for k in vowel_counts_set}\n    letter\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzb7mp3pl.py\", line\
    \ 88, in <module>\n    test_check()\n  File \"/tmp/tmpzb7mp3pl.py\", line 86,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpzb7mp3pl.py\", line\
    \ 77, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpzb7mp3pl.py\", line 24, in select_words\n    vowel_counts =\
    \ collections.Counter(vowels)\nNameError: name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    s = s.lower()\n    if s.isspace():\n        return []\n    l\
    \ = list(s)\n    words = []\n    while len(l) != 0:\n        if len(l) <= n:\n\
    \            words.append(\" \".join(l))\n            break\n        for i in\
    \ range(len(l)-n):\n            l.insert(i+1, \"*\")\n            words.append(\"\
    \ \".join(l))\n            l = l[i+1:]\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjv8x4zq.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpqjv8x4zq.py\", line 46,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqjv8x4zq.py\", line\
    \ 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    def select_words_rec(s: str, n: int) -> List[str]:\n        \"\
    \"\"Recursive helper function for select_words\"\"\"\n        if s == \"\":\n\
    \            return []\n        if n == 0: \n            return []\n        if\
    \ n < 0:\n            return select_words_rec(s, -n)\n        if n == 1:\n   \
    \         return [s]\n        remaining = n - 1\n        letters = list(s)\n \
    \       letters.insert(0,s[0])\n        letters = letters[:-remaining]\n     \
    \   return select_words_rec(letters, remaining) + [s]\n    return select_words_rec(s,n)\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ad6tz_t.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp7ad6tz_t.py\", line 48,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp7ad6tz_t.py\", line\
    \ 39, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # Write your code here\n    return [word for word in s.split(\"\
    \ \") if len(word.split()) == n] or []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2k9q3xen.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp2k9q3xen.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2k9q3xen.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \n    vowels_in_string\
    \ = 0\n    letters_in_string = 0\n    \n    words = []\n    \n    for letter in\
    \ s:\n        if letter in vowels:\n            vowels_in_string += 1\n      \
    \  elif letter in vowels_in_string:\n            pass\n        elif letter in\
    \ vowels_in_string:\n            vowels_in_string += 1\n        elif letter in\
    \ letters_in_string:\n            letters_in_string += 1\n        else:\n    \
    \        letters_in_string += 1\n            if letters_in_string == n:\n    \
    \            words.append(letter)\n\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj0jt7ywn.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpj0jt7ywn.py\", line 54,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpj0jt7ywn.py\", line\
    \ 45, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpj0jt7ywn.py\", line 31, in select_words\n    elif letter in\
    \ vowels_in_string:\nTypeError: argument of type 'int' is not iterable\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return []\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmppc9t2l4e.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if len(s) == 0:\n        return []\n    words = []\n    for i\
    \ in range(len(s)):\n        if s[i] in 'aeiou':\n            words.append(s[i])\n\
    \        elif n == 1:\n            if s[i] in 'AEIOU':\n                words.append(s[i])\n\
    \        elif s[len(s) - i - 1] in 'aeiou':\n            words.append(s[len(s)\
    \ - i - 1])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16jejb1v.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp16jejb1v.py\", line 44,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp16jejb1v.py\", line\
    \ 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # BEGIN SOLUTION\n    # raise NotImplementedError()\n    \n \
    \   lst = []\n    \n    for word in s.split():\n        if contains_consonants(word,\
    \ n):\n            lst.append(word)\n            \n    return lst\n    # END SOLUTION\n\
    \    \n    # BEGIN HINT\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdil2kqcn.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpdil2kqcn.py\", line 45,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdil2kqcn.py\", line\
    \ 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpdil2kqcn.py\", line 27, in select_words\n    if contains_consonants(word,\
    \ n):\nNameError: name 'contains_consonants' is not defined\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split(\" \")\n    return [word for word in words if\
    \ len(word) == n+1 and word[:n] == word[n:]]\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpszgqfkpp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpszgqfkpp.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpszgqfkpp.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # Initialize result list\n    ans = []\n    \n    # Check\
    \ if s contains n consonants. If not, return empty list\n    if not s: return\
    \ ans\n\n    # Find all indexes of consonants\n    cons_idx = s.index('b')\n \
    \   cons_idx = s.index('B')\n    cons_idx = s.index('b')\n    cons_idx = s.index('B')\n\
    \    cons_idx = s.index('b')\n    cons_idx = s.index('B')\n    cons_idx = s.index('B')\n\
    \    cons_idx = s.index('B')\n    cons_idx = s.index('B')\n\n    # Find the first\
    \ occurance of a word that has n consonants\n    start = 0\n    \n    while cons_idx\
    \ != -1:\n        start = cons_idx\n        cons_idx = s.index('B', start+1)\n\
    \        \n    # Check if the first word has n consonants\n    if cons_idx ==\
    \ -1: return ans\n    \n    # Iterate over all words from s and append the ones\
    \ that match n consonants\n    for i in range(start, len(s)):\n        if s[i].count('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\
    \ == n:\n            ans.append(s[i])\n    return ans\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswqp_lmw.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpswqp_lmw.py\", line 65,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpswqp_lmw.py\", line\
    \ 56, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpswqp_lmw.py\", line 30, in select_words\n    cons_idx = s.index('B')\n\
    ValueError: substring not found\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    #TODO: Implement this function\n    return []\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgs9ocg35.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgs9ocg35.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgs9ocg35.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqo2i74d6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqo2i74d6.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqo2i74d6.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<text>\nSolution\nImplement the select_words function\
    \ in the cell below.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpze1n79ev.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_dict = {\n    \
    \    'a': '1',\n        'e': '1',\n        'i': '1',\n        'o': '1',\n    \
    \    'u': '1',\n    }\n    vowel_counter = 0\n    word_dict = {}\n    vowel_words\
    \ = []\n    for i in s:\n        if i in vowels:\n            vowel_counter +=\
    \ 1\n            if vowel_counter == n:\n                vowel_words.append(i)\n\
    \        word_dict[vowel_dict[i]] = i\n    return vowel_words\n\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv84wa2ln.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpv84wa2ln.py\", line 51,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpv84wa2ln.py\", line\
    \ 42, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpv84wa2ln.py\", line 37, in select_words\n    word_dict[vowel_dict[i]]\
    \ = i\nKeyError: 'M'\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if s:\n        words = re.findall(r'\\w+', s)\n        words\
    \ = [w for w in words if len(w) == n and not re.search(r'\\w*[^aeiou]', w)]\n\
    \    else:\n        words = []\n    return words\n\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd0i80uhp.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpd0i80uhp.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpd0i80uhp.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpd0i80uhp.py\", line 22, in select_words\n    words = re.findall(r'\\\
    w+', s)\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split()\n    select_list = []\n    count = 0\n    for\
    \ word in words:\n        if len(word) == n:\n            if count == n:\n   \
    \             select_list.append(word)\n            count += 1\n    return select_list\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpl_5vy5mc.py\", line 30\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n</cell>\n<text>\nNow that you've implemented the function,\
    \ run the cell below to test your implementation.\n\nNote: The cells below will\
    \ take about 3 minutes to run.  Therefore, you may want to manually stop other\
    \ cells to prevent accidentally running the cells during the solution. You may\
    \ want to put a breakpoint on the line marked Correct.  The breakpoint will stop\
    \ the rest of the notebook being edited.\n\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmyi7vg01.py\", line 24\n    Now that you've implemented\
    \ the function, run the cell below to test your implementation.\n            \
    \    ^\nSyntaxError: unterminated string literal (detected at line 24)\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi1t4kzq2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpi1t4kzq2.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpi1t4kzq2.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977145
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO: Your code here!\n    word_list = []\n    vowel_list =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowel_count = s.split(\" \")\n    vowel_count\
    \ = sum(vowel_count)\n    \n    for word in vowel_list:\n        if vowel_count\
    \ % 2 == 0:\n            if word in word_list:\n                word_list.remove(word)\n\
    \        else:\n            if word in word_list:\n                pass\n    \
    \        else:\n                word_list.append(word)\n    return word_list\n\
    </cell>\n<text>\nRun the cell below to check that your function works correctly.\
    \ Make sure everything passes tests! Feel free to change the inputs and outputs\
    \ if you like, but make sure you hide input cells to avoid confusion.\n\n\n</text>\n\
    <cell>\n\"\"\"Tests for the select_words function.\"\"\"\nfrom nose.tools import\
    \ assert_equal\n\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp9_0cxgq7.py\", line 37\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659977146
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if not s:\n        return []\n    vowels = 'aeiou'\n    vowel_indices\
    \ = [i for i, letter in enumerate(s) if letter in vowels]\n    vowel_indices.sort()\n\
    \    vowel_indices.reverse()\n    words = s[vowel_indices[0]:vowel_indices[1]]\n\
    \    return list(filter(lambda x: len(x.split(' ')) == n, words.split(' ')))\n\
    \    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4)\
    \ == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdv4dwr57.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpdv4dwr57.py\", line 40,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdv4dwr57.py\", line\
    \ 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977146
