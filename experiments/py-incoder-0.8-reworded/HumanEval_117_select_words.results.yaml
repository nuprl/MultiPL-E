language: py
name: HumanEval_117_select_words
results:
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    #TODO: Write your code here\n    return []\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqcv9khj1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqcv9khj1.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqcv9khj1.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # Your code here\n    if len(s) == 0:\n        return []\n\
    \    \n    \n    words = s.split()\n    \n    \n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4w6np8wx.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp4w6np8wx.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4w6np8wx.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhfzblk2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphhfzblk2.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmphhfzblk2.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    \n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdo2bgzf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvdo2bgzf.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvdo2bgzf.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    if not s:\n        return []\n\n    words = []\n    \n\
    \    left_count=0\n    right_count=0 \n\n    while(left_count<n or right_count<n):\n\
    \n        left_index=s.index(' ',left_count)\n\n        if left_index==-1:\n \
    \           left_index=s.index(' ',left_count+1)\n\n        left_count+=1\n\n\
    \        right_index=s.index(' ',left_index)\n\n        if right_index==-1:\n\
    \            right_index=len(s)\n\n        right_count+=1\n\n        if right_index<left_index:\n\
    \            break\n\n        words.append(s[left_index:right_index].strip())\n\
    \n    return words\n\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2yr9ncv.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpq2yr9ncv.py\", line 64,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq2yr9ncv.py\", line\
    \ 55, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # BEGIN Question 3\n    s = s.lower()\n    if s == \"\":\n  \
    \      return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    vowels = 'aeiouy'\n    i = 0\n    words_with_n_consonants = []\n    while\
    \ i < len(words):\n        if words[i] in consonants and words[i].count(consonants[n])\
    \ >= n:\n            words_with_n_consonants.append(words[i])\n        i += 1\n\
    \    return words_with_n_consonants\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3vz0_n8.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpu3vz0_n8.py\", line 46,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpu3vz0_n8.py\", line\
    \ 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    vowels = 'aeiou'\n    \n    s_list = s.split()\n    \n    # return\
    \ an empty list if there are no words in the string\n    if len(s_list) == 0:\n\
    \        return []\n\n    # define helper function to test if string contains\
    \ n vowels\n    def contain_n(word):\n        return all([c in vowels for c in\
    \ word])\n    \n    # return empty list if n is not positive integer\n    if not\
    \ n > 0:\n        return []\n\n    # return empty list if n is zero\n    if n\
    \ == 0:\n        return s_list\n\n    # initialize a list to hold our results\n\
    \    results = []\n\n    # populate our results list with words that contains\
    \ exactly n vowels\n    for i in range(len(s_list)):\n        if contain_n(s_list[i]):\n\
    \            results.append(s_list[i])\n            \n    return results\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvzxcve8m.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpvzxcve8m.py\", line 61,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvzxcve8m.py\", line\
    \ 52, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    if s != '':\n        result = []\n        for i in range(len(s)):\n\
    \            if s.count('consonant') >= n:\n                result.append(s[:i].lower())\n\
    \            else:\n                break\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3zvdm77.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpk3zvdm77.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpk3zvdm77.py\", line\
    \ 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    # BEGIN Practice:\n    \n    # END Practice\n    return\
    \ []\n    \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwssk1wb3.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpwssk1wb3.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwssk1wb3.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n    \n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgtjwtj9y.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgtjwtj9y.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgtjwtj9y.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    words = s.split(' ')\n    count = 0\n    for i in range(len(words)):\n\
    \        if 'a' in words[i] or 'e' in words[i] or 'i' in words[i] or 'o' in words[i]\
    \ or 'u' in words[i]:\n            count += 1\n        else:\n            break\n\
    \    if count >= n:\n        return [i for i in words if len(i) == n]\n    else:\n\
    \        return []\n</cell>\n<text>\nTask 2: Write a function called select_words_with_count\
    \ that implements the function\ndescribed above. Try your function on the string\
    \ 'Mary had a little lamb'. The expected\noutput should be ['little', 'lamb'].\n\
    \nNote: You may assume that n is always positive.\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpggcweqyf.py\", line 32\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    if n < 1:\n        return []\n    return list(filter(lambda x:\
    \ len(x) == n, s.split()))\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbptchxn6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbptchxn6.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbptchxn6.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    return []\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqo2i74d6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqo2i74d6.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqo2i74d6.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    vowels = \"AEIOUaeiou\"\n    vowel_count = Counter(vowels)\n\
    \    word_list = []\n    if s:\n        for i, char in enumerate(s):\n       \
    \     letter_count = vowel_count[char]\n            if letter_count == n:\n  \
    \              word_list.append(s[i:])\n    return word_list\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\nIf you can't use RegEx, you can use itertools:\n<code>\nfrom\
    \ itertools import takewhile\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdx8jy75o.py\", line 33\n    If you can't use RegEx, you\
    \ can use itertools:\n              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 33)\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # BEGIN Practice: Write your code below. Don't forget to wrap\
    \ your code in an appropriate def\n    return []\n    # END Practice\n    \n \
    \   \n    \ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9mi9208.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpp9mi9208.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp9mi9208.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    # TODO Implement\n    lst = []\n    if len(s) == 0:\n       \
    \ return lst\n\n    word = s.split()\n    for w in word:\n        if countConsonants(w)\
    \ == n:\n            lst.append(w)\n    return lst\n\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgljf4uks.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgljf4uks.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgljf4uks.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpgljf4uks.py\", line 28, in select_words\n    if countConsonants(w)\
    \ == n:\nNameError: name 'countConsonants' is not defined\n"
  stdout: ''
  timestamp: 1659824667
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb7b69jjw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb7b69jjw.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n\
    \    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n   \
    \ >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello\
    \ world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n\
    \    \"\"\"\n    \n    return []\n    \ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqxddjvg_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqxddjvg_.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqxddjvg_.py\", line\
    \ 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659824667
