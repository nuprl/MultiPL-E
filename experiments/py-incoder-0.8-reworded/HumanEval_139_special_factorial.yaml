name: HumanEval_139_special_factorial
language: py
prompt: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
  \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
  \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
  \    The function will receive an integer as input and should return the special\n\
  \    factorial of this integer.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
  \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
  \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return 1\n    return n * special_factorial(n\
    \ - 1)\n\n", "    return factorial(n) * special_factorial(n - 1)\n\n", "    if\
    \ n == 0:\n        return 1\n    fac = 1\n    for i in range(1, n + 1):\n    \
    \    fac *= i\n    return fac\n\n", "    return factorial(n) * (n - 1) * (n -\
    \ 2) * ... * (n - 2)\n\n", "    if n == 0:\n        return 1\n    elif n < 0:\n\
    \        return -1\n    else:\n        factor = 1\n        for k in range(n -\
    \ 1):\n            factor *= k + 1\n        return factor\n\n", "    return factorial(n)\
    \ * (n - 1) * special_factorial(n - 2)\n\n", "    assert n > 0\n    if n == 1:\n\
    \        return 1\n    else:\n        return n * (special_factorial(n - 1))\n\n",
  "    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n\n",
  "    if n < 1:\n        return 0\n    return factorial(n) * (n - 1) * (n - 2)\n\n",
  "    if n == 0:\n        return 1\n    return n * (special_factorial(n-1))\n\n",
  "    if n == 0:\n        return 1\n    return factorial(n) * special_factorial(n\
    \ - 1)\n\n", "    if n == 1:\n        return 1\n    return n * special_factorial(n\
    \ - 1)\n\n", "    if n < 0:\n        raise ValueError(\"The factorial can only\
    \ be computed for a non-negative integer\")\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * (n - 1) * special_factorial(n - 2)\n\n", "    return\
    \ factorial(n) // (factorial(n-1) * factorial(n-2))\n\n", "    if n > 0:\n   \
    \     return n*special_factorial(n-1)\n    else:\n        return 1\n", "    if\
    \ n == 0:\n        return 1\n    else:\n        return n * special_factorial(n\
    \ - 1)\n\n", "    if n <= 0:\n        return 1\n    return factorial(n)\n\n",
  "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n\
    \ - 1)\n\n@curry", "    if n == 0:\n        return 0\n    elif n < 0:\n      \
    \  return -1 * special_factorial(abs(n))\n    else:\n        return math.factorial(n)\n",
  "    return factorial(n) // (n - factorial(n))\n\n\n@time_function(\n    \"special_factorial\"\
    ,\n    [\n        (\n            1,\n            2,\n        ),\n        (\n \
    \           2,\n            3,\n        ),\n        (\n            4,\n      \
    \      6,\n        ),\n        (\n            6,\n            8,\n        ),\n\
    \        (\n            8,\n            12,\n        ),\n        (\n         \
    \   12,\n            14,\n        ),\n        (\n            14,\n           \
    \ 15,\n        ),\n    ],\n)"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
