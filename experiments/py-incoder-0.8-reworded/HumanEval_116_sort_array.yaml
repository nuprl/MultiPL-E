name: HumanEval_116_sort_array
language: py
prompt: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
  \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
  \ according to\n    number of ones in their binary representation in ascending order.\n\
  \    For similar number of ones, sort based on decimal value.\n\n    It must be\
  \ implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 3, 4,\
  \ 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4, -3, -2]\n    >>>\
  \ sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4,\
  \ 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  \
  \  assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
  \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4,\
  \ 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3,\
  \ 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
  \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
  \    check(sort_array)\n\ntest_check()\n"
completions: ["    arr.sort(key=lambda x:count_ones(str(x)), reverse=True)\n    return\
    \ arr\n", "    sorted_arr = sorted(arr)\n    sorted_arr.sort(key=lambda x: sum([1\
    \ for x in bin(x)[2:]])) # sort based on number of ones in their binary representation\n\
    \    sorted_arr.sort(key=lambda x: sum([1 for x in str(x)])) # sort based on number\
    \ of ones in their decimal representation\n    \n    return sorted_arr\n", " \
    \   return arr\n", "    return []\n\n", "    # write your code here\n    ones_pos\
    \ = 0\n    zeros_pos = 0\n    count = 0\n    while count < len(arr) - 1:\n   \
    \     if arr[ones_pos] >= arr[zeros_pos]:\n            zeros_pos = zeros_pos +\
    \ 1\n            if zeros_pos >= len(arr):\n                zeros_pos = 0\n  \
    \              ones_pos = ones_pos + 1\n                count = count + 1\n  \
    \      else:\n            ones_pos = ones_pos + 1\n            if ones_pos >=\
    \ len(arr):\n                ones_pos = 0\n                zeros_pos = zeros_pos\
    \ + 1\n                count = count + 1\n    arr.reverse()\n    return arr\n",
  "    return arr\n\n", "    pass\n", "    # Write your code here\n    \n    pass\n\
    \n</cell>\n<cell>", "    pass\n", "    # Your code here\n    pass\n", "    pass\n\
    \n", "    pass\n\n</cell>\n<cell>", "    raise NotImplementedError()\n\n", " \
    \   \n    #YOUR CODE HERE\n    \n    return arr\n    \n", "    pass\n\n", "  \
    \  counts = {}\n    for i in arr:\n        counts[bin(i)[2:]] = 1\n    arr = [i\
    \ for i in arr if counts[bin(i)[2:]] == 1]\n    return sorted(arr, key=lambda\
    \ x: (-counts[bin(x)[2:]], int(x)))\n", "    return sorted(arr, key=lambda x:\
    \ -x.count_ones())\n", "    return sorted(arr, key=lambda i: -sum([bin(j)[2:].count(\"\
    1\") for j in i]))\n\n", "    pass\n\n", "    pass\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
