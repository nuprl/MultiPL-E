language: py
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring\
    \ in s, strings))\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    if not strings:\n        return\
    \ []\n    if not substring:\n        return strings\n    res = [s for s in strings\
    \ if substring in s]\n    return res\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered = filter(lambda string:\
    \ string.startswith(substring), strings)\n    return list(filtered)\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp19r276ud.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp19r276ud.py\", line 20,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmp19r276ud.py\"\
    , line 16, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    if not strings:\n        return\
    \ []\n    return [s for s in strings if substring in s]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring\
    \ in s, strings))\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_list = []\n    for s in\
    \ strings:\n        if substring in s:\n            filtered_list.append(s)\n\
    \    return filtered_list\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda x: substring\
    \ in x, strings))\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered = []\n    for str in strings:\n\
    \        if substring in str:\n            filtered.append(str)\n    return filtered\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n</code>\n<|/ a tags=list-comprehension,list,python\
    \ |>\n<| a |>\n<code>\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp9tacxyxe.py\", line 11\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n</cell>\n<cell>\nstrings = ['abc', 'bacd', 'cde', 'array']\nsubstring\
    \ = 'ab'\nsubstring_2 = substring + 'c'\nsubstring_3 = substring + 'de'\nsubstring_4\
    \ = substring + 'array'\n\nprint(f'Substring {substring} found in {strings}')\n\
    print(f'Substring {substring_2} found in {strings}')\nprint(f'Substring {substring_3}\
    \ found in {strings}')\nprint(f'Substring {substring_4} found in {strings}')\n\
    print(f'Substring {substring_2} and {substring_3} found in {strings}')\nprint(f'Substring\
    \ {substring_2} and {substring_4} found in {strings}')\n</cell>\n<cell>\nlist1\
    \ = [1,2,3]\nlist2 = [2,3,4]\nlist3 = [3,4,5]\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpurzg75tl.py\", line 11\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter(lambda x: substring\
    \ in x, strings)\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpktmsy9px.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpktmsy9px.py\", line 19,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmpktmsy9px.py\"\
    , line 13, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis assumes your list is sorted\
    \ and that all elements you want to filter on are in the same place in the list.\
    \ Otherwise you have to first sort your list and then the search (O(n log n))\
    \ - but it is better to do that in the first place.\n<|/ c |>\n<| c |>\nYes. This\
    \ is why I asked if my list is sorted in the first place.\n<|/ c |>\n<| a tags=list,python,algorithm\
    \ |>\nUse list comprehension:\n<code>\n>>> [x for x in mylist if \"A\" in x]\n\
    ['A', 'B']\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis assumes your list is sorted\
    \ and that all elements you want to filter on are in the same place in the list.\
    \ Otherwise you have to first sort your list and then the search (O(n log n))\
    \ - but it is better to do that in the first place.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n>>> def f(L):\n...     for i in L:\n...         if 'A' in i:\n...    \
    \         return [i]\n...     return []\n... \n>>> f([1,3,\"A\",4,\"A\",7,\"A\"\
    ,2])\n['A']\n>>> f([1,3,\"A\",4,\"A\",7,\"A\",2,\"A\"])\n['A', 'A']\n</code>\n\
    <|/ a tags=list,python,algorithm |>\n<| a dscore=1 |>\n<code>\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_wzwccod.py\", line 11\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda string:\
    \ substring in string, strings))\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter(lambda s: substring\
    \ in s, strings)\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_3zjsm9.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp7_3zjsm9.py\", line 20,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmp7_3zjsm9.py\"\
    , line 14, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring\
    \ in s, strings))\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda str: str.lower().find(substring.lower())\
    \ != -1, strings))\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    def f(item): return substring in\
    \ item\n    return list(filter(f, strings))\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [i for i in strings if substring\
    \ in i]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    if not strings: return []\n    return\
    \ [string for string in strings if substring in string]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n</code>\n<|/ a tags=python-3.x,python |>\n<| a tags=python-3.x,python\
    \ |>\nTry something like this:\n<code>\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnp162ro1.py\", line 12\n    <|/ a tags=python-3.x,python\
    \ |>\n                       ^\nSyntaxError: invalid decimal literal\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_6tv0lmn.py\", line 11\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    substring = substring.lower()\n\
    \    return [str for str in strings if substring in str]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda x : substring\
    \ in x, strings))\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [item for item in strings\
    \ if substring in item]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    substrings = substring.lower().split('\
    \ ')\n    res = []\n\n    for word in strings:\n        if word in substrings:\n\
    \            res.append(word)\n\n    return res\n\n\ndef check(candidate):\n \
    \   assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpadqw39in.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpadqw39in.py\", line 27,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmpadqw39in.py\"\
    , line 22, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str for str in strings if\
    \ substr in str]\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv5k_nb0x.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpv5k_nb0x.py\", line 20,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmpv5k_nb0x.py\"\
    , line 15, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n  File \"/tmp/tmpv5k_nb0x.py\",\
    \ line 10, in filter_by_substring\n    return [str for str in strings if substr\
    \ in str]\n  File \"/tmp/tmpv5k_nb0x.py\", line 10, in <listcomp>\n    return\
    \ [str for str in strings if substr in str]\nNameError: name 'substr' is not defined\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n</code>\n<|/ a |>\n<| c |>\n`filter` would have been more pythonic. Also,\
    \ `filter` accepts one function as an argument, so `filter_by_substring = filter`\
    \ would have been better\n<|/ c |>\n<| c |>\nI really like this, because I'm a\
    \ Python beginner and I learned about \"list comprehensions\" and list comprehensions\
    \ seem very powerful.  Thanks!\n<|/ c |>\n<| c |>\nYeah your right, filter would\
    \ have been better.\n<|/ c |>\n<| a |>\n<code>\na = ['abc', 'bacd', 'cde', 'array']\n\
    b = []\nfor x in a:\n    if x.startswith('a'):\n        b.append(x)\nprint(b)\n\
    </code>\n<|/ a dscore=5 tags=python,list |>\n<| c |>\nI like this solution, it's\
    \ easy to read and easy to understand.\n<|/ c |>\n<| c |>\nThis isn't a great\
    \ use of list comprehension, since it's just using list comprehension to filter\
    \ the list. It would be better to use an explicit for loop with an if statement.\n\
    <|/ c |>\n<| c |>\nThis does not answer the question\n<|/ c |>\n<| c |>\n: This\
    \ solution is perfectly fine IMHO. No need for list comprehension.\n<|/ c |>\n\
    <| c |>\nThis is the most pythonic solution, IMHO.\n<|/ c |>\n<| a |>\n<code>\n\
    >>> a = ['abc', 'bacd', 'cde', 'array']\n>>> [x for x in a if x.startswith('a')]\n\
    ['abc', 'bacd', 'array']\n</code>\n<|/ a dscore=5 tags=python,list |>\n<| a tags=python,list\
    \ |>\n<code>\na=['abc', 'bacd', 'cde', 'array']\nb=[x for x in a if x.startswith('a')]\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis answer has nothing to do with the question\
    \ asked\n<|/ c |>\n<| a |>\nI like to use filter and lambdas for these cases.\
    \ I find this more readable than list comprehensions or lambda.\n<code>\na = ['abc',\
    \ 'bacd', 'cde', 'array']\nb = filter(lambda x: x[0] == 'a', a)\n</code>\n<|/\
    \ a tags=python,list dscore=5 |>\n<| c |>\nI like this solution, it's easy to\
    \ read and easy to understand.\n<|/ c |>\n<| c |>\n\ndef check(candidate):\n \
    \   assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp1map3kcg.py\", line 17\n    I really like this, because\
    \ I'm a Python beginner and I learned about \"list comprehensions\" and list comprehensions\
    \ seem very powerful.  Thanks!\n                                 ^\nSyntaxError:\
    \ unterminated string literal (detected at line 17)\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [i for i in strings if substring\
    \ in i]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n    \n    \ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda word:\
    \ substring in word, strings))\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmnccdpo8.py\", line 11\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    \n    substrings = []\n    for string\
    \ in strings:\n        if substring in string:\n            substrings.append(string)\n\
    \    return substrings\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    if not strings: return strings\n\
    \    return [s for s in strings if substring in s]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring\
    \ in s, strings))\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n</cell>\n<cell>\nstrings = ['abc', 'bacd', 'cde', 'array']\nsubstring\
    \ = 'a'\n\nprint(filter_by_substring(strings, substring))\n</cell>\n<text>\nThe\
    \ filter_by_substring() function is now a wrapper to filter_by_substring().\n\n\
    Write a Python function is_substring_of() that takes two strings as input and\
    \ determines whether or not they are substrings of each other.\n\nHINT: This function\
    \ is similar to filter_by_substring(), but does not filter out the substrings.\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp9k6zbv86.py\", line 11\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    subset = []\n    for str in strings:\n\
    \        if substring in str:\n            subset.append(str)\n    return subset\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered = []\n    for s in strings:\n\
    \        if substring in s:\n            filtered.append(s)\n    return filtered\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for s\
    \ in strings:\n        if substring in s:\n            filtered_strings.append(s)\n\
    \    return filtered_strings\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    strings = [string for string in\
    \ strings if substring in string]\n    return strings\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string\
    \ in strings:\n        if substring in string:\n            filtered_strings.append(string)\n\
    \    return filtered_strings\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    def helper(in_strs: List[str], substring:\
    \ str) -> List[str]:\n        ret = []\n        for item in in_strs:\n       \
    \     if substring in item:\n                ret.append(item)\n        return\
    \ ret\n    return helper(strings, substring)\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    if substring not in strings:\n \
    \       return strings\n    return [s for s in strings if substring in s]\n\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgph6cejk.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpgph6cejk.py\", line 21,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmpgph6cejk.py\"\
    , line 17, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string\
    \ in strings:\n        if substring in string:\n            filtered_strings.append(string)\n\
    \    return filtered_strings\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter(lambda string: substring\
    \ in string, strings)\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ruil_tr.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp9ruil_tr.py\", line 19,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmp9ruil_tr.py\"\
    , line 13, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [i for i in strings if substring\
    \ in i]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda string:\
    \ substring in string, strings))\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring\
    \ in s, strings))\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter(lambda x: substring\
    \ in x, strings)\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpktmsy9px.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpktmsy9px.py\", line 19,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmpktmsy9px.py\"\
    , line 13, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    match = [s for s in strings if substring\
    \ in s]\n    return match\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [i for i in strings if substring\
    \ in i]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n \
    \   assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return filter(lambda s: substring\
    \ in s, strings)\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaq07mias.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpaq07mias.py\", line 19,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmpaq07mias.py\"\
    , line 13, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring\
    \ in s, strings))\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda word:\
    \ substring in word, strings))\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    substring = substring.strip()\n\
    \    filtered = []\n\n    for s in strings:\n        if substring in s:\n    \
    \        filtered.append(s)\n\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered = [s for s in strings if\
    \ substring in s]\n    return filtered\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [elt for elt in strings if\
    \ substring in elt]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring\
    \ in s, strings))\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n</cell>\n<text>\nNow you can call your function and see a result\n\n\n\
    </text>\n<cell>\nfilter_by_substring(strings, \"a\")\n</cell>\n<text>\nExercise\n\
    \n</text>\n<text>\nWrite a function that returns True if a particular list of\
    \ strings contains at least half of the elements of another list of strings, and\
    \ the string should not be repeated.\n\n>>> strings = ['a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h']\n>>> lists = ['a', 'd', 'e', 'h', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nFalse\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(strings,\
    \ lists)\nTrue\n>>> lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n>>> contains_half_of_other_lists(\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5j7d1oc7.py\", line 11\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str for str in strings if\
    \ substr in str]\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpafap15v2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpafap15v2.py\", line 19,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmpafap15v2.py\"\
    , line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n  File \"/tmp/tmpafap15v2.py\",\
    \ line 10, in filter_by_substring\n    return [str for str in strings if substr\
    \ in str]\n  File \"/tmp/tmpafap15v2.py\", line 10, in <listcomp>\n    return\
    \ [str for str in strings if substr in str]\nNameError: name 'substr' is not defined\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [i for i in strings if substring\
    \ in i]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda string:\
    \ substring in string, strings))\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmnccdpo8.py\", line 11\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [str for str in strings if\
    \ substring in str]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring\
    \ in s, strings))\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring\
    \ in s, strings))\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda x: substring\
    \ in x, strings))\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    if not strings:\n        return\
    \ []\n    else:\n        return [s for s in strings if substring in s]\n\ndef\
    \ check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring\
    \ in s, strings))\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for s\
    \ in strings:\n        if substring in s:\n            filtered_strings.append(s)\n\
    \    return filtered_strings\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered = list()\n    for string\
    \ in strings:\n        if substring in string:\n            filtered.append(string)\n\
    \    return filtered\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = [string for string\
    \ in strings if substring in string]\n    return filtered_strings\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings\
    \ if substring in string]\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring\
    \ in s]\n</cell>\n<text>\nAnd now we can apply our filter to our search list:\n\
    \n\n</text>\n<cell>\nsearch_list = search_list[:5]\nprint(search_list)\n\nsearch_list\
    \ = filter_by_substring(search_list, 'a')\nprint(search_list)\n</cell>\n<text>\n\
    As a final step, we'll remove any empty strings from our search list before returning\
    \ it:\n\n\n</text>\n<cell>\nsearch_list = list(filter(None, search_list))\nprint(search_list)\n\
    </cell>\n<text>\nNow that our search list is fully populated, we can do some more\
    \ filtering based on its contents and return it.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdo_705qy.py\", line 25\n    As a final step, we'll remove\
    \ any empty strings from our search list before returning it:\n              \
    \         ^\nSyntaxError: unterminated string literal (detected at line 25)\n"
  stdout: ''
  timestamp: 1659976444
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring\
    \ in x]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n   \
    \ assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823379
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda x: substring\
    \ in x, strings))\n\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976444
