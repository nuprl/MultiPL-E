name: HumanEval_141_file_name_check
language: py
prompt: "def file_name_check(file_name: str) -> str:\n    \"\"\"Create a function\
  \ which takes a string representing a file's name, and returns\n    'Yes' if the\
  \ the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered\
  \ to be valid if and only if all the following conditions \n    are met:\n    -\
  \ There should not be more than three digits ('0'-'9') in the file's name.\n   \
  \ - The file's name contains exactly one dot '.'\n    - The substring before the\
  \ dot should not be empty, and it starts with a letter from \n    the latin alphapet\
  \ ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these:\
  \ ['txt', 'exe', 'dll']\n    Examples:\n    >>> file_name_check('example.txt')\n\
  \    'Yes'\n    >>> file_name_check('1example.dll')\n    'No'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('example.txt') == 'Yes'\n    assert\
  \ candidate('1example.dll') == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n\
  \    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') ==\
  \ 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt')\
  \ == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll')\
  \ == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt')\
  \ == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten')\
  \ == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt')\
  \ == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe')\
  \ == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll')\
  \ == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt')\
  \ == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132')\
  \ == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    assert candidate('.txt')\
  \ == 'No'\n    assert candidate('s.') == 'No'\n\ndef test_check():\n    check(file_name_check)\n\
  \ntest_check()\n"
completions: ["    \n    # Your code here!\n    \n    \n    return file_name\n\n",
  "    file = file_name.lower()\n    if re.search(r'\\d{3}\\.', file):\n        if\
    \ '.' not in file:\n            return 'No'\n        else:\n            file =\
    \ file.split('.')[0]\n    else:\n        file = ''\n    if re.search(r'^[a-z][a-z]?\\\
    .', file):\n        if file == '':\n            return 'No'\n        else:\n \
    \           file = file.split('.')[0]\n    else:\n        file = ''\n    if file\
    \ == '':\n        return 'No'\n    else:\n        if file not in ['txt', 'exe',\
    \ 'dll']:\n            return 'No'\n        else:\n            return 'Yes'\n",
  "    \n    return file_name.isdigit() and len(file_name) == 2 and len(file_name.replace('.',\
    \ '')) > 0 and file_name[0].isalpha() and file_name[-1] in ['txt', 'exe', 'dll']\n\
    \n</cell>\n<text>\nRun the following cell to verify that your function returns\
    \ 'Yes' for valid inputs:\n\n\n</text>\n<cell>\nfile_name_check('example.txt')\n\
    </cell>\n<text>\nExpected Output:\n\n\nTrue\n\n</text>\n<text>\n\n\nExercise 7.0\n\
    Instructions: Write a function, file_valid_name, which takes in input a file's\
    \ name as its only \nargument. Your function should return a string that states\
    \ whether the file is 'valid' or 'invalid'. \nIf the input is not valid, your\
    \ function should return the string 'invalid'. Assume that there are no other\
    \ \npossible inputs to the function.\n\n\n</text>\n<text>\n\n\n\n\n\n\n</text>\n\
    <cell>", "    \n    if file_name[0] >= '0' and file_name[0] <= '9' and len(file_name)\
    \ <= 3:\n        if '.' in file_name:\n            file_name = file_name.split('.')[0]\n\
    \        if file_name[0] == '.':\n            file_name = file_name[1:]\n    \
    \    if file_name[0].isalpha() == False:\n            return 'No'\n        else:\n\
    \            for letter in string:\n                if letter not in {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}:\n\
    \                    return 'No'\n            return 'Yes'\n    else:\n      \
    \  return 'No'\n\n", "    count1 = len(re.findall(r'[0-9]+', file_name)) # count\
    \ the number of digits in a string\n    if count1 > 3:\n        return 'No'\n\
    \    else:\n        if '.' not in file_name:\n            return 'No'\n      \
    \  else:\n            count2 = len(re.findall(r'\\.', file_name))\n          \
    \  if count2 > 1:\n                return 'No'\n            else:\n          \
    \      count3 = len(re.findall(r'[a-zA-Z]', file_name))\n                if count3\
    \ > 1 and file_name[0] not in 'abcde' and file_name[0] not in 'abcdef' and file_name[0]\
    \ not in 'abcdefg':\n                    return 'No'\n                else:\n\
    \                    return 'Yes'\n", "    return True if re.search(r'^\\d+\\\
    .[a-zA-Z]+$', file_name) else 'No'\n", "    file_name = file_name.lower()\n  \
    \  file = file_name.rsplit('.', 1)[0]\n    if not (file.isalpha() and len(file)\
    \ <= 3 and file[0].isalpha() and file[1] in ['txt', 'exe', 'dll']):\n        return\
    \ 'No'\n    else:\n        return 'Yes'\n\n", "    \n    # initialize return value\
    \ as 'No'\n    \n    letters_only = True\n    has_digits = False\n    \n    #\
    \ initialize file_name to the first parameter\n    file_name = file_name.lower()\n\
    \    \n    # initialize counter and index\n    counter = 0\n    index = 0\n  \
    \  \n    # initialize flag as False\n    flag = False\n    \n    # iterate until\
    \ all the characters in the file name are iterated over\n    while index < len(file_name):\n\
    \        \n        # check if the character is a letter\n        if file_name[index]\
    \ in string.ascii_lowercase:\n            # increment the counter\n          \
    \  counter += 1\n        \n        # check if the character is a digit\n     \
    \   elif file_name[index] in string.digits:\n            # increment the counter\n\
    \            counter += 1\n        \n        # if neither character is a letter,\
    \ nor a digit, flag will be set to True\n        else:\n            flag = True\n\
    \        \n        # check if the counter is less than or equal to three\n   \
    \     if counter >= 3:\n            \n            # check if flag is set to True\n\
    \            if flag:\n                # set the flag to False\n             \
    \   flag = False\n            \n            # check if flag is set to True yet\n\
    \            elif not flag:\n                # set the flag to True\n        \
    \        flag = True\n            \n            # increment the counter\n    \
    \        counter += 1\n    \n    # return the string 'Yes' if all the conditions\
    \ are met\n    if counter >= 3:\n        return 'Yes'\n    else:\n        return\
    \ 'No'\n\n", "    # your code here\n    return re.search(r'^[0-9]\\.[a-z]|[a-z][a-z]|[a-z][0-9]$',\
    \ file_name).group()\n", "    \n    return bool(re.match(r'^[0-9][0-9][0-9]\\\
    .[A-Za-z][a-z]+$', file_name))\n</cell>\n<cell>", "    return re.search(r\"^[0-9]{0,3}\\\
    .[a-zA-Z]{0,2}$\", file_name) != None\n\n", "    \n    ", "    \n    str_lower\
    \ = file_name.lower()\n    dot_index = str_lower.find('.')\n    if dot_index ==\
    \ -1:\n        return 'No'\n    if str_lower.count('.') > 3:\n        return 'No'\n\
    \    if str_lower.count('.') == 1 and str_lower[0].isalpha() and str_lower[1].isalpha():\n\
    \        return 'Yes'\n    return 'No'\n", "    if len(file_name) > 3:\n     \
    \   return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0]\
    \ == '0' or file_name[0] == '1':\n        return 'No'\n    if file_name[0].isalpha():\n\
    \        return 'No'\n    if 'txt' in file_name.lower():\n        return 'Yes'\n\
    \    if 'exe' in file_name.lower():\n        return 'Yes'\n    if 'dll' in file_name.lower():\n\
    \        return 'Yes'\n    return 'No'\n", "    return all(character in string.punctuation\
    \ for character in file_name) and file_name.count(\".\") == 1\\\n        and file_name[0].isalpha()\
    \ and file_name[len(file_name) - 1] in ['txt', 'exe', 'dll']\n\n", "    if '0'\
    \ <= file_name[0] <= '9':\n        return 'No'\n    else:\n        for char in\
    \ file_name:\n            if char == '.':\n                if '.' not in file_name:\n\
    \                    return 'No'\n                else:\n                    return\
    \ 'Yes'\n            elif not char.isalpha():\n                return 'No'\n \
    \           elif not char.islower():\n                return 'No'\n          \
    \  elif not char.isupper():\n                return 'No'\n            elif not\
    \ char.isdigit():\n                return 'No'\n            else:\n          \
    \      return 'No'\n\n", "    # Extract filename from file path\n    file_name\
    \ = file_name.split('\\\\')[-1]\n\n    # Validate filename\n    if '.' in file_name:\n\
    \        if file_name.count('.') > 1:\n            return 'No'\n        else:\n\
    \            dots_count = file_name.count('.')\n            dot_index = file_name.index('.')\n\
    \            dot_count = len(file_name) - dots_count\n            if dot_index\
    \ == -1:\n                return 'No'\n            if dot_count > 2 and dot_index\
    \ < dot_count - 2:\n                return 'No'\n            if dot_count > 1\
    \ and dot_index < dot_count - 1:\n                return 'No'\n            if\
    \ dot_count > 0 and dot_index > dot_count - 1:\n                return 'No'\n\
    \            if dot_count < 1 and dot_index < dot_count - 1:\n               \
    \ return 'No'\n            if dot_count < 0 and dot_index > dot_count - 1:\n \
    \               return 'No'\n            if dot_index == dot_count - 1:\n    \
    \            return 'No'\n            if dot_index == dot_count - 2:\n       \
    \         return 'No'\n            if dot_index == dot_count - 3:\n          \
    \      return 'No'\n    else:\n        return 'No'\n\n    return 'Yes'\n</cell>\n\
    <cell>", "    \n    if re.search('^[0-9]{3}$', file_name):\n        \n       \
    \ if re.search('.', file_name):\n            if re.search('^[a-zA-Z]+$', file_name[0]):\n\
    \                if file_name.find('exe') != -1 or file_name.find('dll') != -1\
    \ or file_name.find('txt') != -1:\n                    return 'Yes'\n        \
    \        else:\n                    return 'No'\n            else:\n         \
    \       return 'No'\n        else:\n            return 'No'\n    else:\n     \
    \   return 'No'\n</cell>\n<text>\n6.2 Write a function that accepts a string and\
    \ returns a string \nconsisting of a word that contains a maximum of two consonants.\n\
    \nExamples:\n\n>>> consonant_check('hello')\n'llo'\n>>> consonant_check('Hello')\n\
    'Helo'\n>>> consonant_check('hEllo')\n'Hllo'\n>>> consonant_check('Hell')\n'Hllo'\n\
    >>> consonant_check('hElL')\n'Hllo'\n>>> consonant_check('hEll')\n'Hllo'\n>>>\
    \ consonant_check('HellO')\n'HlloO'\n>>> consonant_check('hEllO')\n'HlloO'\n>>>\
    \ consonant_check('hElloO')\n'HlloO'\n>>> consonant_check('hElLLO')\n'HlloLLO'\n\
    >>> consonant_check('hEllLLO')\n'HlloLLO'\n>>> consonant_check('HellLLO')\n'HlloLLO'\n\
    >>> consonant_check('hElLLOO')\n'HlloLLOO'\n>>> consonant_check('hEllLLOO')\n\
    'HlloLLOO'\n>>> consonant_check('HellLLOO')\n'HlloLLOO'\n>>> consonant_check('hElLLOOu')\n\
    'HlloLLOOu'\n>>> consonant_check('hEllLLOOu')\n'HlloLLOOu'\n>>> consonant_check('HellLLOOu')\n\
    'HlloLLOOu'\n>>> consonant_check('hElLLOOU')\n'HlloLLOOU'\n>>> consonant_check('hEllLLOU')\n\
    'HlloLLO", "    \n    # check conditions\n    name_conditions_check = ['0'-'9']\n\
    \    dot_check = '.'\n    name_before_dot_check = '[a-zA-Z]'\n    dot_check =\
    \ '\\.'\n    substring_check = '[a-zA-Z0-9]'\n    \n    # create variables\n \
    \   name_before_dot_check_var = re.compile(name_before_dot_check)\n    dot_check_var\
    \ = re.compile(dot_check)\n    \n    # create functions\n    def name_before_dot_check_func(match:\
    \ re.Match) -> str:\n        \"\"\"Function to check whether the substring before\
    \ the dot starts with a letter\n        from the latin alphabet.\n        \"\"\
    \"\n        \n        # check condition\n        if not bool(name_before_dot_check_var.match(match.group())):\n\
    \            return 'No'\n        \n        # check substring condition\n    \
    \    substring_check_reversed = re.search('([a-zA-Z])', match.group())[::-1]\n\
    \        if len(substring_check_reversed) < 1:\n            return 'No'\n    \
    \    else:\n            return 'Yes'\n    \n    def dot_check_func(match: re.Match)\
    \ -> str:\n        \"\"\"Function to check whether the dot has a dot character.\n\
    \        \"\"\"\n        \n        # check condition\n        if not bool(dot_check_var.match(match.group())):\n\
    \            return 'No'\n        \n        # check substring condition\n    \
    \    substring_check_match = re.search('([a-zA-Z])', match.group())[::-1]\n  \
    \      if len(substring_check_match) < 1:\n            return 'No'\n        else:\n\
    \            return 'Yes'\n    \n    # create functions\n    name_before_dot_check_func\
    \ = functools.partial(name_before_dot_check_func, re.Match)\n    dot_check_func\
    \ = functools.partial(dot_check_func, re.Match)\n    \n    # define functions\n\
    \    def file_name_check(file_name: str) -> bool:\n        \"\"\"Function to determine\
    \ whether the file's name is valid.\n        \"\"\"\n        \n        # determine\
    \ if the file name is valid\n        if len(re.findall('[a-zA-Z]', file_name))\
    \ == 1:\n            return 'Yes'\n        else:\n            return 'No'\n  \
    \  \n    file_name_check = functools.partial(file_name_check, file_name)\n   \
    \ \n    # call functions\n    name_before_dot_check_result = name_before_dot_check_func(name_before_dot_check_var)\n\
    \    dot_check_result = dot_check_func(dot_check_var)\n    file_name_check_result\
    \ = file_name_check(file_name) \n    \n    # return result\n    if name_before_dot_check_result\
    \ == 'Yes' and dot_check_result == 'Yes' and file_name_check_result == 'Yes':\n\
    \        return 'Yes'\n    else:\n        return 'No'\n    \n</cell>\n<text>\n\
    (IMPLEMENTATION) Assess the prerequisites for the task, write a prerequisite verification\
    \ function that returns True or False, whether you can use the function. This\
    \ is to be called after you write the description of the task.\n\n\n</text>\n\
    <cell>", "    # check file name\n    name_array = file_name.split('.')\n    length\
    \ = len(name_array)\n    if length == 0 or name_array[0] == '' or name_array[0][0]\
    \ != 'a' or name_array[0][0] != 'A' or name_array[0][0] != 'z' or name_array[0][0]\
    \ != 'Z' or name_array[len(name_array) - 1] == '':\n        return 'No'\n    #\
    \ check file extension\n    if any([name_array[0].split('.')[-1].lower() in ['txt',\
    \ 'exe', 'dll'] for name_array in name_array[1:]]):\n        return 'Yes'\n  \
    \  return 'No'\n\n\n@nb.jit(nopython=True)", "    \n    # Your code goes here\n\
    \    \n    return file_name.count('.') == 1 and file_name.split('.')[0][0].isalpha()\
    \ and file_name.split('.')[-1] in {'txt', 'exe', 'dll'}\n\n", "    \n    # create\
    \ list of all possible substrings\n    substrings = file_name.split('.')\n   \
    \ \n    # check for invalid characters in substring list\n    for i in substrings:\n\
    \        if i not in allowed_file_names:\n            return 'No'\n          \
    \  \n    # check for empty substring\n    if substrings[0] == '':\n        return\
    \ 'No'\n    \n    # check for invalid substring prefix\n    if substrings[0][0]\
    \ not in allowed_prefix_characters:\n        return 'No'\n    \n    # check for\
    \ invalid substring suffix\n    if substrings[-1] not in allowed_suffix_characters:\n\
    \        return 'No'\n    \n    # check for valid substring\n    return 'Yes'\n\
    </cell>\n<cell>\nfile_name_check('example.txt')\n</cell>\n<cell>\nfile_name_check('1example.dll')\n\
    </cell>\n<text>\nPart 2: How to check a user's input\n\n</text>\n<text>\n2.1:\
    \ Function which takes user's input and returns 'Yes' if the input is valid, and\
    \ returns 'No' otherwise\nWrite a function which takes a string representing user's\
    \ input and returns 'Yes' if the user has given valid input, and returns 'No'\
    \ otherwise. A user input is considered to be valid if and only if all the following\
    \ conditions are met:\n- There is at least one alphabetic character in the user's\
    \ input.\n- All the characters in the user's input are alphabetic characters,\
    \ lower or upper case.\n- The length of user's input is between 2 and 10.\n- There\
    \ should not be more than two consecutive spaces in the user's input.\n- There\
    \ should not be more than three digits ('0'-'9') in the user's input.\n- There\
    \ should not be more than three consecutive letters ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z') in the user's input.\nExamples:\n\
    >>> user_input_check('example')\n'Yes'\n>>> user_input_check('example2')\n'No'\n\
    >>> user_input_check('example3 ')\n'No'\n>>> user_input_check('1 2 3 4')\n'Yes'\n\
    >>> user_input_check('abc def')\n'No'\n>>> user_input_check('abcdef')\n'No'\n\
    >>> user_input_check('abcdefghijklmnopqrstuvwxyz')\n'No'\n>>> user_input_check('12345')\n\
    'Yes'", "    if file_name.count('.') != 1:\n        return 'No'\n\n    if file_name[0]\
    \ == '.':\n        return 'No'\n\n    if file_name[:1].isalpha() is False:\n \
    \       return 'No'\n\n    ext = ['txt', 'exe', 'dll']\n    if file_name.endswith('.'+ext[0])\
    \ is False:\n        return 'No'\n    \n    if file_name.endswith('.'+ext[1])\
    \ is False:\n        return 'No'\n\n    if file_name.endswith('.'+ext[2]) is False:\n\
    \        return 'No'\n\n    return 'Yes'\n", "    if len(file_name) < 3 or re.search(r\"\
    ^[0-9][0-9]*$\", file_name):\n        return \"No\"\n    if re.search(r\"^[Aa][Zz][0-9]$\"\
    , file_name[0]):\n        if \".\" in file_name:\n            if re.search(r\"\
    \\.([txt|exe|dll])$\", file_name):\n                return \"Yes\"\n    return\
    \ \"No\"\n</cell>\n<text>\nNext, let's see how the function works on a few examples.\n\
    \n\n</text>\n<cell>\nprint(file_name_check(\"example.txt\"))\nprint(file_name_check(\"\
    1example.exe\"))\nprint(file_name_check(\"123example.exe\"))\nprint(file_name_check(\"\
    example2.exe\"))\nprint(file_name_check(\"example3.exe\"))\nprint(file_name_check(\"\
    example4.exe\"))\nprint(file_name_check(\"example5.exe\"))\nprint(file_name_check(\"\
    example6.exe\"))\nprint(file_name_check(\"example7.exe\"))\n</cell>\n<text>\n\
    We should also use the function we created above to create a function which returns\
    \ a string \ndescribing the file's extension.\n\n\n</text>\n<cell>", "    \n \
    \   #Extract a substring from before the dot, and check if the string is not empty\n\
    \    if not file_name.startswith('.'):\n        return ('No')\n    \n    #Extract\
    \ a substring from after the dot and check if it contains one of the accepted\
    \ file types: txt, exe, dll \n    dot_idx = file_name.find('.')\n    dot_substring\
    \ = file_name[dot_idx:]\n    if dot_substring not in ['txt', 'exe', 'dll']:\n\
    \        return ('No')\n    \n    #Extract a substring before the dot and check\
    \ if it starts with a letter from the latin alphabet\n    dot_substring = file_name[:dot_idx]\n\
    \    dot_substring = dot_substring.replace(' ', '')\n    dot_substring = dot_substring.replace('.',\
    \ '')\n    dot_substring = dot_substring.replace('-', '')\n    dot_substring =\
    \ dot_substring.replace('\\\\', '')\n    dot_substring = dot_substring.replace('[',\
    \ '')\n    dot_substring = dot_substring.replace(']', '')\n    dot_substring =\
    \ dot_substring.replace(' ', '')\n    if dot_substring not in ['a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z']:\n        return ('No')\n    \n    #Extract a substring after the dot and\
    \ check if it contains one of the accepted file types\n    if dot_substring in\
    \ ['exe', 'dll']:\n        return ('Yes')\n    \n    return ('No')\n", "    \n\
    \    # Initialize a list containing all the valid file extensions\n    valid_ext\
    \ = ['txt', 'exe', 'dll', 'pdf']\n    \n    \n    # If the file's name contains\
    \ more than one dots, return 'No'\n    if file_name.count('.') > 1:\n        return\
    \ 'No'\n    \n    # If the file's name is empty, or contains a dot, return 'No'\n\
    \    if file_name.count('.') == 0:\n        return 'No'\n    \n    # If the file\
    \ contains no letters or a dot, return 'No'\n    if not file_name[0].isalpha()\
    \ or not file_name[-1].isalpha():\n        return 'No'\n    \n    # If the file\
    \ starts with an invalid character, return 'No'\n    if not file_name[0].lower()\
    \ in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    \n    # If the file\
    \ ends with an invalid character, return 'No'\n    if not file_name[-1].isalpha()\
    \ or file_name[-1].lower() not in 'abcdefghijklmnopqrstuvwxyz':\n        return\
    \ 'No'\n    \n    # If the file's name does not contain any valid extension, return\
    \ 'No'\n    if not any(ext in valid_ext for ext in file_name.split('.')[:-1]):\n\
    \        return 'No'\n    \n    # If the file's name contains the invalid extension\
    \ at the end of the name, \n    # return 'No'\n    if file_name.split('.')[-1]\
    \ not in valid_ext:\n        return 'No'\n    \n    return 'Yes'\n</cell>\n<cell>",
  "    if len(re.findall(r\"[0-9]{3,}\", file_name)) != 0:\n        return \"No\"\n\
    \    elif \".\" not in file_name:\n        return \"No\"\n    elif len(file_name.split(\"\
    .\")) != 2:\n        return \"No\"\n    elif not file_name[0].isalpha() or not\
    \ file_name[1][0] in \"aA\":\n        return \"No\"\n    else:\n        return\
    \ \"Yes\"\n", "    \n    if re.match('^\\d+$', file_name) == None:\n        return\
    \ 'No'\n    elif re.match('^\\.$', file_name) == None:\n        return 'No'\n\
    \    elif re.match('^[a-zA-Z]\\w+$', file_name) == None:\n        return 'No'\n\
    \    else:\n        return 'Yes'\n\n", "    \n    # Create a function which takes\
    \ a string representing a file's name, \n    # and returns 'Yes' if the the file's\
    \ name is valid, and returns 'No' otherwise.\n    \n    # A file's name is considered\
    \ to be valid if and only if all the following conditions are met:\n    # - There\
    \ should not be more than three digits ('0'-'9') in the file's name.\n    # -\
    \ The file's name contains exactly one dot '.'\n    # - The substring before the\
    \ dot should not be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n    # - The substring after the dot should be one of\
    \ these: ['txt', 'exe', 'dll']\n    \n    \n    # Solution:\n    # Write code\
    \ here\n    \n    if re.search(r'^[0-9]{3,}$', file_name):\n        if '.' not\
    \ in file_name:\n            if file_name[:1].isalpha() and file_name[:1] != '_':\n\
    \                return 'Yes'\n            else:\n                return 'No'\n\
    \        else:\n            return 'No'\n    else:\n        return 'No'\n</cell>\n\
    <cell>", "    if re.search(r'\\d{1,3}\\.',file_name) != None:\n        if re.search(r'[a-zA-Z][a-zA-Z0-9\\\
    .]*',file_name) == None:\n            if re.search(r'^[a-zA-Z][a-zA-Z0-9\\.]*',file_name)\
    \ == None:\n                return 'No'\n            else:\n                return\
    \ 'Yes'\n        else:\n            return 'Yes'\n    else:\n        return 'No'\n",
  "    # Create a function which takes a string representing a file's name, and returns\
    \ 'Yes' \n    # if the the file's name is valid, and returns 'No' otherwise.\n\
    \    \n    \n    # Write code here.\n    \n    return valid_chars(file_name)\n\
    \n", "    try:\n        # Extract all characters from string\n        file = file_name.split('.')[0]\n\
    \        # Check if the file name is of the correct length and has only '0' to\
    \ '9' and 'a' to 'z' and 'A' \n        # to 'Z'\n        if len(file) <= 3 or\
    \ ('0' <= file[0] <= '9' or 'a' <= file[0] <= 'z' or 'A' <= file[0] <= 'Z'):\n\
    \            return False\n        elif ('.' not in file) and (file[0] != '0')\
    \ and (file[0] != '1') and (file[0] != '2') and (file[0] != '3') and (file[0]\
    \ != '4') and (file[0] != '5') and (file[0] != '6') and (file[0] != '7') and (file[0]\
    \ != '8') and (file[0] != '9'):\n            return False\n        # Check if\
    \ the file name is of the correct length and has only one '.'\n        elif (len(file)\
    \ != 1) and (len(file) != 2) and (len(file) != 3) and (len(file) != 4) and (len(file)\
    \ != 5) and (len(file) != 6) and (len(file) != 7) and (len(file) != 8) and (len(file)\
    \ != 9):\n            return False\n        # Check if the file name has substring\
    \ before the dot and if it is not empty\n        elif file and file[0] == '':\n\
    \            return False\n        elif file and file[0].isalpha():\n        \
    \    return True\n        else:\n            return False\n    except:\n     \
    \   print('Error: file_to_check() parameter 1 is not of type string')\n      \
    \  return\n\n", "    \n    # Get the string before the dot\n    bef_dot = ''\n\
    \    if file_name.find('.') > 0:\n        bef_dot = file_name[:file_name.find('.')]\n\
    \    \n    # Get the string after the dot\n    aft = file_name[file_name.find('.'):]\n\
    \    \n    # Check if the string contains more than one digit\n    if len(bef_dot)\
    \ > 1:\n        return 'No'\n    \n    # Check if the string does not contain\
    \ more than one dot\n    if '.' not in aft:\n        return 'No'\n    \n    #\
    \ Check if the string starts with a letter from the latin alphabet ('a'-'z')\n\
    \    bef_dot_2 = bef_dot[:2]\n    if bef_dot_2 not in ['a', 'A']:\n        return\
    \ 'No'\n    \n    # Check if the string contains only 'txt', 'exe', 'dll'\n  \
    \  ext = aft.lower()\n    if ext not in ['txt', 'exe', 'dll']:\n        return\
    \ 'No'\n    \n    return 'Yes'\n</cell>\n<text>\nNotice that file_name_check now\
    \ returns a string, whereas the previous version returned a boolean. To avoid\
    \ having to write a new line every time you call a function, you can put it in\
    \ a function definition:\n\n\n</text>\n<cell>", "    return '.' not in file_name\
    \ and \\\n           file_name[:1].isalpha() and \\\n           file_name[:1].upper()\
    \ in 'ABC' and \\\n           file_name.rpartition('.')[2].lower() in ['txt',\
    \ 'exe', 'dll']\n\n", "    \n    # Extract filename without path and extensions\n\
    \    filename = os.path.splitext(os.path.basename(file_name))[0]\n    \n    #\
    \ Validate filename\n    if not filename.startswith('0') or not filename.startswith('1')\
    \ or not \\\n       len(filename) >= 3:\n        return 'No'\n    \n    # Validate\
    \ extension\n    extension = os.path.splitext(filename)[1]\n    if extension not\
    \ in ['.txt', 'exe', '.dll']:\n        return 'No'\n    \n    # Validate file\
    \ name\n    if filename[:2] != '01':\n        return 'No'\n    \n    # Validate\
    \ substring before dot\n    if not filename[1:].startswith('a') or not filename[1:].startswith('A')\
    \ \\\n       or not filename[1:].isalpha():\n        return 'No'\n    \n    #\
    \ Validate substring after dot\n    if filename[-1] not in ['txt', 'exe', 'dll']:\n\
    \        return 'No'\n    \n    return 'Yes'\n\n", "    file = re.compile('^[1-9][0-9]{0,3}\\\
    .[a-z][a-z]{0,1}$')\n    name_sub = re.compile('^[a-z][a-z]{0,1}')\n    dot_sub\
    \ = re.compile('^\\.$')\n\n    file = file.match(file_name)\n    name_sub = name_sub.match(file_name)\n\
    \    dot_sub = dot_sub.match(file_name)\n    \n    if not file.match(file_name):\n\
    \        return 'No'\n    elif not name_sub.match(file_name):\n        return\
    \ 'No'\n    elif not dot_sub.match(file_name):\n        return 'No'\n    else:\n\
    \        return 'Yes'\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    \n \
    \   str_len = len(file_name)\n    \n    # check if the file's length is exactly\
    \ equal to three digits\n    if str_len != 3:\n        return 'No'\n    \n   \
    \ # check if there is a dot\n    if file_name.find('.') != -1:\n        return\
    \ 'No'\n    \n    # check if the file's substring before the dot is empty, and\
    \ it starts with a letter \n    # from the latin alphabet\n    if file_name.startswith('.')\
    \ and not file_name[0] == '.':\n        return 'No'\n    \n    # check if the\
    \ file's substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if\
    \ file_name.endswith('.txt') or file_name.endswith('.exe') or file_name.endswith('.dll'):\n\
    \        return 'Yes'\n    else:\n        return 'No'\n\n", "    name_split =\
    \ file_name.split('.')\n    if len(name_split) != 2 or name_split[0].isdigit()\
    \ or name_split[0].startswith('0') or name_split[0].startswith('1'):\n       \
    \ return 'No'\n    elif name_split[1].lower() not in ['txt', 'exe', 'dll']:\n\
    \        return 'No'\n    else:\n        return 'Yes'\n\n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    digits = re.findall(r'[0-9]+',\
    \ file_name)\n    dots = re.findall(r'\\.', file_name)\n    \n    if len(digits)\
    \ != 0 and len(dots) != 0 and len(digits) != 1 or len(dots) != 1 or digits[0]\
    \ != '' or dots[0] != '.' or digits[0] != 'a' or digits[0] != 'z' or digits[0]\
    \ != 'A' or digits[0] != 'Z' or dots[0] != '.' or dots[0] not in ['exe', 'dll',\
    \ 'txt']:\n        return 'No'\n    else:\n        return 'Yes'\n\n</cell>\n<text>\n\
    (TODO) Validate File Extension\nWe have provided a template function which checks\
    \ file extensions. \nThis function is provided so that you can easily write your\
    \ own extension validation code.\n\n\n</text>\n<cell>\n%%writefile src/helpers/validate_file_extension.py\n\
    \"\"\"Validate file extension\n\"\"\"\n\nimport os\n", "    \n    try: \n    \
    \    file_name = str(file_name)\n        file_name = file_name.split('.')\n  \
    \      file_name = file_name[0]\n        \n        try: \n            file_name\
    \ = file_name.lower()\n        except: \n            pass\n        \n        try:\
    \ \n            file_name = file_name[0]\n            file_name = 'Yes'\n    \
    \    except:\n            pass\n        \n        try: \n            file_name\
    \ = file_name[1]\n            file_name = 'Yes'\n        except:\n           \
    \ pass\n        \n        try: \n            file_name = file_name[2].lower()\n\
    \        except:\n            pass\n        \n        try: \n            file_name\
    \ = file_name[0]\n        except:\n            pass\n    except:\n        pass\n\
    \    \n    return file_name\n", "    try:\n        if re.search(r'[1-9][0-9]{0,3}\\\
    .', file_name):\n            file_check = re.search(r'[1-9][0-9]{0,3}\\.', file_name)\n\
    \            return 'Yes' if file_check.group(0) else ('No')\n        elif file_name\
    \ == '.':\n            file_check = re.search(r'\\.', file_name)\n           \
    \ return 'Yes' if file_check.group(0) else ('No')\n        else:\n           \
    \ file_check = re.search(r'([a-zA-Z][a-zA-Z])*\\.', file_name)\n            return\
    \ 'Yes' if file_check.group(0) else ('No')\n    except:\n        return 'No'\n\
    \n", "    \n    if not re.search(r'^\\d', file_name):\n        return 'No'\n \
    \   \n    if not re.search(r'\\.', file_name):\n        return 'No'\n    \n  \
    \  if file_name[:3].isdigit():\n        return 'No'\n    \n    if file_name[:2].isalpha()\
    \ and not re.search(r'^[A-z]', file_name):\n        return 'No'\n    \n    if\
    \ file_name.split('.')[-1] in {'txt', 'exe', 'dll'}:\n        return 'Yes'\n",
  "    dot_pos = file_name.rfind('.')\n    if dot_pos == -1:\n        return 'No'\n\
    \    if dot_pos > len(file_name) - 3:\n        return 'No'\n    letter_pos = file_name.rfind('.',\
    \ 0, dot_pos)\n    letter_letter = file_name[letter_pos + 1 : letter_pos + 4]\n\
    \    if letter_pos == -1:\n        return 'No'\n    if letter_pos == 0 and letter_letter\
    \ not in set('abcdefghijklmnopqrstuvwxyz'):\n        return 'No'\n    if letter_letter\
    \ == '' or letter_letter not in set('abcdefghijklmnopqrstuvwxyz'):\n        return\
    \ 'No'\n    return 'Yes'\n</cell>\n<text>\nTesting\n\n</text>\n<cell>\nfile_name_check('example.txt')\n\
    </cell>\n<cell>\nfile_name_check('1example.dll')\n</cell>\n<text>\nThe above function\
    \ was tested on multiple possible test cases. Let us now try it on the following\
    \ test cases:\n\n\n</text>\n<cell>\nfile_name_check('example.exe')\n</cell>\n\
    <cell>\nfile_name_check('example')\n</cell>\n<text>\nIn order to check if a string\
    \ has valid file extension, we need to apply the file_name_check function to all\
    \ possible values of the string and compare the results with 'Yes' or 'No'. For\
    \ example, let us consider the string 'example.txt' to be a valid extension:\n\
    \n\n</text>\n<cell>", "    return bool(re.search(r'\\d{1,3}\\.\\w+$', file_name))\n\
    \n", "    \n    for char in file_name:\n        if char not in string.ascii_letters\
    \ + string.digits + '.':\n            return 'No'\n    \n    if file_name.count('.')\
    \ != 1:\n        return 'No'\n    \n    if file_name.split('.')[0] not in string.ascii_letters\
    \ + string.digits and len(file_name.split('.')[0]) != 1:\n        return 'No'\n\
    \    \n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n       \
    \ return 'No'\n    \n    return 'Yes'\n</cell>\n<cell>\nfile_name_check(file_name='example.txt')\n\
    </cell>\n<cell>", "    file_name = str(file_name)\n    if len(file_name) != 3:\n\
    \        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n\
    \    if file_name[0].isalpha() not in [True, False]:\n        return 'No'\n  \
    \  if file_name[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return\
    \ 'Yes'\n</cell>\n<text>\nTask 4: Create a function called file_extension_check,\
    \ which takes a string representing a file's name, and\nreturns the file's extension\
    \ if it is valid, and returns 'No' otherwise.\nA file's extension is considered\
    \ to be valid if and only if all the following conditions \nare met:\n- The file's\
    \ name should end in one of these extensions: ['.txt', '.exe', '.dll']\n- If there\
    \ are no periods in the file's name, the last dot should be removed from the file's\
    \ \nname, and only then the file's extension should be checked.\nExamples:\n>>>\
    \ file_extension_check('example.txt')\n'txt'\n>>> file_extension_check('example.exe')\n\
    'exe'\n>>> file_extension_check('example.dll')\n'dll'\n>>> file_extension_check('example.exe.')\n\
    'exe'\n>>> file_extension_check('example.1.dll')\n'No'\n>>> file_extension_check('example.')\n\
    'No'\n>>> file_extension_check('example')\n'No'\n>>> file_extension_check('')\n\
    'No'\n>>> file_extension_check('example.')\n'No'\n>>> file_extension_check('example')\n\
    'No'\n>>> file_extension_check('example.txt')\n'txt'\n>>> file_extension_check('example.1.dll')\n\
    'No'\n>>> file_extension_check('example.dll')\n'dll'\n>>> file_extension_check('example.1.dll')\n\
    'No'\n>>> file_extension_check('example1.exe')\n'No'\n>>> file_extension_check('example.txt')\n\
    'txt'\n>>> file_extension_check('example.txt.exe')\n'exe'\n>>> file_extension_check('example1.exe')\n\
    'No'\n>>> file_extension_check('example.txt')\n'txt'\n>>> file_extension_check('example.txt.exe')\n\
    'exe'\n>>> file_extension_check('example.txt.exe.')\n'exe'\n>>> file_extension_check('example.txt.exe.')\n\
    'exe'\n>>> file_extension_check('example1.exe')\n'No'\n>>> file_extension_check('example1.exe.')\n\
    'No'\n>>> file_extension_check('", "    \n    for character in file_name:\n  \
    \      if character.isdigit():\n            return 'No'\n        if character\
    \ == '.':\n            return 'No'\n        letter = ord(character)\n        if\
    \ letter < 97 or letter > 122 or character == '.' or not letter.isalpha():\n \
    \           return 'No'\n    return 'Yes'\n", "    \n    name_checker = False\n\
    \    \n    # Case where there is no dot in the file's name\n    if '.' not in\
    \ file_name:\n        return 'No'\n    \n    # Case where there is more than one\
    \ dot in the file's name\n    elif '.' in file_name:\n        name_checker = True\n\
    \        \n        # Case where there are more than three digits (0-9) in the\
    \ file's name\n        if '..' in file_name:\n            name_checker = False\n\
    \        \n        # Case where there is only one dot in the file's name\n   \
    \     elif '.' not in file_name:\n            name_checker = False\n        \n\
    \        # Case where the first letter in the file's name is not in the latin\
    \ alphabet\n        elif file_name[0] not in string.ascii_letters:\n         \
    \   name_checker = False\n        \n        # Case where the substring before\
    \ the dot is empty\n        elif file_name[:1] == '.':\n            name_checker\
    \ = False\n        \n        # Case where the substring after the dot is not one\
    \ of these\n        elif file_name[-1:] in string.punctuation:\n            name_checker\
    \ = False\n    \n    return name_checker\n\n", "    \n    if len(re.findall(r'\\\
    d', file_name)) == 3:\n        return \"Yes\"\n    elif file_name.count('.') ==\
    \ 1:\n        return \"Yes\"\n    elif file_name.startswith('.') is False and\
    \ file_name[0] in string.ascii_letters:\n        return \"No\"\n    else:\n  \
    \      return \"No\"\n        ", "    regex = '^[1-9][0-9]{0,3}\\.[a-z][a-zA-Z]$'\
    \ # r'^[1-9][0-9]{0,3}\\.[a-z][a-zA-Z]$'\n    \n    if not re.search(regex, file_name):\n\
    \        return 'No'\n    else:\n        return 'Yes'\n", "    \n    \n    chars\
    \ = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    \n \
    \   split_name = file_name.split('.')\n    if len(split_name) != 2 or len(split_name[0])\
    \ < 2 or split_name[0][0] not in chars or split_name[0][-1] not in chars:\n  \
    \      return 'No'\n    \n    \n    if file_name.endswith(('txt', 'exe', 'dll')):\n\
    \        return 'Yes'\n    \n    \n    return 'No'\n</cell>\n<text>\nQuestion\
    \ 15. Write a function which takes a string representing a file's name, and returns\n\
    'Yes' if the file's name is valid, and returns 'No' otherwise.\nA file's name\
    \ is considered to be valid if and only if all the following conditions \nare\
    \ met:\n- The file's name contains exactly two dots '.'\n- It ends with '.txt',\
    \ '.txt.gz', or '.exe'\n- It doesn't contain any of these strings: ['.txt', '.exe',\
    \ '.txt.gz']\nExamples:\n>>> file_name_check('example.txt')\n'Yes'\n>>> file_name_check('1example.dll')\n\
    'No'\n>>> file_name_check('1example.txt')\n'No'\n>>> file_name_check('example')\n\
    'No'\n>>> file_name_check('example.exe')\n'No'\n>>> file_name_check('example.txt.gz')\n\
    'No'\n>>> file_name_check('example.txt')\n'Yes'\n>>> file_name_check('example.txt.gz')\n\
    'Yes'\n>>> file_name_check('example.txt')\n'Yes'\n>>> file_name_check('example.exe')\n\
    'No'\n>>> file_name_check('example')\n'No'\n>>> file_name_check('example.exe')\n\
    'No'\n>>> file_name_check('example.txt.gz')\n'No'\n>>> file_name_check('example.txt.gz')\n\
    'Yes'\n>>> file_name_check('example.txt')\n'Yes'\n>>> file_name_check('example.exe')\n\
    'No'\n>>> file_name_check('example')\n'No'\n>>> file_name_check('example.exe')\n\
    'No'\n>>> file_name_check('example.txt.gz')\n'No'\n>>> file_name_check('example.txt.gz')\n\
    'Yes'\n>>> file_name_check('example.txt')\n'Yes'\n>>> file_name_check('example.exe')\n\
    'No'\n>>> file_name_check('example')\n'No'\n>>> file_name_check('example.exe')",
  "    \n    flag = 0\n    #check lenght of fileName\n    if len(file_name) < 3:\n\
    \        flag = 1\n    #check dot exist\n    if '.' not in file_name:\n      \
    \  flag = 1\n    #check first char\n    if file_name[0] not in ['a', 'A']:\n \
    \       flag = 1\n    #check substring before dot\n    if file_name[1] == '':\n\
    \        flag = 1\n    #check substring after dot\n    if file_name[2] in ['txt',\
    \ 'exe', 'dll']:\n        flag = 1\n    return flag\n</cell>\n<cell>\nfile_name_check('example.txt')\n\
    </cell>\n<cell>\nfile_name_check('1example.dll')\n</cell>\n<cell>", "    pattern\
    \ = re.compile(r'\\d{3}\\.\\w+')\n    match = pattern.search(file_name)\n    if\
    \ match:\n        if '.' not in file_name:\n            return 'Yes'\n       \
    \ else:\n            first = file_name[:match.start()]\n            rest = file_name[match.end():]\n\
    \            if first.isalpha() and 'a' <= first <= 'z' or 'A' <= first <= 'Z':\n\
    \                if rest in ('.exe', '.txt', 'dll'):\n                    return\
    \ 'Yes'\n                else:\n                    return 'No'\n            else:\n\
    \                return 'No'\n    else:\n        return 'No'\n", "    name_format\
    \ = '^[a-zA-z0-9]{0,3}\\.[a-z]+$'\n    if re.fullmatch(name_format, file_name)\
    \ != None:\n        return 'Yes'\n    else:\n        return 'No'\n</cell>\n<text>\n\
    We are now ready to create the function which will tell us whether a file name\
    \ is valid. \nWe will use this function to create a while loop that will keep\
    \ asking the user to input a file name\nuntil a valid file name is entered.\n\n\
    \n</text>\n<cell>", "    pattern = re.compile('[0-9]+\\.txt$')\n    match = re.search(pattern,\
    \ file_name)\n    if match is None:\n        return False\n    else:\n       \
    \ return True\n    ", "    \n    if (file_name.count('.') != 1):\n        return\
    \ 'No'\n    \n    if (not file_name[0] == 'a') and (not file_name[0] == 'A'):\n\
    \        return 'No'\n    \n    if (file_name[0] != 'a') and (not file_name[0]\
    \ != 'A'):\n        return 'No'\n    \n    if (not file_name[1].isdigit()):\n\
    \        return 'No'\n    \n    if (file_name[2] != 'txt') and (file_name[2] !=\
    \ 'exe') and (file_name[2] != 'dll'):\n        return 'No'\n    \n    return 'Yes'\n\
    \n", "    \n    # Write code here\n    \n    pass\n</cell>\n<text>\nNow write\
    \ the function which returns True if the file's name is valid and False if it\
    \ is not.\n\n\n</text>\n<cell>", "    \n    # Initialize counter for number of\
    \ digits in the file's name\n    digit_count = 0\n    \n    # Initialize an empty\
    \ list to store all the characters in the file's name\n    characters = []\n \
    \   \n    # Initialize a counter to count the characters in the file's name\n\
    \    character_count = 0\n    \n    # Initialize a variable to store the number\
    \ of dots ('.') in the file's name\n    dot_count = 0\n    \n    # Initialize\
    \ a variable to store the file name\n    file_name = file_name\n    \n    # Initialize\
    \ a boolean variable to store the result of the check\n    is_file_name_valid\
    \ = True\n    \n    # Initialize an index variable for the for loop which is used\
    \ to traverse the \n    # characters in the file's name\n    index = 0\n    \n\
    \    # Traverse the characters in the file's name\n    for character in file_name:\n\
    \        \n        # Check if character is a digit\n        if character.isdigit():\n\
    \            \n            # Update the counter to count the number of digits\
    \ in the file's name\n            digit_count += 1\n            \n        # Check\
    \ if character is a dot ('.') in the file's name\n        if character == '.':\n\
    \            \n            # Update the counter to count the number of dots ('.')\
    \ in the file's name\n            dot_count += 1\n            \n        # Append\
    \ the character to the character list\n        characters.append(character)\n\
    \        \n        # Increment the index variable by 1\n        index += 1\n \
    \       \n    # Check if there is at least one digit in the file's name\n    if\
    \ digit_count == 0:\n        \n        # Change the is_file_name_valid variable\
    \ to be false\n        is_file_name_valid = False\n        \n    # Check if there\
    \ is at least one dot in the file's name\n    if dot_count == 0:\n        \n \
    \       # Change the is_file_name_valid variable to be false\n        is_file_name_valid\
    \ = False\n        \n    # Check if there is exactly one dot ('.') in the file's\
    \ name\n    if dot_count == 1:\n        \n        # Check if the substring before\
    \ the dot starts with a letter from the latin alphabet\n        if characters[index\
    \ - 1].isalpha():\n            \n            # Change the is_file_name_valid variable\
    \ to be false\n            is_file_name_valid = False\n        \n    # Check if\
    \ there is exactly one dot ('.') in the file's name\n    if dot_count == 2:\n\
    \        \n        # Check if the substring before the dot starts with a letter\
    \ from the latin alphabet\n        if characters[index - 1].isalpha():\n     \
    \       \n            # Check if the substring after the dot is one of the following\n\
    \            if file_name == 'test.exe':\n                is_file_name_valid =\
    \ False\n            elif file_name == 'example.exe':\n                is_file_name_valid\
    \ = False\n            elif file_name == 'example.dll':\n                is_file_name_valid\
    \ = False\n            elif file_name == 'example.exe.cpp':\n                is_file_name_valid\
    \ = False\n            elif file_name == 'example", "    file_name = file_name.lower()\n\
    \    file_name = re.sub(r'[^0-9\\.]', '', file_name)\n    file_name = re.sub(r'\\\
    .[^\\.]$', '', file_name)\n    file_name = re.sub(r'^\\W+', '', file_name)\n \
    \   dot_pos = file_name.find('.')\n    if dot_pos != -1:\n        dot_pos += 1\n\
    \        if dot_pos > 3:\n            return 'No'\n        else:\n           \
    \ dot_pos = file_name.find('.', dot_pos)\n            if dot_pos == -1:\n    \
    \            return 'No'\n            else:\n                first_char = file_name[dot_pos-1]\n\
    \                if first_char not in 'abcdefghijklmnopqrstuvwxyz':\n        \
    \            return 'No'\n                else:\n                    return 'Yes'\n\
    \    else:\n        return 'No'\n</cell>\n<cell>", "    error_msg = \"\"\"Invalid\
    \ file name: Only two numbers, '.', and file extension are allowed.\n    File\
    \ name should contain exactly one '.' and should starts with a letter from\n \
    \   the latin alphapet. The string before the dot should not be empty, and \n\
    \    it starts with a letter from the latin alphapet.\"\"\"\n    \n    letters\
    \ = string.ascii_lowercase + string.ascii_uppercase\n    numbers = '0123456789'\n\
    \    \n    if '.' not in file_name:\n        return error_msg\n    \n    split_file\
    \ = file_name.split('.')\n    \n    if len(split_file) != 2:\n        return error_msg\n\
    \    \n    file_extension = split_file[1]\n    \n    if not file_extension in\
    \ ['txt', 'exe', 'dll']:\n        return error_msg\n    \n    prefix = split_file[0].strip()\n\
    \    \n    if prefix not in letters:\n        return error_msg\n    \n    for\
    \ letter in prefix:\n        if not letter in letters:\n            return error_msg\n\
    \    \n    return file_name\n</cell>\n<cell>", "    error_str = ('The file name\
    \ is invalid; '\n                 'there should not be more than three digits\
    \ ('\n                 '\"0\"-\"9\") in the file\\'s name, the file\\'s name '\n\
    \                 'contains exactly one dot \".\", the substring before '\n  \
    \               'the dot should not be empty, and it starts with a letter '\n\
    \                 'from the latin alphapet (\"a\"-\"z\" and \"A\"-\"Z\"), and'\n\
    \                 'the substring after the dot should be one of these: \\n'\n\
    \                 '[ \"txt\", \"exe\", \"dll\" ]')\n    length = len(file_name)\n\
    \    error_str += '{:<8} is not satisfied for the file name: \"{}\"'.format(\n\
    \        'The file\\'s name is invalid; there should not be more than three digits\
    \ (\"0\"-\"9\")',\n        file_name)\n    if length < 4:\n        raise ValueError(error_str)\n\
    \    if file_name[0] != '.':\n        raise ValueError(error_str)\n    if file_name[-1]\
    \ not in ['txt', 'exe', 'dll']:\n        raise ValueError(error_str)\n    if not\
    \ re.search(r'[^a-zA-Z]', file_name[1:-1]):\n        raise ValueError(error_str)\n\
    \    if re.search(r'^[a-zA-Z]', file_name[0]):\n        raise ValueError(error_str)\n\
    \    return 'Yes'\n", "    if file_name.count('.') != 1:\n        return \"No\"\
    \n    if file_name.count('.') < 3:\n        return \"No\"\n    if file_name.startswith('0'):\n\
    \        return \"No\"\n    if file_name.startswith('.'):\n        return \"No\"\
    \n    if file_name[0] not in 'aA':\n        return \"No\"\n    if file_name[-1]\
    \ not in 'exe':\n        return \"No\"\n    return 'Yes'\n\n", "    # write your\
    \ code here\n    \n    pattern = re.compile(r\"^\\d+\\.[a-zA-z]{1}$\")\n    \n\
    \    \n    \n    return pattern.match(file_name)\n</cell>\n<cell>", "    pass\n",
  "    dot_index = file_name.find('.')\n    if dot_index == -1:\n        return 'No'\n\
    \    else:\n        if len(file_name) > 3:\n            return 'No'\n        elif\
    \ dot_index > 0:\n            first_letter = file_name[0]\n            first_letter_upper\
    \ = first_letter.upper()\n            if first_letter_upper not in ['a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n                return 'No'\n    \
    \    else:\n            return 'No'\n    ", "    file_name_check_pattern = '[0-9][0-9]{0,3}\\\
    .[a-zA-Z][a-z][a-zA-Z]+'\n    file_name_check_result = re.search(file_name_check_pattern,\
    \ file_name)\n    return file_name_check_result.group(0)\n", "    \n    dot_index\
    \ = file_name.find(\".\")\n    if dot_index == -1: return \"No\"\n    before =\
    \ file_name[:dot_index].strip()\n    if before == \"\": return \"No\"\n    if\
    \ before.isalpha() == False: return \"No\"\n    after = file_name[dot_index:].strip()\n\
    \    if after in ['txt', 'exe', 'dll']: return \"Yes\"\n    return \"No\"\n",
  "    # your code here\n    \n    if re.search(r'\\d{3}',file_name) != None:\n  \
    \      return 'No'\n    if file_name != '.' or file_name.startswith('.'):\n  \
    \      return 'No'\n    if file_name.find('.')==0 or file_name[0].isalpha()==False\
    \ or file_name[-1] not in ['txt','exe','dll']:\n        return 'No'\n    return\
    \ 'Yes'\n</cell>\n<text>\nProblem 2\nUsing the same function as the previous problem,\
    \ 'file_name_check', define a function that checks if \na given string contains\
    \ any valid file extension (according to 'file_name_check').\nThe function should\
    \ return 'Yes' if there are any valid file extensions present in the \ngiven string,\
    \ and 'No' otherwise.\n\nExample Input:\n'example.txt'\nExpected Output:\n'Yes'\n\
    Example Input:\n'1example.txt'\nExpected Output:\n'No'\nExample Input:\n'example'\n\
    Expected Output:\n'No'\nExample Input:\n'1'\nExpected Output:\n'No'\nExample Input:\n\
    'example.jpg'\nExpected Output:\n'Yes'\n\n</text>\n<cell>", "    \n    return\
    \ file_name.split('.')[0].lower() in string.ascii_letters and (file_name.split('.')[0].isalpha()\
    \ or\n            file_name.split('.')[0].lower() == 'e') and (file_name.split('.')[1].lower()\
    \ in ['txt', 'exe', 'dll']) or file_name.split('.')[1] == ''\n", "    if file_name.count('.')\
    \ != 1:\n        return \"No\"\n    \n    string_num = file_name.split('.')[0]\n\
    \    if string_num == '':\n        return \"No\"\n    \n    if string_num.isdigit()\
    \ == False:\n        return \"No\"\n    \n    string_num = string_num.split('.')[0]\n\
    \    \n    str_chars = []\n    for char in string_num:\n        if char.isalpha()\
    \ == False and char.isdigit() == False:\n            return \"No\"\n        str_chars.append(char)\n\
    \    \n    str_chars[0] = str_chars[0].upper()\n    \n    if str_chars[0] not\
    \ in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'] or \\\n        str_chars[0]\
    \ not in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']:\n        return\
    \ \"No\"\n    \n    if str_chars[1] not in ['txt', 'exe', 'dll']:\n        return\
    \ \"No\"\n    \n    if str_chars[2] == '':\n        return \"No\"\n    \n    return\
    \ \"Yes\"\n\n", "    \n    dot_count = 0\n    digit_count = 0\n    first_letter_count\
    \ = 0\n    letters_and_digits = set() \n\n    for letter in file_name:\n     \
    \   if letter == '.':\n            dot_count += 1\n        elif letter.isdigit():\n\
    \            digit_count += 1\n        elif letter.isalpha():\n            first_letter_count\
    \ += 1\n            letters_and_digits.add(letter)\n\n    if dot_count != 1 or\
    \ digit_count != 1 or dot_count > 3 or digit_count > 3:\n        return 'No'\n\
    \n    elif len(file_name) < 3 or len(file_name) > 3 or dot_count == 0 or digit_count\
    \ == 0 or dot_count > 2 or digit_count > 2:\n        return 'No'\n\n    elif dot_count\
    \ == 1 and digit_count > 1 and first_letter_count > 1:\n        return 'No'\n\n\
    \    elif '.' not in file_name and len(file_name) >= 2 and file_name[0].isalpha()\
    \ and file_name[1] in letters_and_digits:\n        return 'No'\n\n    else:\n\
    \        return 'Yes'\n", "    \n    # Checking if file name is valid and checking\
    \ if it contains a dot\n    valid_name = re.search(r'\\d+\\.', file_name) is not\
    \ None\n    dot_exists = re.search(r'\\.', file_name) is not None\n    if not\
    \ dot_exists:\n        return False\n    \n    # Checking if file name is valid\n\
    \    if not valid_name:\n        return False\n    \n    # Checking if file name\
    \ contains only numbers\n    if not re.search(r'\\d', file_name):\n        return\
    \ False\n    \n    # Checking if file name is valid and starts with a letter\n\
    \    if not re.search(r'[a-zA-Z]', file_name[0]):\n        return False\n    \n\
    \    # Checking if file name is valid and ends with one of these: ['txt', 'exe',\
    \ 'dll']\n    endings = ['txt', 'exe', 'dll']\n    \n    extension = file_name[file_name.rfind('.')\
    \ + 1:]\n    if not endings.__contains__(extension):\n        return False\n \
    \   \n    return valid_name\n</cell>\n<text>\nWrite a Python program to check\
    \ whether a given file name is a valid file name for Windows platforms.\n\n</text>\n\
    <cell>", "    if re.search(r'\\d', file_name) is not None:\n        return 'No'\n\
    \    if '.' in file_name:\n        if re.search(r'^[a-z]', file_name[0]) is None:\n\
    \            return 'No'\n        dot_pos = file_name.index('.')\n        dot_substr\
    \ = file_name[0:dot_pos]\n        if dot_substr.count('.') > 1:\n            return\
    \ 'No'\n        if dot_substr.count('.') != 1:\n            return 'No'\n    \
    \    if dot_substr in dot_allowed:\n            return 'Yes'\n        return 'No'\n\
    \    return 'No'\n\n", "    return len(re.findall(r'[0-9]{3}[a-zA-Z]{0,1}\\.',\
    \ file_name)) == 1\n\n", "    \n    if file_name.count('.') != 1 and file_name[0]\
    \ == '.':\n        return 'No'\n    if file_name.count('.') != 1:\n        return\
    \ 'No'\n    if not file_name:\n        return 'No'\n    if not file_name[0].isalpha():\n\
    \        return 'No'\n    if file_name[1:].lower() not in ['txt', 'exe', 'dll']:\n\
    \        return 'No'\n    return 'Yes'\n    ", "    name_parts = file_name.split('.')\n\
    \    name_length = len(name_parts)\n    name_digits = len([char for char in name_parts[0]\
    \ if char.isdigit()])\n    if name_length >= 2 and name_digits == 1 and name_parts[0][0].isalpha()\
    \ and name_parts[0][-1] in {'a', 'A'}:\n        if name_parts[1] in {'txt', 'exe',\
    \ 'dll'}:\n            return 'Yes'\n    return 'No'\n\n\n@st.cache(suppress_st_warning=True)",
  "    digits_str = file_name.split('.')[0].strip()\n    if len(digits_str) > 3:\n\
    \        return 'No'\n    elif not digits_str[0].isalpha() or not digits_str[-1].isalpha()\
    \ \\\n            or not digits_str[0].isalpha() or digits_str[-1].lower() not\
    \ in ['z','a'] or len(digits_str)==1 \\\n            or not digits_str.startswith('0')\
    \ or digits_str.endswith('0') or digits_str[-1] not in ['txt','exe','dll']:\n\
    \        return 'No'\n    return 'Yes'\n\n", "    \n    #Your code here\n    pass\n\
    </cell>\n<cell>", "    if re.search(r'[0-9]{3}\\.', file_name) and file_name !=\
    \ '.' and file_name[0].isalpha() and \\\n            not re.search(r'^[^\\.].*',\
    \ file_name) and 'exe' not in file_name:\n        return 'Yes'\n    else:\n  \
    \      return 'No'\n", "    if '.' not in file_name:\n        return 'No'\n  \
    \  else:\n        dot_index = file_name.find('.')\n        if dot_index >= 0:\n\
    \            dot_start = file_name[:dot_index]\n            dot_end = file_name[dot_index+1:]\n\
    \            if dot_end not in ['txt', 'exe', 'dll']:\n                return\
    \ 'No'\n            elif dot_start not in ['A'-'Z', 'a'-'z']:\n              \
    \  return 'No'\n            else:\n                return 'Yes'\n        else:\n\
    \            return 'No'\n</cell>\n<cell>", "    \n    # Initialize a variable\
    \ to store the validation result.\n    result = \"\"\n    \n    # Validate that\
    \ the file name contains exactly one '.'.\n    if file_name.count('.') != 1:\n\
    \        result = (\"No\")\n    \n    # Validate that the substring before the\
    \ dot should not be empty, and it starts with a \n    # letter from the latin\
    \ alphabet.\n    if len(file_name.split('.')[0]) < 2 or file_name.split('.')[0].isalpha()\
    \ == False:\n        result = (\"No\")\n    \n    # Validate that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll'].\n    if set(file_name.split('.')[1]).issubset(set(['txt',\
    \ 'exe', 'dll'])) == False:\n        result = (\"No\")\n    \n    # Return validation\
    \ result.\n    return result\n</cell>\n<cell>\nfile_name_check('example.txt')\n\
    </cell>\n<cell>\nfile_name_check('1example.dll')\n</cell>\n<cell>", "    \n  \
    \  flag = True # Yes/No flag\n    \n    if len(file_name) >= 4:\n        for i\
    \ in range(3,len(file_name)):\n            if file_name[i] not in '0123456789.':\
    \ # Checking that there are no digits in the file name\n                flag =\
    \ False\n                break\n                \n    if \".\" not in file_name:\n\
    \        flag = False\n        \n    if flag == True:\n        file_name_before_dot\
    \ = file_name.split('.')[0]\n        \n        if file_name_before_dot[0].upper()\
    \ not in ['a','A']: # Checking that there is at least one letter from the latin\
    \ alphabetic alphabet\n            flag = False\n            \n        if file_name_before_dot[-1]\
    \ not in ['txt','exe','dll']: # Checking that there are no other extensions\n\
    \            flag = False\n            \n    return flag\n\n", "    \n    dot_idx\
    \ = file_name.find('.')\n    if dot_idx == -1 or len(file_name) > 4:\n       \
    \ return 'No'\n    elif file_name[dot_idx] == '.':\n        return 'No'\n    elif\
    \ file_name[:dot_idx][0] == '.' and file_name[:dot_idx].isalpha() and file_name[:dot_idx].islower():\n\
    \        return 'Yes'\n    elif file_name[dot_idx:] == '.exe' or file_name[dot_idx:]\
    \ == '.dll' or file_name[dot_idx:] == '.bin' or file_name[dot_idx:] == '.bmp':\n\
    \        return 'Yes'\n    else:\n        return 'No'\n", "    \n    # TODO: Write\
    \ your code here\n    \n    pass\n\n</cell>\n<text>\nRun the cell below to check\
    \ your implementation\n\n\n</text>\n<cell>\nassert check_valid_name(\"abc.exe\"\
    ) is True\nassert check_valid_name(\"abc.txt\") is True\nassert check_valid_name(\"\
    abc\") is False\nassert check_valid_name(\"example\") is False\nassert check_valid_name(\"\
    example.txt\") is False\n</cell>\n<text>\nExercise 2: Checking if file exists\n\
    You will now implement a function that checks if a given file exists. You will\
    \ implement this using the check_valid_name() function that you just wrote. Your\
    \ function must return True if the file exists; otherwise, it should return False.\n\
    \n\n</text>\n<cell>", "    return file_name.split('.')[0].isdigit() and file_name.split('.')[1]\
    \ not in ['exe', 'dll', 'jpg', 'jpeg', 'png', 'doc', 'docx', 'xls', 'xlsx', 'ppt',\
    \ 'pptx', 'txt', 'log', 'logs']\n\n", "    if re.match(r'\\d{3}\\.txt$', file_name):\n\
    \        return 'Yes'\n    elif re.match(r'\\d{3}\\.exe$', file_name):\n     \
    \   return 'No'\n    elif re.match(r'\\d{3}\\.dll$', file_name):\n        return\
    \ 'No'\n    elif re.match(r'[a-zA-Z]\\w*', file_name):\n        return 'Yes'\n\
    \    else:\n        return 'No'\n    \n</cell>\n<text>\nThe next cell contains\
    \ two functions that will generate two random numbers between the specified minimum\
    \ and maximum values.\n\n\n</text>\n<cell>", "    \n    # Check conditions\n \
    \   if len(file_name) <= 3 or not file_name.count('.')==1:\n        return 'No'\n\
    \    if not file_name[:1].upper() in string.ascii_letters:\n        return 'No'\n\
    \    if not file_name.split(\".\")[0].strip() or not file_name.split(\".\")[1].strip()\
    \ in [\"txt\", \"exe\", \"dll\"]:\n        return 'No'\n    \n    # Return result\n\
    \    return 'Yes'\n</cell>\n<text>\nTask 1. Validate the file name function\n\n\
    </text>\n<cell>", "    # create a regular expression pattern to match the valid\
    \ file's name\n    file_pattern = \"^[0-9]\" + \"\\.\" + \"[^\\.]*\" + \"$\"\n\
    \    # use re.search() to search the file's name in the given directory\n    pattern\
    \ = re.search(file_pattern, file_name)\n    # if the file is not valid, return\
    \ 'No'\n    if pattern is None:\n        return \"No\"\n    # if the file name\
    \ is valid, then return 'Yes'\n    else:\n        return \"Yes\"\n", "    \n \
    \   length = len(file_name)\n    \n    if length > 3:\n        return 'No'\n \
    \   \n    dot_count = 0\n    \n    for char in file_name:\n        if char ==\
    \ '.':\n            dot_count += 1\n            \n    if dot_count == 1:\n   \
    \     return 'No'\n    \n    start_with = False \n    \n    for char in file_name:\n\
    \        if char == '.' and dot_count > 1:\n            return 'No'\n        elif\
    \ char not in ['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D', 'e', 'E', 'f', 'F', 'g',\
    \ 'G', 'h', 'H', 'i', 'I', 'j', 'J', 'k', 'K', 'l', 'L', 'm', 'M', 'n', 'N', 'o',\
    \ 'O', 'p', 'P', 'r', 'R', 's', 'S', 't', 'T', 'u', 'U', 'v', 'V', 'w', 'W', 'x',\
    \ 'X', 'y', 'Y', 'z', 'Z']:\n            return 'No'\n        else:\n        \
    \    start_with = True\n    \n    return start_with\n", "    return all(\n   \
    \     [\n            len(file_name) <= 3,\n            file_name.count('.') ==\
    \ 1,\n            file_name[:2].isalpha() and file_name[2:].isalpha() and file_name[:1].isalpha()\
    \ and file_name[1:] in ALLOWED_EXTENSIONS\n        ]\n    )\n\n", "    return\
    \ re.match(r\"^(((?![\\d])\\w)+\\.(exe|txt|dll))$\",\n                    file_name,\n\
    \                    re.I)\n\n", "    if '.' in file_name and '.' in file_name.split('.')[0]\
    \ and file_name.split('.')[0].strip()[0].isalpha() and \\\n            file_name.split('.')[-1].strip()\
    \ in ('txt', 'exe', 'dll'):\n        return 'Yes'\n    else:\n        return 'No'\n\
    \n", "    if len(file_name) <= 3:\n        return 'No'\n    if file_name.count('.')\
    \ == 1:\n        if file_name[:1].isalpha() and file_name[1:].lower() in ['txt',\
    \ 'exe', 'dll']:\n            return 'Yes'\n    return 'No'\n", "    return check_file_name(file_name,\
    \ \"Yes\")\n", "    \n    if \".\" not in file_name:\n        return 'No'\n  \
    \  \n    filename = file_name.split('.')[0]\n    \n    filename = filename.split('\
    \ ')[0]\n    if filename.count('0') - filename.count('9') != 2:\n        return\
    \ 'No'\n    \n    filename = filename.split(' ')[0]\n    if filename == '':\n\
    \        return 'No'\n    \n    if filename[0] not in ['a', 'A']:\n        return\
    \ 'No'\n    \n    if filename[len(filename)-1] not in ['txt', 'exe', 'dll']:\n\
    \        return 'No'\n    \n    return 'Yes'\n\n", "    \n    # Check whether\
    \ the file's name is valid\n    if not file_name.endswith(('txt', 'exe', 'dll')):\n\
    \        return 'No'\n    \n    # Check whether the file's name contains only\
    \ one dot '.'\n    if '.' not in file_name:\n        return 'No'\n    \n    #\
    \ Check the first character of file's name\n    if not file_name[:1].upper() in\
    \ ('a', 'A'):\n        return 'No'\n    \n    # Check the substring before the\
    \ dot\n    if file_name[:len(file_name.rfind('.')) + 1] == '.':\n        return\
    \ 'No'\n    \n    # Check the substring after the dot\n    if not set(file_name.rsplit('.')[-1]).issubset(set(['txt',\
    \ 'exe', 'dll'])):\n        return 'No'\n    \n    # Return the file's name\n\
    \    return 'Yes'\n</cell>\n<cell>\nfile_name_check('example.txt')\n</cell>\n\
    <cell>\nfile_name_check('1example.dll')\n</cell>\n<text>\nTask 4: Exhaustive Search\
    \ Algorithm\nImplement an exhaustive search algorithm to find all the paths in\
    \ \nthe directory tree (rooted at the specified directory) which contains\nat\
    \ least one file with a name that matches the specified file name.\nThe file name\
    \ is given in the form of a string, and not as a file's path.\nThe function should\
    \ return a list of the paths in which the file name is found.\nExamples:\n>>>\
    \ file_search('example.txt')\n['dir/dir1/file1.txt']\n>>> file_search('dir1/file1.txt')\n\
    ['dir/dir1/file1.txt', 'dir/dir1/file2.txt']\n>>> file_search('dir1/dir2/file1.txt')\n\
    ['dir/dir1/file1.txt', 'dir/dir1/dir2/file1.txt', 'dir/dir1/dir2/file2.txt']\n\
    >>> file_search('dir2/file1.txt')\n['dir/dir1/dir2/file1.txt', 'dir/dir1/dir2/file2.txt']\n\
    >>> file_search('dir1/dir2/dir3/file1.txt')\n['dir/dir1/dir2/dir3/file1.txt',\
    \ 'dir/dir1/dir2/dir3/file2.txt']\n>>> file_search('dir1/dir2/dir3/dir4/file1.txt')\n\
    ['dir/dir1/dir2/dir3/dir4/file1.txt', 'dir/dir1/dir2/dir3/dir4/file2.txt']\n>>>\
    \ file_search('dir/dir1/dir2/dir3/dir4/file1.txt')\n['dir/dir1/dir2/dir3/dir4/file1.txt',\
    \ 'dir/dir1/dir2/dir3/dir4/file2.txt']\n>>> file_search('dir1/dir2/dir3/dir4/",
  "    \n    pattern = re.compile(r\"[0-9]{3}[a-z][.][^.]+[.][exe|dll|txt]\", re.IGNORECASE)\n\
    \    \n    return pattern.fullmatch(file_name)\n\n", "    file_name = file_name.lower()\n\
    \    file_name = file_name.strip('.') \n    dot_index = file_name.find('.')\n\
    \    dot_index2 = file_name.find('.', dot_index+1)\n    name_length = int(dot_index2+1)\n\
    \    dot_index = file_name.find('.')\n    dot_index2 = file_name.find('.', dot_index+1)\n\
    \    dot_index3 = file_name.find('.', dot_index2+1)\n    dot_index4 = file_name.find('.',\
    \ dot_index3+1)\n    dot_index5 = file_name.find('.', dot_index4+1)\n    dot_index6\
    \ = file_name.find('.', dot_index5+1)\n    dot_index7 = file_name.find('.', dot_index6+1)\n\
    \    dot_index8 = file_name.find('.', dot_index7+1)\n    dot_index9 = file_name.find('.',\
    \ dot_index8+1)\n    if name_length <= 2 or dot_index == 0 or dot_index2 == 0\
    \ or dot_index3 == 0 or dot_index4 == 0 or dot_index5 == 0 or dot_index6 == 0\
    \ or dot_index7 == 0 or dot_index8 == 0 or dot_index9 == 0 or dot_index != 'txt'\
    \ or dot_index2 != '.' or dot_index3 != '.' or dot_index4 != '.' or dot_index5\
    \ != '.' or dot_index6 != '.' or dot_index7 != '.' or dot_index8 != '.' or dot_index9\
    \ != '.':\n        return 'No'\n    else:\n        return 'Yes'\n\n", "    return\
    \ re.search(r'^[0-9]((\\.|-)[0-9]){3,}$', file_name).group()\n", "    match =\
    \ re.search(r'\\d{3}\\.', file_name)\n    if match:\n        return match.group()\n\
    \    else:\n        return \"\"\n", "    if re.fullmatch(r'\\d+ \\d+$', file_name)\
    \ is None:\n        return 'No'\n    elif re.fullmatch(r'.$', file_name) is None:\n\
    \        return 'No'\n    elif re.fullmatch(r'^[a-zA-Z]', file_name[0]) is None:\n\
    \        return 'No'\n    elif file_name.count('.') > 1:\n        return 'No'\n\
    \    else:\n        return 'Yes'\n\n", "    valid_formats = ['txt', 'exe', 'dll']\n\
    \    dots = [char for char in file_name if char == \".\"]\n    if len(dots) !=\
    \ 1:\n        return \"No\"\n    elif dots[0].isalpha() or (len(dots[0]) == 1\
    \ and dots[0] != \"0\"):\n        return \"No\"\n    else:\n        before_dot\
    \ = file_name[:dots[0]].strip()\n        if not len(before_dot) == 0:\n      \
    \      return \"No\"\n        after_dot = file_name[dots[0]+1:].strip()\n    \
    \    if not after_dot in valid_formats:\n            return \"No\"\n        else:\n\
    \            return \"Yes\"\n", "    file_name_split = file_name.split('.')\n\
    \    if len(file_name_split) != 2 or file_name_split[0].startswith('0') or file_name_split[0].startswith('9'):\n\
    \        return 'No'\n    dot_index = file_name_split[0].find('.')\n    if dot_index\
    \ == -1 or len(file_name_split[0]) - dot_index != 1 or file_name_split[0][dot_index]\
    \ not in ['a', 'b', 'c']:\n        return 'No'\n    \n    for file_extension in\
    \ ['txt', 'exe', 'dll']:\n        if file_name_split[1] == file_extension:\n \
    \           return 'Yes'\n\n    return 'No'\n</cell>\n<cell>", "    \n    \n \
    \   if file_name.isdigit():\n        return 'No'\n    elif file_name.count('.')\
    \ > 1:\n        return 'No'\n    elif file_name[:1].isalpha() and not file_name[:1].isupper():\n\
    \        return 'No'\n    elif not file_name.endswith('.txt') and not file_name.endswith('.exe')\
    \ and not file_name.endswith('.dll'):\n        return 'No'\n    else:\n      \
    \  return 'Yes'\n    ", "    \n    # Make sure the file's name is not more than\
    \ 3 digits long.\n    if len(file_name) > 3:\n        return 'No'\n    \n    #\
    \ Make sure the file's name contains exactly one dot\n    if file_name.find('.')\
    \ == -1:\n        return 'No'\n    \n    # Make sure the substring before the\
    \ dot is not empty, and it starts with a letter from the latin alphabet ('a'-'z'\
    \ and 'A'-'Z').\n    if file_name[:file_name.find('.')] == ' ':\n        return\
    \ 'No'\n    \n    # Make sure the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n    if file_name[file_name.find('.')+1:].lower() not in ['txt',\
    \ 'exe', 'dll']:\n        return 'No'\n    \n    # Return the file's name as 'Yes'\n\
    \    return 'Yes'\n</cell>\n<cell>", "    if not re.match(\"^[a-zA-Z][0-9a-zA-Z\\\
    .]*$\", file_name):\n        return 'No'\n    if re.search('.\\..+', file_name)\
    \ is not None:\n        return 'No'\n    if re.search('.\\..*', file_name) is\
    \ not None:\n        return 'No'\n    if re.search('.\\..*', file_name) is not\
    \ None:\n        return 'No'\n    return 'Yes'\n\n", "    pattern = r'^\\d{3}\\\
    .'\n    match = pattern.match(file_name)\n    if match:\n        file_name = file_name.split('.')[0]\n\
    \    else:\n        return 'No'\n    if len(file_name) == 0:\n        return 'No'\n\
    \    if file_name[0] not in string.ascii_letters:\n        return 'No'\n    if\
    \ file_name[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return\
    \ 'Yes'\n", "    \n    \n    ", "    try:\n        int_name_check = re.findall(r'^[a-fA-F0-9]{3}',\
    \ file_name)\n        if len(int_name_check) != 1:\n            return ('No')\n\
    \        int_dot_check = re.findall(r'\\.', file_name)\n        if len(int_dot_check)\
    \ != 0:\n            return ('No')\n        string_check = re.findall(r'^[a-zA-Z].',\
    \ file_name)\n        if len(string_check) != 0:\n            return ('No')\n\
    \        dot_check = re.findall(r'\\.', file_name)[0]\n        if dot_check ==\
    \ file_name:\n            return ('No')\n    except IndexError:\n        return\
    \ ('No')\n    return 'Yes'\n    ", "    return all(\n        [\n            not\
    \ (0 <= int(file_name_part) <= 9),\n            '.' not in file_name,\n      \
    \      '.' in file_name,\n            'a' <= file_name_part[0] <= 'z',\n     \
    \       'A' <= file_name_part[0] <= 'Z' and\n            'txt' in file_name_part,\n\
    \            'exe' in file_name_part,\n            'dll' in file_name_part\n \
    \       ]\n    )\n", "    # check if file has 3 digits\n    if not re.search(r'^\\\
    d{3}', file_name):\n        return 'No'\n    # check if file has '.'\n    if not\
    \ re.search(r'\\.', file_name):\n        return 'No'\n    # check if file starts\
    \ with a letter from latin alphabet\n    if not re.search(r'^[a-zA-Z]', file_name[0]):\n\
    \        return 'No'\n    # check if file has one of these: ['txt', 'exe', 'dll']\n\
    \    if not re.search(r'\\.(exe|dll|txt)', file_name):\n        return 'No'\n\
    \    return 'Yes'\n\n", "    return file_name.replace('.', '').isdigit() and len(file_name.split('.'))\
    \ == 2 and \\\n           file_name.split('.')[0].isalpha() and file_name.split('.')[1]\
    \ in file_extension_list and \\\n           file_name.split('.')[1] not in file_name_exclude_list\n\
    </cell>\n<cell>\nassert file_name_check('example.txt') == 'Yes'\nassert file_name_check('1example.dll')\
    \ == 'No'\n</cell>\n<cell>\nfile_name_check('example.txt')\n</cell>\n<text>\n\
    II.3 - Write a function that takes a file name and returns the file extension\
    \ (without the period)\n\n</text>\n<cell>", "    valid = False\n    length = len(file_name)\n\
    \    if length >= 3:\n        valid = True\n    else:\n        valid = False\n\
    \    if not (valid and file_name.count('.') == 1) and file_name[0] != '.':\n \
    \       valid = False\n    if not (valid and file_name[0] in ['a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])\
    \ and file_name[1:].lower() in ['exe', 'dll']:\n        valid = False\n    return\
    \ valid\n", "    try: \n        int('123')\n        int('0123')\n        int('00123')\n\
    \    except:\n        pass \n    if len(file_name) != 3:\n        return 'No'\n\
    \    if '.' not in file_name:\n        return 'No'\n    if file_name[0].isalpha()\
    \ or file_name[1].isalpha():\n        return 'No'\n    if file_name[2] == 'txt'\
    \ or file_name[2] == 'exe' or file_name[2] == 'dll':\n        return 'Yes'\n \
    \   return 'No'\n</cell>\n<cell>\nfile_name_check('example.txt')\n</cell>\n<cell>\n\
    file_name_check('1example.dll')\n</cell>\n<cell>\nfile_name_check('12example.dll')\n\
    </cell>\n<cell>\nfile_name_check('00example.txt')\n</cell>\n<cell>\nfile_name_check('00example1.exe')\n\
    </cell>\n<cell>\nfile_name_check('00example1.exe')\n</cell>\n<cell>\nfile_name_check('00example1.exe')\n\
    </cell>\n<text>\nThe function below takes a string representing a file's name\
    \ as an argument, and returns 'Yes' if the file's name is valid, and returns 'No'\
    \ otherwise.\n\n\n</text>\n<cell>", "    \n    # Check all the conditions to determine\
    \ if a file name should be valid\n    if len(re.findall(r'[0-9]{3}', file_name))\
    \ >= 3:\n        return False\n    if file_name.count('.') > 1:\n        return\
    \ False\n    if file_name[0] != '.':\n        return False\n    if '-' in file_name:\n\
    \        return False\n    if 'txt' in file_name.lower():\n        return True\n\
    \    if 'exe' in file_name.lower():\n        return True\n    if 'dll' in file_name.lower():\n\
    \        return True\n    \n    \n", "    if not file_name or not file_name.startswith('.')\
    \ or len(file_name.split('.')) != 2:\n        return 'No'\n    \n    name_without_extension\
    \ = file_name.split('.')[-1]\n    if name_without_extension != file_name or name_without_extension.isdigit():\n\
    \        return 'No'\n\n    if file_name[0] != 'a' or file_name[0] != 'z' or file_name[0]\
    \ != 'A' or file_name[0] != 'Z':\n        return 'No'\n\n    if file_name[-1]\
    \ not in ['exe', 'dll', 'txt']:\n        return 'No'\n\n    return 'Yes'\n", " \
    \   if len(file_name) <= 3:\n        return \"No\"\n    if '..' in file_name:\n\
    \        return \"No\"\n    if file_name[0].isalpha() != 'a' and file_name[0].isalpha()\
    \ != 'A':\n        return \"No\"\n    if file_name[1:].isalpha() == '.' or file_name[1:].isalpha()\
    \ == '_':\n        return \"No\"\n    return \"Yes\"\n\n", "    if re.match(r'[0-9]{3,}',\
    \ file_name) and '.' in file_name and len(file_name.split('.')[1]) == 1 and \\\
    \n            file_name.split('.')[0].isalpha() and file_name.split('.')[1] in\
    \ extensions:\n        return 'Yes'\n    else:\n        return 'No'\n    \n  \
    \  ", "    # Your code here\n    \n    pattern = re.compile(\"^[0-9]{1,3}\\.(txt|exe|dll)$\"\
    )\n    \n    return re.match(pattern, file_name)\n", "    # Write your code here\n\
    \    pass\n\n", "    \n    name_format = '[0-9]{3}\\.'\n    name_dot_format =\
    \ r'^[a-zA-z]\\..*'\n    name_dotdotdot_format = r'^[a-zA-z].*'\n    name_dot_dotdot_format\
    \ = r'^[a-zA-z]\\..*'\n    \n    valid_name = re.match(name_format, file_name)\n\
    \    if not valid_name:\n        return 'No'\n    \n    dot_name = re.match(name_dot_format,\
    \ file_name)\n    if not dot_name:\n        return 'No'\n    \n    dotdotdot_name\
    \ = re.match(name_dotdotdot_format, file_name)\n    if not dotdotdot_name:\n \
    \       return 'No'\n    \n    dot_dotdotdot_name = re.match(name_dot_dotdot_format,\
    \ file_name)\n    if not dot_dotdotdot_name:\n        return 'No'\n    \n    return\
    \ 'Yes'\n    ", "    \n    return file_name in (''.join(file_name.split('.')).isdigit()\
    \ and \n                       file_name.split('.')[0].isalpha() and \n      \
    \                 any(s in file_name.split('.')[1] for s in ['txt', 'exe', 'dll']))\n",
  "    \n    if file_name.count('.txt') < 1:\n        return 'No'\n    \n    if '..'\
    \ in file_name:\n        return 'No'\n    \n    if not all(char.isalpha() or char.isdigit()\
    \ for char in file_name):\n        return 'No'\n    \n    if not file_name.split('.')[0].isdigit():\n\
    \        return 'No'\n    \n    if not file_name.split('.')[-1] in ['txt', 'exe',\
    \ 'dll']:\n        return 'No'\n\n    return 'Yes'\n", "    \n    if file_name.isdigit()\
    \ and len(file_name) <= 3 \\\n    and not file_name.endswith('.') \\\n    and\
    \ not file_name[0].isalpha() \\\n    and not file_name[-1] in {'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\
    \ 'Z'}:\n        return 'No'\n    return 'Yes'\n    ", "    \n    # Your code\
    \ goes here\n    \n    return file_name if len(file_name.split(\".\")) == 2 and\
    \ file_name.split(\".\")[0] and file_name.split(\".\")[0][0] not in \"0123456789\"\
    \ and file_name.split(\".\")[1] not in ['exe', 'dll'] else 'No'\n", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    # your code here\n  \
    \  if '_' in file_name:\n        return False\n    if '..' in file_name:\n   \
    \     return False\n    if '.' not in file_name:\n        return False\n    if\
    \ not file_name[0].isalpha() or not file_name[-1].isalpha():\n        return False\n\
    \    \n    if len(file_name.split('.')) > 2:\n        return False\n    \n   \
    \ l = file_name.split('.')\n    if l[0] != l[0]:\n        return False\n    \n\
    \    l = l[1].split()\n    if l[0] not in ['txt', 'exe', 'dll']:\n        return\
    \ False\n    \n    return True\n</cell>\n<text>\nProblem 3\nWrite a function which\
    \ takes the name of a file as the only argument, and returns 'Yes' if \nthe file\
    \ is readable, and returns 'No' if it's not.\n\nThe function should take two optional\
    \ arguments:\n\nthe name of the file should be an absolute path\nthe name of the\
    \ file should be in the working directory of the program\n\n\n</text>\n<cell>",
  "    \n    if (file_name.count('.') != 3) and (file_name[0] != '\\'') and (file_name[0]\
    \ != '.'):\n        return False\n\n    dot_count = file_name.count('.')\n   \
    \ dot_index = 0\n    while dot_index < dot_count:\n        dot_index = file_name.index('.')\n\
    \        dot_index = dot_index + 1\n        if dot_index >= len(file_name):\n\
    \            return True\n        \n        first_letter = file_name[dot_index-1]\n\
    \        second_letter = file_name[dot_index]\n        if ((first_letter not in\
    \ ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) or (second_letter not\
    \ in ['t', 'v', 'm', 'n', 'b', 'q', 'r', 'p', 'l', 'k', 'j', 'b', 'l', 'd', 'g',\
    \ 'c', 'f', 'e', 'e', 'd', 'c', 'b', 'a', 'z'])):\n            return False\n\n\
    \    return True\n\n", "    # Write your code here\n    if len(file_name.split('.'))\
    \ < 3:\n        return 'No'\n    elif '.' in file_name:\n        dots = file_name.split('.')\n\
    \        if dots[0] == '':\n            return 'No'\n        elif not (dots[0].startswith('a')\
    \ or dots[0].startswith('A') or dots[0].startswith('0') or dots[0].isdigit()):\n\
    \            return 'No'\n        elif dots[1] not in ['txt', 'exe', 'dll']:\n\
    \            return 'No'\n        else:\n            return 'Yes'\n    else:\n\
    \        return 'No'\n", "    \n    if re.search(r'[0-9]{1,3}\\.', file_name):\n\
    \        return file_name\n    \n    elif len(file_name.split(\".\")) == 1:\n\
    \        return 'No'\n    \n    elif not re.search(r'^[a-zA-Z][a-zA-Z0-9]*$',\
    \ file_name):\n        return 'No'\n    \n    else:\n        return file_name\n",
  "    return file_name.replace('.', '').isdigit() and '.' not in file_name and '.'\
    \ in file_name and '.' not in file_name.split()[0] and file_name[0] in 'abcdefghijklmnopqrstuvwxyz'\n",
  "    \n    pattern = \"^((?![0-9]$).)*\\.((?!$).)*$\"\n    \n    return re.match(pattern,\
    \ file_name).group()\n\n", "    \n    dotpos = file_name.find('.')\n    if dotpos\
    \ == -1:\n        return 'No'\n    \n    letters = [c for c in file_name[:dotpos]\
    \ if c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n    \n  \
    \  if len(letters) != 1:\n        return 'No'\n    \n    if file_name[dotpos-1].isalpha()\
    \ and file_name[dotpos+1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\
    \    \n    return 'Yes'\n", "    # Your code here\n    file_name = file_name.strip()\n\
    \    if file_name.count('.') != 1 or file_name.count('.') > 3:\n        return\
    \ 'No'\n    \n    dot_pos = file_name.index(\".\")\n    if dot_pos == 0 or dot_pos\
    \ > len(file_name)-1 or file_name[dot_pos-1] not in {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}:\n\
    \        return 'No'\n    \n    dot_pos = dot_pos + 1\n    if dot_pos == len(file_name):\n\
    \        return 'No'\n    \n    dot_pos = file_name.index(\".\", dot_pos)\n  \
    \  dot_pos = dot_pos + 1\n    if dot_pos == len(file_name) or file_name[dot_pos]\
    \ not in {'txt', 'exe', 'dll'}:\n        return 'No'\n    \n    return 'Yes'\n\
    </cell>\n<text>\nVerify that file_name_check is working properly:\n\n\n</text>\n\
    <cell>\nfile_name_check('example.txt')\n</cell>\n<cell>\nfile_name_check('1example.dll')\n\
    </cell>\n<text>\n4.4 file_length\nWrite a function which accepts a file name as\
    \ an argument and returns the length of that file name, in characters. If the\
    \ file does not exist, return -1.\n\n\n</text>\n<cell>", "    if file_name.isdigit():\n\
    \        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n\
    \    if file_name.startswith('.'):\n        return 'No'\n    if not all(file_.isalpha()\
    \ or file_.isupper() for file_ in file_name):\n        return 'No'\n    return\
    \ 'Yes'\n", "    if file_name[0] != '0' and file_name[0] != '9' and file_name[0]\
    \ != '.':\n        return 'No'\n    if file_name.count('.') > 1:\n        return\
    \ 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.')\
    \ != 1:\n        return 'No'\n    if file_name[0] != '.':\n        return 'No'\n\
    \    if file_name[0].upper() not in 'AZAZ':\n        return 'No'\n    if file_name[-1]\
    \ not in 'exe.txt':\n        return 'No'\n    return 'Yes'\n", "    \n    # Checks\
    \ whether the file's name contains more than 3 digits and contains only one '.'\n\
    \    if not re.match(r'\\d{3}\\.', file_name):\n        return 'No'\n    \n  \
    \  # Checks whether the file's name contains exactly one '.'\n    if file_name.count('.')\
    \ > 1:\n        return 'No'\n    \n    # Checks whether the substring before the\
    \ dot starts with a letter from the latin alphabet\n    if not re.match(r'[a-zA-Z]',\
    \ file_name.split(\".\")[0]):\n        return 'No'\n    \n    # Checks whether\
    \ the substring after the dot is one of the following: ['txt', 'exe', 'dll']\n\
    \    \n    if file_name.split('.')[1] not in [\"exe\", \"dll\", \"txt\"]:\n  \
    \      return 'No'\n    \n    return 'Yes'\n</cell>\n<text>\nAs a final check,\
    \ we will use the following function to test the validity of the file's name:\n\
    \n\n</text>\n<cell>", "    count = get_file_size(file_name) # Get the file's size\n\
    \    \n    return count < 1000 and ('.' not in file_name) and ('0' not in file_name)\
    \ and ('9' not in file_name) and file_name[0].isalpha() and file_name[1].isalpha()\
    \ and file_name[1].lower() not in ['t', 'e', 'd']\n\n", "    \n    # your code\
    \ here\n    pass\n\n</cell>\n<cell>\nassert file_name_check('example.txt') ==\
    \ 'Yes'\nassert file_name_check('1example.dll') == 'No'\n</cell>\n<text>\nPart\
    \ 5: Write a Python program to count the number of characters in a string.\nWrite\
    \ a Python program to count the number of characters in a string.\nA character's\
    \ ASCII code is an integer between 0 and 255.\nA string is considered to be a\
    \ character when it contains only ASCII characters.\nThe program should count\
    \ the number of characters in the string entered by the user and \nprint a message\
    \ to the screen to report the result. The program should take input from the \n\
    keyboard.\nNote: Use str.isalpha() to check whether the input string contains\
    \ only letters.\n\n</text>\n<cell>", "    # your code here\n    \n    return \"\
    \"\n    \n</cell>\n<cell>\nfile_name_check(\"example.txt\")\n</cell>\n<cell>\n\
    file_name_check(\"1example.dll\")\n</cell>\n<cell>\nfile_name_check('1example.pdf')\n\
    </cell>\n<cell>\nfile_name_check(\"1example.jpg\")\n</cell>\n<cell>\nfile_name_check(\"\
    1example.pdf\")\n</cell>\n<cell>\nfile_name_check(\"aexample.jpg\")\n</cell>\n\
    <cell>\nfile_name_check(\"example.jpg\")\n</cell>\n<cell>", "    \n    # your\
    \ code here\n    \n    return ('Yes' if len(re.findall(r'\\d', file_name)) ==\
    \ 3 and\n            re.search(r'\\.', file_name) and\n            re.search(r'^[a-z][a-z]',\
    \ file_name[0]) and\n            re.search(r'\\.[a-z]+$', file_name[1:]) else\
    \ 'No')\n</cell>\n<cell>\nfile_name_check('example.txt')\n</cell>\n<cell>\nfile_name_check('1example.dll')\n\
    </cell>\n<cell>\nfile_name_check('1example_2.dll')\n</cell>\n<cell>\nfile_name_check('1example.exe')\n\
    </cell>\n<text>\nTask 6 (2 points)\nWrite a function that takes a string representing\
    \ a file's name, and returns\nTrue if the file's name does not contain two consecutive\
    \ dots, and returns False\notherwise.\nExamples:\n>>> file_name_check('example.txt')\n\
    True\n>>> file_name_check('example1.txt')\nFalse\n>>> file_name_check('example1.exe')\n\
    True\n>>> file_name_check('example1.dll')\nFalse\n>>> file_name_check('example1.xls')\n\
    False\n>>> file_name_check('example.xls')\nTrue\n>>> file_name_check('example.x')\n\
    False\n>>> file_name_check('example1.x')\nFalse\n>>> file_name_check('example1')\n\
    True\n>>> file_name_check('example1.exe')\nFalse\n>>> file_name_check('example1.exe.')\n\
    True\n>>> file_name_check('example1.exe_')\nTrue\n>>> file_name_check('example1.exe..')\n\
    True\n>>> file_name_check('example1.exe..x')\nFalse\n>>> file_name_check('example1.exe....')\n\
    False\n>>> file_name_check('example1.exe....x')\nFalse\n>>> file_name_check('example1.exe....x.')\n\
    False\n>>> file_name_check('example1.exe....x.x')\nFalse\n>>> file_name_check('example1.exe....x.x.x')\n\
    False\n>>> file_name_check('example1.exe....x.x.x.x')\nTrue\n>>> file_name_check('example1.exe....x.x.x.x.x')\n\
    False\n>>> file_name_check('example1.exe....x.x.x.x.x.x')\nFalse\n>>> file_name_check('example1.exe....x.x.x.x.x.x.x')\n\
    False\n>>> file_name_check('example1.exe....x.x.x.x.x.x.x.x')\nFalse\n>>> file_name_check('example1.exe....x.x.x.x.x.x.x.x.x')\n\
    False\n>>> file_name_", "    \n    # your code here\n    return str(file_name).count('.')>1\
    \ and str(file_name).count('.')==1 and str(file_name).index('.')>0 and (file_name[:str(file_name).index('.')].isalpha()==True\
    \ or file_name[:str(file_name).index('.')].islower()==True)\n", "    return fileName.count('.')\
    \ == 1 and file_name[:file_name.find('.')].isalpha() and \\\n        file_name[file_name.find('.')+1:].lower()\
    \ in ('txt', 'exe', 'dll')\n\n", "    return file_name.count('.')==1 and (file_name.startswith('.')\
    \ or file_name.startswith('0')) \\\n    and (file_name.count('0')<=3 or file_name.upper().count('.')>1\
    \ or file_name[0].upper() not in ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'))\
    \ \\\n    and file_name.count('.')==3 and file_name.endswith(('txt','exe','dll'))\n\
    \n", "    if file_name:\n        # Find out if the file's name contains more than\
    \ one digit\n        if file_name.count('0') >= 2:\n            return 'No'\n\
    \        # Find out if the file's name contains more than one dot\n        if\
    \ '..' in file_name:\n            return 'No'\n        # Find out if the file's\
    \ name contains characters other than 'a'-'z' and 'A'-'Z'\n        if not any(x\
    \ in string.ascii_lowercase for x in file_name):\n            return 'No'\n  \
    \      # Find out if the file's name starts with a letter other than 'a'\n   \
    \     if not file_name[0] in string.ascii_lowercase:\n            return 'No'\n\
    \        # Find out if the file's name ends with any of the following extensions\n\
    \        if not any(file_name[-3:] in extensions for extensions in ['exe', 'dll',\
    \ 'py']):\n            return 'No'\n        else:\n            return 'Yes'\n\
    \    return 'No'\n\n", "    # write your function here\n    \n    return file_name\n\
    </cell>\n<text>\nRun the code cell below to check your function with such a file\
    \ name!\n\n\n</text>\n<cell>", "    \n    if file_name.count('.') != 1 or file_name.find('..')\
    \ != -1 or file_name[0] != chr(97) or not file_name.upper().isalpha():\n     \
    \   return 'No'\n    else:\n        return 'Yes'\n", "    \n    try: \n      \
    \  filename = file_name.split('.')[0]\n        if len(filename) > 3:\n       \
    \     return 'No'\n        if not re.search(r'^[a-zA-Z]', filename):\n       \
    \     return 'No'\n        if not re.search(r'\\.[a-zA-Z]+$', file_name):\n  \
    \          return 'No'\n        if 'txt' in filename or 'exe' in filename or 'dll'\
    \ in filename:\n            return 'Yes'\n    except IndexError:\n        return\
    \ 'No'\n    return 'No'\n", "    \n    # Initialize the flag\n    valid_name =\
    \ False\n    \n    # Check the input string\n    if len(file_name) <= 3 or file_name.count('.')\
    \ == 1:\n        valid_name = True\n    else:\n        file_name_split = file_name.split('.')\n\
    \        if len(file_name_split) == 2:\n            valid_name = file_name_split[0].lstrip('0').isalpha()\
    \ and file_name_split[1].lower() in ['txt', 'exe', 'dll']\n        else:\n   \
    \         valid_name = False\n        \n    # Return the result\n    return valid_name\n\
    \n", "    \n    # Extract the integer part of a file's name starting from its\
    \ initial digit\n    file_name_int = int(file_name[0])\n    # Extract the extension\
    \ part of the file's name\n    extension = file_name[1:]\n    # Check for invalid\
    \ substring in the extension part\n    if any([char not in string.ascii_uppercase\
    \ or char not in string.ascii_lowercase\n            for char in extension]):\n\
    \        return 'No'\n    # Check for invalid file name\n    if file_name_int\
    \ < 0 or file_name_int > 9:\n        return 'No'\n    # Check for valid file name\n\
    \    elif '.' not in extension:\n        return 'No'\n    else:\n        return\
    \ 'Yes'\n    ", "    \n    # 1. Check the file name's length\n    if len(file_name)\
    \ != 3:\n        return 'No'\n    \n    # 2. Check the file name's format\n  \
    \  if '.' not in file_name:\n        return 'No'\n    \n    # 3. Check the substring\
    \ before the first dot\n    if not file_name[0] == '':\n        return 'No'\n\
    \    \n    # 4. Check the substring after the dot\n    if '.' not in file_name[2:]:\n\
    \        return 'No'\n    \n    # 5. Check the file name's format\n    if file_name[2:].lower()\
    \ not in ['exe', 'dll', 'txt']:\n        return 'No'\n    \n    return 'Yes'\n\
    </cell>\n<cell>", "    # TODO: FILL IN THE FOLLOWING SECTIONS OF CODE TO MAKE\
    \ YOUR CODE WORK!\n    file_name = file_name.lower()\n    dot_pos = file_name.find('.')\n\
    \    dot_pos = dot_pos if dot_pos > 0 else 0\n    if dot_pos == -1 or len(file_name)\
    \ < 3:\n        return 'No'\n    if dot_pos > 3:\n        return 'No'\n    if\
    \ file_name[0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n   \
    \ dot_pos = dot_pos - 1\n    name_letter = file_name[dot_pos]\n    allowed_names\
    \ = ['txt', 'exe', 'dll']\n    if name_letter not in 'abcdefghijklmnopqrstuvwxyz':\n\
    \        return 'No'\n    if dot_pos > 0 and name_letter not in allowed_names:\n\
    \        return 'No'\n    return 'Yes'\n", "    \n    # Initializing some variables\n\
    \    \n    # Checking if there are more than three digits (not including zero)\n\
    \    if len(file_name) > 3:\n        print('The file name contains more than three\
    \ digits (not including zero).')\n        return 'No'\n    \n    # Checking if\
    \ there are two dots in the file name\n    if file_name.count('.') != 1:\n   \
    \     print('The file name contains two dots (\".\").')\n        return 'No'\n\
    \    \n    # Checking if the substring before the dot is not empty\n    if file_name.startswith('.'):\n\
    \        print('The substring before the dot is empty')\n        return 'No'\n\
    \    \n    # Checking if there is a letter in the substring before the dot\n \
    \   if not (file_name[:file_name.index('.') + 1].isalpha()):\n        print('The\
    \ substring before the dot does not start with a letter')\n        return 'No'\n\
    \    \n    # Checking if the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n    if 'exe' in file_name.lower():\n        print('The substring\
    \ after the dot is \"exe\".')\n        return 'Yes'\n    elif 'dll' in file_name.lower():\n\
    \        print('The substring after the dot is \"dll\".')\n        return 'Yes'\n\
    \    else:\n        print('The substring after the dot is not one of the following:\
    \ [\"txt\", \"exe\", \"dll\"].')\n        return 'No'\n    ", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    try:\n        assert file_name.count(\"\
    .\") == 1 and file_name.count(\"0\") == 0 and \\\n            file_name.count(\"\
    9\") == 0\n        assert file_name[0] in string.ascii_lowercase and file_name[0]\
    \ in string.ascii_uppercase\n        assert file_name.split('.')[-1].lower() in\
    \ [\"txt\", \"exe\", \"dll\"]\n        return file_name\n    except Exception:\n\
    \        return f\"No\"\n\n", "    try: \n        int(file_name[:3])\n    except\
    \ ValueError:\n        return 'No'\n    if len(file_name) == 3:\n        return\
    \ 'Yes'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name[:1].isalpha()\
    \ not in ['a', 'A']:\n        return 'No'\n    if file_name[-3:] not in ['txt',\
    \ 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n", "    \n    # Initialize\
    \ 'valid' and 'error' variables (to be returned)\n    valid = False\n    error\
    \ = \"\"\n    \n    # Get the file's name (without extension)\n    file_name =\
    \ file_name.split('.')[0]\n    \n    # Validate that there's at least 1 digit\n\
    \    if len(file_name) < 3:\n        error = \"The file's name contains less than\
    \ three digits ('0'-'9').\"\n        valid = False\n    \n    # Validate that\
    \ the substring before the dot is not empty\n    if file_name.startswith('.'):\n\
    \        error = \"The substring before the dot should not be empty.\"\n     \
    \   valid = False\n    \n    # Validate that the substring after the dot is not\
    \ empty, \n    # and that it starts with one of these latin alphabet letters:\
    \ ['a'-'z', 'A'-'Z']\n    valid_letters = \"aA\"\n    error_message = \"The substring\
    \ after the dot should be one of these letters: ['a'-'z', 'A'-'Z'].\"\n    if\
    \ file_name.endswith('.'):\n        error_message += \"\\nThe dot should be the\
    \ last character.\"\n    if file_name.count('.') == 1:\n        if file_name[-1:]\
    \ in valid_letters:\n            valid = True\n        else:\n            error\
    \ = error_message\n    else:\n        error = error_message\n        valid = False\n\
    \        \n    return valid, error\n</cell>\n<text>\nTask 5.1. Write a Python\
    \ function which takes a string representing a file's name, and returns the file's\
    \ extension. For example, the file's name is 'example.txt', the function should\
    \ return '.txt'. The function should return None if an invalid file's name is\
    \ provided.\nFor example, the file's name is 'example', the function should return\
    \ None. The function should return None if an invalid file's name is provided.\n\
    Examples:\n>>> file_name_check('example.txt')\n'.txt'\n>>> file_name_check('example')\n\
    None\n>>> file_name_check('example')\nNone\n>>> file_name_check('example2')\n\
    'None'\n>>> file_name_check('1')\nNone\n>>> file_name_check('example2.txt.exe')\n\
    '.exe'\n\"\"\"\n", "    return '.' in file_name and \\\n        file_name[0].isalpha()\
    \ and \\\n        file_name[1:].isdigit() and \\\n        '.' not in file_name[:file_name.find('.')]\
    \ and \\\n        file_name[file_name.find('.')+1:].lower() in ['txt', 'exe',\
    \ 'dll']\n\n", "    if len(file_name) <= 3 or file_name.count('.') > 1:\n    \
    \    return 'No'\n    elif not file_name.startswith('a') and not file_name.startswith('A')\
    \ \\\n            or not file_name.endswith('.'):\n        return 'No'\n    elif\
    \ not file_name.count('.') == 1:\n        return 'No'\n    elif not file_name.split('.')[0].isalpha():\n\
    \        return 'No'\n    elif not file_name.split('.')[1] in {'txt', 'exe', 'dll'}:\n\
    \        return 'No'\n    else:\n        return 'Yes'\n</code>\n<|/ a |>\n<| a\
    \ tags=python,if-statement,python-3.x |>\nAnother option is to use a regular expression:\n\
    <code>\nimport re\n", "    \n    i = 0\n    while i < len(file_name):\n      \
    \  if (file_name[i] == '.') and (i > 0) and (file_name[i - 1] != ' '):\n     \
    \       i += 1\n        if file_name[i] in string.ascii_letters:\n           \
    \ i += 1\n        elif file_name[i] == '.' and (i < len(file_name) - 1):\n   \
    \         if file_name[i + 1] in string.ascii_letters:\n                i += 1\n\
    \            elif file_name[i + 1] == '.':\n                i += 1\n         \
    \   else:\n                return 'No'\n        elif file_name[i] == '.' and (i\
    \ >= len(file_name) - 1):\n            return 'No'\n        i += 1\n    \n   \
    \ if (file_name[len(file_name) - 1] in string.ascii_letters) or (file_name[len(file_name)\
    \ - 1] == '.'):\n        return 'Yes'\n    else:\n        return 'No'\n\n", " \
    \   \n    # Remove all dots from the name.\n    file_name = file_name.replace('.',\
    \ '') \n\n    # Get the substring before the dot.\n    file_name_before_dot =\
    \ file_name.split('.')[0]\n\n    # Check the substring after the dot.\n    if\
    \ file_name_before_dot == '':\n        return 'No'\n    elif file_name_before_dot[0]\
    \ >= 'a' and file_name_before_dot[0] <= 'z':\n        return 'No'\n    elif file_name_before_dot[0]\
    \ >= '0' and file_name_before_dot[0] <= '9':\n        return 'No'\n    else:\n\
    \        return 'Yes'\n", "    if file_name.count('.') == 1:\n        if file_name.startswith('.')\
    \ or file_name.startswith('1'):\n            if file_name[0] == '.':\n       \
    \         if file_name[0].isalpha():\n                    if file_name[1] == '.'\
    \ or file_name[1] == '1' or file_name[1].isdigit():\n                        if\
    \ file_name[2] == '.' or file_name[2] == '1' or file_name[2].isdigit():\n    \
    \                        return 'Yes'\n    return 'No'\n", "    \n    # Your code\
    \ goes here\n    \n    return \n</cell>\n<cell>", "    check = file_name.count(\"\
    0123456789\") != 0\n    check = check and file_name.count(\".\") == 1\n    check\
    \ = check and file_name[0] != \"\"\n    check = check and file_name[0] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    return check\n", "    \n    dot_count = 0\n    dot_pos = -1\n    \n    dot_pos\
    \ = file_name.rfind('.')\n    \n    if dot_pos == -1:\n        return file_name\n\
    \    \n    dot_count +=1\n    \n    if dot_count == 2:\n        return 'No'\n\
    \    \n    first_char = file_name[dot_pos]\n    \n    if first_char not in string.ascii_letters:\n\
    \        return 'No'\n    \n    if len(file_name) <= 3:\n        return 'No'\n\
    \    \n    second_char = file_name[dot_pos+1]\n    \n    if second_char not in\
    \ string.ascii_letters + string.digits:\n        return 'No'\n    \n    if file_name[0]\
    \ != first_char or file_name[-1] != second_char:\n        return 'No'\n    \n\
    \    return file_name\n    \n    ", "    \n    pass\n\n", "    return re.match(r'[1-9][0-9]\\\
    .[a-zA-Z]+$', file_name) is not None\n", "    \n    try:\n        int(file_name[-3:])\n\
    \    except:\n        return 'No'\n    if '.' not in file_name:\n        return\
    \ 'No'\n    \n    if file_name[0] == '.':\n        return 'No'\n        \n   \
    \ if file_name[0].upper() not in ['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D', 'e',\
    \ 'E', 'f', 'F', 'g', 'G', 'h', 'H', 'i', 'I', 'j', 'J', 'k', 'K', 'l', 'L', 'm',\
    \ 'M', 'n', 'N', 'o', 'O', 'p', 'P', 'q', 'Q', 'r', 'R', 's', 'S', 't', 'T', 'u',\
    \ 'U', 'v', 'V', 'w', 'W', 'x', 'X', 'y', 'Y', 'z', 'Z']:\n        return 'No'\n\
    \    \n    if not file_name[1:].isdigit():\n        return 'No'\n    \n    extension\
    \ = file_name.split('.')\n    extension = [e for e in extension if e not in ['.txt',\
    \ 'exe', 'dll']]\n    if len(extension) > 1:\n        return 'No'\n    \n    return\
    \ 'Yes'\n</cell>\n<cell>", "    # Create a function which takes a string representing\
    \ a file's name, and returns \n    # 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    \n    # START CODE HERE\n\n    # END CODE HERE\n\
    </cell>\n<text>\nSolution\nRun the cell below to test your code.\n\n\n</text>\n\
    <cell>", "    if len(file_name) > 3:\n        return 'No'\n    elif file_name.count('.')!=1:\n\
    \        return 'No'\n    elif not file_name.startswith('[a-z]') and not file_name.startswith('[A-Z]')\
    \ and not file_name.startswith('_'):\n        return 'No'\n    elif not file_name.endswith('txt')\
    \ and not file_name.endswith('exe') and not file_name.endswith('dll'):\n     \
    \   return 'No'\n    return 'Yes'\n", "    \n    if re.search(r'[^0-9][.][^a-zA-Z]',\
    \ file_name):\n        return f'No'\n    \n    if re.search(r'[^a-zA-Z][.][^a-zA-Z]',\
    \ file_name):\n        return f'No'\n    \n    if re.search(r'[^a-zA-Z][.]', file_name):\n\
    \        return f'No'\n    \n    if re.search(r'[.][^a-zA-Z]', file_name):\n \
    \       return f'No'\n    \n    if re.search(r'[.]', file_name):\n        return\
    \ f'No'\n    \n    if re.search(r'[^a-zA-Z]', file_name):\n        return f'No'\n\
    \    \n    return 'Yes'\n</cell>\n<text>\nNow that we have defined the function\
    \ file_name_check, we can use it to check whether a file name is valid.\n\n\n\
    </text>\n<cell>", "    \n    # Write your solution here\n    # ...\n    pass\n",
  "    if not re.match(r\"^[0-9]{3}\\.[a-z][a-zA-Z0-9]+$\", file_name):\n        return\
    \ \"No\"\n    elif \".\" in file_name:\n        if file_name.split('.')[0] ==\
    \ '':\n            return \"No\"\n        elif file_name.split('.')[-1] not in\
    \ ['txt', 'exe', 'dll']:\n            return \"No\"\n        else:\n         \
    \   return \"Yes\"\n    else:\n        return \"Yes\"\n\n", "    \n    \n    #YOUR\
    \ CODE HERE\n    raise NotImplementedError()\n    \n    \n    ", "    \n    if\
    \ len(file_name) != 6:\n        return 'No'\n    else:\n        dot_index = file_name.find('.')\n\
    \        if dot_index == -1:\n            return 'No'\n        elif dot_index\
    \ != 0 and file_name[0].isalpha() \\\n        and file_name[0].islower():\n  \
    \          return 'Yes'\n        else:\n            return 'No'\n\n", "    \n\
    \    dots = file_name.count(\".\")\n    letter = file_name[0]\n    \n    if dots\
    \ == 0 and letter not in string.ascii_letters and letter not in string.digits:\n\
    \        return \"No\"\n    else:\n        return \"Yes\"\n    ", "    \n    digit_check\
    \ = False\n    dot_check = False\n    first_letter_check = False\n    dot_name_check\
    \ = False\n    dot_name_check2 = False\n    dot_name_check3 = False\n    dot_name_check4\
    \ = False\n    dot_name_check5 = False\n    dot_name_check6 = False\n    dot_name_check7\
    \ = False\n    dot_name_check8 = False\n    dot_name_check9 = False\n\n    if\
    \ '0' > file_name[0] or file_name[0] > '9':\n        return 'No'\n    elif '.'\
    \ != file_name[file_name.rfind('.')+1:]:\n        return 'No'\n    else:\n   \
    \     for i in range(1, len(file_name)):\n            if file_name[i] > '9':\n\
    \                return 'No'\n            elif '.' == file_name[file_name.rfind('.')+1:]:\n\
    \                dot_name_check = True\n            elif not file_name[i-1].isalpha():\n\
    \                return 'No'\n            elif file_name[i-1] not in string.ascii_letters\
    \ + string.digits:\n                return 'No'\n            elif file_name[i]\
    \ in ['txt', 'exe', 'dll']:\n                dot_name_check2 = True\n        \
    \    elif '.' == file_name[file_name.rfind('.')+1:]:\n                dot_name_check3\
    \ = True\n            elif '.' == file_name[file_name.rfind('.')+1:]:\n      \
    \          dot_name_check4 = True\n            elif '.' == file_name[file_name.rfind('.')+1:]:\n\
    \                dot_name_check5 = True\n            elif '.' == file_name[file_name.rfind('.')+1:]:\n\
    \                dot_name_check6 = True\n            elif '.' == file_name[file_name.rfind('.')+1:]:\n\
    \                dot_name_check7 = True\n            elif '.' == file_name[file_name.rfind('.')+1:]:\n\
    \                dot_name_check8 = True\n            elif '.' == file_name[file_name.rfind('.')+1:]:\n\
    \                dot_name_check9 = True\n            elif file_name[file_name.rfind('.')\
    \ + 1:] not in ['txt', 'exe', 'dll']:\n                return 'No'\n         \
    \   else:\n                dot_check = True\n            if dot_check and dot_name_check\
    \ and dot_name_check2 and dot_name_check3 and \\\n                    dot_name_check4\
    \ and dot_name_check5 and dot_name_check6 and dot_name_check7 and \\\n       \
    \             dot_name_check8 and dot_name_check9:\n                digit_check\
    \ = True\n                break\n        if digit_check and dot_check:\n     \
    \       return 'Yes'\n        else:\n            return 'No'\n    ", "    dot_position\
    \ = file_name.rfind('.')\n    if dot_position == -1:\n        return 'No'\n  \
    \  elif dot_position > 0 and file_name[:dot_position].isalpha() == False:\n  \
    \      return 'No'\n    elif dot_position + 1 == len(file_name) and file_name[dot_position:].lower()\
    \ not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return\
    \ 'Yes'\n    ", "    # your code here\n    \n    return file_name.replace('.',\
    \ '').isdigit() and len(file_name.split('.')) == 2 and any(x.isalpha() and x.islower()\
    \ for x in file_name.split('.')[0].split(' ')) and file_name.split('.')[-1] in\
    \ set(['txt', 'exe', 'dll'])\n\n", "    # Function which checks if the file's\
    \ name is valid:\n    # - There should not be more than three digits ('0'-'9')\
    \ in the file's name.\n    # - The file's name contains exactly one dot '.'\n\
    \    # - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    # the latin alphapet ('a'-'z' and 'A'-'Z').\n    # - The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    #\
    \ Parameters:\n    # - file_name: The name of the file.\n    # Returns:\n    #\
    \ - 'Yes' if all the conditions are satisfied, and 'No' otherwise.\n    if re.search(r'\\\
    d{3}', file_name) or re.search(r'\\.', file_name):\n        return 'No'\n    else:\n\
    \        name_split = file_name.split('.')\n        if len(name_split) < 2:\n\
    \            return 'No'\n        else:\n            letter = name_split[0][0].upper()\n\
    \            if letter not in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n\
    \                return 'No'\n            elif len(letter) != 1:\n           \
    \     return 'No'\n            else:\n                for name in name_split[1:]:\n\
    \                    if name not in ['txt', 'exe', 'dll']:\n                 \
    \       return 'No'\n                return 'Yes'\n\n", "    \n    length = len(file_name)\n\
    \    if length >= 3 and file_name[0] not in ('0', '9') and file_name[0] != '.'\
    \ and file_name[0] != '.\\\\' and file_name[0] != '\\\\' and file_name[0] != '\\\
    \\\\'' and file_name[0] != '\\\\\\\"' and file_name[0] != '\"':\n        return\
    \ 'No'\n    elif file_name[0] == '.' and '.' not in file_name[1:]:\n        return\
    \ 'No'\n    elif file_name[0] == '.' and '.' in file_name[1:]:\n        return\
    \ ''\n    elif file_name[0] == '.':\n        return '.'\n    elif file_name[0]\
    \ == '.' and file_name[1] != '\\\\':\n        return 'No'\n    elif file_name[0]\
    \ == '.' and file_name[1] == '\\\\':\n        return 'No'\n    elif file_name[0]\
    \ == '.' and file_name[1] == '\\\\' and file_name[2] != '\\'' and file_name[2]\
    \ != '\\\"':\n        return 'No'\n    else:\n        return 'Yes'\n</code>\n\
    <|/ a dscore=0 tags=filenames,python-3.x |>\n<| a tags=filenames,python-3.x |>\n\
    Using Regular Expression is more efficient then using the string manipulation\
    \ methods.\n<code>\nimport re\n", "    \n    # Your code here\n\n</cell>\n<text>\n\
    Test your function below to see how it works.\n\n\n</text>\n<cell>", "    \n \
    \   file_name = file_name.replace(' ', '')\n    if len(file_name) != 5:\n    \
    \    return 'No'\n    \n    if file_name[0] not in ['0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9']:\n        return 'No'\n    \n    if '..' in file_name:\n\
    \        return 'No'\n    \n    name_split = file_name.split('.')\n    \n    dot_found\
    \ = name_split[-2] == 'txt'\n    \n    if dot_found:\n        dot_split = name_split[-2].split('.')\n\
    \        dot_length_check = dot_split[1] in ['txt', 'exe', 'dll']\n        dot_before_check\
    \ = dot_split[0] == 'a'\n        dot_after_check = dot_split[2] in ['txt', 'exe',\
    \ 'dll']\n        if dot_length_check or dot_before_check or dot_after_check:\n\
    \            return 'No'\n    \n    letter_check = name_split[0] in ['a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    if letter_check:\n        return\
    \ 'No'\n    \n    return 'Yes'\n</cell>\n<cell>", "    if file_name.count('.')\
    \ != 1:\n        return f'No, there is {file_name.count(\".\")} dots in the file'\n\
    \    \n    if file_name.count('.') == 3:\n        if file_name[0] != 'a' and file_name[0]\
    \ != 'A':\n            return f'No, the file\\'s name must start with a letter\
    \ from the latin alphabet '\n    if file_name.count('.') > 3:\n        return\
    \ f'No, there must be only one dot '.\n\n    file_name_split = file_name.split('.')\n\
    \    if file_name_split[-1] not in ['txt', 'exe', 'dll']:\n        return f'No,\
    \ the file\\'s name should contain one of these extensions: txt, exe, dll'\n \
    \   return 'Yes'\n\n", "    file = file_name\n    if file[0] == '.':\n       \
    \ file = file[1:]\n    if file.startswith('0') or file.startswith('1') or file.startswith('2')\
    \ or file.startswith('3') or file.startswith('4') or file.startswith('5') or file.startswith('6')\
    \ or file.startswith('7') or file.startswith('8') or file.startswith('9'):\n \
    \       return 'No'\n    elif len(file) != 1:\n        return 'No'\n    elif not\
    \ file.split('.')[-1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    elif\
    \ not file[:1].isalpha():\n        return 'No'\n    elif not file[1:].lower()\
    \ in ['exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
  "    \n    ", "    \n    \n    \n    # Your code here\n    file_name_exp = re.compile(r'[0-9]\\\
    .')\n    file_name_exp2 = re.compile(r'[a-zA-Z]')\n    file_name_exp3 = re.compile(r'^[a-zA-Z]\\\
    .[a-zA-Z]')\n    \n    \n    if file_name_exp.match(file_name) or file_name_exp2.match(file_name)\
    \ or file_name_exp3.match(file_name):\n        return 'Yes'\n    else:\n     \
    \   return 'No'\n</cell>\n<cell>\nfile_name_check('example.txt')\n</cell>\n<cell>\n\
    file_name_check('1example.dll')\n</cell>\n<text>\n1.2 Write a Python program to\
    \ check whether a Python script file is a Python program file or not.\nInput:\
    \ A file path of a Python script file\nOutput: 'Yes' or 'No'\n\nExamples:\n  \
    \  >>> is_python_program('example.py')\n    'Yes'\n    >>> is_python_program('example.pyw')\n\
    \    'No'\n    >>> is_python_program('1example.py')\n    'No'\n    >>> is_python_program('example.pyt')\n\
    \    'No'\n    >>> is_python_program('example.pyc')\n    'No'\n    >>> is_python_program('example.pyo')\n\
    \    'No'\n    >>> is_python_program('example.pys')\n    'No'\n    >>> is_python_program('example.pyd')\n\
    \    'No'\n    >>> is_python_program('example.py')\n    'Yes'\n    >>> is_python_program('example.pyw')\n\
    \    'No'\n    >>> is_python_program('1example.py')\n    'No'\n    >>> is_python_program('example.pyt')\n\
    \    'No'\n    >>> is_python_program('example.pyc')\n    'No'\n    >>> is_python_program('example.pyo')\n\
    \    'No'\n    >>> is_python_program('example.pys')\n    'No'\n    >>> is_python_program('example.pyd')\n\
    \    'No'\n    >>> is_python_program('example.py')\n    'Yes'\n    >>> is_python_program('example.pyw')\n\
    \    'No'\n    >>> is_python_program('1example.py')\n    'No'\n    >>> is_python_program('example.pyt')\n\
    \    'No'\n    >>> is_python_program('example.pyc')\n    'No'\n    >>> is_python_program('example.pyo')\n\
    \    'No'\n    >>> is_python_program('example.pys')\n    'No'\n    >>> is_python_program('example.pyd')\n\
    \    'No'\n    >>> is_python_program('example.py')\n    'Yes'\n    >>> is_python_program('example.pyw')\n\
    \    'No'\n    >>> is_python_program('1example.py", "    \n    if re.match(r'[0-9]{3}',\
    \ file_name) is None: # checks if the file's name is invalid\n        return 'No'\n\
    \    elif '.' not in file_name:\n        return 'No'\n    elif not re.search(r'^[a-zA-Z]',\
    \ file_name[0]): # checks if the file's name is invalid\n        return 'No'\n\
    \    elif file_name[0] != file_name[0].upper(): # checks if the file's name is\
    \ invalid\n        return 'No'\n    elif file_name[-1] not in ['txt', 'exe', 'dll']:\n\
    \        return 'No'\n    else:\n        return 'Yes'\n", "    if not re.search(r'[0-9]\\\
    {1,3\\}', file_name):\n        return 'No'\n    elif '.' not in file_name:\n \
    \       return 'No'\n    elif file_name.startswith('.'):\n        return 'No'\n\
    \    elif file_name.startswith('a') or file_name.startswith('A'):\n        return\
    \ 'No'\n    else:\n        return 'Yes'\n", "    \n    file_name_split = file_name.split('.')\n\
    \    \n    file_name_length = len(file_name_split)\n    \n    if file_name_length\
    \ > 3 and len(file_name_split[0]) == 0 and len(file_name_split[1]) == 0:\n   \
    \     return 'No'\n    elif file_name_length != 2 and file_name_split[0] not in\
    \ ['', 'txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n\
    </cell>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    # validate the file's name\n    if re.match(file_pattern_check, file_name)\
    \ is None:\n        return 'No'\n\n    # validate the file's name\n    if len(file_name.split(\"\
    .\")) != 2 or file_name.split(\".\")[0] != \"\":\n        return 'No'\n\n    if\
    \ file_name.split(\".\")[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\
    \n    if file_name.split(\".\")[1].startswith('0'):\n        return 'No'\n\n \
    \   if file_name.split(\".\")[1].startswith('1'):\n        return 'No'\n\n   \
    \ if file_name.split(\".\")[1].startswith('2'):\n        return 'No'\n\n    if\
    \ file_name.split(\".\")[1].startswith('3'):\n        return 'No'\n\n    if file_name.split(\"\
    .\")[1].startswith('4'):\n        return 'No'\n\n    if file_name.split(\".\"\
    )[1].startswith('5'):\n        return 'No'\n\n    if file_name.split(\".\")[1].startswith('6'):\n\
    \        return 'No'\n\n    if file_name.split(\".\")[1].startswith('7'):\n  \
    \      return 'No'\n\n    if file_name.split(\".\")[1].startswith('8'):\n    \
    \    return 'No'\n\n    if file_name.split(\".\")[1].startswith('9'):\n      \
    \  return 'No'\n\n    if file_name.split(\".\")[1] != \"\":\n        return 'No'\n\
    \n    # checks if the file name is valid with the constraints above\n    return\
    \ 'Yes'\n\n", "    if len(file_name) > 3:\n        return 'No'\n    if '.' not\
    \ in file_name:\n        return 'No'\n    if file_name.startswith('.'):\n    \
    \    return 'No'\n    if file_name[0].isalpha() and file_name[1].isalpha() and\
    \ file_name[2] in '012345678':\n        return 'Yes'\n    return 'No'\n\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    # Your code here\n\
    \    \n    return file_name.replace('.', '').replace(' ', '').replace('-', '').startswith('0')\
    \ \\\n            or file_name.replace('.', '').replace(' ', '').replace('-',\
    \ '').isalpha() \\\n            or file_name.split('.')[0] == ''\\\n         \
    \   or file_name.split('.')[1] in 'exe,dll'\n</cell>\n<cell>", "    file_name\
    \ = file_name.strip()\n    \n    match = re.search(r'\\d{3}[^.]*\\.[^.]+$', file_name)\n\
    \    \n    if match:\n        return 'Yes'\n    else:\n        return 'No'\n \
    \   ", "    \n    # your code here\n    \n    if file_name.count('.') != 1:\n\
    \        return 'No'\n    elif not file_name.startswith('a') and not file_name.startswith('A')\
    \ and not file_name.startswith('0') and not file_name.startswith('9'):\n     \
    \   return 'No'\n    elif file_name.split('.')[-1] not in ['exe', 'dll', 'txt']:\n\
    \        return 'No'\n    else:\n        return 'Yes'\n</cell>\n<cell>", "   \
    \ valid = 'Yes'\n    if file_name.count('.') != 1:\n        valid = 'No'\n   \
    \ return valid\n", "    # YOUR CODE HERE\n    raise NotImplementedError\n    return\
    \ file_name\n\nassert check_valid_name(file_name_check('example.txt')) == 'Yes'\n\
    assert check_valid_name(file_name_check('1example.dll')) == 'No'\n</cell>\n<cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
