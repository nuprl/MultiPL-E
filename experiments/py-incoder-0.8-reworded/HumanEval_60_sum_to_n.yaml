name: HumanEval_60_sum_to_n
language: py
prompt: "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums\
  \ numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n \
  \   5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n\
  \    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6)\
  \ == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert\
  \ candidate(100) == 5050\n\ndef test_check():\n    check(sum_to_n)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return 0\n    if n < 10:\n        return n\n\
    \    return sum_to_n(n - 1) + sum_to_n(n)\n\n", "    sum_ = 0\n    while n > 0:\n\
    \        sum_ += n\n        n -= 1\n    return sum_\n\n", "    if n == 1:\n  \
    \      return 1\n    else:\n        return n * sum_to_n(n-1)\n", "    return reduce(lambda\
    \ x, y: x + y, range(1, n + 1))\n\n", "    ans = 0\n    for i in range(1, n +\
    \ 1):\n        ans += i\n    return ans\n\n", "    sum_ = 0\n    while n > 0:\n\
    \        sum_ += n\n        n -= 1\n    return sum_\n", "    s = 0\n    for i\
    \ in range(1, n + 1):\n        s += i\n    return s\n", "    a, b = 1, 0\n   \
    \ while a <= n:\n        a, b = b, a + b\n    return b\n\n", "    if n == 1:\n\
    \        return 1\n    return sum(range(n + 1)) \n", "    return sum(range(1,\
    \ n + 1))\n\n", "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n\
    \    return sum\n\n", "    total = 0\n    for i in range(1, n + 1):\n        total\
    \ += i\n    return total\n\n", "    return sum([i for i in range(1, n + 1)])\n\
    \n", "    s = 0\n    for x in range(1, n + 1):\n        s += x\n    return s\n",
  "    return sum(i + 1 for i in range(1, n))\n\n", "    # we could also do this with\
    \ an array and for loop\n    return sum(range(1, n+1))\n\n", "    return sum(i\
    \ ** 2 for i in range(1, n+1))\n\n", "    if n == 1:\n        return 1\n    return\
    \ n + sum_to_n(n-1)\n", "    return sum(i * i for i in range(1, n + 1))\n\n",
  "    return sum(range(1, n + 1))\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
