name: HumanEval_36_fizz_buzz
language: py
prompt: "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit\
  \ 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n\
  \    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78)\
  \ == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert\
  \ candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000)\
  \ == 639\n    assert candidate(100000) == 8026\n\ndef test_check():\n    check(fizz_buzz)\n\
  \ntest_check()\n"
completions: ["    if n <= 0 or n % 11 == 0:\n        return 0\n    if n % 13 == 0:\n\
    \        return 1\n    return fizz_buzz(n // 11) + 1\n", "    assert n >= 0\n\n\
    \    if n < 11:\n        return 0\n    if n % 11 == 0 and n % 13 == 0:\n     \
    \   return 2\n    return 3\n\n", "    return sum(int(c % 11 or c % 13) for c in\
    \ str(n))\n\n", "    return sum(n % 11 == 0 or n % 13 == 0 for n in range(1, n\
    \ + 1))\n\n\n@lru_cache(maxsize=32)", "    count = 0\n    for num in range(1,\
    \ n + 1):\n        if num % 11 == 0 or num % 13 == 0:\n            count += 1\n\
    \    return count\n\n", "    count=0\n    for i in range(1,n+1):\n        if i%11==0\
    \ and i%13==0:\n            count+=1\n    return count\n", "    if n >= 100:\n\
    \        if n % 10 == 7:\n            return 1\n        else:\n            return\
    \ 0\n    else:\n        if n % 10 == 3:\n            return 1\n        elif n\
    \ % 10 == 5:\n            return 2\n        elif n % 10 == 7:\n            return\
    \ 1\n        elif n % 10 == 9:\n            return 3\n        elif n % 10 == 13:\n\
    \            return 1\n        elif n % 10 == 15:\n            return 2\n    \
    \    else:\n            return 0\n\n", "    if n % 11 == 0 and n % 13 == 0:\n\
    \        return 0\n    if n % 11 == 0:\n        return 1\n    if n % 13 == 0:\n\
    \        return 2\n\n", "    counts = Counter([str(n) for n in range(1, n + 1)])\n\
    \    return counts.get(7, 0)\n\n", "    if n % 11 == 0:\n        ans = 1\n   \
    \ elif n % 13 == 0:\n        ans = 2\n    else:\n        ans = fizz_buzz_iterative_helper(n\
    \ // 11)\n    return ans\n\n", "    # FizzBuzz algorithm\n    # Iterate over the\
    \ number from 1 to n\n    for i in range(1, n + 1):\n        if i % 11 == 0 or\
    \ i % 13 == 0:\n            fizzbuzz = i\n    return fizzbuzz\n\n", "    return\
    \ len([num for num in range(1, n + 1) if num % 11 == 0 or num % 13 == 0])\n\n",
  "    return sum(digit == 7 for digit in str(n))\n\n", "    if n % 11 == 0:\n   \
    \     return 2\n    elif n % 13 == 0:\n        return 3\n    return 0\n\n", " \
    \   return fizz_buzz_helper(n)\n\n", "    if n == 0:\n        return 0\n    elif\
    \ n % 11 == 0:\n        return fizz_buzz(n // 11)\n    elif n % 13 == 0:\n   \
    \     return fizz_buzz(n // 13) + 1\n    else:\n        return 1\n\n", "    count\
    \ = 0\n    while n > 0:\n        if n % 11 == 0 or n % 13 == 0:\n            count\
    \ += 1\n        n //= 10\n    return count\n\n", "    if n % 11 == 0:\n      \
    \  return fizz_buzz(n // 11)\n    if n % 13 == 0:\n        return fizz_buzz(n\
    \ // 13) + 1\n    return 0\n\n</cell>\n<text>\nPart 3\nA prime number is a natural\
    \ number greater than 1 that has no positive divisors other than 1 and itself.\n\
    \nFor example, 6 is a prime number, because 6 = 2*3.\n\n\n</text>\n<cell>", " \
    \   count = 0\n    for d in str(n):\n        if d == \"7\":\n            count\
    \ += 1\n        elif d == \"3\":\n            count += 1\n        else:\n    \
    \        if n % int(d) == 0 and int(d) % 11 == 0 or int(d) % 13 == 0:\n      \
    \          count += 1\n    return count\n\n", "    return sum([int(str(x)[0])\
    \ != '7' for x in str(n)])\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
