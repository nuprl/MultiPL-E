name: HumanEval_91_is_bored
language: py
prompt: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of\
  \ words, and your task is to count the number\n    of boredoms. A boredom is a sentence\
  \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
  \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
  \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
  \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
  \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I will\
  \ be productive. will kill It') == 2\n    assert candidate('You and I are going\
  \ for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
completions: ["    return sum(1 for w in S.split() if w == 'I')\n\n", "    # Get the\
    \ count of sentences that start with the word \"I\".\n    count = 0\n    for word\
    \ in S.split():\n        if word == 'I':\n            count += 1\n    return count\n",
  "    S = S.lower()\n    boredom = 0\n    boredom_words = ['i','a','the']\n    boredom_letters\
    \ = ['.', '!', '?']\n    for word in S:\n        if word.lower() in boredom_words:\n\
    \            boredom = 1\n        if word.lower() in boredom_letters:\n      \
    \      boredom = 0\n    return boredom\n", "    boredoms = 0\n    # Your code\
    \ here\n    for sentence in S.split('.'):\n        if sentence.startswith(\"I\"\
    ):\n            boredoms += 1\n    return boredoms\n</cell>\n<cell>\nassert is_bored('Hello\
    \ world') == 0\nassert is_bored('The sky is blue. The sun is shining. I love this\
    \ weather.') == 1\n</cell>\n<text>\n6. Capitalization conversion\nThe remainder\
    \ of this section will teach you how to convert strings to\nlowercase, uppercase\
    \ and titlecase.\n\n.lower() - converts all the characters in a string to lowercase.\n\
    .upper() - converts all the characters in a string to uppercase.\n.title() - converts\
    \ the first character of each word to uppercase and the rest to lowercase.\n\n\
    Don't be surprised if your solutions don't produce the same results each time.\
    \ That's ok! The point of this is to gain practice writing solutions that are\
    \ robust to small differences in spelling.\n\n\n</text>\n<cell>\ntext = 'Hello\
    \ World'\nprint(text.lower())\nprint(text.upper())\nprint(text.title())\n</cell>\n\
    <text>\nYou can read about string methods in the documentation.\n\n\n</text>\n\
    <cell>\ntext = 'Hello World'\nprint(text.lower())\nprint(text.upper())\nprint(text.title())\n\
    </cell>\n<text>\nTo perform string operations in Python, be sure to use the print(\
    \ ) function rather than print statement.\n\nYou will often find the print( )\
    \ function useful as a \"debugging tool,\" as it lets you inspect and validate\
    \ your variables more easily.\n\n\n</text>\n<text>\nTo convert a whole string\
    \ into lowercase or uppercase, you can use the lower( ) or upper( ) method.\n\n\
    The title( ) method will convert your entire string into uppercase and give the\
    \ first letter of each word in a title case format.\n\nLet's see some examples:\n\
    \n\n</text>\n<cell>\ntext = 'Hello World'", "    return len(S.split(\".\") if\
    \ \".\" in S else S.split(\"? \") if \"? \" in S else S.split(\"! \") if \"! \"\
    \ in S else [])\n</cell>\n<cell>\nassert is_bored(\"Hello world\") == 0\nassert\
    \ is_bored(\"The sky is blue\") == 1\nassert is_bored(\"The sun is shining\")\
    \ == 1\nassert is_bored(\"I love this weather.\") == 1\n</cell>\n<text>\nImplement\
    \ a function is_hungry that takes in an activity string and returns the number\
    \ of \"hungry\" things you can do to the activity. For example, is_hungry(\"Walking\
    \ on the Moon\") should return 1, and is_hungry(\"Playing guitar\") should return\
    \ 0.\n\nTo better understand the boredom problem we will have to think about counting\
    \ boredoms in a string. When you think about it think of how many times we would\
    \ need to call is_bored to figure out if someone is bored. Let's say that is_bored\
    \ returns 2 if the string starts with \"I\" and 0 otherwise. Then the boredom\
    \ count is given by the following formula:\n\n$$ X=\\begin{cases}\n    (I) &\\\
    text{ if } is_bored (\\text{ first word }) \\text{ return }2 \\\n    (II) &\\\
    text{ if } is_bored (\\text{ second word }) \\text{ return }2 \\\n    (III) &\\\
    text{ if } is_bored (\\text{ third word }) \\text{ return }2 \\\n    (IV) &\\\
    text{ if } is_bored (\\text{ last word }) \\text{ return }2 \\\n\\end{cases}\n\
    $$\n\nLet's define an helper function that will help us solve the problem. One\
    \ of the great things about Jupyter notebooks is that we can simply define helper\
    \ functions and then pass them into other functions as arguments and they will\
    \ be able to use them!\n\n\n</text>\n<cell>", "    #Your code here\n    return\
    \ 1 if S[0] in \"I\" else 0\n", "    S = S.lower()\n    boredoms = [w.lower()\
    \ for w in boredom_words if w.startswith(S.lower())]\n    return len(boredoms)\n\
    \n", "    boredom = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredom += 1\n    return boredom\n\n", "    boredoms = 0\n\n    for\
    \ word in S.split():\n        if word.startswith('I'):\n            boredoms +=\
    \ 1\n\n    return boredoms\n\n", "    # Complete the bored_count function below.\n\
    \    bored_count = 0\n    \n    \n    \n    return bored_count\n\n", "    return\
    \ sum([word in 'I. !?' for word in S.split('.')])\n\n", "    bored = 0\n    for\
    \ w in S.split('.'):\n        if w.startswith('I'):\n            bored += 1\n\
    \    return bored\n", "    return sum([1 for sent in S.split() if sent.startswith('I')]\
    \ or [1 if S.strip().lower().startswith('i') else 0])\n\n", "    pass\n</cell>\n\
    <cell>", "    bored_sentences = 0\n    for word in S.split():\n        if word[0]\
    \ == 'I':\n            bored_sentences += 1\n    return bored_sentences\n</cell>\n\
    <cell>\nassert is_bored('Hello world') == 0\nassert is_bored('The sky is blue.\
    \ The sun is shining. I love this weather') == 1\n</cell>\n<cell>", "    bored\
    \ = 0\n    # your code here\n    return bored\n", "    # BEGIN Practice #\n  \
    \  return boredom(S)\n    # END Practice #\n", "    return boredoms(S, 'I', '.',\
    \ '?' or '!')\n", "    # BEGIN PROBLEM 1\n    # This is a function template.\n\
    \    return 0\n    # END PROBLEM 1\n\n", "    boredom = 0\n\n    # write your\
    \ code here\n    for i in range(len(S)):\n        if S[i] == '.':\n          \
    \  boredom += 1\n        elif S[i] == '?':\n            boredom += 1\n       \
    \ elif S[i] == '!':\n            boredom += 1\n    \n    return boredom\n", " \
    \   boredoms = []\n    \n    bored = False\n    \n    for word in S.split():\n\
    \        if word.lower().startswith(\"i\"):\n            bored = True\n      \
    \  elif bored:\n            boredoms.append(word)\n    \n    if len(boredoms)\
    \ > 0:\n        return 1\n    \n    return 0\n\n", "    num_boredoms = 0\n   \
    \ for word in S.split():\n        if word.lower() == 'i':\n            num_boredoms\
    \ += 1\n    return num_boredoms\n\n", "    count = 0\n    sentences = S.split('.')\n\
    \    for sentence in sentences:\n        if sentence.startswith('I'):\n      \
    \      count += 1\n    return count\n\n", "    count = 0\n    for item in S.split('.'):\n\
    \        for item in item.split('?'):\n            if item == 'I':\n         \
    \       count += 1\n    return count\n", "    # Your code here\n    count = 0\n\
    \    for i in range(len(S)):\n        if S[i] == '.' or S[i] == '?' or S[i] ==\
    \ '!':\n            count += 1 \n    return count\n", "    i = 0\n    count =\
    \ 0\n    words = S.split()\n    start = words[0].lower()\n    end = words[-1].lower()\n\
    \    for word in words:\n        if word == 'I':\n            i += 1\n       \
    \ if word == start and i == 2:\n            count += 1\n        if word == end\
    \ and i == 2:\n            count += 1\n    return count\n\n", "    boredoms =\
    \ 0\n\n    S = S.lower()\n    S = S.strip()\n    S = S.split()\n    S = list(S)\n\
    \n    for word in S:\n        word = str(word)\n\n        if word.startswith(\"\
    i\") and word != \"i\":\n            boredoms = boredoms + 1\n\n    return boredoms\n\
    \n", "    return sum(1 for s in S.split('.')[0].split('?') if s.lower() == 'i')\n\
    </cell>\n<text>\nYour code should return an integer that represents the number\
    \ of boredoms present in the given string.\n\n\n</text>\n<cell>", "    count =\
    \ 0\n    sentence = S.split('.')\n    \n    for sentence in sentence:\n      \
    \  if \"I\" in sentence.lower():\n            count += 1\n    \n    return count\n\
    \    \n", "    bored_count = 0\n    for sentence in S:\n        if boredom_pattern.search(sentence):\n\
    \            bored_count += 1\n    return bored_count\n", "    return sum([1 for\
    \ w in S.split(\" \") if w.lower().startswith(\"i\")]) > 0\n\n", "    boredoms\
    \ = ['I']\n    bored_count = 1\n    i = 0\n    while i < len(S):\n        if S[i]\
    \ in boredoms:\n            bored_count += 1\n            boredoms.append(S[i])\n\
    \        i += 1\n    return bored_count\n", "    return sum(1 if S[i] not in {'.',\
    \ '?', '!', 'I'} else 0 for i in range(len(S)))\n", "    bored_count = 0\n   \
    \ for word in S.split():\n        if word.startswith('I'):\n            bored_count\
    \ += 1\n    return bored_count\n", "    boredom = 0\n    length = len(S)\n   \
    \ for i in range(length):\n        if S[i] in [\".\",\"?\",\"!\"]:\n         \
    \   boredom += 1\n    return boredom\n\n", "    boredoms = 0\n    count = 0\n\
    \    sentence_list = S.split('.')\n    sentence_list = [x for x in sentence_list\
    \ if x != '']\n    for x in sentence_list:\n        if x.startswith('I'):\n  \
    \          count += 1\n    boredoms = count\n    return boredoms\n\n", "    count\
    \ = 0\n    \n    # Your code here\n    return count\n</cell>\n<cell>", "    count\
    \ = 0\n    for i in S.split():\n        if i[0] == 'I':\n            count +=\
    \ 1\n    return count\n</cell>\n<cell>", "    count = 0\n    for sentence in S.split('.'):\n\
    \        if sentence.lower().startswith('i'):\n            count += 1\n    return\
    \ count\n\n", "    return count_boredoms(S) == 0\n\n", "    return sum(1 if S[i].lower()\
    \ == 'i' else 0 for i in range(len(S)))\n", "    boredom = 0\n    for word in\
    \ S.split(\" \"):\n        if word.startswith((\"I\", \"me\", \"you\", \"I\",\
    \ \"we\", \"us\", \"you\", \"I\", \"our\", \"our\", \"you\", \"your\", \"your\"\
    )):\n            boredom += 1\n    return boredom\n\n", "    boredoms = 0\n  \
    \  boredoms_count = 0\n    if S == '':\n        return 0\n    \n    for w in S.split():\n\
    \        if 'I' in w[:len(w)-1]:\n            boredoms_count += 1\n    \n    return\
    \ boredoms_count\n</cell>\n<text>\nProblem 2b\n\n</text>\n<cell>", "    count\
    \ = 0\n    words = list(filter(lambda x: x != '.', S.split(' ')))\n    for word\
    \ in words:\n        if word != 'I':\n            count += 1\n    return count\n",
  "    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n \
    \           count += 1\n    return count\n\n", "    boredoms = []\n    boredoms.append(S[:S.index('.')\
    \ - 1])\n    boredoms.append(S[:S.index('?') - 1])\n    boredoms.append(S[:S.index('!')\
    \ - 1])\n    return len(boredoms)\n\n", "    return boredom.count(S[0])\n\n",
  "    count = 0\n    for i in range(len(S) - 1, -1, -1):\n        if S[i] == '.'\
    \ or S[i] == '?' or S[i] == '!':\n            count += 1\n        else:\n    \
    \        break\n    return count\n\n", "    # TODO implement the is_bored function\
    \ here\n    return len(S) == 0 or S.find('I') == 0 or S.find('.')\n</cell>\n<cell>",
  "    count = 0\n    for word in S.split():\n        if word[0] in \"I!?.\":\n  \
    \          count += 1\n    return count\n", "    bored = 0\n    for i in S:\n\
    \        if i.lower() == 'i' or i.lower() == '!':\n            bored += 1\n  \
    \  return bored\n", "    return len(list(filter(lambda word: word.startswith('I'),\
    \ S.split('.'))))\n\n", "    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if '.' in S else 0\n    boredoms += 1 if '?' in S else\
    \ 0\n    boredoms += 1 if '!' in S else 0\n    return boredoms\n", "    return\
    \ sum(1 for w in S.split() if w.startswith('I'))\n", "    boredoms = 0\n    splits\
    \ = S.split('.')\n    for split in splits:\n        if split[0] == 'I':\n    \
    \        boredoms += 1\n    return boredoms\n\n", "    boredom_count = 0\n   \
    \ for word in S.split('.'):\n        boredom_count += word.startswith('I')\n \
    \   return boredom_count\n\n", "    count = 0\n    for word in S:\n        if\
    \ word.lower() == 'i':\n            count += 1\n    return count\n", "    S =\
    \ S.split('.')\n    if len(S) < 3:\n        return 0\n    elif S[0] == 'I':\n\
    \        return 1\n    else:\n        return sum(is_bored(sentence) for sentence\
    \ in S[1:])\n", "    boredoms = 0\n    S = S.lower()\n    S = S.replace('.', '\
    \ ')\n    S = S.replace('?', ' ')\n    S = S.replace('!', ' ')\n    for word in\
    \ S.split():\n        if word.lower() == 'i':\n            boredoms += 1\n   \
    \ return boredoms\n\n", "    boredoms = [i for i,s in enumerate(S) if s.lower()\
    \ in ['i','u','a','o']]\n    return len(boredoms)\n", "    count = 0\n    boredoms\
    \ = []\n    for sentence in S.split('.'):\n        boredoms.extend(sentence.split('?'))\n\
    \        boredoms.extend(sentence.split('!'))\n        boredoms.extend(sentence.split('.'))\n\
    \    boredoms = [x for x in boredoms if not x.startswith('I')]\n    for boredom\
    \ in boredoms:\n        if boredom.startswith('I'):\n            count += 1\n\
    \    return count\n\n", "    return sum(1 if s[0] == 'I' else 0 for s in S.split('.'))\
    \ + 1\n", "    return 1 if S[0]==\"I\" else 0\n", "    count = 0\n    word_list\
    \ = S.split('.')\n    for word in word_list:\n        if 'I' in word:\n      \
    \      count = count + 1\n    return count\n", "    # return 0 for non-bored sentences\n\
    \    # return 1 for bored sentences\n    # return 0 for non-bored sentences followed\
    \ by a bored sentence\n\n    boredom_counts = 0\n    if 'I' in S:\n        boredom_counts\
    \ += 1\n    for s in S:\n        if s == '.' or s == '?' or s == '!':\n      \
    \      boredom_counts += 1\n    return boredom_counts\n\n", "    \n    boredom\
    \ = 0\n    if S.startswith('I'):\n        boredom = 1\n        S = S[1:]\n   \
    \ for char in S:\n        if char == '.' or char == '?' or char == '!':\n    \
    \        boredom = boredom + is_bored(S[char+1:])\n    return boredom\n\n", " \
    \   return boredom_count(S, 'I')\n\n", "    boredom = 0\n    for word in S.split():\n\
    \        if word.startswith('I'):\n            boredom += 1\n    return boredom\n\
    \n", "    # +++your code here+++\n    boredoms = [i for i in S.split('.') if i\
    \ not in (\"?\",\"!\")]\n    boredom_count = boredoms.count(\"I\")\n    return\
    \ boredom_count\n\n", "    return bored(S, \"I\")\n\n", "    i = 0\n    boredom_count\
    \ = 0\n    boredom_words = S\n    for word in boredom_words:\n        if word\
    \ == 'I':\n            i += 1\n        elif word == '.' or word == '?' or word\
    \ == '!':\n            pass\n        else:\n            i += 1\n        boredom_count\
    \ += i\n    return boredom_count\n", "    count = 0\n    for word in S:\n    \
    \    if word == '.' or word == '?' or word == '!':\n            count += 1\n \
    \   return count\n", "    bored_count = 0\n    i = 0\n    while(i != len(S)):\n\
    \        if(S[i] == 'I'):\n            bored_count += 1\n        i += 1\n    return\
    \ bored_count\n\n", "    boredoms = 0\n    for i in range(len(S)):\n        if\
    \ S[i] == \"I\" and i > 0 and S[i - 1] == \".\" and S[i - 2] == \"!\":\n     \
    \       boredoms += 1\n    return boredoms\n\n", "    boredom = 0\n    boredom_count\
    \ = 0\n    for i in S:\n        if i == 'I':\n            boredom += 1\n     \
    \   elif i == '.' or i == '?' or i == '!':\n            boredom_count += 1\n \
    \   return boredom_count\n\n", "    # Your code here\n    return sum(not bored(sentence.split())\
    \ for sentence in S.split('.'))\n", "    \n    # your code here\n    boredom =\
    \ 0\n    \n    # check first and last character\n    if S[0] == 'I':\n       \
    \ boredom += 1\n    # check middle characters\n    if S[0] in '?!' and S[len(S)-1]\
    \ in '?!':\n        boredom += 1\n    \n    return boredom\n</cell>\n<cell>\n\
    assert is_bored(\"Hello world\") == 0, \"Bad bored\"\nassert is_bored(\"The sky\
    \ is blue.\") == 1, \"Bad bored\"\nassert is_bored(\"The sun is shining!\") ==\
    \ 0, \"Bad bored\"\nassert is_bored(\"I love this weather.\") == 1, \"Good bored\"\
    \n</cell>\n<text>\nTask\nCan you find a way to make this function faster?\nYou\
    \ can assume that the boredom string only contains characters '.', '!' or '?'.\n\
    \n\n</text>\n<cell>", "    return len([x for x in S.split(\" \") if x.startswith(\"\
    I\")])\n</cell>\n<cell>", "    boredoms = 0\n\n    for word in S.split():\n  \
    \      if word[0] == 'I':\n            boredoms += 1\n    return boredoms\n</code>\n\
    <|/ a |>\n<| a |>\n<code>", "    bored_count = 0\n    bored_list = ['.', '?',\
    \ '!']\n    for bored_character in bored_list:\n        if bored_character in\
    \ S:\n            bored_count += 1\n    return bored_count\n\n", "    if S ==\
    \ \"\":\n        return 0\n\n    count = 0\n    for w in S.split():\n        if\
    \ w == \"I\":\n            count += 1\n    return count\n", "    num_boredom =\
    \ 0\n    for word in S.split():\n        if word == 'I':\n            num_boredom\
    \ += 1\n    return num_boredom\n", "    count=0\n    words=S.split(' ')\n    for\
    \ word in words:\n        if word.startswith(\"I\"):\n            count+=1\n \
    \   return count\n    ", "    count = 0\n    for word in S.split():\n        if\
    \ word == 'I':\n            count += 1\n    return count\n", "    \n    # Your\
    \ code here\n    return 0\n    \n</cell>\n<cell>", "    boredoms = []\n    boredoms.append(S.split(\"\
    .\")[0])\n    return len(boredoms)\n</cell>\n<cell>\nis_bored(\"Hello World\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n</cell>\n<cell>", "    # get the first word\n    w = S[0]\n    count\
    \ = 0\n    # loop over all the words\n    for i in range(len(S)):\n        if\
    \ S[i] == '.':\n            if S[i-1] != '.':\n                count += 1\n  \
    \      else:\n            if S[i-1] == '.':\n                if S[i-2] != '.':\n\
    \                    count += 1\n    return count\n", "    if S == \"\":\n   \
    \     return 0\n    elif S in [\".\", \"?\", \"!\"]:\n        return 0\n    else:\n\
    \        return 1\n</cell>\n<cell>", "    bored_count = 0\n\n    words = S.split()\n\
    \    for word in words:\n        if word[0] == 'I':\n            bored_count +=\
    \ 1\n    return bored_count\n", "    bored_sents = []\n    for sentence in S.split('.'):\n\
    \        if sentence.startswith('I'):\n            bored_sents.append(sentence)\n\
    \    return len(bored_sents)\n", "    # write your code here\n    count = 0\n\
    \    S = S.lower()\n    if \"boredom\" in S:\n        return 1\n    if \"is\"\
    \ in S:\n        return 1\n    if \"isn't\" in S:\n        return 1\n    if \"\
    are\" in S:\n        return 1\n    if \"was\" in S:\n        return 1\n    if\
    \ \"were\" in S:\n        return 1\n    if \"can\" in S:\n        return 1\n \
    \   if \"can't\" in S:\n        return 1\n    if \"do\" in S:\n        return\
    \ 1\n    if \"doesn't\" in S:\n        return 1\n    if \"could\" in S:\n    \
    \    return 1\n    if \"couldn't\" in S:\n        return 1\n    if \"might\" in\
    \ S:\n        return 1\n    if \"mightn't\" in S:\n        return 1\n    if \"\
    really\" in S:\n        return 1\n    if \"really\" in S:\n        return 1\n\
    \    if \"may\" in S:\n        return 1\n    if \"doesn't\" in S:\n        return\
    \ 1\n    if \"should\" in S:\n        return 1\n    if \"shouldn't\" in S:\n \
    \       return 1\n    if \"would\" in S:\n        return 1\n    if \"wouldn't\"\
    \ in S:\n        return 1\n    if \"could\" in S:\n        return 1\n    if \"\
    couldn't\" in S:\n        return 1\n    if \"shouldn't\" in S:\n        return\
    \ 1\n    if \"wouldn't\" in S:\n        return 1\n    if \"should\" in S:\n  \
    \      return 1\n    if \"isn't\" in S:\n        return 1\n    if \"is\" in S:\n\
    \        return 1\n    if \"do\" in S:\n        return 1\n    if \"don't\" in\
    \ S:\n        return 1\n    if \"did\" in S:\n        return 1\n    if \"wouldn't\"\
    \ in S:\n        return 1\n    if \"shouldn't\" in S:\n        return 1\n    if\
    \ \"isn't\" in S:\n        return 1\n    if \"could\" in S:\n        return 1\n\
    \    if \"couldn't\" in S:\n        return 1\n    if \"could\" in S:\n       \
    \ return 1\n    if \"really\" in S:\n        return 1\n    if \"really\" in S:\n\
    \        return 1\n    if \"doesn't\" in S:\n        return 1\n    if \"shouldn't\"\
    \ in S:\n        return 1\n    if \"really\" in S:\n        return 1\n    if \"\
    can't\" in S:\n        return 1\n    if \"couldn't\" in S:\n        return 1\n\
    \    if \"might\" in S:\n        return 1\n    if \"mightn't\" in S:\n       \
    \ return 1\n    if \"should\" in S:\n        return 1\n    if \"should\" in S:\n\
    \        return 1\n    if \"do\" in S:\n        return 1\n    if \"wouldn't\"\
    \ in S:\n        return 1\n    if \"mightn't\" in S:\n        return 1\n    if\
    \ \"might\" in S:\n        return 1\n    if \"mightn't\" in S:\n        return\
    \ 1\n    if \"did\" in S:\n        return 1\n    if \"does\" in S:\n        return\
    \ 1\n    if \"don't\" in S:\n        return 1\n    if \"does\" in S:\n       \
    \ return 1\n    if \"doesn't\" in S:\n        return 1\n    if \"really\" in S:\n\
    \        return 1\n    if \"really\" in S:\n", "    bored_count = 0\n    \n  \
    \  for sentence in S.split('.'): # split sentences by \".\", \"?\" or \"!\" \n\
    \        if sentence == sentence[0]: \n            bored_count += 1\n        else:\n\
    \            break\n    \n    return bored_count\n\n", "    return sum([1 if w.startswith('I')\
    \ else 0 for w in S.split()])\n", "    return sum(word.startswith('I') for word\
    \ in S.split())\n\n", "    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count = count + 1\n    return count\n", "    words = S.split(' ')\n\
    \    count = 0\n    for word in words:\n        if word.startswith('I'):\n   \
    \         count += 1\n    return count\n\n", "    boredoms = 0\n    for word in\
    \ S:\n        if word == 'I' and boredoms == 0:\n            boredoms = 1\n  \
    \      elif word == 'I' and boredoms == 1:\n            boredoms += 1\n      \
    \  else:\n            boredoms = 0\n    return boredoms\n", "    boredoms = sum(word.startswith('I')\
    \ for word in S.split('.'))\n    return boredoms \n", "    boredom = 0\n    for\
    \ word in S.split():\n        if word.lower() == 'i':\n            boredom +=\
    \ 1\n    return boredom\n\n", "    \n    boredoms = 0\n    for word in S.split():\n\
    \        if word[0].lower() == 'i':\n            boredoms += 1\n    return boredoms\n\
    \n", "    \n    # Split the sentence into words, and return 1 if the word starts\
    \ with \"I\".\n    return sum([1 for w in S.split() if w.lower().startswith('i')])\n\
    </cell>\n<cell>", "    bored_count = 0\n    for sentence in S.split('.'):\n  \
    \      sentence_bored = any(sentence == x for x in ['I','i','!','.'])\n      \
    \  if sentence_bored == True:\n            bored_count = bored_count + 1\n   \
    \ return bored_count\n", "    # BEGIN SOLUTION\n    boredoms = re.findall(r\"\\\
    bI\", S)\n    return len(boredoms)\n    # END SOLUTION\n\n", "    return boredom_counter(S).boredoms()\n",
  "    \n    count = 0\n    if S.startswith(\"I\"):\n        count += 1\n    else:\n\
    \        \n        for char in S:\n            if char in '.?!':\n           \
    \     if char == '.':\n                    count += 1\n                else:\n\
    \                    if count == 1:\n                        count = 0\n     \
    \           count += 1\n    return count\n", "    \n    return len(S.replace(\"\
    \ \", \"\")) == 1 and S[0] == 'I'\n\n", "    \n    return bored(S,'I',0)\n", " \
    \   count = 0\n    words = S.split(\" \")\n    for word in words:\n        if\
    \ \"I\" in word:\n            count += 1\n    return count\n\n", "    return sum(map(is_bored,\
    \ S.split('.')))\n\n", "    boredoms = 0\n    i = 0\n    while i < len(S):\n \
    \       if S[i] in ('.', '?'):\n            boredoms += 1\n            i += 1\n\
    \        i += 1\n    return boredoms\n", "    # Your code here\n    boredoms =\
    \ 0\n    for word in S.split():\n        if word == 'I' or word == '.' or word\
    \ == '?' or word == '!':\n            boredoms += 1\n    return boredoms\n\n",
  "    bored_count = 0\n\n    # Your code here!\n    return bored_count\n</cell>\n\
    <cell>\nassert is_bored('Hello world') == 0\nassert is_bored('The sky is blue.\
    \ The sun is shining. I love this weather') == 1\n</cell>\n<text>\nFin! Time to\
    \ start writing/solving some problems! We have now completed your first problem:\
    \ \"Bored?\"\n\nOne final challenge: can you find words that appear three or more\
    \ times in a row? Return True or False accordingly.\n\n Input  Output  Test Cases\
    \ \n\n I  Hello world!  0 \n I  He is good  0 \n I  I am fine  0 \n I  He is good\
    \ man  0 \n I  He is good man  1 \n I  I love this weather  0 \n I  I love this\
    \ weather He is good  1 \n I  I love this weather He is good man  1 \n I  I love\
    \ this weather He is good man He is good  1 \n\nInstructions\nComplete the function\
    \ three_letter_is_bored as follows:\n\nUse a for loop to iterate over each word\
    \ in the sentence (split into a list)\nFor each word, check if the word starts\
    \ with the letter 'I'.\nIf the word starts with the letter 'I', check if the word\
    \ has a letter after it that is also a letter.\nKeep a count of the number of\
    \ times each letter appears in the word (use a dictionary)\nIf the count of the\
    \ letter appears in the word is 3, return True. Otherwise, return False.\n\n\n\
    </text>\n<cell>", "    return sum(s.startswith('I') for s in S.lower().split('.'))\
    \ + sum(s.startswith('!') or s.startswith('?') for s in S.lower().split('.'))\n",
  "    S=S.lower()\n    if S[0] == 'i':\n        return S.count('.')\n    elif S[0]\
    \ == 'a':\n        return S.count('!')\n    elif S[0] == 'e':\n        return\
    \ S.count('?')\n    return 0\n", "    return sum([1 for i in range(0,len(S)) if\
    \ S[i] == '.' or S[i] == '?' or S[i] == '!'])\n", "    # YOUR CODE HERE\n    pass\n\
    \    \n</cell>\n<cell>", "    boredom = 0\n    for word in S.split(\" \"):\n \
    \       if word.lower().startswith(\"i\"):\n            boredom+=1\n    return\
    \ boredom\n\n", "    count = 0\n    for word in S.split():\n        if word ==\
    \ 'I':\n            count += 1\n    return count\n", "    \n    #return 0\n  \
    \  count = 0\n    for s in S:\n        if s.startswith('I'):\n            count\
    \ = count + 1\n    return count\n", "    return sum(w in S[:5] for w in \"I love\
    \ this weather\".split()) \n\n", "    bored = 0\n    for word in S.split():\n\
    \        if word.startswith(\"I\"):\n            bored += 1\n    return bored\n\
    \n", "    boredoms = 0\n    sentence_list = S.split(\".\")\n    \n    for s in\
    \ sentence_list:\n        if s.startswith(\"I\"):\n            boredoms += 1\n\
    \    \n    return boredoms\n", "    count = 0\n    for word in S.split():\n  \
    \      if word.lower().startswith('i'):\n            count += 1\n    return count\n\
    </cell>\n<cell>\nassert is_bored('Hello world') == 0\nassert is_bored('The sky\
    \ is blue. The sun is shining. I love this weather') == 1\n</cell>\n<text>\nCount\
    \ the number of valid words in a sentence\nNow that you have an is_bored function\
    \ that counts number of boredoms, you can combine it with another function that\
    \ checks if the word is a valid word.\n\nDefine is_valid_word\nWrite a function\
    \ that takes in a word and returns True if that word is valid. Otherwise, your\
    \ function should return False.\nis_valid_word has the following parameters and\
    \ returns True or False:\n\nA single string (word).\n\n\nA list of the words in\
    \ the string.\n\n\n\n\_Tip: Try writing some tests for your is_valid_word function\
    \ before you write your is_bored function.\n\n\n\n</text>\n<cell>", "    return\
    \ sum(1 for word in S.split('.') if word.startswith('I'))\n", "    bored = 0\n\
    \    for word in S.split(\" \"):\n        if word.startswith(\"I\"):\n       \
    \     bored += 1\n    return bored\n", "    count = 0\n    boredom = [\".\", \"\
    ?\", \"!\"]\n    for word in S:\n        if word.lower() in boredom:\n       \
    \     count += 1\n    return count\n\n", "    count = 0\n    \n    # TODO Complete\
    \ this function and return count\n\n    return count\n", "    return is_boredom(\"\
    . ? !\", S)\n\n", "    boredoms = [word for word in S.lower().split() if word.startswith('i')]\n\
    \    return len(boredoms)\n", "    return len(S) == 0 and S.startswith('I') or\
    \ S.startswith('.')\n", "    return len(S) > 0 and S[0] == 'I' and (S.count('.')\
    \ >= 2 or\n                                           S.count('!') >= 2 or\n \
    \                                          S.count('?') >= 2)\n\n\n\"\"\"\n====================================================================\n\
    String Compression:\nWrite a program that given a string S and a set of words\
    \ D, prints out\nthe string after applying the following transformation:\n\"S\"\
    \ is the string to be transformed into a compressed string using the words in\n\
    D as dictionary words. Each dictionary word must have the same number of\ncharacters.\
    \ \nFor example, if D = {'I', 'am', 'happy', 'to', 'be', 'happy', '!'}, then \n\
    after transforming \"I am  happy to be  happy !\" into \"I ah !\", the output\
    \ string\nshould be \"I ah!\"\nInput:\nThe first line of the input contains the\
    \ string S.\nThe second line contains D which contains words.\nThe third line\
    \ contains the string D.\nOutput:\nThe output string after transforming S using\
    \ D.\nConstraints:\n1 <= S.len <= 10^5\n1 <= |D| <= 10^5\n1 <= |S| <= 10^5\n1\
    \ <= |word| <= 10^5\nExample:\nInput:\nS = \"Hello world\"\nD = {\"I\", \"am\"\
    , \"happy\"}\nOutput:\n\"I ah!\"\n\"\"\"\n", "    # Get the index of the first\
    \ '.', '?' or '!' in the string\n    boredom = S.find('.') if '.' in S else S.find('?')\
    \ if '?' in S else S.find('!')\n\n    # Count the number of 'I' occurrences in\
    \ between the '.', '?' or '!'\n    # characters in the string\n    return boredom\
    \ - 1\n\n", "    count = 0\n    boredom = ['.', '?', '!']\n    for i in range(len(S)\
    \ - 1):\n        if S[i] == boredom[0]:\n            count = count + 1\n     \
    \       if S[i + 1] == boredom[1]:\n                count = count + 1\n      \
    \          if S[i + 2] == boredom[2]:\n                    count = count + 1\n\
    \    return count\n", "    return sum(\n        [\n            1 if i == 0 and\
    \ S.startswith(('I', 'I')) else 0\n            for i in S.split('.')\n       \
    \ ]\n    )\n", "    count = 0\n    boredoms = ['.', '?', '!']\n    for s in S:\n\
    \        if s in boredoms:\n            count = count + 1\n    return count\n\
    \    ", "    # TODO:\n    return None\n    ", "    boredoms = 0 \n    for i in\
    \ S:\n        if i == ' ':\n            continue\n        elif i == '.' or i ==\
    \ '?' or i == '!':\n            boredoms += 1\n    return boredoms \n", "    boredoms\
    \ = 0\n    if S == '':\n        return 0\n    i = 0\n    while i < len(S):\n \
    \       if S[i] in ['.', '?', '!']:\n            if S[i] == '.':\n           \
    \     i = i + 1\n                continue\n            boredoms = boredoms + 1\n\
    \            if S[i] == '?':\n                i = i + 1\n            if S[i] ==\
    \ '!':\n                i = i + 1\n        i=i+1\n    return boredoms\n", "  \
    \  boredoms = 0\n    words = S.split()\n    i = 0\n    while i < len(words):\n\
    \        if words[i][0] == 'I':\n            boredoms += 1\n        i += 1\n \
    \   return boredoms\n", "    # initialize num_bored_count = 0\n    num_bored_count\
    \ = 0\n    \n    # complete this function\n    \n    return num_bored_count\n\n",
  "    # Your code here\n    count = 0\n    for word in S.split():\n        if word[0]\
    \ == 'I':\n            count += 1\n    return count\n</cell>\n<cell>", "    return\
    \ len([True for w in S.split('.') if 'I' in w]) > 0\n\n", "    return sum(1 for\
    \ i, v in enumerate(S) if v == 'I' and S[i-1] == '.')\n\n", "    count = 0\n \
    \   words = S.split(' ')\n    for word in words:\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n</cell>\n<cell>", "    boredom = 0\n\
    \    for s in S:\n        if s.lower() in [\"i\", \"the\", \"to\", \"of\"]:\n\
    \            boredom += 1\n    return boredom\n", "    return sum([boredom_in_sentence[sentence[0]]\
    \ for sentence in S.split('.')])\n", "    return sum(1 if c=='I' or (c.isalpha()\
    \ and c=='?') else 0 for c in S)\n</cell>\n<cell>", "    return sum(1 for word,_\
    \ in bored.items() if word.startswith(S))\n", "    bored_count = 0\n    for word\
    \ in S.split():\n        if word.lower().startswith('i'):\n            bored_count\
    \ += 1\n    return bored_count\n\n", "    return sum(1 for _, _, sentence in S.partition('.')[:3]\
    \ if sentence == '?')\n\n", "    return len(S.split(\"I\")) == 0 and len(S.split(\"\
    .\"))==1 and len(S.split(\"?\")) == 0 and len(S.split(\"!\")) == 0\n", "    \n\
    \    return len(S.lower().split(' ')) > 0 and 'i' in S.lower() and len(S.lower().split('\
    \ ')) < len(S.lower().split('.'))\n", "    return sum(1 if w[0]=='I' else 0 for\
    \ w in S.split('.'))\n", "    S = S.split()\n    return 1 if 'I' in S else 0\n\
    </cell>\n<cell>", "    boredoms = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            boredoms += 1\n    return boredoms\n\n", "    count = 0\n\
    \    for word in S.split(' '):\n        if word == 'I':\n            count +=\
    \ 1\n    return count\n", "    bored = 0\n    for word in S.split():\n       \
    \ if word == 'I':\n            bored += 1\n    return bored\n    \n</cell>\n<cell>",
  "    boredoms = 0\n    if S == '':\n        return 0\n    \n    for sentence in\
    \ S.split('.'):\n        if S.startswith('I'):\n            boredoms += 1\n  \
    \  return boredoms\n", "    count = 0\n    for word in S.split():\n        if\
    \ word.lower() in ['i', 'you', 'he', 'she']:\n            count += 1\n    return\
    \ count\n", "    return sum(1 for i in range(len(S)) if S[i] == '.')\n</cell>\n\
    <cell>", "    return len([x for x in S.split('.') if x[0] == 'I']) > 0\n</cell>\n\
    <cell>", "    count = 0\n    \n    for word in S.split():\n        if word[0]\
    \ == 'I':\n            count += 1\n    return count\n", "    boredom = 0\n   \
    \ words = []\n    for i in S:\n        if i in '?!.':\n            boredom +=\
    \ 1\n            words.append(i)\n    if len(words) == 0 or boredom > len(S):\n\
    \        return 0\n    else:\n        return boredom\n\n", "    \n    boredoms\
    \ = 0\n    sentence = S.split('.')\n    boredoms += sentence[0].strip().split()[0]\
    \ == 'I'\n    \n    return boredoms\n    ", "    boredoms = 0\n    sentences =\
    \ S.split('.')\n    for sentence in sentences:\n        if sentence == '?' or\
    \ sentence == '!':\n            boredoms += 2\n            continue\n        if\
    \ sentence == '.':\n            boredoms += 1\n            continue\n        if\
    \ sentence[0] == 'I':\n            boredoms += 1\n    return boredoms\n\n", " \
    \   boredoms_count = 0\n    if S[0] == 'I':\n        for word in S:\n        \
    \    if word.startswith('I'):\n                boredoms_count += 1\n    return\
    \ boredoms_count\n", "    boredoms = collections.defaultdict(int)\n    for sentence\
    \ in S.split('.'):\n        for word in sentence.split():\n            if word.lower()\
    \ == 'i':\n                boredoms[word] += 1\n    return boredoms['i']\n\n",
  "    return len(boredoms(S).split()) == 3\n\n", "    \n    count = 0\n    for i\
    \ in S:\n        if i.lower() in 'i i i i i i'.split():\n            count +=\
    \ 1\n    return count\n", "    return sum(1 for s in S.split('.')) if '.' in S\
    \ else sum(1 for s in S.split('?')) \\\n        if '.' in S else sum(1 for s in\
    \ S.split('!')) \\\n        if '.' in S else 0\n", "    return sum([1 for word\
    \ in S.lower().split() if not is_bored(word)])\n\n", "    count = 0\n    arr =\
    \ S.split(\".\")\n    for i in arr:\n        if i[0] == \"I\":\n            count\
    \ += 1\n    return count\n</cell>\n<text>\nLet's test your code. Try is_bored('Hello\
    \ world'), what do you get?\n\n\n</text>\n<cell>\nprint(is_bored('Hello world'))\n\
    </cell>\n<text>\nFor some assistance, try the test cases below (including the\
    \ boredom-introduction test case). Write some code to\n\nget the list of valid\
    \ words (the list of words in the file words.txt - see Solution Notebook)\nget\
    \ the list of valid boredoms (the list of boredoms in the file boredoms.txt) -\
    \ see Solution Notebook)\nfind the number of valid words that start with the boredom\
    \ \"B\" (see Solution Notebook)\n\n\n</text>\n<cell>", "    count = 0\n    boredoms\
    \ = S.split(' ')\n    for b in boredoms:\n        if b.startswith('i'):\n    \
    \        count += 1\n    return count\n</cell>\n<text>\n3. Counting Vowels\nYou\
    \ will now count the number of vowels used in a string. \nThis exercise will help\
    \ you solve the homework problems concerning vowel counting\n\n\n</text>\n<cell>",
  "    return len(filter(lambda x: x != 'I' and x[0] == '.' and x[-1] == '.', S.split('\
    \ ')))\n", "    # get the string without the dots\n    S = S.lower()\n\n    #\
    \ get the index of the first letter of the word I\n    I = S.index(\"i\")\n\n\
    \    # get the index of the last letter of the word I\n    J = S.rfind(\"i\")\n\
    \n    # if the word starts with I, count the boredom\n    if I == 0 and J != -1:\n\
    \        return 1\n    \n    # if the word ends with I, count the boredom\n  \
    \  elif I == len(S) - 1 and J != -1:\n        return 1\n    \n    # get the index\
    \ of the letter after the last letter of the word I\n    K = J + 1\n\n    # if\
    \ the word ends with I, count the boredom\n    if K == len(S):\n        return\
    \ 1\n\n    # else count the boredom\n    else:\n        return 0\n", "    \n \
    \   # BEGIN Question 2\n    boredoms = []\n    for s in S:\n        if s.startswith('I'):\n\
    \            boredoms.append(s)\n    return len(boredoms)\n    # END Question\
    \ 2\n\n</cell>\n<cell>", "    boredoms = 0\n    boredoms += boredoms_count('bore',\
    \ S)\n    boredoms += boredoms_count('bored', S)\n    boredoms += boredoms_count('is',\
    \ S)\n    return boredoms\n", "    count = 0\n    \n    for word in S:\n     \
    \   if word == 'I':\n            count += 1\n    return count\n</cell>\n<cell>",
  "    boredom = 0\n    words = S.split('.')\n    for word in words:\n        if word[0]=='I':\n\
    \            boredom+=1\n    return boredom\n", "    return bored(S, 'I')\n</cell>\n\
    <cell>", "    count=0\n    for word in S.split():\n        if word == 'I':\n \
    \           count+=1\n    return count\n</cell>\n<cell>", "    boredoms = [word\
    \ for word in S if word[0] == 'I']\n    return len(boredoms)\n</cell>\n<cell>",
  "    words = S.split(' ')\n    bored_count = 0\n    for word in words:\n       \
    \ if word.lower() == 'i':\n            bored_count += 1\n    return bored_count\n\
    \n", "    \n    \n    return sum([1 for word in S.splitlines() if word.startswith('I')])\
    \ > 0\n", "    S = S.lower()\n    boredom_count = 0\n    for word in S.split('.'):\n\
    \        word = word.lower()\n        if word.startswith('i'):\n            boredom_count\
    \ += 1\n    return boredom_count\n", "    \n    boredom = 0\n    for s in S.split():\n\
    \        if s.startswith('I'):\n            boredom += 1\n    return boredom\n",
  "    boredoms = 0\n\n    words = S.split()\n    i = 0\n    while i < len(words):\n\
    \        if words[i] == 'I' and len(words[i+1]) == 1 and \\\n           words[i+1][0]\
    \ in '?!.':\n            boredoms += 1\n        i += 1\n\n    return boredoms\n\
    \n", "    return boredom.count(S.split()[0])\n", "    bored_count = 0\n    sentences\
    \ = S.split('.')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n\
    \            bored_count += 1\n    return bored_count\n\n", "    # BEGIN Question\
    \ 4\n    return 1 if S == 'I' else 0\n    # END Question 4\n\n", "    boredoms\
    \ = []\n    if S[0] == 'I':\n        return 1\n    else:\n        boredoms.append(S)\n\
    \    for S in boredoms:\n        if len(S.split(\".\")) > 1 and len(S.split(\"\
    ?\"))>1 and len(S.split(\"!\")) > 1:\n            return 1\n    return 0\n\n",
  "    return sum([bool(word.startswith('I')) for word in S.strip().split(' ')])\n\
    \n", "    \n    bored = 0\n    bored_sent = \"I \"\n    \n    for word in S.split():\n\
    \        if word == bored_sent:\n            bored += 1\n    return bored\n</cell>\n\
    <cell>", "    # your code here\n    boredoms = 0\n    sentences = S.split('.')\n\
    \    i = 0\n    while i < len(sentences):\n        if sentences[i] == 'I':\n \
    \           i += 1\n            if i < len(sentences):\n                boredoms\
    \ += 1\n            i += 1\n        else:\n            i += 1\n    return boredoms\n",
  "    return boredom_count(S).__bool__()\n", "    boredom_count = 0\n    for sentence\
    \ in S.split('.')+['']:\n        boredom_count += 1 if 'I' in sentence.lower()\
    \ else 0\n    return boredom_count\n</cell>\n<cell>", "    # Add your code here\n\
    \    count = 0\n    words = S.split(' ')\n    if words[0] == 'I':\n        count\
    \ += 1\n    return count\n", "    count=0\n    sentence=S.split('.')\n    for\
    \ word in sentence:\n        if word.startswith('I'):\n            count+=1\n\
    \    return count\n</cell>\n<cell>", "    return len(S) - S.count('I') \n\n",
  "    boredoms = 0\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n        elif word == '.' or word == '?' or word == '!':\n\
    \            pass\n        else:\n            count += 1\n    return count\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
