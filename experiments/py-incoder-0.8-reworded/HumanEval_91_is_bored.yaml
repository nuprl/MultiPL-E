name: HumanEval_91_is_bored
language: py
prompt: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of\
  \ words, and your task is to count the number\n    of boredoms. A boredom is a sentence\
  \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
  \   \n    For example:\n    >>> is_bored('Hello world')\n    0\n    >>> is_bored('The\
  \ sky is blue. The sun is shining. I love this weather')\n    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
  \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
  \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I will\
  \ be productive. will kill It') == 2\n    assert candidate('You and I are going\
  \ for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
completions: ["    return sum(1 for w in S.split() if w == 'I')\n\n", "    # Get the\
    \ count of sentences that start with the word \"I\".\n    count = 0\n    for word\
    \ in S.split():\n        if word == 'I':\n            count += 1\n    return count\n",
  "    S = S.lower()\n    boredom = 0\n    boredom_words = ['i','a','the']\n    boredom_letters\
    \ = ['.', '!', '?']\n    for word in S:\n        if word.lower() in boredom_words:\n\
    \            boredom = 1\n        if word.lower() in boredom_letters:\n      \
    \      boredom = 0\n    return boredom\n", "    boredoms = 0\n    # Your code\
    \ here\n    for sentence in S.split('.'):\n        if sentence.startswith(\"I\"\
    ):\n            boredoms += 1\n    return boredoms\n</cell>\n<cell>\nassert is_bored('Hello\
    \ world') == 0\nassert is_bored('The sky is blue. The sun is shining. I love this\
    \ weather.') == 1\n</cell>\n<text>\n6. Capitalization conversion\nThe remainder\
    \ of this section will teach you how to convert strings to\nlowercase, uppercase\
    \ and titlecase.\n\n.lower() - converts all the characters in a string to lowercase.\n\
    .upper() - converts all the characters in a string to uppercase.\n.title() - converts\
    \ the first character of each word to uppercase and the rest to lowercase.\n\n\
    Don't be surprised if your solutions don't produce the same results each time.\
    \ That's ok! The point of this is to gain practice writing solutions that are\
    \ robust to small differences in spelling.\n\n\n</text>\n<cell>\ntext = 'Hello\
    \ World'\nprint(text.lower())\nprint(text.upper())\nprint(text.title())\n</cell>\n\
    <text>\nYou can read about string methods in the documentation.\n\n\n</text>\n\
    <cell>\ntext = 'Hello World'\nprint(text.lower())\nprint(text.upper())\nprint(text.title())\n\
    </cell>\n<text>\nTo perform string operations in Python, be sure to use the print(\
    \ ) function rather than print statement.\n\nYou will often find the print( )\
    \ function useful as a \"debugging tool,\" as it lets you inspect and validate\
    \ your variables more easily.\n\n\n</text>\n<text>\nTo convert a whole string\
    \ into lowercase or uppercase, you can use the lower( ) or upper( ) method.\n\n\
    The title( ) method will convert your entire string into uppercase and give the\
    \ first letter of each word in a title case format.\n\nLet's see some examples:\n\
    \n\n</text>\n<cell>\ntext = 'Hello World'", "    return len(S.split(\".\") if\
    \ \".\" in S else S.split(\"? \") if \"? \" in S else S.split(\"! \") if \"! \"\
    \ in S else [])\n</cell>\n<cell>\nassert is_bored(\"Hello world\") == 0\nassert\
    \ is_bored(\"The sky is blue\") == 1\nassert is_bored(\"The sun is shining\")\
    \ == 1\nassert is_bored(\"I love this weather.\") == 1\n</cell>\n<text>\nImplement\
    \ a function is_hungry that takes in an activity string and returns the number\
    \ of \"hungry\" things you can do to the activity. For example, is_hungry(\"Walking\
    \ on the Moon\") should return 1, and is_hungry(\"Playing guitar\") should return\
    \ 0.\n\nTo better understand the boredom problem we will have to think about counting\
    \ boredoms in a string. When you think about it think of how many times we would\
    \ need to call is_bored to figure out if someone is bored. Let's say that is_bored\
    \ returns 2 if the string starts with \"I\" and 0 otherwise. Then the boredom\
    \ count is given by the following formula:\n\n$$ X=\\begin{cases}\n    (I) &\\\
    text{ if } is_bored (\\text{ first word }) \\text{ return }2 \\\n    (II) &\\\
    text{ if } is_bored (\\text{ second word }) \\text{ return }2 \\\n    (III) &\\\
    text{ if } is_bored (\\text{ third word }) \\text{ return }2 \\\n    (IV) &\\\
    text{ if } is_bored (\\text{ last word }) \\text{ return }2 \\\n\\end{cases}\n\
    $$\n\nLet's define an helper function that will help us solve the problem. One\
    \ of the great things about Jupyter notebooks is that we can simply define helper\
    \ functions and then pass them into other functions as arguments and they will\
    \ be able to use them!\n\n\n</text>\n<cell>", "    #Your code here\n    return\
    \ 1 if S[0] in \"I\" else 0\n", "    S = S.lower()\n    boredoms = [w.lower()\
    \ for w in boredom_words if w.startswith(S.lower())]\n    return len(boredoms)\n\
    \n", "    boredom = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredom += 1\n    return boredom\n\n", "    boredoms = 0\n\n    for\
    \ word in S.split():\n        if word.startswith('I'):\n            boredoms +=\
    \ 1\n\n    return boredoms\n\n", "    # Complete the bored_count function below.\n\
    \    bored_count = 0\n    \n    \n    \n    return bored_count\n\n", "    return\
    \ sum([word in 'I. !?' for word in S.split('.')])\n\n", "    bored = 0\n    for\
    \ w in S.split('.'):\n        if w.startswith('I'):\n            bored += 1\n\
    \    return bored\n", "    return sum([1 for sent in S.split() if sent.startswith('I')]\
    \ or [1 if S.strip().lower().startswith('i') else 0])\n\n", "    pass\n</cell>\n\
    <cell>", "    bored_sentences = 0\n    for word in S.split():\n        if word[0]\
    \ == 'I':\n            bored_sentences += 1\n    return bored_sentences\n</cell>\n\
    <cell>\nassert is_bored('Hello world') == 0\nassert is_bored('The sky is blue.\
    \ The sun is shining. I love this weather') == 1\n</cell>\n<cell>", "    bored\
    \ = 0\n    # your code here\n    return bored\n", "    # BEGIN Practice #\n  \
    \  return boredom(S)\n    # END Practice #\n", "    return boredoms(S, 'I', '.',\
    \ '?' or '!')\n", "    # BEGIN PROBLEM 1\n    # This is a function template.\n\
    \    return 0\n    # END PROBLEM 1\n\n", "    boredom = 0\n\n    # write your\
    \ code here\n    for i in range(len(S)):\n        if S[i] == '.':\n          \
    \  boredom += 1\n        elif S[i] == '?':\n            boredom += 1\n       \
    \ elif S[i] == '!':\n            boredom += 1\n    \n    return boredom\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
