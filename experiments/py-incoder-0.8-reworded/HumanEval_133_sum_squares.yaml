name: HumanEval_133_sum_squares
language: py
prompt: "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n  \
  \  \"\"\"You are given a list of numbers.\n    You need to return the sum of squared\
  \ numbers in the given list,\n    round each element in the list to the upper int(Ceiling)\
  \ first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n    14\n    >>> lst([1.0,\
  \ 4.0, 9.0])\n    98\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84\n    >>> lst([1.4,\
  \ 4.2, 0.0])\n    29\n    >>> lst([-2.4, 1.0, 1.0])\n    6\n    \n\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1.0, 2.0, 3.0]) == 14\n    assert\
  \ candidate([1.0, 2.0, 3.0]) == 14\n    assert candidate([1.0, 3.0, 5.0, 7.0]) ==\
  \ 84\n    assert candidate([1.4, 4.2, 0.0]) == 29\n    assert candidate([-2.4, 1.0,\
  \ 1.0]) == 6\n    assert candidate([100.0, 1.0, 15.0, 2.0]) == 10230\n    assert\
  \ candidate([10000.0, 10000.0]) == 200000000\n    assert candidate([-1.4, 4.6, 6.3])\
  \ == 75\n    assert candidate([-1.4, 17.9, 18.9, 19.9]) == 1086\n    assert candidate([0.0])\
  \ == 0\n    assert candidate([-1.0]) == 1\n    assert candidate([-1.0, 1.0, 0.0])\
  \ == 2\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
completions: ["    return sum([int(x ** 2) for x in lst])\n\n", "    pass\n", "  \
    \  sum_ = 0\n    for i in lst:\n        sum_ += int(ceil(i))\n        sum_ +=\
    \ int(i)\n    return sum_\n\n", "    sum_ = 0\n    for num in lst:\n        sum_\
    \ += int(ceil(num ** 2)) ** 2\n    return sum_\n", "    return sum(map(lambda\
    \ x: round(x*x), lst))\n    ", "    lst_to_sort = sorted(lst)\n    sorted_list\
    \ = [round(num, int(math.ceil(num))) for num in lst_to_sort]\n    return sum(sorted_list)\n\
    </code>\n<|/ a |>\n<| a |>\nI think this can be done by two ways, \n1.The first\
    \ one is to sort the list and get the first element\n<code>\nimport math\nlst\
    \ = [1.0,4.0,9.0]\nlst.sort() #sorting the list \nprint(math.ceil(lst[0]))\n</code>\n\
    2.The second one is just to get the last element and round it.\n<code>\nimport\
    \ math\nlst = [1.0,4.0,9.0]\nprint(math.ceil(lst[-1]))\n</code>\n<|/ a dscore=1\
    \ tags=list,ceil,python |>\n<| c |>\nThe OP stated they want to round up instead\
    \ of down, so the 2nd solution will work\n<|/ c |>\n<| c |>\nNo, I want to round\
    \ up. Like 1.7 --> 2\n<|/ c |>\n<| a dscore=1 tags=list,ceil,python |>\n<code>\n\
    import math\n\nlst = [1.0, 4.0, 9.0]\n\nlst.sort()\n\nfirst_element_index = lst.index(\
    \ max(lst) )\nlast_element_index = len(lst) - lst.index( min(lst) )\n\nlst.sort()\n\
    \nfirst_element_index += ( int(math.ceil(lst.index(max(lst))) + 1) - ( int(math.ceil(lst.index(max(lst))))\
    \ )) % 2\nlast_element_index += ( int(math.ceil(lst.index(min(lst))) - 1) - (\
    \ int(math.ceil(lst.index(min(lst)))) )) % 2\n\nprint(lst[first_element_index])\n\
    print(lst[last_element_index])\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    import math\nimport math\nlst = [1.0,4.0,9.0]\nlst.sort()", "    return sum([x\
    \ * x for x in lst])\n\n", "    return sum(map(lambda x: round(x ** 2, int(math.ceil(math.log(x,\
    \ 2)))), lst))\n", "    sum_square = 0\n    for i in lst:\n        sum_square\
    \ = sum_square + (i * i)\n    return int(sum_square)\n\n", "    ans = 0\n    \n\
    \    for i in lst:\n        ans += i*i\n    return ans\n", "    return sum(map(round,\
    \ lst))\n\n", "    from math import ceil, sqrt\n    lst = map(ceil, lst)\n   \
    \ lst = map(lambda x: int(sqrt(x)), lst)\n    return sum(lst)\n", "    lst = [int(i)\
    \ for i in lst]\n    sum = 0\n    for i in lst:\n        sum += i * i\n    return\
    \ int(round(sum))\n", "    return sum([math.ceil(el * el) for el in lst])\n",
  "    \n    return sum(map(lambda x: round(x**2), lst))", "    lst_new = []\n   \
    \ for number in lst:\n        number_new = round(number)\n        lst_new.append(number_new)\n\
    \    number_sum = 0\n    for number in lst_new:\n        number_sum += number**2\n\
    \    return number_sum\n</code>\n<|/ a |>\n<| c |>\nThis doesn't round the numbers.\n\
    <|/ c |>\n<| c |>\nYou're right, I didn't think about that. I'm fixing it.\n<|/\
    \ c |>\n<| c |>\nThe first example returns -14 (instead of 14). You forgot the\
    \ `int()` cast.\n<|/ c |>\n<| c |>\nFixed. Thanks.\n<|/ c |>\n<| a tags=python,function,list\
    \ dscore=0 |>\nMy approach:\n<code>", "    total = 0\n    for num in lst:\n  \
    \      total += num * num\n    return int(math.ceil(total))\n", "    total = 0\n\
    \    for i in lst:\n        total += int(math.ceil(i))\n    return total\n", " \
    \   \n    sum_squares = 0\n    \n    lst = [round(float(i),3) for i in lst]\n\
    \    \n    for number in lst:\n        sum_squares += number ** 2\n        \n\
    \    return sum_squares\n", "    \n    \n    return sum(map(math.ceil,lst))**2\
    \ \n", "    total = 0\n    for element in lst:\n        total += element ** 2\n\
    \    return int(ceil(total))\n", "    return sum(map(lambda x: round(x ** 2),\
    \ lst))\n", "    return sum(math.ceil(val) ** 2 for val in lst)\n\n", "    sum_squares\
    \ = 0\n    lst = sorted(lst)\n    for i in range(len(lst)):\n        sum_squares\
    \ += lst[i] ** 2\n    return int(math.ceil(sum_squares))\n\n", "    sum = 0\n\
    \    \n    for i in lst:\n        sum += i ** 2\n        \n    return sum\n",
  "    \n    # implement the solution in here\n    # hint: use map with lambda expression\n\
    \    return sum(map(lambda x : int(ceil(x))*x, lst))\n", "    return sum(map(lambda\
    \ x: round(x ** 2), lst))\n", "    \n    return sum(map(int, lst))\n", "    return\
    \ sum(map(lambda x: int(round(x*x))**2, lst))\n", "    \n    return sum(map(lambda\
    \ x: int(math.ceil(x * x)), lst))\n\n", "    lst = [int(n) for n in lst]\n   \
    \ return sum([n * n for n in lst])\n", "    squares = []\n    for i in lst:\n\
    \        squares.append(round(int(i*i)))\n    \n    return sum(squares)\n", " \
    \   \n    return sum((int(e*e) for e in lst))\n", "    # Your code here\n    #\
    \ Your code here\n\n    return 0\n", "    ### START YOUR CODE ###\n    # lst =\
    \ [int(round(num)) for num in lst]\n    # return sum(map(lambda x: x**2, lst))\n\
    \    ### END YOUR CODE ###\n    return sum(map(lambda x: x**2, lst))\n", "   \
    \ if len(lst) == 0:\n        return 0\n    return sum(map(lambda x: round(sum(x**2),\
    \ int(np.ceil(np.sqrt(len(lst))))), lst))\n", "    \n    return sum(map(lambda\
    \ x:math.ceil(x*x)-x, lst))\n\n", "    sum_squares = 0\n    for x in lst:\n  \
    \      sum_squares = sum_squares + int(math.ceil(math.pow(sum_squares, 2))) *\
    \ x\n    return sum_squares\n\n", "    count = 0\n    for i in lst:\n        count\
    \ = count + (int(ceil(abs(i))) ** 2)\n    return count\n", "    lst = [round(i,\
    \ 1) for i in lst]\n    return sum([x*x for x in lst])\n", "    \n    lst = sorted(lst)\n\
    \    \n    return sum(map(lambda x: math.ceil(x) ** 2, lst))\n\n", "    return\
    \ sum( [round(n ** 2) for n in lst] )\n", "    \n    # your code here\n    total\
    \ = 0\n    for num in lst:\n        total += num*num\n    return int(math.ceil(total))\n",
  "    ### Solution goes here\n    ", "    return sum(map(lambda el: int(ceil(el*el)),\
    \ lst))\n", "    return sum(map(lambda x: int(x) ** 2, lst))\n", "    result =\
    \ 0\n    for element in lst:\n        result += element * element\n    return\
    \ result\n", "    sum_ = sum(lst)\n    if abs(sum_) < 1.0E-8:\n        sum_ =\
    \ 0\n    return int(round(sum_, 0))\n\n", "    lst = [int(ceil(elem)) for elem\
    \ in lst]\n    lst = [elem**2 for elem in lst]\n    return sum(lst)\n</cell>\n\
    <cell>", "    lst = [round(i, int(math.ceil(math.ceil(i)))) for i in lst]\n  \
    \  return sum([x*x for x in lst])\n", "    lst = list(map(lambda x: int(math.ceil(x)),\
    \ lst))\n    return sum(map(lambda x: x ** 2, lst))\n\n", "    # Your code here\n\
    \    return sum(x ** 2 for x in lst)\n", "    return sum(x*x for x in lst)\n",
  "    lst = list(map(lambda x:round(x),lst))\n    return sum(map(lambda x:x**2,lst))\n\
    \n", "    sum = 0\n    for num in lst:\n        sum += num * num\n    \n    return\
    \ int(math.ceil(sum))\n\n    ", "    return sum(a*a for a in lst)\n", "    return\
    \ sum(map(int,map(round,lst)))\n\n", "    res=0\n    for x in lst:\n        res+=x**2\n\
    \    return int(ceil(res))\n</cell>\n<text>\nProblem 9\nImplement the function\
    \ num_evens, which takes in a list of numbers and returns True if the number of\
    \ even numbers in the list are equal to the list length, and False otherwise.\n\
    \n    >>> num_evens([3, 10, 2, 1])\n    True\n    >>> num_evens([3, 10, 2, 6,\
    \ 5, 1])\n    False\n    \"\"\"\n", "    length = len(lst)\n    square = [i**2\
    \ for i in range(length)]\n    return sum(map(round, square))\n", "    lst = sorted(lst,\
    \ reverse=True)\n    total = 0\n    for i in range(0, len(lst)):\n        total\
    \ += lst[i] * lst[i]\n    total = round(total, 2)\n    return total\n", "    return\
    \ sum(int(round(num ** 2)) for num in lst)\n\n", "    # YOUR CODE HERE\n    sum\
    \ = 0\n    for i in lst:\n        sum += int(round(i, 0)) ** 2\n    return sum\n",
  "    \n    lst = sorted(lst)\n    lst = map(ceil, lst)\n    \n    sum_squares =\
    \ 0\n    \n    for x in lst:\n        sum_squares += x ** 2\n    \n    return\
    \ sum_squares\n</cell>\n<cell>", "    return sum(x**2 for x in lst)\n\n", "  \
    \  s = 0\n    for i in lst:\n        s += int(i ** 2)\n    return int(s)\n</cell>\n\
    <cell>\nsum_squares([1.0, 2.0, 3.0])\n</cell>\n<cell>\nsum_squares([1.0, 4.0,\
    \ 9.0])\n</cell>\n<cell>\nsum_squares([1.0, 3.0, 5.0, 7.0])\n</cell>\n<cell>\n\
    sum_squares([1.4, 4.2, 0.0])\n</cell>\n<cell>\nsum_squares([-2.4, 1.0, 1.0])\n\
    </cell>\n<cell>", "    return sum(map(lambda x: int(round(x*x))**2, lst))\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=python,python-3.x dscore=2 |>\nYou can try this\n\
    <code>\nlst = [2.5, 2.0, 3.5, 4.0, 4.5, 4.75, 4.75, 5.5, 8.0, 9.0]\nprint(sum(map(lambda\
    \ x: round(x*x, 2), lst)))\n</code>\nOutput:\n<code>\n62.0\n</code>\n<|/ a |>\n\
    <| c |>\nI don't see how this could be upvoted more than once. Why are you rounding\
    \ each element before squaring them? Rounding only makes sense when you round\
    \ down, but then you round it up again afterwards.\n<|/ c |>\n<| c |>\nThe question\
    \ says: round each element in the list to the upper int(Ceiling) first. He just\
    \ need to multiply, sum squared.\n<|/ c |>\n<| c |>\nI understand that, but rounding\
    \ each element before squaring it is going to round the wrong numbers. Why don't\
    \ you just round the list and then square the numbers?\n<|/ c |>\n<| c |>\nYou\
    \ round the wrong numbers because that's not what the question asks. Your answer\
    \ gives the wrong answer because it doesn't round to the nearest integer.\n<|/\
    \ c |>\n<| c |>\nYou also need to square the numbers before you square them, since\
    \ your answer gives the wrong result for numbers bigger than 9. If you round before\
    \ squaring you will get incorrect results. For example, for lst = [2.5, 8.0, 9.5,\
    \ 10], your answer gives 254 when it should be 258.\n<|/ c |>\n<| a dscore=0 |>\n\
    I hope this helps:\n<code>\nlst = [2.5, 2.0, 3.5, 4.0, 4.5, 4.75, 4.75, 5.5, 8.0,\
    \ 9.0]\nresult = sum(map(lambda x: (round(x, 2))**2, lst))\nprint(result)\n</code>\n\
    <|/ a tags=python,python-3.x |>\n<| c |>\nDon't use `map` with `lambda`.\n<|/\
    \ c |>\n<| c |>\nYou don't need to round before squaring them.\n<|/ c |>\n<| c\
    \ |>\nIt's not wrong to use map in cases where you don't need to apply a lambda\
    \ function. I found this answer on the internet: https://stackoverflow.com/questions/390250/how-do-you-map-a-lambda-to-a-list\n\
    <|/ c |>\n<| c |>\nI guess it would be fine if you wanted to apply a lambda function\
    \ to a list. But you don't need a lambda function at all here. You don't need\
    \ the map ", "    return sum(map(math.ceil, lst))\n", "    sum = 0\n    for i\
    \ in lst:\n        sum += i * i\n    return int(round(sum))\n\n", "    squared_sum\
    \ = 0\n    for num in lst:\n        squared_sum += int(round(num*num))\n    return\
    \ squared_sum\n\n", "    squares = []\n    for n in lst:\n        squares.append(n**2)\n\
    \    return sum(squares)\n\n", "    # your code here\n\n    return sum((int(round(i))**2)for\
    \ i in lst)\n    \n</cell>\n<cell>\n%%time\nsum_squares(test2[0])\n</cell>\n<cell>\n\
    %%time\nsum_squares(test2[0])\n</cell>\n<cell>\n%%time\nsum_squares(test2[0])\n\
    </cell>\n<cell>\n%%time\nsum_squares(test2[0])\n</cell>\n<cell>\n%%time\nsum_squares(test2[0])\n\
    </cell>\n<cell>\n%%time\nsum_squares(test2[0])\n</cell>\n<cell>\n%%time\nsum_squares(test2[0])\n\
    </cell>\n<cell>\n%%time\nsum_squares(test2[0])\n</cell>\n<cell>\n%%time\nsum_squares(test2[0])\n\
    </cell>\n<cell>\n%%time\nsum_squares(test2[0])\n</cell>\n<cell>\n%%time\nsum_squares(test2[0])\n\
    </cell>\n<cell>\n%%time\nsum_squares(test2[0])\n</cell>\n<cell>\n%%time\nsum_squares(test2[0])\n\
    </cell>\n<cell>\n%%time\nsum_squares(test2[0])\n</cell>\n<cell>\n%%time\nsum_squares(test2[0])\n\
    </cell>\n<cell>\n%%time\nsum_squares(test2[0])\n</cell>\n<cell>\n%%time\nsum_squares(test2[0])\n\
    </cell>\n<cell>\n%%time\nsum_squares(test2[0])\n</cell>\n<cell>\n%%time\nsum_squares(test2[0])\n\
    </cell>\n<cell>\n%%time\nsum_squares(test2[0])\n</cell>\n<cell>\n%%time\nsum_squares(test2[0])\n\
    </cell>\n<cell>\n%%time\nsum_squares(test2[0])\n</cell>\n<cell>\n%%time\nsum_squares(test2[0])\n\
    </cell>\n<cell>\n%%time\nsum_squares(test2[0])\n</cell>\n<cell>\n%%time\nsum_squ",
  "    # Your code here\n    if len(lst) == 0:\n        return 0\n    else:\n    \
    \    # sort the list first\n        lst = sorted(lst)\n        sum = 0\n     \
    \   for elem in lst:\n            sum+=elem*elem\n        \n        return round(sum,0)\n",
  "    lst = sorted(lst)\n    squares = [i**2 for i in lst]\n    return sum(squares)\n",
  "    sum_square = 0\n    for i in lst:\n        sum_square += i ** 2\n    return\
    \ int(sum_square)\n", "    return sum([int(math.ceil(element)) for element in\
    \ lst])\n    ", "    sum = 0\n    for i in lst:\n        sum += int(round(i))**2\n\
    \    return sum\n\n", "    return sum(x**2 for x in lst)\n", "    res = 0\n  \
    \  for x in lst:\n        res += x ** 2\n    return int(ceil(res / len(lst)))\n\
    \n", "    return sum(math.ceil(elem*elem) for elem in lst)\n", "    count = 0\n\
    \    for i in lst:\n        count += i ** 2\n    return int(round(count, 0))\n\
    </cell>\n<cell>\n%%timeit\nsum_squares(lst)\n</cell>\n<cell>\n%timeit sum_squares(lst)\n\
    </cell>\n<text>\nSolution\n\n</text>\n<cell>", "    sum = 0\n    for num in lst:\n\
    \        sum += num ** 2\n    return sum\n", "    return sum(int(math.ceil(el))\
    \ for el in lst)\n", "    my_sum = 0\n    for i in lst:\n        my_sum += int(math.ceil(i))\n\
    \    return my_sum\n\n", "    lst = list(map(int, lst))\n    return sum(map(lambda\
    \ x: x ** 2, lst))", "    return sum(map(lambda x: round(x * x), lst))\n\n", " \
    \   return sum(map(lambda x: int(x * x), lst))\n", "    sum = 0\n    for i in\
    \ lst:\n        sum += int(math.ceil(math.pow(i,2)))\n    return sum\n", "   \
    \ squares = 0\n    for x in lst:\n        x = round(x, int(math.ceil(x)))\n  \
    \      squares += x ** 2\n    return squares\n", "    sum_squares = 0\n    for\
    \ num in lst:\n        sum_squares += num * num\n    return int(round(sum_squares))\n\
    </cell>\n<cell>", "    # init return 0\n    total = 0\n    for x in lst:\n   \
    \     total = total + (x ** 2)\n    return total\n", "    \n    return sum(map(lambda\
    \ x: int(round(x * x, 0)), lst))\n</cell>\n<cell>\nsum_squares([1.0, 2.0, 3.0])\n\
    </cell>\n<text>\nWrite a function that takes a list and returns True if the list\
    \ has at least two elements, otherwise False. Do not use the any built-in function\
    \ of the Python language\n\n\n</text>\n<cell>", "    for i in range(len(lst)):\n\
    \        lst[i] = round(lst[i], 6)\n    return sum(map(lambda x: x ** 2, lst))\n",
  "    length = len(lst)\n    sum_ = 0\n    for i in range(length):\n        sum_\
    \ += int(ceil(lst[i] ** 2)) # Ceiling here\n    return sum_\n\n", "    sq, count\
    \ = [], 0\n    \n    for i in lst:\n        sq.append(round(int(i**2)))\n    \
    \    count += 1\n    \n    return sum(sq) * count \n</cell>\n<cell>", "    lst\
    \ = [round(i, int(math.ceil(math.log10(i)))) for i in lst]\n    return sum([i**2\
    \ for i in lst])\n\n", "    pass\n\n", "    res = 0\n    for i in lst:\n     \
    \   res += int(math.ceil(i))*int(math.ceil(i))\n    return res\n", "    sum_ =\
    \ 0\n    for i in range(len(lst)):\n        sum_ = sum_ + lst[i]*lst[i]\n    return\
    \ int(sum_)\n", "    pass\n", "    lst = [float(x) for x in lst]\n    return sum(x*x\
    \ for x in lst)\n\n", "    # your code here\n    return sum(map(lambda x:round(x),lst))\n\
    \n", "    lst = [int(c) for c in lst]\n    return sum(l**2 for l in lst)\n", " \
    \   sum = 0\n    for number in lst:\n        sum += round(number) ** 2\n    return\
    \ sum\n\n", "    return sum(map(lambda x: int(round(x ** 2)), lst))\n\n", "  \
    \  if any(x < 0 for x in lst):\n        raise ValueError(\"You cannot have a negative\
    \ number\")\n\n    sum_ = sum(map(lambda x: int(round(x)), lst))\n    sum_ = pow(sum_,\
    \ 0.5)\n    return sum_\n", "    return sum(map(int,list(map(round,lst))**2))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<|\
    \ a dscore=0 |>\nThis is a simple and straight forward way where you don't have\
    \ to define any function.\n<code>\nlst = [-4, -2, 1, 4, 1]\n\nlst2 = []\n\nfor\
    \ i in lst:\n    lst2.append(int(i))\n\nprint(lst2)\n", "    \n    numbers = list(map(round,\
    \ lst))\n    squares = map(lambda x: x * x, numbers)\n    return sum(squares)\n\
    \n", "    sum = 0\n    for num in lst:\n        sum += num * num\n    return round(sum)\n",
  "    summe = 0\n    for i in lst:\n        summe += i ** 2\n    return summe\n<|/\
    \ file ext=.py source=github filename=lecture02.py dstars=1 |>\n<| c |>\nWelcome\
    \ to Stack Overflow. Code dumps without any explanation are rarely helpful. Stack\
    \ Overflow is about learning, not providing snippets to blindly copy and paste.\
    \ Please [edit] your question and explain how it works better than what the OP\
    \ provided.\n<|/ c |>\n<| a tags=python |>\nIn Python, you can use map to do this\
    \ easily:\n<code>", "    return sum(map(lambda x: round(x*x,2), lst))\n      \
    \  \n\"\"\"", "    \n    squares = []\n    for i in lst:\n        squares.append(round(math.pow(i,\
    \ 2), 0))\n    return sum(squares)\n", "    pass\n", "    result = 0\n    lst\
    \ = lst[:]\n    for num in lst:\n        result = result + num*num\n    return\
    \ int(result)\n</cell>\n<text>\nProblem #12\nGiven a list of numbers, return all\
    \ possible subsets.\nThe output list will contain all the possible subsets.\n\
    For example:\nInput: [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2],[1,3],[]]\n\
    \n</text>\n<cell>\nfrom typing import List\nfrom itertools import permutations\n",
  "    return sum(int(round(num*num)) ** 2 for num in lst)\n", "    # write your code\
    \ here\n    pass\n", "    total = 0\n    for num in lst:\n        total += num\
    \ * num\n        total = int(total)\n    return total\n\n", "    sum_squares =\
    \ 0\n    for i in lst:\n        sum_squares += i * i\n    return int(sum_squares)\
    \ + sum_squares % int(1e6)\n", "    lst = list(map(round, lst))\n    return sum(list(map(lambda\
    \ x:x*x, lst)))\n", "    # your code here\n    ans = 0.0\n    for i in range(len(lst)):\n\
    \        ans += lst[i] * lst[i]\n    return int(ans)\n", "    return sum(list(map(lambda\
    \ x: round(x * x), lst)))\n", "    squares = [x * x for x in lst]\n    return\
    \ sum(squares)\n", "    return sum(list(map(lambda x: int(x + 0.5) ** 2, lst)))\n\
    \n", "    \n    return sum(map(round, map(lambda x: x**2, lst)))\n    \n</code>\n\
    <|/ a dscore=1 tags=python,algorithm,arrays,list |>\n<| a dscore=0 |>\nTry this.\n\
    <code>", "    return sum(map(lambda x: int(round(x**2)), lst))\n", "    \n   \
    \ lst = [round(i, int(math.ceil(i))) for i in lst]\n    return sum( i**2 for i\
    \ in lst )\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhat happens if you try your\
    \ code with the input `lst([1.4, 4.2, 0.0])` ?\n<|/ c |>\n<| c |>\nIt gives me\
    \ this error, ```IndexError: list index out of range```\n<|/ c |>\n<| c |>\nI\
    \ forgot to take care of edge cases. Fixed it\n<|/ c |>\n<| c |>\nI still get\
    \ ```IndexError: list index out of range```\n<|/ c |>\n<| c |>\nTry it now. I've\
    \ fixed it again.\n<|/ c |>\n<| a dscore=0 |>\nHere's a solution using recursion:\n\
    <code>", "    return sum(map(lambda x: math.ceil(x) ** 2, lst))\n", "    \n  \
    \  squares = []\n    for x in lst:\n        squares.append(round(x*x,-1))\n  \
    \  return sum(squares)\n", "    import math\n    squares = []\n    for x in lst:\n\
    \        squares.append(round(x, int(math.ceil(x))))\n    return sum(squares)\n",
  "    lst = map(lambda x: math.ceil(x), lst)\n    return sum(map(lambda x: math.pow(x,\
    \ 2), lst))\n", "    \n    # Method 1: Using for-loop\n    sum_squares = 0\n \
    \   for num in lst:\n        sum_squares += num ** 2\n        \n    # Method 2:\
    \ Using list comprehension\n    sum_squares = sum(num ** 2 for num in lst)\n \
    \   return int(sum_squares)\n\n", "    if len(lst) == 0:\n        return 0\n \
    \   l = len(lst)\n    m = max(l)\n    return sum((l[x] * l[x] for x in range(1,\
    \ m+1)))\n", "    return sum(map(lambda x: int(ceil(x * x)\n                 \
    \          ), lst))\n\n\"\"\"", "    return sum(int(x*x) for x in lst)\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nNice, but this does not round up at the ceiling. You\
    \ can check my solution below.\n<|/ c |>\n<| a dscore=0 |>\nThis is my simple\
    \ solution and it works :) \n<code>", "    return sum( [ i ** 2 for i in lst ]\
    \ )\n", "    lst = [round(x, int(math.ceil(x))) for x in lst]\n    return sum(map(lambda\
    \ x: x**2, lst))\n</cell>\n<cell>", "    if len(lst) < 1: return 0\n    \n   \
    \ total = 0\n    for x in lst:\n        total += round(math.sqrt(x))\n    return\
    \ total\n", "    sum_ = sum(lst)\n    return sum_ ** 2\n\n", "    return sum(map(lambda\
    \ x: math.ceil(x)*x, lst))\n", "    # Write your answer below\n    \n    return\
    \ sum(map(lambda x: int(math.ceil(x*x)), lst))\n\n", "    sum_ = sum(map(lambda\
    \ x: int(ceil(x * x)), lst))\n    return sum_\n", "    from math import ceil,\
    \ sqrt\n    return sum(map(lambda x: int(ceil(sqrt(x))*x), lst))\n\n", "    return\
    \ sum([int(e) for e in lst])\n</code>\n<|/ a dscore=0 |>\n<| a tags=python,list\
    \ |>\nThis is not the best approach, but it is short and easy:\n<code>\nlst =\
    \ [10, 20, 30]\n\nlst = [int(e) for e in lst]\n\nlst.sort()\n\nprint(lst)\n",
  "    \n    sum = 0\n    for i in lst:\n        sum += int(np.ceil(i))\n    return\
    \ sum\n", "    return sum(map(lambda x: round(x, int(ceiling(x))))\n         \
    \        ** 2 for x in lst)\n", "    return sum(map(lambda x: round(x, 2), lst))\n\
    \n</cell>\n<cell>", "    pass\n</cell>\n<cell>", "    \n", "    sum = 0\n    \n\
    \    for i in lst:\n        sum += int(math.ceil(i) ** 2)\n    \n    return sum\n",
  "    if not lst:\n        return None\n    squares = sum(x**2 for x in lst)\n  \
    \  return round(squares)\n</cell>\n<cell>", "    return sum((x**2)for x in lst)\n\
    \    ", "    \n    lst = lst[::-1]\n    return sum(map(math.ceil, lst))\n    ",
  "    sum_squares = 0\n    for number in lst:\n        sum_squares += number ** 2\n\
    \    return int(sum_squares)\n</cell>\n<cell>", "    sum = 0\n    for i in lst:\n\
    \        sum += i ** 2\n    return int(math.ceil(sum))\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 tags=ceil,list,python |>\nPython does not have a ceil function, but\
    \ the math module does have ceil.  As you can see in the docs, math.ceil takes\
    \ a number and returns the next higher integer.\nThis code should work:\n<code>\n\
    from math import ceil\n", "    lst = [int(ceil(x)) for x in lst]\n    sum_lst\
    \ = lst[0] + lst[1] + lst[2]\n    return sum_lst\n</cell>\n<cell>\nlst([-1.4,\
    \ 1.2, -9.0, 4.1, 4.0, 1.0])\n</cell>\n<cell>\nlst([2.7, 9.0, -8.1, -2.0, 3.0])\n\
    </cell>\n<cell>\nlst([1.1, 2.1, -3.1, -4.1, 5.1])\n</cell>\n<cell>\nlst([1.1,\
    \ 3.1, 5.1, -8.1, -9.1])\n</cell>\n<cell>\nlst([1.1, 2.1, 3.1, 4.1, 5.1])\n</cell>\n\
    <cell>\nlst([0.8, -0.6, 3.2, -0.8])\n</cell>\n<cell>\nlst([0.8, -0.6, 3.2, -0.8])\n\
    </cell>\n<text>\n\n\n</text>\n<text>\nGiven a binary search tree and a number\
    \ k, you need to find the sum of the numbers in the left subtree and right subtree\
    \ of the binary search tree that have value equal to k.\nExample 1:\nInput: root\
    \ = None , k = 4\nOutput: 8\nExplanation:\nsum-left (root -> 2) = 8 + sum-right\
    \ (root -> 3) = 6\nsum-left (root -> 1) = 1 + sum-right (root -> 0) = 1 + 0 =\
    \ 1\nExample 2:\nInput: root = None , k = 3\nOutput: 3\nExplanation:\nsum-left\
    \ (root -> 0) = 3\nsum-right (root -> 3) = 3\n\n\n</text>\n<cell>", "    lst =\
    \ lst[:]\n    lst = sorted(lst)\n    sum_square = 0\n    \n    for a in lst:\n\
    \        sum_square += (a * a)\n        \n    sum_square = int(round(sum_square))\n\
    \    return sum_square\n", "    squared_sum = 0\n    for num in lst:\n       \
    \ squared_sum += num * num\n    return int(round(squared_sum))\n\n", "    return\
    \ sum(map(lambda x: round(x*x,0), lst))\n", "    my_sum = 0\n    for x in lst:\n\
    \        my_sum += int(round(x.__ceil__()))\n    return my_sum\n\n", "    return\
    \ sum(map(math.ceil, lst))*sum(map(math.sqrt, lst))\n\n", "    return sum(map(lambda\
    \ x: int(round(x*x)**0.5), lst))\n", "    return sum([int(round(elem*elem)) for\
    \ elem in lst])\n</code>\n<|/ a dscore=0 |>\n<| c |>\nIt would be better to describe\
    \ what you are doing here, instead of just dumping the code\n<|/ c |>\n<| a |>\n\
    <code>", "    # TODO: Write your code here\n    raise NotImplementedError()\n\
    <|/ file ext=.py |>\n<| a dscore=0 tags=python,list |>\nTry this!\n<code>", " \
    \   return sum(map(lambda x: int(math.ceil(x * x)), lst))\n", "    sum_ = 0.0\n\
    \    for i in lst:\n        sum_ += round(i**2)\n    return sum_\n", "    return\
    \ sum([int(round(num**0.5)) for num in lst])\n\n", "    \n    # Your code here\n\
    \    return sum(map(lambda x: int(round(x * x)**2),lst))\n", "    sqr = 0.\n \
    \   for n in lst:\n        sqr += n ** 2\n    return int(sqr)\n\n", "    return\
    \ sum(map(lambda x: round(x ** 2, 0), lst))\n", "    # Your code here\n    \n\
    \    return sum(map(lambda x: int(math.ceil(math.pow(x,2))),lst))\n</cell>\n<cell>",
  "    lst = list(lst)\n    lst = [round(num) for num in lst]\n    return sum(map(lambda\
    \ x: x**2, lst))\n</cell>\n<cell>\n%timeit sum_squares(my_list)\n</cell>\n<cell>",
  "    # your code here\n    sum_ = 0\n    for i in lst:\n        sum_ += int(math.ceil(i))\n\
    \    return sum_\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for the answer\n\
    <|/ c |>\n<| c |>\nThank you for the answer, but how do i return this sum_squares\
    \ function as int when I'm calling it in a function?\n<|/ c |>\n<| c |>\n`print(sum_squares(lst))`\n\
    <|/ c |>\n<| a tags=python dscore=0 |>\nThe function you wrote is correct:\n<code>",
  "    if len(lst) == 0:\n        return 0\n    \n    sums = 0\n    for i in range(len(lst)):\n\
    \        sums += lst[i]*lst[i]\n    return int(sums)\n", "    return sum(list(map(lambda\
    \ x:round(x*x), lst)))\n", "    sum = 0\n    for num in lst:\n        sum += num\
    \ * num\n    return sum\n    ", "    return int(sum(lst) ** 2)\n\n", "    \n \
    \   return sum(map(math.ceil,lst))\n    \n", "    for x in lst:\n        #print(x)\n\
    \        x=round(x,1)\n    return sum( x * x for x in lst)\n</cell>\n<text>\n\
    Solution\n\n</text>\n<cell>", "    return sum(map(lambda x: round(x ** 2, int(math.ceil(math.log(x,\
    \ 2)))), lst))\n", "    lst = sorted(lst)\n    sum_lst = []\n    for item in lst:\n\
    \        sum_lst.append(int(math.ceil(item)) + int(math.floor(item)))\n    return\
    \ sum(sum_lst)\n\n", "    return sum(x**2 for x in lst)\n", "    return sum(map(lambda\
    \ x: int(round(x*x,0)), lst))\n", "    sum_squares = 0\n    for i in lst:\n  \
    \      sum_squares += i ** 2\n    return round(sum_squares, 0)\n\n", "    \n \
    \   ### your code goes here\n    \n    # Your code goes here\n    \n    return\
    \ sum((round(num, int(math.ceil(math.ceil(num))))) for num in lst)\n", "    #\
    \ TODO: implement function\n    sqrSum = 0\n    for i in range(len(lst)):\n  \
    \      sqrSum = sqrSum + lst[i]\n    return int(sqrSum)\n", "    \n    \n    \n\
    \    ", "    for num in lst:\n        num = round(num)\n    return sum(num **\
    \ 2 for num in lst)\n", "    pass\n\n", "    sum_squared = 0\n    for item in\
    \ lst:\n        sum_squared += int(ceil(item))\n    return sum_squared\n</cell>\n\
    <cell>\nlst([1.0, 2.0, 3.0])\n</cell>\n<cell>\nlst([1.0, 4.0, 9.0])\n</cell>\n\
    <cell>\nlst([1.0, 3.0, 5.0, 7.0])\n</cell>\n<cell>\nlst([1.4, 4.2, 0.0])\n</cell>\n\
    <cell>\nlst([-2.4, 1.0, 1.0])\n</cell>\n<cell>\nlst([4.3, 3.1, 7.6, 5.5, -3.0])\n\
    </cell>\n<cell>\nlst([0.4, 0.3, 0.1, 0.2])\n</cell>\n<cell>\nlst([4.3, 3.1, 7.6,\
    \ 5.5, -3.0])\n</cell>\n<cell>\nlst([0.4, 0.3, 0.1, 0.2])\n</cell>\n<cell>\nlst([1.4,\
    \ 4.2, 0.0])\n</cell>\n<text>\nProblem 8\n\n</text>\n<cell>", "    sum_squares\
    \ = 0\n    for num in lst:\n        sum_squares += int(ceil(num ** 2))\n    return\
    \ sum_squares\n", "    sum = 0\n    for num in lst:\n        sum += num*num\n\
    \    return int(ceiling(sum))\n", "    \n    \n    lst = map(lambda x: int(round(x,\
    \ 0)), lst)\n    \n    return sum(map(lambda x: x**2, lst))\n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n", "    sum = 0\n    for num in lst:\n        sum\
    \ += int(num) ** 2\n    return sum\n\n", "    lst = sorted(lst)\n    return sum([\
    \ i*i for i in lst])\n", "    lst1 = []\n    for x in range(len(lst)):\n     \
    \   lst1.append(int(ceil(lst[x]))) #rounds each element to ceiling\n    return\
    \ sum(lst1)*sum(lst1)\n    ", "    sum_squares = 0\n    for item in lst:\n   \
    \     sum_squares += int(math.ceil(item)) * int(math.ceil(item)) * int(math.ceil(item))\
    \ * int(math.ceil(item))\n    return sum_squares\n            \n</cell>\n<cell>\n\
    sum_squares([1.0, 2.0, 3.0])\n</cell>\n<cell>\nsum_squares([1.0, 4.0, 9.0])\n\
    </cell>\n<cell>\nsum_squares([1.0, 3.0, 5.0, 7.0])\n</cell>\n<cell>\nsum_squares([1.4,\
    \ 4.2, 0.0])\n</cell>\n<cell>\nsum_squares([-2.4, 1.0, 1.0])\n</cell>\n<text>\n\
    Problem 2.3 Write a function that takes a non-empty list, a, of positive integers\
    \ and returns \u2211i = 1 \u2264 i \u2264 len(a) a[i].\n\nExamples:\n    >>> a\
    \ = [4, 3, 1]\n    >>> sum(a)\n    9\n    >>> a = [4, -3, 1]\n    >>> sum(a)\n\
    \    6\n    >>> a = [-4, -3, 1]\n    >>> sum(a)\n    4\n\n</text>\n<cell>", " \
    \   if len(lst) < 2:\n        return lst[0]\n    return sum((int(math.ceil(lst[0])\
    \ * lst[0]) + int(math.ceil(lst[1]) * lst[1]))\n            for lst in lst)\n\n",
  "    pass\n</cell>\n<text>\nList comprehension way\n\n</text>\n<cell>", "    \n\
    \    return sum(map(lambda x: int(round(x*x))**2, lst))\n", "    total = 0\n \
    \   for item in lst:\n        total += item * item\n    return total\n\n", " \
    \   def ceil(val: int) -> float:\n        return math.ceil(val)\n    return sum(map(lambda\
    \ x: round(x * x), lst))\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
