language: py
name: HumanEval_56_correct_bracketing
results:
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '<':\n            if not stack:\n\
    \                return False\n            top = stack[-1]\n            if top\
    \ == '<':\n                return False\n        elif c == '>':\n            top\
    \ = stack.pop()\n            if not stack:\n                return False\n   \
    \         if top != '>':\n                return False\n        else:\n      \
    \      stack.append(c)\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa1c9amu1.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpa1c9amu1.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpa1c9amu1.py\"\
    , line 34, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ len(brackets.strip()) % 2 == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnkdjifpo.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnkdjifpo.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnkdjifpo.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    b1,\
    \ c1 = brackets\n    b2, c2 = brackets[2:]\n    stack = [(b1, c1)]\n    last =\
    \ (0, 0)\n    while stack:\n        b, c = stack.pop()\n        if b == b2:\n\
    \            last = (c, c)\n        else:\n            stack.insert(0, (b, last[1]))\n\
    \            stack.insert(0, (c, last[0]))\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_olxzmiq.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp_olxzmiq.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_olxzmiq.py\"\
    , line 29, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp_olxzmiq.py\"\
    , line 15, in correct_bracketing\n    b2, c2 = brackets[2:]\nValueError: not enough\
    \ values to unpack (expected 2, got 0)\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[str]\n    for c in brackets:\n        if c == '<':\n    \
    \        if stack:\n                if len(stack) > 1:\n                    return\
    \ False\n                stack.pop()\n            else:\n                stack.append(c)\n\
    \        elif c == '>':\n            if not stack:\n                return False\n\
    \            if len(stack) > 1:\n                return False\n            stack.pop()\n\
    \            if not stack:\n                stack.append(c)\n            else:\n\
    \                stack.append(c)\n        else:\n            if not stack:\n \
    \               return False\n            if len(stack) > 1:\n               \
    \ return False\n            stack.append(c)\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpln2kjrej.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpln2kjrej.py\", line 57,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpln2kjrej.py\"\
    , line 43, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack:\
    \ Set[str] = []\n    for char in brackets:\n        if char == '<':\n        \
    \    stack.append(char)\n        elif char == '>':\n            if len(stack)\
    \ == 0:\n                return False\n            stack.pop()\n        else:\n\
    \            if stack:\n                return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7rz30h6v.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp7rz30h6v.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7rz30h6v.py\"\
    , line 35, in check\n    assert candidate('<') == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # a\
    \ stack of bools, each telling whether the corresponding closing bracket\n   \
    \ # has been seen yet\n    stack = [False] * len(brackets)\n    # how many open\
    \ brackets did we see?\n    open_brackets = 0\n    i = 0\n    # walk through brackets\
    \ one by one, always pushing True when seeing a\n    # close bracket, always pushing\
    \ False otherwise\n    for b in brackets:\n        stack[i] = True\n        if\
    \ b == '<':\n            open_brackets += 1\n        elif b == '>':\n        \
    \    if stack[i - 1]:\n                open_brackets -= 1\n            else:\n\
    \                # this is the first close bracket, we're done now\n         \
    \       open_brackets = 0\n        if open_brackets == 0:\n            # if we\
    \ didn't see any open brackets, we're done\n            return False\n       \
    \ i += 1\n    # if we got here, all brackets matched\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9nq2bo0.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpi9nq2bo0.py\", line 55,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpi9nq2bo0.py\"\
    , line 41, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ all(brackets[c] == '<' for c in brackets)\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt7n_bx50.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpt7n_bx50.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpt7n_bx50.py\"\
    , line 18, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpt7n_bx50.py\"\
    , line 14, in correct_bracketing\n    return all(brackets[c] == '<' for c in brackets)\n\
    \  File \"/tmp/tmpt7n_bx50.py\", line 14, in <genexpr>\n    return all(brackets[c]\
    \ == '<' for c in brackets)\nTypeError: string indices must be integers\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[str]\n    stack.append((brackets[0], brackets[0]))\n    char\
    \ = None  # type: Optional[str]\n    for idx, c in enumerate(brackets):\n    \
    \    if char is None:\n            char = c\n        elif char != c:\n       \
    \     return False\n        if stack and stack[-1][0] != c:\n            return\
    \ False\n        stack.append((c, c))\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkvdyr2fk.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpkvdyr2fk.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkvdyr2fk.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # assert\
    \ brackets is not None\n    found = 0\n    for i in range(len(brackets)):\n  \
    \      if brackets[i] == '<':\n            found += 1\n        elif brackets[i]\
    \ == '>':\n            if found == 0:\n                return False\n        \
    \    found -= 1\n        else:\n            return False\n    return True\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3_0ruy6g.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp3_0ruy6g.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3_0ruy6g.py\"\
    , line 34, in check\n    assert candidate('<') == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[str]\n    for c in brackets:\n        if c == '<':\n    \
    \        if len(stack) == 0 or stack[-1] != '<':\n                return False\n\
    \        elif c == '>':\n            if len(stack) == 0 or stack[-1] != '>':\n\
    \                return False\n        stack.append(c)\n    if len(stack) != 1:\n\
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc509myfy.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpc509myfy.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpc509myfy.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    opens\
    \ = '<' + brackets\n    closes = '>' + brackets\n    num_opens = len(opens)\n\
    \    num_closes = len(closes)\n    if num_opens != num_closes:\n        return\
    \ False\n    for open_loc in range(num_opens):\n        if opens[open_loc] not\
    \ in closes:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwexcm9dh.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpwexcm9dh.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwexcm9dh.py\"\
    , line 31, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # brackets\
    \ has one less \">\" than \"<\"\n    return brackets.count('>') > brackets.count('<')\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjnhkfnqr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpjnhkfnqr.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjnhkfnqr.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n\
    \        elif b == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n        else:\n            return False\n  \
    \  return True\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsule8r6t.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpsule8r6t.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsule8r6t.py\"\
    , line 33, in check\n    assert candidate('<') == False\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        else:\n            if not stack:\n                return False\n    \
    \        if char == '>':\n                if not stack.pop():\n              \
    \      return False\n            else:\n                return False\n    return\
    \ not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n \
    \   assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # create\
    \ stack of \"open\" and \"close\" brackets\n    stack = []\n    for char in brackets:\n\
    \        if char == '<':\n            stack.append(True)\n        elif char ==\
    \ '>':\n            if len(stack) == 0:\n                return False\n      \
    \      else:\n                stack.pop()\n        else:\n            if len(stack)\
    \ == 0:\n                return False\n            if char != stack[-1]:\n   \
    \             return False\n    return len(stack) == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    closed_set = set()\n    for opening in brackets:\n    \
    \    closed = set(opening).intersection(brackets_set)\n        if closed:\n  \
    \          return True\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_gy3yzx.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpn_gy3yzx.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpn_gy3yzx.py\"\
    , line 28, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ any(\n        (brackets.count(i) == brackets.count(brackets[:i]))\n        for\
    \ i in range(len(brackets) - 1)\n    )\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcswhy0iu.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcswhy0iu.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcswhy0iu.py\"\
    , line 20, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpcswhy0iu.py\"\
    , line 14, in correct_bracketing\n    return any(\n  File \"/tmp/tmpcswhy0iu.py\"\
    , line 15, in <genexpr>\n    (brackets.count(i) == brackets.count(brackets[:i]))\n\
    TypeError: must be str, not int\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # split\
    \ brackets into list of chars\n    chars = brackets.split('>')\n    stack = []\n\
    \    for char in chars:\n        if char == '<':\n            if stack and stack[-1]\
    \ == '<':\n                stack.pop()\n            else:\n                return\
    \ False\n        elif char == '>':\n            if not stack:\n              \
    \  return False\n            elif stack[-1] == '<':\n                return False\n\
    \            else:\n                stack.pop()\n        else:\n            stack.append(char)\n\
    \    return True\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfa4ltz2m.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpfa4ltz2m.py\", line 49,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfa4ltz2m.py\"\
    , line 35, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c in '<>':\n            if stack:\n\
    \                if stack[-1] != c:\n                    return False\n      \
    \      stack.append(c)\n        else:\n            if len(stack) == 0:\n     \
    \           return False\n            first = stack.pop()\n            if c !=\
    \ first:\n                return False\n    if len(stack) != 0:\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmaz2xk8k.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpmaz2xk8k.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmaz2xk8k.py\"\
    , line 33, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = {x:y for x, y in zip(brackets, ('<', '>'))}\n    for op in brackets.values():\n\
    \        if op not in '<>':\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp530m8gw3.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp530m8gw3.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp530m8gw3.py\"\
    , line 26, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.replace(' ', '')\n    brackets = brackets.lower()\n    for i in range(len(brackets)):\n\
    \        if brackets[i] != brackets[i - 1]:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxxak9egh.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpxxak9egh.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxxak9egh.py\"\
    , line 23, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ all(brackets[i] == brackets[i+1] for i in range(len(brackets)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk2ndnhel.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpk2ndnhel.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpk2ndnhel.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets)\
    \ == 0:\n        return False\n    return all(brackets[i+1] == brackets[i] for\
    \ i in range(len(brackets)-1))\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc2jcyd2f.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc2jcyd2f.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpc2jcyd2f.py\"\
    , line 19, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for x in brackets:\n        if x == '<':\n            stack.append(x)\n\
    \        elif x == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n        else:\n            return False\n  \
    \  return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char in '<>':\n            if stack:\n\
    \                if not stack.pop():\n                    return False\n     \
    \       else:\n                stack.append(char)\n        else:\n           \
    \ if not stack:\n                return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdybmf4r2.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpdybmf4r2.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdybmf4r2.py\"\
    , line 33, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # make\
    \ sure brackets is a string rather than a list\n    if not isinstance(brackets,\
    \ str):\n        return False\n\n    # replace all brackets with single character,\
    \ say _\n    brackets = brackets.replace(\"<\", \"_\").replace(\">\", \"_\")\n\
    \n    # if the string has only one opening bracket, it's correct\n    # otherwise\
    \ it's wrong\n    has_single_bracket = len(brackets) == 1\n    if not has_single_bracket:\n\
    \        return False\n\n    # get the number of _ and compare that to len(brackets)\n\
    \    # for example, if brackets is '<<<', then len(brackets) is 3\n    # and the\
    \ number of _ is 2\n    return len(brackets) == 2 or len(brackets) == (len(brackets)\
    \ - 2)\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoijxvmuk.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpoijxvmuk.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpoijxvmuk.py\"\
    , line 34, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ len(set(brackets).intersection(brackets)) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lk3qb9a.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0lk3qb9a.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0lk3qb9a.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ not (any(bracket.endswith('>') for bracket in brackets) and\n              \
    \  any(bracket.startswith('<') for bracket in brackets))\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnc7e158.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwnc7e158.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwnc7e158.py\"\
    , line 19, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[str]\n    depth = 0\n    i = 0\n    for c in brackets:\n\
    \        if c == '<':\n            stack.append(c)\n            depth += 1\n \
    \           if depth > 1:\n                return False\n        elif c == '>':\n\
    \            if not stack or not stack.pop() == '<':\n                return False\n\
    \            depth -= 1\n        else:\n            return False\n        i +=\
    \ 1\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptcpy9z5u.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmptcpy9z5u.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptcpy9z5u.py\"\
    , line 35, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # check\
    \ that all characters in the brackets are in the string\n    brackets_set = set(brackets)\n\
    \    if brackets.count('<') != brackets.count('>'):\n        return False\n  \
    \  for opening, closing in zip(brackets[0::2], brackets[1::2]):\n        if opening\
    \ not in brackets_set:\n            return False\n        if closing not in brackets_set:\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm2rmgg2b.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpm2rmgg2b.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpm2rmgg2b.py\"\
    , line 31, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_set\
    \ = set(\"<>\").union(brackets)\n    for i in range(len(brackets)):\n        if\
    \ brackets[i] not in brackets_set:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvewm95on.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvewm95on.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpvewm95on.py\"\
    , line 26, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    num_open_brackets\
    \ = 0\n    for char in brackets:\n        if char == \"<\":\n            num_open_brackets\
    \ += 1\n        elif char == \">\":\n            if num_open_brackets == 0:\n\
    \                return False\n            num_open_brackets -= 1\n    if num_open_brackets\
    \ != 0:\n        return False\n    return True\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976504
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[str]\n    for opening_bracket in brackets:\n        if opening_bracket\
    \ == '<':\n            if stack and stack[-1] == '<':\n                return\
    \ False\n            else:\n                stack.append('>')\n        elif opening_bracket\
    \ == '>':\n            if stack and stack[-1] == '>':\n                stack.pop()\n\
    \            else:\n                return False\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ len(set(brackets)) == 1\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0l707nl4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0l707nl4.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0l707nl4.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # count\
    \ how many brackets were opened\n    num_open = 0\n    for char in brackets:\n\
    \        if char == '<':\n            num_open += 1\n        elif char == '>':\n\
    \            num_open -= 1\n    # check if all brackets were opened\n    if num_open\
    \ == 0 and num_open != 0:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64_rxkp3.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp64_rxkp3.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp64_rxkp3.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # only\
    \ need to test the end cases\n    for bracket in brackets:\n        if bracket\
    \ in '<>':\n            continue\n        if bracket not in '<>' and not bracket.isalpha():\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15rmwfzh.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp15rmwfzh.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp15rmwfzh.py\"\
    , line 28, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '<':\n            stack.append(c)\n\
    \        else:\n            if len(stack) == 0:\n                return False\n\
    \            top = stack.pop()\n            if c != top:\n                return\
    \ False\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe42o6c8p.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpe42o6c8p.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpe42o6c8p.py\"\
    , line 28, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack,\
    \ bracket_stack = [], []\n    for opening_bracket in brackets:\n        stack.append(opening_bracket)\n\
    \        if opening_bracket == \"<\":\n            bracket_stack.append(True)\n\
    \        elif opening_bracket == \">\":\n            bracket_stack.append(False)\n\
    \        else:\n            return False\n    len_stack = len(stack)\n    while\
    \ len_stack > 0:\n        if bracket_stack[len_stack-1] == stack[len_stack-1]:\n\
    \            len_stack -= 1\n        else:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz8mxaq7u.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpz8mxaq7u.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpz8mxaq7u.py\"\
    , line 33, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '<':\n            count +=\
    \ 1\n        elif char == '>':\n            count -= 1\n        else:\n      \
    \      return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0jhas_g.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpy0jhas_g.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpy0jhas_g.py\"\
    , line 31, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ bool(set(brackets).issubset(set('<>')))\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7fz19cgl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp7fz19cgl.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7fz19cgl.py\"\
    , line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ all(brackets[i] == brackets[i + 1] for i in range(len(brackets) - 1))\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd453gsp3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpd453gsp3.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpd453gsp3.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ ('>' not in brackets) and ('<' in brackets)\n\n\ndef check(candidate):\n   \
    \ assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n   \
    \ assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphaofok4p.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphaofok4p.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphaofok4p.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '<':\n            stack.append(c)\n\
    \        elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            top = stack.pop()\n            if top != c:\n           \
    \     return False\n        else:\n            if len(stack) == 0:\n         \
    \       return False\n            top = stack.pop()\n            if c == '>' and\
    \ top == '<':\n                return False\n            elif c != '<' and c !=\
    \ '>' and top != c:\n                return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcb6ivw4_.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpcb6ivw4_.py\", line 50,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcb6ivw4_.py\"\
    , line 36, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp2ibkakon.py\", line 15\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = deque()\n    brackets_dict = dict((c, i) for i, c in enumerate(brackets))\n\
    \    bracket_dict = {}\n    for c in brackets:\n        if c in bracket_dict:\n\
    \            bracket_dict[c] += 1\n        else:\n            bracket_dict[c]\
    \ = 1\n            stack.append((c, 0))\n    bracket_list = []\n    for c in brackets:\n\
    \        if c in bracket_dict and bracket_dict[c] == 1:\n            bracket_list.append(c)\n\
    \            bracket_dict[c] -= 1\n        elif stack:\n            t, count =\
    \ stack.popleft()\n            if c == t:\n                bracket_list.append(t)\n\
    \                bracket_dict[c] -= 1\n            else:\n                stack.append((c,\
    \ count))\n    return len(bracket_list) == len(brackets)\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiwp77l7o.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpiwp77l7o.py\", line 53,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpiwp77l7o.py\"\
    , line 39, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpiwp77l7o.py\"\
    , line 14, in correct_bracketing\n    stack = deque()\nNameError: name 'deque'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '<':\n            if not stack:\n\
    \                return False\n            stack.pop()\n        else:\n      \
    \      stack.append(c)\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_8pv8chs.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp_8pv8chs.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_8pv8chs.py\"\
    , line 26, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = deque()\n    for c in brackets:\n        if c == '<':\n            stack.append(c)\n\
    \        if c == '>':\n            if not stack:\n                return False\n\
    \            first = stack.pop()\n            if first != c:\n               \
    \ return False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfrg0jkp.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpkfrg0jkp.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkfrg0jkp.py\"\
    , line 28, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpkfrg0jkp.py\"\
    , line 14, in correct_bracketing\n    stack = deque()\nNameError: name 'deque'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ set(brackets) == set(['<', '>'])\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2knkwyw7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp2knkwyw7.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2knkwyw7.py\"\
    , line 21, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.split()\n    for bracket in brackets:\n        if bracket != '<'\
    \ and bracket != '>':\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi3h2m8mt.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpi3h2m8mt.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpi3h2m8mt.py\"\
    , line 22, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets\
    \ not in ('', '<>'):\n        raise ValueError(\"brackets must be a string of\
    \ '<' and '>'.\")\n    stack = []  # type: List[str]\n    for pos in range(len(brackets)):\n\
    \        if brackets[pos] == '<':\n            if not stack:\n               \
    \ return False\n            stack.append(pos)\n        elif brackets[pos] == '>':\n\
    \            if stack:\n                stack.pop()\n            else:\n     \
    \           return False\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa8l6tebe.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpa8l6tebe.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpa8l6tebe.py\"\
    , line 31, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[str]\n    for c in brackets:\n        if c == \"<\":\n  \
    \          if not stack:\n                return False\n            stack.pop()\n\
    \        elif c == \"<\":\n            stack.append(c)\n        elif c == \">\"\
    \ and stack:\n            if not stack[-1]:\n                return False\n  \
    \          stack.pop()\n        elif c == \">\" and (not stack or stack[-1] !=\
    \ \">\"):\n            return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmy67jv0t.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpmy67jv0t.py\", line 46,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmy67jv0t.py\"\
    , line 32, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ all(bracketed not in brackets for bracketed in \"<>\")\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd6tg5wzn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpd6tg5wzn.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpd6tg5wzn.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ all(bracket in ['<', '>'] for bracket in brackets)\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34x9olb4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp34x9olb4.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp34x9olb4.py\"\
    , line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets\
    \ not in ['<', '>']:\n        return False\n    stack = []\n    for c in brackets:\n\
    \        if c == '<':\n            stack.append(c)\n        elif c == '>':\n \
    \           if len(stack) == 0:\n                return False\n            if\
    \ stack[-1] != '<':\n                return False\n            stack.pop()\n \
    \       elif c == '><<>':\n            if len(stack) == 0:\n                return\
    \ False\n            if stack[-1] != '<':\n                return False\n    \
    \        if stack[-2] != '<':\n                return False\n            stack.pop()\n\
    \        else:\n            return False\n    if len(stack) != 0:\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpej6gh5_m.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmpej6gh5_m.py\", line 56,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpej6gh5_m.py\"\
    , line 42, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ len(set(brackets)) == 1 and all(c in brackets for c in '<>')\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph8k9vlnk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmph8k9vlnk.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph8k9vlnk.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '<':\n           \
    \ if stack:\n                stack.pop()\n        elif bracket == '>':\n     \
    \       if not stack:\n                return False\n            stack.pop()\n\
    \            stack.append('>')\n        else:\n            stack.append(bracket)\n\
    \    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5tixzzpt.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5tixzzpt.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5tixzzpt.py\"\
    , line 30, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.strip()\n    \n    open_brackets = [bracket.strip() for bracket in\
    \ brackets.split('>') if bracket.strip()]\n    close_brackets = [bracket.strip()\
    \ for bracket in brackets.split('<') if bracket.strip()]\n    \n    return len(open_brackets)\
    \ == len(close_brackets)\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxukw96vf.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpxukw96vf.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxukw96vf.py\"\
    , line 27, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ all(bracket.startswith('<') for bracket in brackets)\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppf6pw9if.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmppf6pw9if.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmppf6pw9if.py\"\
    , line 17, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # count('<')\
    \ + count('>') = count('<<><>>')\n    return brackets.count('<') <= brackets.count('>')\
    \ and brackets.count('<') >= brackets.count('>')\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpydbi0n.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpzpydbi0n.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzpydbi0n.py\"\
    , line 24, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_set\
    \ = set('<>')\n    return all(brackets_set.isdisjoint(bracket) for bracket in\
    \ brackets)\n\ndef check(candidate):\n    assert candidate('<>') == True\n   \
    \ assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsm40eemn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpsm40eemn.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsm40eemn.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for i, c in enumerate(brackets):\n        if c in '<':\n         \
    \   stack.append(c)\n        if c in '>' and stack.pop() != c:\n            return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoy3jn3yf.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoy3jn3yf.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpoy3jn3yf.py\"\
    , line 24, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_dict\
    \ = {'<': '>'}\n    return all(brackets_dict.get(bracket) == brackets_dict[bracket]\
    \ for bracket in brackets)\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5xtpvudy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5xtpvudy.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5xtpvudy.py\"\
    , line 19, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp5xtpvudy.py\"\
    , line 15, in correct_bracketing\n    return all(brackets_dict.get(bracket) ==\
    \ brackets_dict[bracket] for bracket in brackets)\n  File \"/tmp/tmp5xtpvudy.py\"\
    , line 15, in <genexpr>\n    return all(brackets_dict.get(bracket) == brackets_dict[bracket]\
    \ for bracket in brackets)\nKeyError: '>'\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\"\
    )\n    brackets = brackets.replace(\"<<\", \"\")\n    brackets = brackets.replace(\"\
    >>\", \"\")\n    brackets = brackets.replace(\"(<\", \"\")\n    brackets = brackets.replace(\"\
    (>\", \"\")\n    brackets = brackets.replace(\"<<<\", \"\")\n    brackets = brackets.replace(\"\
    (>>\", \"\")\n    brackets = brackets.replace(\"(<->\", \"\")\n    brackets =\
    \ brackets.replace(\"(-><\", \"\")\n    brackets = brackets.replace(\"(->->\"\
    , \"\")\n    brackets = brackets.replace(\"(<<<\", \"\")\n    brackets = brackets.replace(\"\
    (->>>\", \"\")\n    brackets = brackets.replace(\"(<<->\", \"\")\n    brackets\
    \ = brackets.replace(\"(-><<\", \"\")\n    brackets = brackets.replace(\"(>>>>\"\
    , \"\")\n    brackets = brackets.replace(\"(<<->>\", \"\")\n    brackets = brackets.replace(\"\
    (->>><\", \"\")\n    brackets = brackets.replace(\"(->>>>>\", \"\")\n    brackets\
    \ = brackets.replace(\"(>><->\", \"\")\n    brackets = brackets.replace(\"(>>-><\"\
    , \"\")\n    brackets = brackets.replace(\"(>>->->\", \"\")\n    brackets = brackets.replace(\"\
    (<->>\", \"\")\n    brackets = brackets.replace(\"(-><->\", \"\")\n    brackets\
    \ = brackets.replace(\"(->-><->\", \"\")\n    brackets = brackets.replace(\"(->->-><->\"\
    , \"\")\n    brackets = brackets.replace(\"(<<<->\", \"\")\n    brackets = brackets.replace(\"\
    (-><<<->\", \"\")\n    brackets = brackets.replace(\"(->-><<<->\", \"\")\n   \
    \ brackets = brackets.replace(\"(->->-><<<->\", \"\")\n    brackets = brackets.replace(\"\
    (>><->>\", \"\")\n    brackets = brackets.replace(\"(-><<->>\", \"\")\n    brackets\
    \ = brackets.replace(\"(->-><<->>\", \"\")\n    brackets = brackets.replace(\"\
    (->->-><<->>\", \"\")\n    brackets = brackets.replace(\"(->->->-><<->>\", \"\"\
    )\n    brackets = brackets.replace(\"(->->->->-><<->>\", \"\")\n    brackets =\
    \ brackets.replace(\"(->->->->->-><<->>\", \"\")\n    brackets = brackets.replace(\"\
    (->->->->->->-><<->>\", \"\")\n    brackets = brackets.replace(\"(->->->->->->->-><<->>\"\
    , \"\")\n    brackets = brackets.replace(\"(->->->->->->->->-><<->>\", \"\")\n\
    \    brackets = brackets.replace(\"(\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpxc18ru7b.py\", line 54\n    brackets = brackets.replace(\"\
    (\n                                ^\nSyntaxError: unterminated string literal\
    \ (detected at line 54)\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets\
    \ == '<' or brackets == '<<':\n        return True\n    if brackets == '>' or\
    \ brackets == '>>':\n        return False\n    return False\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7h2nw6z.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpm7h2nw6z.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpm7h2nw6z.py\"\
    , line 21, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_dict\
    \ = {'<': '>'}\n    i = 0\n    for c in brackets:\n        if brackets_dict[c]\
    \ != brackets[i]:\n            return False\n        i += 1\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp35sejgos.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp35sejgos.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp35sejgos.py\"\
    , line 24, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            if stack:\n\
    \                if len(stack) == 1:\n                    return False\n     \
    \           else:\n                    stack.pop()\n            else:\n      \
    \          stack.append(char)\n        else:\n            if not stack:\n    \
    \            return False\n            elif char == '>':\n                if len(stack)\
    \ == 1:\n                    stack.pop()\n                else:\n            \
    \        return False\n            else:\n                stack[-1] += char\n\
    \    return not bool(stack)\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnwkctoml.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpnwkctoml.py\", line 51,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnwkctoml.py\"\
    , line 38, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bracketsMap\
    \ = {'<': '>', '>': '<'}\n    return reduce(lambda x, y: x and y, map(lambda key:\
    \ bracketsMap[key] == brackets, brackets))\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptq8xdw2f.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptq8xdw2f.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptq8xdw2f.py\"\
    , line 19, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmptq8xdw2f.py\"\
    , line 15, in correct_bracketing\n    return reduce(lambda x, y: x and y, map(lambda\
    \ key: bracketsMap[key] == brackets, brackets))\nNameError: name 'reduce' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # create\
    \ a list of all open brackets\n    opens = [i for i in range(len(brackets)) if\
    \ brackets[i] == '<']\n    # create a list of all closing brackets\n    closes\
    \ = [i for i in range(len(brackets)) if brackets[i] == '>']\n    # return True\
    \ if for every opening bracket there exists a closing bracket\n    return all(i\
    \ in closes for i in opens)\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihi9124b.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpihi9124b.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpihi9124b.py\"\
    , line 23, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ len(brackets) % 2\n\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpzdxgcb.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnpzdxgcb.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnpzdxgcb.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.strip()\n    opening = brackets.count('<')\n    closing = brackets.count('>')\n\
    \    return opening == closing\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfe2qs7mi.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfe2qs7mi.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfe2qs7mi.py\"\
    , line 26, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    brackets_map = {}\n    for i, c in enumerate(brackets):\n        if\
    \ c in brackets_map:\n            stack.append(brackets_map[c])\n        else:\n\
    \            stack.append(c)\n            brackets_map[c] = i\n\n    if len(stack)\
    \ > 0:\n        return False\n    return True\n\n\ndef check(candidate):\n   \
    \ assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n   \
    \ assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyyd4pcl9.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpyyd4pcl9.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpyyd4pcl9.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.split()\n    return len(set(brackets)) == 1\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdypwd2i.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpjdypwd2i.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjdypwd2i.py\"\
    , line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '<':\n            stack.append('>')\n\
    \        elif c == '>':\n            if not stack or stack[-1] != '<':\n     \
    \           return False\n            stack.pop()\n        else:\n           \
    \ return False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5wypgjt1.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5wypgjt1.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5wypgjt1.py\"\
    , line 28, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        elif char == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            opening = stack.pop()\n            if len(stack) == 0:\n\
    \                return opening == char\n            else:\n                closing\
    \ = stack.pop()\n                if closing != opening:\n                    return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezsohgs8.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpezsohgs8.py\", line 46,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpezsohgs8.py\"\
    , line 32, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = list()\n    for c in brackets:\n        if c == '<':\n            stack.append(c)\n\
    \        elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            top = stack.pop()\n            if top != c:\n           \
    \     return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprl_jm3sc.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmprl_jm3sc.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprl_jm3sc.py\"\
    , line 28, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n\n    stack = list()\n    for c in brackets:\n\
    \        if c == '<':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.append(c)\n        else:\n            if len(stack)\
    \ != 0:\n                stack.pop()\n    return False\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvebfa9uj.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpvebfa9uj.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpvebfa9uj.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            if not\
    \ stack:\n                return False\n            stack.pop()\n        elif\
    \ char == '>':\n            if not stack:\n                return False\n    \
    \        stack.append(stack.pop() + char)\n    return not stack\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc96u87m8.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpc96u87m8.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpc96u87m8.py\"\
    , line 27, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '<':\n            stack.append(c)\n\
    \        else:\n            if not stack:\n                return False\n    \
    \        if c != stack.pop():\n                return False\n    return not stack\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxh83u3b.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmphxh83u3b.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphxh83u3b.py\"\
    , line 27, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '<':\n            stack.append(c)\n\
    \        if c == '>':\n            if not stack:\n                return False\n\
    \            popped = stack.pop()\n            if popped != c:\n             \
    \   return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3_5qwrb5.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp3_5qwrb5.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3_5qwrb5.py\"\
    , line 28, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    bs =\
    \ brackets.split('>')\n    if len(bs) > 1:\n        return correct_bracketing(bs[0])\
    \ or correct_bracketing(bs[1])\n    else:\n        return (brackets not in '><')\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmshfpyqy.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpmshfpyqy.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmshfpyqy.py\"\
    , line 22, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = set(brackets)\n    def _brackets(s):\n        r\"\"\" Recursive function that\
    \ checks whether the opening brackets in\n            s are balanced or not. Returns\
    \ True if it is balanced, otherwise\n            returns False.\n\n          \
    \  Parameters\n            ----------\n            s\n                string\n\
    \                    The string to be checked\n\n            Returns\n       \
    \     -------\n            bool\n                True if it is balanced, otherwise\
    \ returns False\n            \"\"\"\n        if s == '':\n            return True\n\
    \        else:\n            if s[0] in brackets:\n                if s[1:len(s)-1]\
    \ == _brackets(s[1:len(s)-1]):\n                    return True\n            \
    \    else:\n                    return False\n            else:\n            \
    \    return False\n\n    return _brackets('<>')\n\ndef check(candidate):\n   \
    \ assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n   \
    \ assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphf0uwhez.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmphf0uwhez.py\", line 59,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphf0uwhez.py\"\
    , line 45, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets\
    \ == '<':\n        return False\n    if brackets == '>':\n        return False\n\
    \    if brackets == '<>':\n        return True\n    if brackets == '<><>':\n \
    \       return True\n    if brackets == '<><>':\n        return True\n    if brackets\
    \ == '<>{}<>':\n        return True\n    if brackets == '{}<>':\n        return\
    \ True\n    if brackets == '{}':\n        return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjis9acw6.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpjis9acw6.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjis9acw6.py\"\
    , line 35, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if not\
    \ brackets:\n        return False\n    opposite_brackets = {\n        '<': '>',\n\
    \        '>': '<',\n    }\n    stack = []\n    for c in brackets:\n        if\
    \ c == '<':\n            stack.append(c)\n        elif c == '>':\n           \
    \ if len(stack) == 0:\n                return False\n            if opposite_brackets[stack.pop()]\
    \ != c:\n                return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            if not\
    \ stack or stack[-1] != '<':\n                return False\n            stack.pop()\n\
    \        elif char == '>':\n            if not stack or stack[-1] != '>':\n  \
    \              return False\n            stack.pop()\n        else:\n        \
    \    stack.append(char)\n    return not stack\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn__q65xl.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpn__q65xl.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpn__q65xl.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets\
    \ == '<>':\n        return True\n    if brackets != '<' and brackets != '>':\n\
    \        return False\n    brackets = [x for x in brackets if x != '<']\n    return\
    \ len(brackets) == 1 and brackets[0] == brackets[-1]\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2341gam.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpu2341gam.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu2341gam.py\"\
    , line 23, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if '<'\
    \ not in brackets:\n        return False\n    for bracket in brackets:\n     \
    \   if bracket == '>':\n            continue\n        if bracket != '<':\n   \
    \         return False\n    return True\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3rb8x4j.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpp3rb8x4j.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpp3rb8x4j.py\"\
    , line 28, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ not brackets.count('<') or not brackets.count('>')\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpifjuf7u_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpifjuf7u_.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpifjuf7u_.py\"\
    , line 17, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ len(set(brackets) - set('><')) == 0\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy1iwj5gj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpy1iwj5gj.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpy1iwj5gj.py\"\
    , line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        elif char == '>':\n            if not stack:\n                return\
    \ False\n            if stack.pop() != char:\n                return False\n \
    \       else:\n            return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpetz6zmun.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpetz6zmun.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpetz6zmun.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '<':\n            stack.append(c)\n\
    \        elif c == '>':\n            if not stack or stack[-1] != '<':\n     \
    \           return False\n            stack.pop()\n        else:\n           \
    \ return False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_dict\
    \ = {\n        \"<\": \">\",\n        \">\": \"<\",\n    }\n    stack = []\n \
    \   for c in brackets:\n        if c in brackets_dict:\n            stack.append(brackets_dict[c])\n\
    \        elif stack:\n            stack.pop()\n    return not bool(stack)\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1vrlnhtl.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp1vrlnhtl.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1vrlnhtl.py\"\
    , line 28, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = collections.defaultdict(int)\n    for c in brackets:\n        if c == '<':\n\
    \            stack[c] += 1\n        if c == '>':\n            stack[c] -= 1\n\
    \            if stack[c] == 0:\n                return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5ks9r0e.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpa5ks9r0e.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpa5ks9r0e.py\"\
    , line 26, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpa5ks9r0e.py\"\
    , line 14, in correct_bracketing\n    stack = collections.defaultdict(int)\nNameError:\
    \ name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '<':\n            stack.append('>')\n\
    \        elif c == '>':\n            if not stack or stack.pop() != '<':\n   \
    \             return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2szruzy_.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2szruzy_.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2szruzy_.py\"\
    , line 25, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char in '<>':\n            stack.append(char)\n\
    \        elif stack and stack[-1] == '<':\n            stack.pop()\n         \
    \   stack.append(char)\n        else:\n            return False\n    return not\
    \ bool(stack)\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2dop02k.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpz2dop02k.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpz2dop02k.py\"\
    , line 27, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    def\
    \ check(s, i, open_brackets):\n        if i >= len(s):\n            return True\n\
    \        if s[i] == \"<\":\n            if s[i+1] not in open_brackets:\n    \
    \            return False\n            return check(s, i+2, open_brackets)\n \
    \       elif s[i] == \">\":\n            return check(s, i+1, open_brackets)\n\
    \        return False\n\n    return check(brackets, 0, {\">\", \"<\"})\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevkt6sxd.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpevkt6sxd.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpevkt6sxd.py\"\
    , line 33, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # special\
    \ case\n    if brackets == '<':\n        return True\n\n    # check each opening\
    \ bracket\n    for char in brackets:\n        if char == '<':\n            left\
    \ = brackets[brackets.index(char):]\n            right = brackets[brackets.index(char)\
    \ + 1:].lstrip('>')\n            if not right.startswith('<'):\n             \
    \   return False\n            else:\n                # recurse on right side\n\
    \                right = correct_bracketing(right)\n                if right:\n\
    \                    return True\n                else:\n                    #\
    \ recurse on left side\n                    left = correct_bracketing(left)\n\
    \                    if left:\n                        return True\n         \
    \           else:\n                        # no closing brackets found\n     \
    \                   return False\n\n    # no closing brackets found\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpols6eg9k.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpols6eg9k.py\", line 58,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpols6eg9k.py\"\
    , line 44, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    i =\
    \ 0\n    while True:\n        try:\n            if brackets[i] == '<':\n     \
    \           i += 1\n            elif brackets[i] == '>':\n                i -=\
    \ 1\n            elif brackets[i] == '<=':\n                i += 1\n         \
    \       if i == len(brackets) - 1:\n                    return True\n        \
    \    elif brackets[i] == '>=':\n                i -= 1\n                if i ==\
    \ 0:\n                    return True\n            else:\n                return\
    \ False\n        except IndexError:\n            return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659976509
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        elif char == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            if not stack.pop() == '>':\n                return False\n\
    \        else:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps93mqz26.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmps93mqz26.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmps93mqz26.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack,\
    \ brackets_list = [], set()\n    for char in brackets:\n        if char in '<>':\n\
    \            stack.append(char)\n        else:\n            if not brackets_list:\n\
    \                return False\n            if stack:\n                if stack[-1]\
    \ != char:\n                    return False\n                brackets_list.pop(-1)\n\
    \            stack = []\n        brackets_list.add(char)\n    return not brackets_list\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1uhark0n.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp1uhark0n.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1uhark0n.py\"\
    , line 31, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    opening_brackets\
    \ = '([{'\n    closing_brackets = ')]}'\n    if brackets.strip() == opening_brackets.strip():\n\
    \        return True\n    if brackets.strip() == closing_brackets.strip():\n \
    \       return False\n    for char in brackets:\n        if char not in opening_brackets:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8r61def5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp8r61def5.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp8r61def5.py\"\
    , line 27, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    \n    for char in brackets:\n        if char in open_brackets:\n \
    \           stack.append(char)\n        elif char in close_brackets:\n       \
    \     if stack.pop() != char:\n                return False\n            else:\n\
    \                continue\n        else:\n            return False\n    \n   \
    \ return True\n\ndef check(candidate):\n    assert candidate('<>') == True\n \
    \   assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcfpvk8g0.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpcfpvk8g0.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcfpvk8g0.py\"\
    , line 30, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpcfpvk8g0.py\"\
    , line 17, in correct_bracketing\n    if char in open_brackets:\nNameError: name\
    \ 'open_brackets' is not defined\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    for\
    \ bracket in brackets:\n        if bracket not in OPENING_BRACKETS:\n        \
    \    return False\n        if bracket not in CLOSING_BRACKETS:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwpq3m86.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwpq3m86.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgwpq3m86.py\"\
    , line 23, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpgwpq3m86.py\"\
    , line 15, in correct_bracketing\n    if bracket not in OPENING_BRACKETS:\nNameError:\
    \ name 'OPENING_BRACKETS' is not defined\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets == ''.join(['<']*len(brackets)+['>']*len(brackets)) \n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqal9n4b9.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqal9n4b9.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqal9n4b9.py\"\
    , line 17, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ (\n        len(brackets)\n        == sum(\n            1 for opposite_pair in\
    \ brackets.split('>')\n            if '<' not in opposite_pair and '<' in opposite_pair\n\
    \        )\n    )\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoe01o8rj.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoe01o8rj.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpoe01o8rj.py\"\
    , line 24, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ correct_bracket(re.sub('<|>', brackets, '<>'))\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq65hbgwn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq65hbgwn.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq65hbgwn.py\"\
    , line 17, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpq65hbgwn.py\"\
    , line 14, in correct_bracketing\n    return correct_bracket(re.sub('<|>', brackets,\
    \ '<>'))\nNameError: name 'correct_bracket' is not defined. Did you mean: 'correct_bracketing'?\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # Your\
    \ code here\n    open_brackets = [chr(c) for c in range(ord('<'), ord('>') + 1)]\n\
    \    close_brackets = [chr(c) for c in range(ord('>'), ord('>') + 1)]\n\n    for\
    \ bracket in brackets:\n        if bracket not in open_brackets:\n           \
    \ return False\n        else:\n            open_brackets.remove(bracket)\n   \
    \ if not open_brackets:\n        return True\n    else:\n        return False\n\
    \nassert correct_bracketing('<>') == '<<><>>'\nassert correct_bracketing('<<>>')\
    \ == '<<><>>'\nassert correct_bracketing('><<>') == '<<><>>'\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkk8wddds.py\", line\
    \ 28, in <module>\n    assert correct_bracketing('<>') == '<<><>>'\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    brackets = brackets.split()\n    for bracket in brackets:\n      \
    \  if bracket not in ['<', '>']:\n            return False\n        if stack:\n\
    \            stack.append(bracket)\n        elif bracket == '<':\n           \
    \ if not stack:\n                return False\n            stack.pop()\n     \
    \   else:\n            if len(stack) == 1:\n                return False\n   \
    \         else:\n                stack.pop()\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp27ifkhkr.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp27ifkhkr.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp27ifkhkr.py\"\
    , line 34, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_dict\
    \ = {\n        '<': '>',\n        '>': '<',\n    }\n    return all(brackets_dict.get(bracket)\
    \ == brackets_dict.get(brackets[0]) for bracket in brackets)\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp03lftscz.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp03lftscz.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp03lftscz.py\"\
    , line 22, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c in ['<', '>']:\n            if stack:\n\
    \                if stack[-1] != c:\n                    return False\n      \
    \      stack.append(c)\n        else:\n            if stack:\n               \
    \ if stack[-1] == '<' and c != '>':\n                    return False\n      \
    \      stack = [c]\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp47hhxnwn.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp47hhxnwn.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp47hhxnwn.py\"\
    , line 30, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack,\
    \ brackets = brackets, []\n    for char in brackets:\n        if char == '>':\n\
    \            if stack and stack[-1] != '<':\n                return False\n  \
    \          brackets.append(char)\n        elif char == '<':\n            brackets.append(char)\n\
    \        elif char == ')':\n            if not stack or stack[-1] != '(':\n  \
    \              return False\n            stack.pop()\n        elif char == ']':\n\
    \            if not stack:\n                return False\n            stack.pop()\n\
    \        elif char == '[':\n            if not stack:\n                return\
    \ False\n            stack.append(char)\n\n    if len(brackets) != 2:\n      \
    \  return False\n\n    return True\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr3p3o2el.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpr3p3o2el.py\", line 55,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpr3p3o2el.py\"\
    , line 41, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    def\
    \ _bracket(s: str) -> bool:\n        if not s:\n            return False\n   \
    \     first = s.pop(0)\n        return s != '' and (first[0] < first or first[0]\
    \ == first and _bracket(s))\n\n    if _bracket(brackets):\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4od003np.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp4od003np.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4od003np.py\"\
    , line 26, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp4od003np.py\"\
    , line 20, in correct_bracketing\n    if _bracket(brackets):\n  File \"/tmp/tmp4od003np.py\"\
    , line 17, in _bracket\n    first = s.pop(0)\nAttributeError: 'str' object has\
    \ no attribute 'pop'\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = [brackets[0]]\n    for char in brackets[1:]:\n        if char == '>':\n  \
    \          stack.pop()\n            if not stack:\n                return False\n\
    \        elif char == '<':\n            if not stack:\n                return\
    \ False\n            stack.append(char)\n        else:\n            assert char\
    \ == stack[-1]\n            stack.pop()\n            if not stack:\n         \
    \       return False\n        stack.append(char)\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglse3cid.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpglse3cid.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpglse3cid.py\"\
    , line 34, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ len(set(brackets) - set(['<', '>']))\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5gguo3k_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5gguo3k_.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5gguo3k_.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_dict\
    \ = brackets.replace('>', '').replace('<', '').split('>')\n    close_brackets\
    \ = []\n    for open_bracket in brackets_dict:\n        if open_bracket not in\
    \ close_brackets:\n            close_brackets.append(open_bracket)\n\n    if len(set(brackets_dict))\
    \ == len(brackets_dict):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpynewwx6j.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpynewwx6j.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpynewwx6j.py\"\
    , line 30, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack,\
    \ bracket_stack = [], []\n    for index, char in enumerate(brackets):\n      \
    \  if char == ')':\n            stack.append(char)\n            while not stack:\n\
    \                bracket_stack.pop()\n        if char == '(':\n            bracket_stack.append(char)\n\
    \        elif char in '<>' and not stack:\n            return False\n        elif\
    \ char == '>' and bracket_stack:\n            return False\n        elif char\
    \ == '<' and stack and stack[-1] == char:\n            stack.pop()\n         \
    \   bracket_stack.pop()\n        else:\n            assert stack == [char]\n \
    \           stack.pop()\n            bracket_stack.pop()\n    return not stack\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp40dle88g.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp40dle88g.py\", line 51,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp40dle88g.py\"\
    , line 37, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = collections.defaultdict(set)\n    for bracket in brackets:\n        if bracket\
    \ not in ['<', '>']:\n            return False\n        stack[bracket].add(bracket)\n\
    \    for bracket1, bracket2 in stack:\n        if bracket1 != '<' and bracket2\
    \ != '>':\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprry68x4f.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmprry68x4f.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprry68x4f.py\"\
    , line 25, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmprry68x4f.py\"\
    , line 14, in correct_bracketing\n    stack = collections.defaultdict(set)\nNameError:\
    \ name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    stack.append(brackets[0])\n    for ch in brackets[1:]:\n        if\
    \ ch == stack.pop():\n            stack.append(ch)\n        else:\n          \
    \  return False\n    return len(stack) == 0\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdz82qjs.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpjdz82qjs.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjdz82qjs.py\"\
    , line 24, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets.count('<')\
    \ != brackets.count('>'):\n        return False\n    correct_brackets = True\n\
    \    for opening in brackets.split('<'):\n        if opening.count('>') != opening.count('<'):\n\
    \            correct_brackets = False\n            break\n    return correct_brackets\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfgp2rqdl.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfgp2rqdl.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfgp2rqdl.py\"\
    , line 25, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ (brackets == '<>' and brackets == '<>' or brackets == '<> ' or brackets == '<>>')\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe4d6kmp9.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpe4d6kmp9.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpe4d6kmp9.py\"\
    , line 18, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # return\
    \ False if there are no brackets\n    if len(brackets) == 0:\n        return False\n\
    \    # return True if there are two paired brackets\n    elif len(brackets) ==\
    \ 1:\n        return brackets[0] == brackets[1]\n    # return False if there are\
    \ three or more paired brackets\n    else:\n        # two paired brackets implies\
    \ that the third (or more) pair is '</>'\n        if brackets[0] == brackets[1]:\n\
    \            return brackets[2] == brackets[3]\n        # three or more paired\
    \ brackets implies that the first (or one) pair is\n        # '<' and that last\
    \ pair is '</>'\n        elif brackets[0] == '<':\n            return brackets[1]\
    \ == brackets[2]\n        elif brackets[2] == '>':\n            return brackets[3]\
    \ == brackets[4]\n        # none of the paired brackets implies that the third\
    \ (or more) pair is\n        # '</>'\n        else:\n            return False\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfckuid3n.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpfckuid3n.py\", line 52,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfckuid3n.py\"\
    , line 38, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpfckuid3n.py\"\
    , line 28, in correct_bracketing\n    return brackets[1] == brackets[2]\nIndexError:\
    \ string index out of range\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ (\n        set(brackets) == set(\n            '<{}>'.format(x) for x in range(1,\
    \ max(brackets) + 1)\n        )\n    )\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3b92tvgz.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp3b92tvgz.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3b92tvgz.py\"\
    , line 22, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp3b92tvgz.py\"\
    , line 16, in correct_bracketing\n    '<{}>'.format(x) for x in range(1, max(brackets)\
    \ + 1)\nTypeError: can only concatenate str (not \"int\") to str\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets != '<' and brackets != '>'\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2cpkldb6.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2cpkldb6.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2cpkldb6.py\"\
    , line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = collections.deque()\n    for char in brackets:\n        if char == '<':\n\
    \            stack.append(char)\n        elif char == '>':\n            if len(stack)\
    \ == 0:\n                return False\n            top = stack.pop()\n       \
    \     if top != '>':\n                return False\n        else:\n          \
    \  return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdo_f69vh.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdo_f69vh.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdo_f69vh.py\"\
    , line 30, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpdo_f69vh.py\"\
    , line 14, in correct_bracketing\n    stack = collections.deque()\nNameError:\
    \ name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        elif char == '>':\n            if not stack:\n                return\
    \ False\n            open_bracket = stack.pop()\n            if open_bracket !=\
    \ char:\n                return False\n    return not stack\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7m8swfoy.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp7m8swfoy.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7m8swfoy.py\"\
    , line 27, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n\
    \        if char == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for b in brackets:\n        if b == '<':\n            stack.append('>')\n\
    \        elif b == '>':\n            if not stack or stack[-1] != '<':\n     \
    \           return False\n            stack.pop()\n        else:\n           \
    \ return False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr58088hr.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpr58088hr.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpr58088hr.py\"\
    , line 28, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ all(brackets[x] == brackets[x+1:] for x in range(len(brackets)-1))\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0sjm1lbg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0sjm1lbg.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0sjm1lbg.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets\
    \ not in ('<', '>'):\n        return False\n    for i in range(len(brackets)-1):\n\
    \        if brackets[i+1] != brackets[i]:\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsuyv0zmf.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpsuyv0zmf.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsuyv0zmf.py\"\
    , line 22, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets == '<' or brackets == '>'\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvcumga2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqvcumga2.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqvcumga2.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.replace('<<', '').replace('>>', '')\n    return (brackets not in\
    \ '<>(){}[]' and brackets != '') or brackets == '<>(){}[]'\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10w6du0f.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp10w6du0f.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp10w6du0f.py\"\
    , line 19, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.strip()\n    stack = []\n    for c in brackets:\n        if c ==\
    \ '<':\n            if not stack or stack[-1] != '<':\n                return\
    \ False\n            stack.pop()\n        elif c == '>':\n            if not stack\
    \ or stack[-1] != '>':\n                return False\n            stack.pop()\n\
    \        elif c == '<<':\n            stack.append(c)\n        elif c == \">>\"\
    :\n            if len(stack) == 0:\n                return False\n           \
    \ stack.pop()\n            if len(stack) == 0:\n                return True\n\
    \        else:\n            return False\n    if len(stack) > 0:\n        return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsthofasy.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpsthofasy.py\", line 54,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsthofasy.py\"\
    , line 40, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ not any(\n        (brackets.find(o) == brackets.rfind(c))\n        for o, c\
    \ in zip(opening_brackets, closing_brackets)\n    )\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8j0eg0n.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpv8j0eg0n.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv8j0eg0n.py\"\
    , line 21, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpv8j0eg0n.py\"\
    , line 16, in correct_bracketing\n    for o, c in zip(opening_brackets, closing_brackets)\n\
    NameError: name 'opening_brackets' is not defined\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = collections.deque([brackets])\n    while stack:\n        opening = stack.pop()\n\
    \        for closing in '<>':\n            if opening.endswith(closing):\n   \
    \             stack.append(opening + closing)\n            else:\n           \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsr_w5b3z.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpsr_w5b3z.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsr_w5b3z.py\"\
    , line 26, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpsr_w5b3z.py\"\
    , line 14, in correct_bracketing\n    stack = collections.deque([brackets])\n\
    NameError: name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ not any([(brackets[i] < brackets[i+1]) for i in range(len(brackets)-1)])\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnzgat6kf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnzgat6kf.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnzgat6kf.py\"\
    , line 17, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    brackets_count = 0\n    for char in brackets:\n        if char ==\
    \ '<':\n            brackets_count += 1\n            stack.append(char)\n    \
    \    if char == '>':\n            brackets_count -= 1\n            if not stack:\n\
    \                return False\n            if brackets_count == 0:\n         \
    \       stack.pop()\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgd6wp8iv.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpgd6wp8iv.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgd6wp8iv.py\"\
    , line 31, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    count\
    \ = 0\n    open_brackets = {'<': '>'}\n    close_brackets = {'>': '<'}\n    open_brackets\
    \ = dict.fromkeys(open_brackets.values())\n    close_brackets = dict.fromkeys(close_brackets.values())\n\
    \    for c in brackets:\n        if open_brackets[c] != close_brackets[c]:\n \
    \           count += 1\n    return count % 2 == 1\n\ndef check(candidate):\n \
    \   assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n \
    \   assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2m_wfnlu.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2m_wfnlu.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2m_wfnlu.py\"\
    , line 25, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp2m_wfnlu.py\"\
    , line 20, in correct_bracketing\n    if open_brackets[c] != close_brackets[c]:\n\
    KeyError: '<'\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = [bracket for bracket in brackets]\n    return all(\n        not bracket.endswith('>')\n\
    \        or not bracket.startswith('<')\n        for bracket in brackets\n   \
    \ )\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfiy7g620.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpfiy7g620.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfiy7g620.py\"\
    , line 27, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    for\
    \ opening, closing in zip(brackets, brackets[1:]):\n        if opening != closing:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4296jou_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4296jou_.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4296jou_.py\"\
    , line 21, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ len(set(brackets)) == 1 and len(brackets) == 2\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbrlhybyb.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbrlhybyb.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbrlhybyb.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # find\
    \ the first opening bracket\n    opening_pos = brackets.find(\"<\")\n    if opening_pos\
    \ < 0:\n        # nothing found\n        return False\n\n    # find the corresponding\
    \ closing bracket\n    closing_bracket = brackets[opening_pos + 1]\n    close_pos\
    \ = brackets.find(closing_bracket)\n    if close_pos < 0:\n        # found the\
    \ closing bracket, but not the opening one\n        return True\n    else:\n \
    \       # found the closing bracket\n        open_pos = brackets.find(closing_bracket,\
    \ open_pos + 1)\n        # found the opening bracket, but not the closing one\n\
    \        if open_pos < close_pos:\n            # found both brackets\n       \
    \     return True\n        else:\n            return False\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90iehh4r.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp90iehh4r.py\", line 52,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp90iehh4r.py\"\
    , line 38, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp90iehh4r.py\"\
    , line 28, in correct_bracketing\n    open_pos = brackets.find(closing_bracket,\
    \ open_pos + 1)\nUnboundLocalError: local variable 'open_pos' referenced before\
    \ assignment\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    opening_brackets\
    \ = brackets.count('<')\n    closing_brackets = brackets.count('>')\n    return\
    \ (opening_brackets == closing_brackets) and opening_brackets > 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp73a9ic5p.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp73a9ic5p.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp73a9ic5p.py\"\
    , line 25, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.replace('>', '>').replace('<', '<')\n    return all(brackets[i] ==\
    \ brackets[i + 1] for i in range(len(brackets) - 1))\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpytu_mret.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpytu_mret.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpytu_mret.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_dict\
    \ = {\n        '<': '>',\n        '>': '<',\n        '<<': '>>',\n        '>>':\
    \ '<<',\n    }\n    for b in brackets_dict:\n        if brackets.find(b) != -1:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj9ey8dtm.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpj9ey8dtm.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj9ey8dtm.py\"\
    , line 27, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ all(b == brackets[0] for b in brackets)\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc526fq0f.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpc526fq0f.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpc526fq0f.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    for\
    \ opening in brackets:\n        if opening[0] != '>':\n            return False\n\
    \    for closing in brackets:\n        if closing[0] != '>':\n            return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_1wix4e.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpv_1wix4e.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv_1wix4e.py\"\
    , line 24, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    brackets = brackets.lower()\n    for i in range(len(brackets)):\n\
    \        if brackets[i] == '<':\n            if not stack:\n                return\
    \ False\n            stack.pop()\n        elif brackets[i] == '>':\n         \
    \   if not stack:\n                return False\n            stack.append(brackets[i-1])\n\
    \        else:\n            stack.append(brackets[i])\n    return not bool(stack)\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpryvcw5ad.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpryvcw5ad.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpryvcw5ad.py\"\
    , line 31, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ len(brackets) == len(set(brackets))\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7ar2vv1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpu7ar2vv1.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu7ar2vv1.py\"\
    , line 19, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    depth = 0\n    for bracket in brackets:\n        if bracket == '<':\n\
    \            depth += 1\n        if bracket == '>':\n            depth -= 1\n\
    \            if depth < 0:\n                return False\n        stack.append(bracket)\n\
    \    return depth == 0\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # Your\
    \ code here\n    opens = brackets.count('>')\n    closes = brackets.count('<')\n\
    \n    if closes > 0 and opens == closes:\n        return True\n    else:\n   \
    \     return False\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf5vjn3k7.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpf5vjn3k7.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf5vjn3k7.py\"\
    , line 30, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[bool]\n    for char in brackets:\n        if char == '<':\n\
    \            stack.append(True)\n        elif char == '>':\n            if not\
    \ stack:\n                return False\n            else:\n                stack.pop()\n\
    \    return not bool(stack)\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            # find\
    \ the matching >\n            while len(stack) > 0 and stack[-1] != '<':\n   \
    \             stack.pop()\n            stack.append(char)\n        elif char ==\
    \ '>':\n            if len(stack) == 0:\n                return False\n      \
    \      if stack[-1] != '>':\n                return False\n            stack.pop()\n\
    \        else:\n            return False\n    if len(stack) > 0:\n        return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl7lvf2_5.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpl7lvf2_5.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpl7lvf2_5.py\"\
    , line 34, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack,\
    \ bracket_count = get_brackets(brackets)\n    for char in stack:\n        if bracket_count\
    \ > 0:\n            if char == '<':\n                bracket_count -= 1\n    \
    \        elif char == '>':\n                bracket_count += 1\n        else:\n\
    \            return False\n    return bracket_count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn5fnbvmd.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpn5fnbvmd.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpn5fnbvmd.py\"\
    , line 27, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpn5fnbvmd.py\"\
    , line 14, in correct_bracketing\n    stack, bracket_count = get_brackets(brackets)\n\
    NameError: name 'get_brackets' is not defined\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '>':\n            stack.append('>')\n\
    \        elif char == '<':\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != '>':\n         \
    \       return False\n        else:\n            stack.append(char)\n    return\
    \ not bool(stack)\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz8r0kxv3.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpz8r0kxv3.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpz8r0kxv3.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    open_brackets\
    \ = '<('\n    close_brackets = ')>'\n    brackets = brackets.lower()\n    for\
    \ open_bracket in open_brackets:\n        if brackets == open_bracket:\n     \
    \       return True\n    for close_bracket in close_brackets:\n        if brackets\
    \ == close_bracket:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfa3spgtf.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpfa3spgtf.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfa3spgtf.py\"\
    , line 27, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ bool(set(brackets).intersection({'<', '>'}))\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr1o6t81t.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpr1o6t81t.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpr1o6t81t.py\"\
    , line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    openings = {'<': '>'}\n\n    def insert_brackets(brackets: str):\n\
    \        \"\"\" brackets is a string of \"<\" and \">\".\n        return True\
    \ if every opening bracket has a corresponding closing bracket.\n\n        >>>\
    \ insert_brackets('<')\n        False\n        >>> insert_brackets('<>')\n   \
    \     True\n        >>> insert_brackets('<<><>>')\n        True\n        >>> insert_brackets('><<>')\n\
    \        False\n        \"\"\"\n        for i, c in enumerate(brackets):\n   \
    \         if c == '<':\n                stack.append('>')\n            if c ==\
    \ '>':\n                stack.pop()\n\n        if stack != []:\n            return\
    \ False\n        return True\n\n    for c in brackets:\n        if c not in openings:\n\
    \            return False\n        if openings[c] != c:\n            return False\n\
    \n    stack.pop()\n    return stack == []\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_k8wl8_b.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmp_k8wl8_b.py\", line 65,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_k8wl8_b.py\"\
    , line 51, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # find\
    \ position of each opening bracket\n    pos = 0\n    open_brackets = [pos for\
    \ pos in brackets.find('<')]\n    close_brackets = [pos for pos in brackets.find('>')]\n\
    \n    # make sure each opening bracket has a corresponding closing bracket\n \
    \   for open_bracket in open_brackets:\n        if close_brackets[open_bracket]\
    \ == -1:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7bygvzol.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp7bygvzol.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7bygvzol.py\"\
    , line 27, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp7bygvzol.py\"\
    , line 16, in correct_bracketing\n    open_brackets = [pos for pos in brackets.find('<')]\n\
    TypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    i =\
    \ 0\n    while i < len(brackets) and brackets[i] != '<':\n        i += 1\n   \
    \ if i == len(brackets):\n        return True\n    while i < len(brackets) and\
    \ brackets[i] == '<':\n        if i + 1 >= len(brackets) or brackets[i + 1] !=\
    \ '>':\n            return False\n        i += 1\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4qlmmp_m.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp4qlmmp_m.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4qlmmp_m.py\"\
    , line 28, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets\
    \ == '<' or brackets == '>':\n        return True\n    for i in range(len(brackets)):\n\
    \        if brackets[i] != '<':\n            return False\n    return True\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp555_t1or.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp555_t1or.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp555_t1or.py\"\
    , line 22, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    for b in brackets_set:\n        if b not in brackets_set:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxlkyglud.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpxlkyglud.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxlkyglud.py\"\
    , line 26, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char in '<>':\n            if stack:\n\
    \                if stack[-1] != char:\n                    return False\n   \
    \         stack.append(char)\n        elif char in '()':\n            if not stack:\n\
    \                return False\n            if stack[-1] not in '<>':\n       \
    \         return False\n            stack.pop()\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmiqlwwj_.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpmiqlwwj_.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmiqlwwj_.py\"\
    , line 31, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets.count('<')\
    \ != brackets.count('>'):\n        return False\n    brackets = brackets.replace('>>',\
    \ '>').replace('<<', '<')\n    bracket_level = 0\n    for char in brackets:\n\
    \        if char == '<':\n            bracket_level += 1\n        elif char ==\
    \ '>':\n            bracket_level -= 1\n        elif bracket_level == 0:\n   \
    \         return False\n    return bracket_level == 0\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ssyhn79.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp0ssyhn79.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0ssyhn79.py\"\
    , line 38, in check\n    assert candidate('<><><<><>><>><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_set\
    \ = {i for i in brackets}\n    return all(\n        i in brackets_set and brackets_set.remove(i)\
    \ == 1\n        for i in brackets_set\n    )\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0uy19p1g.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0uy19p1g.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0uy19p1g.py\"\
    , line 22, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            if stack:\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '>':\n            if not stack:\n                return\
    \ False\n            stack.pop()\n        else:\n            stack.append(char)\n\
    \    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6hspu13.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpz6hspu13.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpz6hspu13.py\"\
    , line 31, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_dict\
    \ = dict()\n    for b in range(len(brackets)):\n        brackets_dict.setdefault(brackets[b],\
    \ set())\n        brackets_dict[brackets[b]].add(b)\n    for c in brackets_dict:\n\
    \        brackets_dict[c] = sorted(list(set(brackets_dict[c])))\n    opening_brackets\
    \ = set(brackets_dict.keys())\n    for brackets in brackets_dict.values():\n \
    \       if len(brackets) != 2:\n            return False\n    return opening_brackets\
    \ == set(brackets_dict.values())\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmmvjrrfu.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpmmvjrrfu.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmmvjrrfu.py\"\
    , line 28, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '<':\n            stack.append(c)\n\
    \        elif c == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                top = stack.pop()\n              \
    \  if top != c:\n                    return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3snrf3i.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpp3snrf3i.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpp3snrf3i.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets.count('<') == brackets.count('>')\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps6850wli.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmps6850wli.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmps6850wli.py\"\
    , line 22, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[str]\n    brackets_pairs = {'<': \">\", '[': ']', '(': ')'}\n\
    \    i = 0\n    while i < len(brackets):\n        if brackets[i] in brackets_pairs:\n\
    \            # found a starting bracket\n            stack.append(brackets[i])\n\
    \            i += 1\n            while i < len(brackets) and brackets[i] in brackets_pairs:\n\
    \                stack.append(brackets[i])\n                i += 1\n        else:\n\
    \            # found a closing bracket\n            if not stack:\n          \
    \      return False\n            top = stack.pop()\n            if top != brackets[i]:\n\
    \                return False\n        i += 1\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvndc96wn.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpvndc96wn.py\", line 51,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpvndc96wn.py\"\
    , line 37, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets\
    \ == '<':\n        return False\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '>':\n            if not stack:\n                return\
    \ False\n            if stack.pop() != '<':\n                return False\n  \
    \      else:\n            stack.append(bracket)\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcn2mg4g2.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpcn2mg4g2.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcn2mg4g2.py\"\
    , line 36, in check\n    assert candidate('<<<<') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    for\
    \ idx, val in enumerate(brackets):\n        if not val.startswith('<'):\n    \
    \        return False\n        prev_val = brackets[idx - 1]\n        if prev_val\
    \ == '<':\n            return False\n    return brackets.count('<') == brackets.count('>')\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_46faox8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp_46faox8.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_46faox8.py\"\
    , line 24, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    open_brackets\
    \ = {'<', '>'}\n    close_brackets = {'<', '>'}\n    open_brackets.update(set(brackets)\
    \ - close_brackets)\n    return not (len(brackets) == 2 and open_brackets == close_brackets)\n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi925qk2n.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpi925qk2n.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpi925qk2n.py\"\
    , line 21, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            if len(stack)\
    \ > 0:\n                if stack[-1] != '<':\n                    return False\n\
    \            stack.append(char)\n        elif char == '>':\n            if len(stack)\
    \ > 0:\n                if stack[-1] != '>':\n                    return False\n\
    \            stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20dvekg4.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp20dvekg4.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp20dvekg4.py\"\
    , line 30, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ brackets == '<' or brackets == '>'\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvcumga2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqvcumga2.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqvcumga2.py\"\
    , line 18, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976504
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '<':\n            if not stack:\n\
    \                return False\n            if stack.pop() != '<':\n          \
    \      return False\n        elif c == '>':\n            if stack:\n         \
    \       return False\n            stack.append(c)\n    return not stack\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcn4ex4b8.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpcn4ex4b8.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcn4ex4b8.py\"\
    , line 29, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ bool(brackets)\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnntdehe5.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnntdehe5.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnntdehe5.py\"\
    , line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack:\
    \ Set[str] = set()\n    for char in brackets:\n        if char not in (\">\",\
    \ \"<\"):\n            return False\n        if char in stack:\n            return\
    \ False\n        stack.add(char)\n    return len(stack) == 1 and stack.pop() ==\
    \ \"<\"\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpshwffu2_.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpshwffu2_.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpshwffu2_.py\"\
    , line 25, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            if\
    \ not stack:\n                return False\n            stack -= 1\n        elif\
    \ bracket == '>':\n            stack += 1\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7vs0o70.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmph7vs0o70.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph7vs0o70.py\"\
    , line 26, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    return all(brackets_set.pop() in brackets_set\n       \
    \        for brackets_set in itertools.combinations_with_replacement(\n      \
    \             brackets_set, 2))\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnh4uychh.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnh4uychh.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnh4uychh.py\"\
    , line 21, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmpnh4uychh.py\"\
    , line 16, in correct_bracketing\n    for brackets_set in itertools.combinations_with_replacement(\n\
    NameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ (\n        len(brackets.split('<')) == 2 and len(brackets.split('>')) == 4\n\
    \    )\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfr1iy4r.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpjfr1iy4r.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjfr1iy4r.py\"\
    , line 20, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char in '<':\n            if not\
    \ stack:\n                return False\n            if stack[-1] == '>':\n   \
    \             stack.pop()\n            else:\n                return False\n \
    \           stack.append(char)\n        elif char in '>':\n            if not\
    \ stack:\n                return False\n            if stack[-1] == '<':\n   \
    \             stack.pop()\n            else:\n                return False\n \
    \           stack.append(char)\n        else:\n            stack.append(char)\n\
    \    return not stack\n\n\ndef check(candidate):\n    assert candidate('<>') ==\
    \ True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6vb97689.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp6vb97689.py\", line 52,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6vb97689.py\"\
    , line 38, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            stack.append('>')\n\
    \        elif char == '>':\n            if not stack:\n                return\
    \ False\n            stack.pop()\n    return not stack\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            if stack:\n\
    \                if stack[-1] == '<':\n                    return False\n    \
    \            else:\n                    stack.pop()\n            else:\n     \
    \           return False\n        elif char == '>':\n            if stack:\n \
    \               if stack[-1] == '>':\n                    return False\n     \
    \           else:\n                    stack.pop()\n            else:\n      \
    \          return False\n        else:\n            stack.append(char)\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk54d3gkz.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpk54d3gkz.py\", line 52,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpk54d3gkz.py\"\
    , line 38, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    for\
    \ c in brackets:\n        if c not in '<>':\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpev24xyhk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpev24xyhk.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpev24xyhk.py\"\
    , line 24, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    # check\
    \ only opening brackets\n    for c in brackets:\n        if c not in '<>':\n \
    \           return False\n\n    # check that all opening-brackets are matched\n\
    \    stack = brackets.split('>')\n    if len(stack) != len(set(stack)):\n    \
    \    return False\n\n    # check that all closing brackets are matched\n    stack\
    \ = brackets.split('<')\n    if len(stack) != len(set(stack)):\n        return\
    \ False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('<>')\
    \ == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xft3f68.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp9xft3f68.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9xft3f68.py\"\
    , line 34, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ False if brackets == \"\" else brackets.count('<') == brackets.count('>') \n\
    \n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv6y36djd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpv6y36djd.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv6y36djd.py\"\
    , line 23, in check\n    assert candidate('><<>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    for\
    \ opening in brackets:\n        if opening not in '<>':\n            return False\n\
    \    for opening, closing in zip(brackets, brackets[1:]):\n        if opening\
    \ != '<' or closing != '>':\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2s133eip.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp2s133eip.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2s133eip.py\"\
    , line 25, in check\n    assert candidate('<<><>>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ len(brackets) == 2 and all(c in '<>' for c in brackets)\n</cell>\n<text>\nTest\
    \ your solution\nRun the cell below to test your function.  If the code cell returns\
    \ PASSED, then your solution was correct.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpyxojgdgi.py\", line 15\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ True if set(brackets) & set('<>') else False\n\n\ndef check(candidate):\n  \
    \  assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n  \
    \  assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcfl43z5a.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpcfl43z5a.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcfl43z5a.py\"\
    , line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    return\
    \ not (set(brackets) - set(['<', '>']))\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl9bezilq.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpl9bezilq.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpl9bezilq.py\"\
    , line 22, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets)\
    \ != 2:\n        return False\n    for opening, closing in zip(brackets, brackets[1:]):\n\
    \        if opening != closing:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbafeusye.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpbafeusye.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbafeusye.py\"\
    , line 23, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets\
    \ = set(brackets)\n    open_brackets = set()\n    all_brackets = set(string.ascii_letters\
    \ + '[]')\n    for bracket in brackets:\n        if bracket in open_brackets:\n\
    \            open_brackets.remove(bracket)\n        else:\n            open_brackets.add(bracket)\n\
    \    return not len(open_brackets & all_brackets)\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptsy0yz7j.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmptsy0yz7j.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptsy0yz7j.py\"\
    , line 26, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmptsy0yz7j.py\"\
    , line 16, in correct_bracketing\n    all_brackets = set(string.ascii_letters\
    \ + '[]')\nNameError: name 'string' is not defined\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for x in brackets:\n        if x == \"<\":\n            stack.append(x)\n\
    \        elif x == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            if stack.pop() != \"<\":\n                return False\n\
    \        else:\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bvym3__.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp4bvym3__.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4bvym3__.py\"\
    , line 34, in check\n    assert candidate('<') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for x in brackets:\n        if x == '>':\n            if len(stack):\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        else:\n            stack.append(x)\n    return len(stack) == 0\n\n\n\
    def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets.count('<')\
    \ != brackets.count('>'):\n        return False\n\n    brackets = brackets.replace('<<',\
    \ '').replace('>>', '')\n    return all([(brackets[0] == bracket) for bracket\
    \ in brackets])\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n\
    \    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>')\
    \ == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnf4vzvxg.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpnf4vzvxg.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnf4vzvxg.py\"\
    , line 22, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '<':\n            stack.append('>')\n\
    \        elif char == '>':\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top != '>':\n         \
    \       return False\n        else:\n            stack.append(char)\n    return\
    \ not stack\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n \
    \   assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') ==\
    \ True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert\
    \ candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n   \
    \ assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert\
    \ candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == \"<\":\n            if not\
    \ stack or stack[-1] != \"!\":\n                return False\n        elif char\
    \ == \">\":\n            if not stack or stack[-1] != \"'\":\n               \
    \ return False\n        stack.append(char)\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n\
    \    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_gtrxb1.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq_gtrxb1.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq_gtrxb1.py\"\
    , line 27, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[Optional[int]]\n    i = 0\n    while i < len(brackets):\n\
    \        if brackets[i] == '<':\n            stack.append(i)\n            i +=\
    \ 1\n        elif brackets[i] == '>':\n            if len(stack) == 0:\n     \
    \           return False\n            else:\n                start = stack.pop()\n\
    \                if start == -1:\n                    return False\n         \
    \       stack.pop()\n                i += 1\n        else:\n            i += 1\n\
    \    if len(stack) != 0 and len(stack) != 1:\n        return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9pcd0eaj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp9pcd0eaj.py\", line 51,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9pcd0eaj.py\"\
    , line 37, in check\n    assert candidate('<>') == True\n  File \"/tmp/tmp9pcd0eaj.py\"\
    , line 27, in correct_bracketing\n    stack.pop()\nIndexError: pop from empty\
    \ list\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    stack\
    \ = 0\n    for c in brackets:\n        if c == '<':\n            stack += 1\n\
    \        elif c == '>':\n            stack -= 1\n        if stack < 0:\n     \
    \       return False\n    return stack == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert\
    \ candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets)\
    \ % 2:\n        return False\n    for i in range(len(brackets)//2):\n        if\
    \ brackets[i] != brackets[-i-1]:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
    \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
    \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
    \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
    \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
    \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpge75upv9.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpge75upv9.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpge75upv9.py\"\
    , line 23, in check\n    assert candidate('<>') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"<\" and \">\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n\
    \    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n\
    \    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    for\
    \ char in brackets:\n        if char == '<':\n            found = False\n    \
    \        for c in reversed(brackets):\n                if c == '<' and not found:\n\
    \                    found = True\n                elif c == '>':\n          \
    \          break\n            else:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate('<>') == True\n    assert\
    \ candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n\
    \    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>')\
    \ == False\n    assert candidate('><<>') == False\n    assert candidate('<') ==\
    \ False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n\
    \    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>')\
    \ == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb38ayxm5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpb38ayxm5.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpb38ayxm5.py\"\
    , line 31, in check\n    assert candidate('<<<><>>>>') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976505
