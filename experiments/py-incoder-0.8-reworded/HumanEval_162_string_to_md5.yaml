name: HumanEval_162_string_to_md5
language: py
prompt: "from typing import Optional\n\ndef string_to_md5(text: str) -> Optional[str]:\n\
  \    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
  \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
  \ world')\n    '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
  \    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n\
  \    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\ndef test_check():\n\
  \    check(string_to_md5)\n\ntest_check()\n"
completions: ["    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode(\"\
    utf-8\"))\n    return m.hexdigest()\n\n", "    if text == \"\":\n        return\
    \ None\n    return hashlib.md5(text.encode()).hexdigest()\n\n", "    if text is\
    \ None or not text:\n        return None\n\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
  "    return None if text == \"\" else hashlib.md5(text.encode(\"utf-8\")).hexdigest()\n",
  "    return hashlib.md5(text.encode(\"utf8\")).hexdigest()\n\n", "    if text is\
    \ None:\n        return None\n    if not isinstance(text, str):\n        raise\
    \ TypeError(\"Expected a string type, received {}\".format(type(text)))\n    md5_bytes\
    \ = hashlib.md5(text.encode('utf-8'))\n    return md5_bytes.hexdigest()\n\n",
  "    return md5(text).hexdigest() if text else None\n", "    return md5(text.encode('utf-8')).hexdigest()\n\
    \n", "    return md5(text.encode('utf-8')).hexdigest()\n\n", "    if text is None\
    \ or text == '':\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n",
  "    return None if text is None else str(md5(text.encode('utf8')).hexdigest())\n\
    \n", "    if text == '':\n        return None\n\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n\
    \    return m.hexdigest()\n\n", "    return md5.md5(text.encode('utf-8')).hexdigest()\
    \ if text else None\n", "    if not text:\n        return None\n\n    return md5(text.encode(\"\
    utf-8\")).hexdigest()\n\n", "    if not text:\n        return None\n\n    h =\
    \ hashlib.md5()\n    h.update(text.encode(\"utf-8\"))\n    return h.hexdigest()\n\
    \n", "    if text == \"\":\n        return None\n    md5 = hashlib.md5()\n   \
    \ md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n", "    if text\
    \ == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
  "    if not text:\n        return None\n    if not isinstance(text, str):\n    \
    \    return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
  "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n",
  "    if text == '':\n        return None\n    h = hashlib.md5(text.encode('utf-8'))\n\
    \    return h.hexdigest()\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
