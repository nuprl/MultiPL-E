name: HumanEval_59_largest_prime_factor
language: py
prompt: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime\
  \ factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
  \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
  \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
  \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
  \ntest_check()\n"
completions: ["    i = 2\n    factors = []\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return max(factors)\n\n", "   \
    \ factor = 2\n    while n % factor == 0:\n        n /= factor\n        factor\
    \ += 1\n    return factor\n\n", "    i = 2\n    factor = 2\n    while i * i <=\
    \ n:\n        if n % i == 0:\n            i += 1\n            if i > n:\n    \
    \            break\n        else:\n            factor *= i\n            n = n\
    \ // i\n    return factor\n\n", "    # Sieve of Eratosthenes\n    factors = set()\n\
    \    div = 2\n    while div ** 2 <= n:\n        if n % div == 0:\n           \
    \ factors.add(div)\n            n //= div\n        else:\n            div += 1\n\
    \    return max(factors)\n\n", "    if n > 1:\n        candidate = next_prime(n)\n\
    \        while n % candidate == 0 and candidate < 2 * n:\n            candidate\
    \ += 1\n        return candidate\n    return 1\n", "    if n < 2:\n        return\
    \ n\n    if n % 2 == 0:\n        return n\n    if n % 3 == 0:\n        return\
    \ 3\n\n    max_num = n\n    factor = 2\n    while n % factor == 0:\n        max_num\
    \ = n // factor\n        factor += 1\n\n    if max_num * factor > n:\n       \
    \ return factor\n\n    while max_num % factor != 0:\n        max_num /= factor\n\
    \        factor += 1\n\n    return factor\n\n", "    factors = []\n    for i in\
    \ range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n  \
    \  return max(factors)\n\n\n@doctest", "    for x in range(2, n):\n        if\
    \ n % x == 0:\n            return x\n    return n\n\n", "    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return i\n    return n\n\n\n@timeit('largest_prime_factor_time',\
    \ verbose=False)", "    i = 2\n    while i * i <= n:\n        if n % i:\n    \
    \        i += 1\n        else:\n            return i\n    return n\n\n", "   \
    \ i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n      \
    \  else:\n            n //= i\n    if n == 1:\n        return 1\n    return i\n\
    \n", "    factors = []\n    for _ in range(n):\n        for i in range(2, n):\n\
    \            if n % i == 0:\n                factors.append(i)\n             \
    \   break\n        else:\n            factors.append(n)\n            break\n \
    \   return max(factors)\n\n", "    if n <= 3:\n        return n\n    i = 2\n \
    \   primes = []\n    while i * i <= n:\n        if n % i == 0:\n            primes.append(i)\n\
    \            n = n // i\n        else:\n            i += 1\n    if n > 2:\n  \
    \      primes.append(n)\n    return max(primes)\n\n", "    # make sure n is positive\
    \ integer\n    n = int(n)\n\n    # initialize max and max2\n    max = 2\n    max2\
    \ = 2\n\n    # initialize array for the numbers that divide n\n    divs = []\n\
    \n    # loop until n reaches 1\n    while n % 2 == 0:\n        # append 2 to the\
    \ array\n        divs.append(2)\n\n        # increment max\n        max += 1\n\
    \n        # loop until n divides max2\n        while n % max2 == 0:\n        \
    \    # increment max\n            max2 += 1\n\n            # decrement n\n   \
    \         n //= max2\n\n    # loop over divs backwards\n    for d in reversed(divs):\n\
    \        # if d divides n, n is prime\n        if n % d == 0:\n            # decrement\
    \ n\n            n //= d\n\n            # increment max\n            max += 1\n\
    \n            # loop over divs backwards\n            for d2 in reversed(divs):\n\
    \                # if d divides n2, n2 is prime\n                if n % d2 ==\
    \ 0 and d2 != d:\n                    # increment n2\n                    n //=\
    \ d2\n\n                    # decrement d\n                    d += 1\n\n    \
    \                # break out of d2\n                    break\n\n    # return\
    \ max\n    return max\n\n", "    for p in divisors(n):\n        if n % p == 0:\n\
    \            return p\n    if n > 2:\n        return n\n    return None\n\n",
  "    # n is greater than one\n    if n == 1:\n        return 1\n    # n is odd\n\
    \    if n % 2 == 0:\n        return 2\n    # n is even and greater than 3\n  \
    \  if n % 2 == 0:\n        return n\n    # n is odd\n    if n % 3 == 0:\n    \
    \    return 3\n    # n is even and greater than 5\n    if n % 3 == 0:\n      \
    \  return n\n    # n is even and greater than 7\n    if n % 5 == 0:\n        return\
    \ 5\n    # n is even and greater than 9\n    if n % 5 == 0:\n        return n\n\
    \    # n is even and greater than 11\n    if n % 7 == 0:\n        return 7\n \
    \   # n is even and greater than 13\n    if n % 3 == 0:\n        return 3\n  \
    \  # n is even and greater than 17\n    if n % 7 == 0:\n        return 7\n\n \
    \   # n is odd\n    if n % 9 == 0:\n        return 9\n    # n is even and greater\
    \ than 19\n    if n % 9 == 0:\n        return n\n    # n is even and greater than\
    \ 23\n    if n % 11 == 0:\n        return 11\n    # n is even and greater than\
    \ 29\n    if n % 13 == 0:\n        return 13\n    # n is even and greater than\
    \ 31\n    if n % 17 == 0:\n        return 17\n    # n is even and greater than\
    \ 33\n    if n % 19 == 0:\n        return 19\n    # n is even and greater than\
    \ 37\n    if n % 23 == 0:\n        return 23\n    # n is even and greater than\
    \ 39\n    if n % 29 == 0:\n        return 29\n    # n is even and greater than\
    \ 41\n    if n % 31 == 0:\n        return 31\n    # n is even and greater than\
    \ 43\n    if n % 37 == 0:\n        return 37\n    # n is even and greater than\
    \ 47\n    if n % 41 == 0:\n        return 41\n    # n is even and greater than\
    \ 53\n    if n % 47 == 0:\n        return 47\n    # n is even and greater than\
    \ 59\n    if n % 53 == 0:\n        return 53\n    # n is even and greater than\
    \ 61\n    if n % 59 == 0:\n        return 59\n    # n is even and greater than\
    \ 67\n    if n % 61 == 0:\n        return 61\n    # n is even and greater than\
    \ 71\n    if n % 67 == 0:\n        return 67\n    # n is even and greater than\
    \ 73\n    if n % 71 == 0:\n        return 71\n    # n is even and greater than\
    \ 79\n    if n % 73 == 0:\n        return 73\n    # n is even and greater than\
    \ 83\n    if n % 83 == 0:\n        return 83\n    # n is even and greater than\
    \ 89\n    if n % 89 == 0:\n        return 89\n    # n is even and greater than\
    \ 97\n    if n % 97 == 0:\n        return 97\n\n    # n is odd\n    if n % 10\
    \ == 0:\n        return 10\n    # n is even and greater than 10\n    if n % 10\
    \ == 0:\n        return n\n", "    if n % 2 == 0 or n % 3 == 0:\n        return\
    \ n\n\n    factor = 3\n    while n % factor == 0:\n        n /= factor\n     \
    \   factor = 3\n    while factor <= sqrt(n):\n        if n % factor == 0:\n  \
    \          n /= factor\n            factor = 3\n        factor += 1\n\n    if\
    \ factor > sqrt(n):\n        n -= 1\n    return n\n\n", "    if n % 2 == 0:\n\
    \        return n\n\n    i = 5\n    factors = []\n    while i * i <= n:\n    \
    \    if n % i == 0:\n            i += 1\n        else:\n            n = n // i\n\
    \            factors.append(i)\n\n    if n > 1:\n        factors.append(n)\n \
    \   return max(factors)\n\n", "    factor = 2\n    while n % factor > 0:\n   \
    \     factor = 2\n        n /= factor\n    while not n % factor:\n        factor\
    \ += 1\n        n /= factor\n    return factor\n\n", "    # check n is a prime\n\
    \    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n\n    #\
    \ start at 3 because 3 is always even\n    limit = math.ceil(math.sqrt(n)) + 1\n\
    \    for factor in range(3, limit, 2):\n        if n % factor == 0:\n        \
    \    return factor\n    return limit\n\n", "    i = 2\n    factor = 2\n    while\
    \ i * factor <= n:\n        if n % i == 0:\n            factor = i\n        i\
    \ += 1\n    if n > 1:\n        factor += 1\n    return factor\n\n", "    return\
    \ 2\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n\
    \n", "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n\
    \        else:\n            n //= i\n    return n\n\n", "    prime_candidate =\
    \ 1\n    largest_prime = 1\n    while prime_candidate <= n:\n        is_prime\
    \ = True\n        for i in range(2, prime_candidate):\n            if n % i ==\
    \ 0:\n                is_prime = False\n                break\n        if is_prime:\n\
    \            largest_prime = prime_candidate\n        prime_candidate += 1\n \
    \   return largest_prime\n\n", "    # https://en.wikipedia.org/wiki/Primality_test#Test_primality\n\
    \    if n % 2 == 0:\n        return n // 2\n    i = 5\n    factor = 2\n    while\
    \ i * i <= n:\n        if n % i == 0:\n            factor = i\n            break\n\
    \        i += 6\n    return factor\n", "    if n == 1:\n        return 2\n   \
    \ if n % 2 == 0:\n        return n\n    i = 5\n    while i * i <= n:\n       \
    \ if n % i == 0:\n            i += 1\n        else:\n            n = n // i\n\
    \            i += 1\n    if n > 2:\n        return n\n    return 2\n", "    \n\
    \    if n <= 1:\n        return n\n    \n    factor = 1\n    \n    while n % factor\
    \ != 0:\n        factor = factor * 2\n        \n    while n % factor == 0 and\
    \ n > 1:\n        n /= factor\n        \n    return factor\n</cell>\n<cell>\n\
    largest_prime_factor(1224)\n</cell>\n<cell>\nlargest_prime_factor(1224)\n</cell>\n\
    <cell>", "    assert n > 1\n    if n == 2:\n        return n\n    i = 2\n    while\
    \ True:\n        i += 1\n        if n % i == 0:\n            return i\n      \
    \  n //= i\n\n", "    while n % 2 == 0:\n        n = n // 2\n    while n % 3 ==\
    \ 0:\n        n = n // 3\n    if n > 2:\n        n += 1\n    return n\n", "  \
    \  i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n     \
    \   else:\n            break\n    return i\n\n", "    factor = 2\n    while n\
    \ % factor > 0:\n        n //= factor\n        factor += 1\n    return factor\n\
    \n", "    # http://en.wikipedia.org/wiki/Primality_test\n    # https://en.wikipedia.org/wiki/Prime-counting_function#The_numbers_2,3,5,7,11,13\n\
    \    if n < 2:\n        return 0\n    if n == 2:\n        return 2\n    i = 2\n\
    \    s = 0\n    while i * i <= n:\n        if n % i:\n            s += i\n   \
    \         n //= i\n        else:\n            i += 1\n    if n > 2:\n        s\
    \ += n\n    return s\n\n\n@lru_cache(maxsize=1024)", "    i = 2\n    factor =\
    \ 2\n    while i * factor <= n:\n        while n % i == 0 and n > 1:\n       \
    \     n //= i\n            factor += 1\n        if n == 1:\n            return\
    \ factor\n        i += 1\n    return factor\n\n", "    factor = 0\n    if n %\
    \ 2 == 0:\n        factor += 1\n    while n % 2 == 0:\n        n //= 2\n     \
    \   factor += 1\n    if n > 1:\n        factor += 1\n    return factor\n\n", " \
    \   factor = 2\n    while n % factor == 0:\n        n //= factor\n        factor\
    \ += 1\n    return factor\n\n", "    factor = 2\n    while n % factor == 0:\n\
    \        n //= factor\n        factor += 1\n    if n > 1:\n        factor = 2\n\
    \        n //= factor\n        while n % factor == 0:\n            n //= factor\n\
    \            factor += 1\n    return factor\n\n", "    factor = 2\n    while n\
    \ % factor == 0:\n        n //= factor\n        factor = 2\n    while factor *\
    \ factor <= n:\n        factor += 1\n    return factor\n\n", "    if n == 0:\n\
    \        return 0\n    prime_candidates = [i for i in range(2, n + 1) if n % i\
    \ == 0]\n    if len(prime_candidates) == 0:\n        return n\n    return max(prime_candidates)\n\
    \n", "    if n % 2 == 0 or n % 3 == 0:\n        return 3\n    i = 5\n    factor\
    \ = 2\n    while i * i <= n:\n        if n % i == 0:\n            i += 2\n   \
    \         factor += 1\n        else:\n            i = 6\n    if n < 6:\n     \
    \   return factor\n    return n\n\n", "    i = 2\n    while i * i <= n:\n    \
    \    if n % i:\n            i += 1\n        else:\n            n //= i\n    return\
    \ n\n", "    if n == 2:\n        return 2\n    factor = 2\n    while n % factor\
    \ == 0:\n        factor += 1\n    if factor > n - 1:\n        return n\n    return\
    \ factor\n\n", "    if n % 2 == 0 and n > 2:\n        return n\n\n    # Sieve\
    \ of Eratosthenes \n    limit = int(n**0.5 + 1.0) # Limit = sqrt(n)\n    sieve\
    \ = [True for _ in range(limit)]\n    for i in range(3, int(n**0.5) + 1, 2): #\
    \ Sieve of Eratosthenes\n        if sieve[i]:\n            sieve[i*i: i: i] =\
    \ [False]\n    largest = max(i for i in range(limit) if sieve[i])\n    return\
    \ largest\n", "    n = abs(n)\n    if n < 2:\n        raise ValueError(\"n must\
    \ be > 1\")\n    factor = 2\n    while True:\n        if n % factor == 0:\n  \
    \          return factor\n        factor += 1\n\n", "    # Sieve of Eratosthenes\
    \ (by primes)\n    # https://primes.utm.edu/notes/faq/probably-prime-numbers.html\n\
    \    sieve = [True] * (n + 1)\n    sieve[0] = False  # 0 and 1 are not primes\n\
    \    sieve[1] = False  # 2 and 3 are not primes\n    prime = 2\n    while prime\
    \ < n:\n        if sieve[prime + 1]:  # 1 is not prime\n            for i in range(prime\
    \ + 2, n + 1, prime):\n                sieve[i] = False\n            prime +=\
    \ 1\n        else:  # 2 is prime\n            if prime == n:  # n is prime\n \
    \               return prime\n            for i in range(3, n + 1, 2):  # 3..n\
    \ is composite\n                if not sieve[i]:\n                    prime =\
    \ i\n                    break\n    return n\n\n", "    factor = 2\n    factors\
    \ = []\n    i = 0\n    while factor < n:\n        i += 1\n        while n % factor\
    \ == 0:\n            n //= factor\n            factors.append(factor)\n      \
    \  factor += 1\n    return n - factors[-1]\n\n", "    factors = []\n    d = n\n\
    \    while d % 2 == 0:\n        factors.append(2)\n        d //= 2\n    while\
    \ d % 3 == 0:\n        factors.append(3)\n        d //= 3\n    if d*d > n:\n \
    \       while d % 5 == 0:\n            factors.append(5)\n            d //= 5\n\
    \        if d*d > n:\n            while d % 3 == 0:\n                factors.append(3)\n\
    \                d //= 3\n                if d > n:\n                    return\
    \ 0\n    return max(factors)\n\n", "    # assert n > 1\n    # assert n % 2 ==\
    \ 0\n\n    factors = []\n    for number in range(3, n):\n        if n % number\
    \ == 0:\n            factors.append(number)\n    return max(factors)\n\n", " \
    \   prime_factors_n = prime_factors_up_to(n)\n    return max(prime_factors_n,\
    \ key=lambda factor: factor[1])\n\n", "    factors = []\n    p = 2\n    while\
    \ p <= n:\n        while n % p == 0:\n            factors.append(p)\n        \
    \    n //= p\n        p += 1\n    if n > 1:\n        factors.append(n)\n    return\
    \ max(factors)\n\n", "    i = 2\n    prime_candidate = 2\n    while i <= n:\n\
    \        is_prime = True\n        for p in primes_below_n:\n            if i %\
    \ p == 0:\n                is_prime = False\n                break\n        if\
    \ is_prime:\n            prime_candidate = i\n        i += 1\n    return prime_candidate\n\
    \n", "    assert n > 0\n    i = 2\n    factor = 2\n    while i <= math.sqrt(n):\n\
    \        if n % i == 0:\n            factor = i\n            n //= i\n       \
    \ else:\n            i += 1\n    if n > 2:\n        factor = 2\n    return factor\n\
    \n", "    for factor in PRIMES_TABLE:\n        if n >= factor:\n            n\
    \ /= factor\n            break\n    else:\n        n *= 2\n    return n\n", " \
    \   if n < 2:\n        raise ValueError(f\"Not prime factor: {n}\")\n    if n\
    \ == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n\
    \        i, p = n, 1\n        while i > 1:\n            i //= 2\n            p\
    \ += 1\n        return p\n\n", "    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n\
    \    # Taken from http://code.activestate.com/recipes/117119/\n    sieve = np.ones(n/3\
    \ + (n%6==2), dtype=np.bool)\n    for i in range(int(n**0.5//3)):\n        if\
    \ sieve[i]:\n            k=3*i+1|1\n            sieve[       4*k     ::2*k]  =\
    \ False\n            sieve[      4*k+1   ::2*k]  = False\n            sieve[ \
    \     4*k+2   ::2*k]  = False\n            sieve[      4*k+3   ::2*k]  = False\n\
    \            sieve[      4*k+4*k   ::2*k] = False\n            sieve[      4*k+5*k\
    \   ::2*k] = False\n            sieve[      4*k+6*k   ::2*k] = False\n       \
    \     sieve[      4*k+7*k   ::2*k] = False\n\n    return 3*(2 ** (n-1)//3 * np.count_nonzero(sieve))\n\
    \n", "    if n <= 1:\n        return n\n    i, r = 0, n\n    while i <= r:\n \
    \       while n % i == 0:\n            n //= i\n            i += 1\n        if\
    \ n == 1:\n            return i\n    return n\n\n", "    i = 2\n    while i <=\
    \ math.sqrt(n) + 1:\n        if n % i == 0:\n            return i\n        i +=\
    \ 1\n    return n\n\n", "    i, primes = 0, [i for i in range(2, n + 1)]\n   \
    \ while i < n:\n        for m in primes:\n            if n % i == 0:\n       \
    \         break\n        else:\n            i += 1\n            primes.append(i)\n\
    \    return primes[-1]\n\n", "    next_prime = 3\n    while next_prime < n and\
    \ n % next_prime == 0:\n        next_prime += 2\n    i, p = next_prime, n // next_prime\n\
    \    while i >= 2 and p % i == 0:\n        i //= 2\n        p //= i\n    return\
    \ p\n\n", "    prime_candidate = 2\n    prime_factors = []\n\n    while prime_candidate\
    \ <= n:\n        if n % prime_candidate == 0:\n            prime_factors.append(prime_candidate)\n\
    \        prime_candidate += 1\n\n    if len(prime_factors) == 0:\n        return\
    \ n\n\n    return max(prime_factors)\n\n", "    assert n > 1\n    if n % 2 ==\
    \ 0:\n        return n\n    largest_prime_factor = 1\n    p = 2\n    while p *\
    \ p <= n:\n        if n % p == 0:\n            p += 2\n        else:\n       \
    \     largest_prime_factor = p\n            break\n    return largest_prime_factor\n\
    \n", "    if n % 2 == 0:\n        return n\n    \n    d = 2 \n    while d * d\
    \ <= n: \n        if n % d == 0: \n            return d\n        d += 2\n    return\
    \ n\n", "    i = 2\n    while i * i <= n:\n        if n % i:\n            i +=\
    \ 1\n        else:\n            n //= i\n    return n\n", "    # Find primes up\
    \ to sqrt(n)\n    factors = _factorize(n)\n    return next(x for x in range(2,\
    \ n) if factors[x] == 1)\n", "    i = 2\n    factors = []\n    while i * i <=\
    \ n:\n        if n % i:\n            i += 1\n        else:\n            n = n\
    \ // i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n\
    \    return factors[-1]\n\n", "    if n == 1:\n        return 1\n    if n % 2\
    \ == 0:\n        return 2\n    root = 3\n    limit = int(math.ceil(math.sqrt(n)))\n\
    \    while n % 2 == 0:\n        root = root * 3 + 1\n        limit = limit //\
    \ 2\n    while limit < n:\n        if (n % root == 0):\n            limit += 1\n\
    \        root += 1\n    return root\n\n", "    i = 2\n    while i * i <= n:\n\
    \        if n % i:\n            i += 1\n        else:\n            n //= i\n \
    \   return n\n\n", "    i = 2\n    while i * i <= n:\n        if n % i:\n    \
    \        i += 1\n        else:\n            n //= i\n    return i\n\n", "    #\
    \ https://en.wikipedia.org/wiki/Primality_test#Primality_probability_of_the_test\n\
    \    if n <= 1:\n        return n\n    a = n % 63797\n    if a == 3:\n       \
    \ return 7\n    if a == 2:\n        return 6\n    if a == 1 or n == 2 or n ==\
    \ 5:\n        return n\n    for p, e in factor(n).items():\n        if e != 1:\n\
    \            break\n    if a == 3:\n        return p\n    elif a == 0:\n     \
    \   return 4\n    else:\n        return n\n\n", "    import math\n    n = abs(n)\n\
    \    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    limit\
    \ = int(math.sqrt(n)) + 2\n    return max(n % i for i in range(3, limit, 2))\n\
    \n", "    prime_candidate = 2\n    while prime_candidate < n:\n        if n %\
    \ prime_candidate == 0:\n            prime_candidate += 1\n        else:\n   \
    \         return prime_candidate\n    return n\n\n", "    i = 2\n    factor =\
    \ 2\n\n    while i * factor <= n:\n        while n % i == 0:\n            factor\
    \ *= i\n            n //= i\n        i += 1\n\n    return factor\n\n", "    if\
    \ n == 1:\n        return 2\n    i = 2\n    factor = 2\n    while True:\n    \
    \    while n % i == 0:\n            n //= i\n            factor += 1\n       \
    \ if n == 1:\n            break\n        i += 1\n    return factor\n\n", "   \
    \ # sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\n\
    \    limit = int(n**0.5+1)\n    sieve = [True] * limit\n    for i in xrange(2,\
    \ int(n**0.5+1)):\n        if sieve[i]:\n            sieve[i*i::2*i]=[False]*((n-i-1)*(i-1)//2+i//2)\n\
    \    return 2 if n<2 else 3\n", "    i, p, n = 1, 0, n\n\n    while n > 1:\n \
    \       while n % i == 0:\n            n //= i\n            i += 1\n        if\
    \ n == 1:\n            break\n    else:\n        n = 2\n    while not n % p:\n\
    \        n //= p\n        p += 1\n    return n\n\n", "    factor = 2\n    while\
    \ n % factor != 0:\n        factor += 1\n    while n != 1:\n        while n %\
    \ factor == 0:\n            n /= factor\n        factor += 1\n    return factor\n\
    \n", "    if n % 2 == 0:\n        return n // 2\n    factor = 2\n    while(n %\
    \ factor == 0):\n        n //= factor\n        factor += 1\n    return factor\n\
    \n", "    i = 2\n    while True:\n        i += 1\n        if n % i == 0:\n   \
    \         if i > 2:\n                return i\n\n", "    # see https://www.geeksforgeeks.org/largest-prime-factor-for-an-integer-number-set-1-3-0/\n\
    \    # for an explanation of the algorithm\n    if n <= 0:\n        return 0\n\
    \    elif n != 1:\n        return largest_prime_factor(n // 2)\n    else:\n  \
    \      primes_found = set()\n        for i in range(2, n // 2 + 1):\n        \
    \    primes_found |= primes_found | set(range(i * i, n, i))\n        return max(primes_found)\n\
    \n", "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return max(factors)\n\n", "   \
    \ import math\n    factors = []\n    p = 1\n    while n % p == 0:\n        factors.append(p)\n\
    \        n //= p\n    p = 1\n    while p < n:\n        while n % p == 0:\n   \
    \         factors.append(p)\n            n //= p\n        p += 1\n    if n > 1:\n\
    \        factors.append(n)\n    return max(factors)\n\n", "    if n <= 1:\n  \
    \      return 1\n    factor = 2\n    while n % factor == 0:\n        factor +=\
    \ 1\n    return factor\n\n", "    for d in range(2, n // 2 + 1):\n        if n\
    \ % d == 0:\n            return d\n    return n\n\n", "    if n == 1:\n      \
    \  return 1\n    for x in range(2, int(n**0.5 + 1)):\n        if n % x == 0:\n\
    \            return x\n    return n\n\n", "    factor = 2\n    i = 2\n    while\
    \ i < n // factor:\n        if n % i == 0:\n            factor += 1\n        else:\n\
    \            i += 1\n    if n > 1:\n        return factor\n    else:\n       \
    \ return -1\n\n", "    # check n is positive\n    if n < 0:\n        return 0\n\
    \    # write an efficient algorithm and use trial division method\n    # to find\
    \ largest prime factor >= n\n    n = int(n)\n    if n == 1:\n        return n\n\
    \    if n == 2:\n        return n\n    k = n\n    factor = 2\n    while 1:\n \
    \       quotient, remainder = divmod(k, factor)\n        if remainder == 1:\n\
    \            k = quotient\n        else:\n            factor *= quotient\n   \
    \         break\n    return factor\n", "    if n <= 1:\n        return None\n\
    \    factors = factorization(n)\n    return max([f for f in factors if f[1] %\
    \ 2 == 1])\n\n", "    import math\n\n    if n == 0:\n        return 0\n    i =\
    \ 2\n    factor = 2\n    while i * factor <= n:\n        if n % factor == 0:\n\
    \            i += 2\n            n //= factor\n        else:\n            i +=\
    \ 1\n        factor += 1\n    return n\n\n", "    factorization = factorint(n)\n\
    \    return factorization[factorization.keys()[-1]]\n", "    assert n > 1\n  \
    \  if n > 1:\n        factor = 2\n        while n % factor == 0:\n           \
    \ n //= factor\n            factor += 1\n    return n if n != 1 else 1\n\n", " \
    \   # Sieve of Erastosthenes\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i == 0:\n            i += 1\n        else:\n            n //= i\n    return\
    \ n\n\n", "    if n < 2:\n        raise ValueError(\"n must be > 1\")\n    if\
    \ n % 2 == 0:\n        return n\n    s, t = n, 2\n    while t < n:\n        while\
    \ not n % t:\n            t += s\n        if t > n:\n            break\n     \
    \   s *= t\n        n //= t\n    return t\n\n", "    if n == 2:\n        return\
    \ 2\n    lcs = factors(n)\n    return max(lcs)\n\n", "    return 1 + _largest_prime_factor(n)\n\
    \n", "    n = n + 1\n    largest = 1\n    while 1:\n        largest = largest\
    \ + 2\n        if largest >= n:\n            break\n        while n % largest\
    \ == 0:\n            largest = largest + 1\n        if largest != n:\n       \
    \     break\n    return largest\n\n", "    if n <= 2:\n        return n\n    factors\
    \ = []\n    sqrt_n = n**0.5\n    p_min = 1\n    while p_min < sqrt_n:\n      \
    \  if n % p_min == 0:\n            factors.append(p_min)\n            p_min =\
    \ p_min + 1\n        else:\n            p_min = (p_min + 3) // 2\n    return factors[-1]\n",
  "    if n < 2:\n        return 2\n    divisors = primes(n)\n    if len(divisors)\
    \ > 1 and all(n % d == 0 for d in divisors):\n        return divisors[-1]\n  \
    \  else:\n        return n\n\n", "    if n % 2 == 0:\n        return 2\n    i\
    \ = 5\n    while i * i <= n:\n        if n % i == 0:\n            return i\n \
    \       i += 6\n    return n\n\n", "    # check special cases\n    if n == 2:\n\
    \        return 2\n    if n == 3:\n        return 3\n\n    # get the primes\n\
    \    primes = _primes_upto_n(n)\n\n    # get the prime factors\n    factors =\
    \ []\n    for prime in primes:\n        if n % prime == 0:\n            factors.append(prime)\n\
    \            n //= prime\n\n    # add the largest prime factor\n    factors.append(n)\n\
    \n    # return the largest prime factor if it's a factor of n else 1\n    return\
    \ max(factors) if len(factors) > 1 else 1\n\n", "    \n    prime_factors = []\n\
    \    factor = 2\n\n    while n > 1:\n        while n % factor == 0:\n        \
    \    prime_factors.append(factor)\n            n //= factor\n        factor +=\
    \ 1\n\n    if prime_factors:\n        return prime_factors[-1]\n    else:\n  \
    \      return factor\n", "    # http://en.wikipedia.org/wiki/Primality_test#Naive_method\n\
    \    # http://primes.utm.edu/prove/prove2_3.html\n    assert n > 1\n    for p\
    \ in primes():\n        if n & p == 0:\n            return p\n    return n\n\n",
  "    import math\n    factor = 2\n    while n % 2 == 0:\n        n //= 2\n     \
    \   while n % factor == 0:\n            n //= factor\n            factor += 1\n\
    \    if n > 1:\n        factor = 2\n        while n % factor == 0:\n         \
    \   n //= factor\n            factor += 1\n    return factor\n\n", "    # https://stackoverflow.com/a/35173848\n\
    \    if n < 2:\n        return n\n\n    primes = _primes_up_to(n)\n    return\
    \ max(primes, key=lambda x: factors(x)[n])\n\n", "    i = 2\n    while i <= n:\n\
    \        if n % i == 0:\n            n = n / i\n            return i\n       \
    \ i = i + 1\n    return n\n\n", "    i = 2\n    while i * i <= n:\n        if\
    \ n % i:\n            i += 1\n        else:\n            n //= i\n    return n\
    \ if n > 1 else 2\n\n", "    assert n > 0\n    \n    # initialize the largest\
    \ prime factor found\n    largest_prime_factor = 0\n\n    # check only up to n-1\n\
    \    for i in range(2, n):\n        if n % i == 0:\n            # found a prime\
    \ factor > 1\n            if i > largest_prime_factor:\n                largest_prime_factor\
    \ = i\n\n    # check only odd numbers (2..n)\n    for i in range(3, n):\n    \
    \    if n % i == 0:\n            if i > largest_prime_factor:\n              \
    \  largest_prime_factor = i\n\n    return largest_prime_factor\n\n", "    i =\
    \ 2\n    factor = 2\n    while i < n and n % i == 0:\n        while n % i == 0:\n\
    \            n //= i\n            factor += 1\n        if n > 1:\n           \
    \ i += 1\n    if n > 1:\n        factor = 1\n    return factor\n\n", "    if n\
    \ == 1:\n        return 2\n    if n % 2 == 0:\n        return 2\n    i = 5\n \
    \   count = 0\n    while i * i <= n:\n        if n % i == 0 and n // i > 1:\n\
    \            count += 1\n        i += 2\n    if count > 1:\n        return i\n\
    \    else:\n        return n\n\n\n@profile\n@timeit", "    n = int(n)\n    prime\
    \ = 1\n    while n % prime == 0:\n        prime = int(prime)\n        n = n //\
    \ prime\n    if n > 1 and n != prime:\n        prime = int(prime)\n    return\
    \ prime\n\n", "    i = 2\n    while i * i <= n:\n        if n % i:\n         \
    \   i += 1\n        else:\n            n //= i\n    return n\n\n", "    if n <\
    \ 2:\n        raise ValueError(\"n must be greater than 1.\")\n    i = 2\n   \
    \ while i * i <= n:\n        if n % i:\n            i += 2\n        else:\n  \
    \          n //= i\n    return n\n\n", "    # http://en.wikipedia.org/wiki/Primality_test#Naive_methods\n\
    \    # http://primes.utm.edu/lists/small/millions/\n    if n < 2:\n        raise\
    \ ValueError('n must be greater than 1')\n    if n == 1:\n        return 2\n \
    \   if n % 2 == 0:\n        return n\n    i = 5\n    if n % 3 == 0:\n        i\
    \ = 6\n    if n % 5 == 0:\n        i = 8\n    if i == 8:\n        return n\n \
    \   # http://primes.utm.edu/lists/small/millions/\n    while i * i <= n:\n   \
    \     if n % i == 0:\n            n //= i\n        else:\n            i += 1\n\
    \    if n > 2:\n        return n\n    else:\n        return 1\n\n", "    # Factor\
    \ the n\n    factor = 2\n    while n % factor == 0:\n        factor += 1\n   \
    \ return factor\n\n", "    return max(factors(n)[: k + 1] for k in range(len(factors(n)))\
    \ if n % factors(n)[k])\n</cell>\n<text>\nPrime Factors\nProblem 48\nBy listing\
    \ the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th\
    \ prime is 13.\n\nWhat is the 10 001st prime number?\n\n\n</text>\n<cell>", " \
    \   i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n //=\
    \ i\n            i += 1\n    if n == 1:\n        return i\n    return n\n\n",
  "    g = 2\n    while g * g <= n:\n        g = g * 2 + 1\n    while g > 1:\n   \
    \     if n % g == 0: return g\n        g = g // 2\n    return n\n</cell>\n<cell>",
  "    if n < 2:\n        raise ValueError(\"n must be > 2\")\n    for d in range(2,\
    \ int(math.floor(math.sqrt(n))) + 1):\n        if n % d == 0:\n            return\
    \ d\n    return n\n\n", "    def isprime(n):\n        if n < 2:\n            return\
    \ False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n\
    \            return False\n        for i in range(3, int(n**0.5)+1, 2):\n    \
    \        if n % i == 0:\n                return False\n        return True\n\n\
    \    def largest_prime_factor(n):\n        if n > 1:\n            for i in range(2,\
    \ n):\n                if n % i == 0:\n                    return i\n        else:\n\
    \            return 1\n\n    i = 0\n    factor = 1\n    while factor <= n:\n \
    \       if isprime(i):\n            i += 1\n        else:\n            i = largest_prime_factor(i)\n\
    \        factor += 1\n    return factor\n", "    candidate = 2\n    while n %\
    \ candidate == 0:\n        candidate += 1\n    if candidate == 2:\n        return\
    \ n\n    while n % candidate != 0:\n        candidate = candidate-1\n    return\
    \ candidate\n\n", "    n = int(n)\n    i = 2\n    while i*i <= n:\n        if\
    \ n % i == 0:\n            return i\n        i += 1\n    return n\n\n", "    #\
    \ https://stackoverflow.com/questions/683051/how-to-tell-if-a-number-is-a-prime-number-in-python\n\
    \    # https://www.hackerrank.com/challenges/30-largest-prime-factor\n    import\
    \ math\n\n    if n > 1:\n        return math.ceil(n / smallest_prime_factor)\n\
    \n    return 1\n\n", "    n = int(n)\n    if n <= 2:\n        return 2\n    #\
    \ See: https://en.wikipedia.org/wiki/Primality_test\n    if n == 2:\n        return\
    \ 1\n    for d in range(3, int(n ** 0.5) + 1, 2):\n        if n % d == 0:\n  \
    \          return d\n    return n\n\n", "    largest_prime_factor = 1\n    for\
    \ i in range(2, n):\n        if n % i == 0:\n            largest_prime_factor\
    \ = i\n            break\n    return largest_prime_factor\n\n", "    i = 2\n \
    \   while i * i <= n:\n        if n % i == 0:\n            return i\n        i\
    \ += 1\n    return n\n\n", "    i = 2\n    while i * i <= n:\n        if n % i:\n\
    \            i += 1\n        else:\n            n //= i\n    if n > 1:\n     \
    \   return n\n    else:\n        return 1\n\n", "    i = 2\n    while i * i <=\
    \ n:\n        if n % i == 0:\n            i += 1\n        else:\n            n\
    \ //= i\n    if n == 1:\n        return n\n    else:\n        return i\n\n", " \
    \   if n < 2:\n        raise ValueError(\"n must be > 1\")\n    \n    if n ==\
    \ 2:\n        return 1\n\n    i = 2\n    factor = 2\n    limit = int(n ** 0.5\
    \ + 1)\n    while i <= limit:\n        if n % i == 0:\n            i += 1\n  \
    \          factor = i\n            break\n        i += 1\n\n    return factor\n\
    \n", "    i = 2\n    while True:\n        if n % i == 0:\n            i += 1\n\
    \        else:\n            break\n    return i\n\n", "    if n < 2:\n       \
    \ raise ValueError(\"n must be > 2\")\n    while n % 2 == 0:\n        n = n //\
    \ 2\n    while n % 3 == 0:\n        n = n // 3\n    while n % 5 == 0:\n      \
    \  n = n // 5\n    while n % 7 == 0:\n        n = n // 7\n    return n\n\n", " \
    \   return next((\n        factor\n        for factor in divisors(n)\n       \
    \ if n // factor > 1,\n        1,\n    ))\n\n", "    \n    i = 2\n    factor =\
    \ 2\n    while i * factor <= n:\n        if n % i == 0 or n % (i + factor) ==\
    \ 0:\n            i += 1\n            factor += 1\n        else:\n           \
    \ factor -= 1\n    return factor\n\n", "    i = 2\n    factor = 2\n    while i\
    \ * factor < n:\n        while n % i == 0:\n            factor *= i\n        \
    \    n //= i\n        i += 1\n    return factor\n\n", "    if n < 2:\n       \
    \ return 2\n    while n % 2 == 0:\n        n = n // 2\n    while n % 3 == 0:\n\
    \        n = n // 3\n    while n % 5 == 0:\n        n = n // 5\n    while n %\
    \ 7 == 0:\n        n = n // 7\n    return n \n", "    if n <= 1:\n        return\
    \ n\n    # Sieve of Eratosthenes\n    # http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \    # http://stackoverflow.com/questions/9755539/prime-factors-of-a-number-efficiently-with-python\n\
    \    primes = [p for p in range(2, n) if not is_prime(p)]\n    while len(primes)\
    \ < len(prime_factors(n)):\n        primes.append(n * primes[-1])\n    composites\
    \ = []\n    for p in primes:\n        while n % p == 0:\n            composites.append(p)\n\
    \            n //= p\n    if n == 1:\n        return composites[0]\n    return\
    \ max(composites)\n\n\n@overload", "    if n % 2 == 0:\n        return n // 2\n\
    \n    max_factor = 2\n    min_factor = n/2\n\n    while min_factor >= max_factor:\n\
    \        min_factor = (max_factor*2)+1\n        max_factor = (max_factor*2)+2\n\
    \n    if max_factor != n:\n        return max_factor\n    else:\n        return\
    \ n\n</cell>\n<cell>", "    # Sieve of Eratosthenes\n    primes = []\n    for\
    \ i in range(2, n):\n        if i not in primes:\n            primes.append(i)\n\
    \            for p in range(i*i, n, i):\n                primes.append(p)\n  \
    \  return primes[-1]\n\n", "    \n    if n < 2:\n        return None\n    \n \
    \   if n%2 == 0:\n        return 2\n    \n    largest_divisor = 2\n    largest_prime\
    \ = 1\n    \n    for i in range(3, n, 2):\n        \n        if n%i == 0:\n  \
    \          \n            q = n/i\n            \n            while q%1 == 0:\n\
    \                q //= 1\n                \n            if q > largest_prime:\n\
    \                largest_prime = q\n                largest_divisor = i\n    \
    \        \n    if largest_prime == 1:\n        return 2\n    \n    return largest_prime\n",
  "    if n == 1:\n        return n\n    i = 2\n    factors = []\n    while i * i\
    \ <= n:\n        if n % i:\n            i += 1\n        else:\n            n //=\
    \ i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n\
    \    return max(factors)\n\n", "    n = abs(n)\n\n    if n == 1:\n        return\
    \ 2\n    \n    prime = 1\n    factor = 2\n\n    while factor <= n:\n        while\
    \ n % factor == 0:\n            n = n // factor\n            prime *= factor\n\
    \n        if n == 1:\n            return prime\n\n        factor+=1\n\n    assert\
    \ False, \"No factors found\"\n\n", "    from math import sqrt\n\n    return int(sqrt(n))\
    \ if n else 1\n\n", "    i = 2\n    prime = 1\n    while i * i <= n:\n       \
    \ if n % i == 0:\n            prime = i\n            break\n        i += 1\n \
    \   return prime\n\n", "    factor = 2\n    while factor <= n:\n        is_prime\
    \ = True\n        for k in range(factor, n + 1):\n            if n % k == 0:\n\
    \                is_prime = False\n                break\n        if is_prime:\n\
    \            return factor\n        factor += 1\n    \n    return factor\n</cell>\n\
    <cell>\nlargest_prime_factor(13195)\n</cell>\n<cell>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nProblem 5\nA palindromic number reads the same both ways. The\
    \ largest palindrome made from the product of two 2-digit numbers is 9009 = 91\
    \ x 99.\n\nFind the largest palindrome made from the product of two 3-digit numbers.\n\
    \n\n</text>\n<cell>", "    # check for trivial case\n    if n < 2:\n        return\
    \ 2\n\n    # check for even case\n    if n % 2 == 0:\n        return 2\n\n   \
    \ # check for odd case\n    i = 0\n    while n % i == 0:\n        i += 1\n   \
    \ if i == 1:\n        return n\n\n    primes = []\n\n    for d in range(3, n //\
    \ 2 + 1, 2):\n        if n % d == 0:\n            primes.append(d)\n\n    if len(primes)\
    \ < len(prime_factors(n)):\n        return n\n\n    return max(primes)\n\n", " \
    \   n = int(n)\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n\
    \            return i\n        i += 1\n    return n\n\n", "    if n == 2:\n  \
    \      return 2\n    for d in range(3, ceil(sqrt(n)) + 1, 2):\n        if n %\
    \ d == 0:\n            return d\n", "    # https://stackoverflow.com/questions/3940738/prime-factorization\n\
    \    div = 2\n    while not n % div:\n        while n % div == 0:\n          \
    \  n //= div\n        div += 1\n    if n == 2:\n        return 2\n    return div\n\
    \n", "    # See project euler problems page 25\n    assert n > 1\n    i = 2\n\
    \    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n\
    \            n //= i\n    return i\n\n", "    if n < 2:\n        raise ValueError(\"\
    Largest prime factors cannot be less than 2 and not prime.\")\n\n    if n == 2:\n\
    \        return 2\n    if n == 3:\n        return 3\n    prime_candidates = factorization(n)\n\
    \    for prime_candidate in prime_candidates:\n        if prime_candidate > n:\n\
    \            break\n        factors = factorization(prime_candidate)\n       \
    \ prime_factor = factors[-1]\n        if prime_factor > n:\n            break\n\
    \        if prime_factor == n:\n            return prime_candidate\n        elif\
    \ prime_factor < n:\n            return prime_candidate\n    raise ValueError(\"\
    No prime factor found\")\n\n", "    return next(\n        factor\n        for\
    \ factor in factorint(n).values()\n        if all(factor.is_integer() and factor\
    \ > 1)\n    )\n\n\n@overload", "    \n    # find factors and test if > 1 \n  \
    \  factors = []\n    for f in range(2, n):\n        if n % f == 0:\n         \
    \   factors.append(f)\n    return factors[0]\n", "    # http://primes.utm.edu/lists/small/10001.html\n\
    \    # See also project euler problem: https://projecteuler.net/problem=4\n  \
    \  p = 1\n    while n % p == 0:\n        p += 1\n    if p > 2:\n        p += 1\n\
    \    return p\n", "    factors: List[int] = []\n    d = 2\n    while d * d <=\
    \ n:\n        while n % d == 0:\n            factors.append(d)\n            n\
    \ //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return\
    \ factors[-1]\n\n", "    factor = 2\n    while n % factor == 0:\n        n //=\
    \ factor\n        factor += 1\n    if n == 1:\n        return factor\n    return\
    \ n\n", "    if n == 2:\n        return n\n\n    factor = 2\n    while n % factor\
    \ == 0:\n        n //= factor\n        factor = 2\n    while not n % factor:\n\
    \        n //= factor\n        factor += 1\n\n    return factor\n\n", "    primes\
    \ = [2]\n    i = 2\n    while i < math.sqrt(n):\n        if n % i == 0:\n    \
    \        primes.append(i)\n            n = n // i\n        i += 1\n    if n ==\
    \ 2 or n == 3:\n        return 2\n    return max(primes)\n\n", "    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return i\n    return n\n\n", "    i\
    \ = 2\n    while i * i <= n:\n        if n % i == 0:\n            i += 1\n   \
    \     else:\n            n //= i\n    return i\n\n", "    if n < 2:\n        raise\
    \ ValueError(\"n must be greater than 1\")\n    if n == 1:\n        return 2\n\
    \    return n * largest_prime_factor(n // 2)\n", "    assert n > 0\n    factor\
    \ = 2\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n         \
    \   n //= i\n            factor += 1\n        i += 1\n    return factor\n\n",
  "    # https://primes.utm.edu/lists/small/millions/\n    factors = prime_divisors(n)\n\
    \    return max(f, n//f for f in factors)\n", "    if n == 1:\n        return\
    \ 2\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            i +=\
    \ 1\n        else:\n            n = n // i\n    return n\n\n", "    next_n = 2\n\
    \    factor = 2\n    while next_n % n != 0:\n        factor = next_n\n       \
    \ next_n += 2\n    while not is_prime(next_n):\n        factor += 1\n        next_n\
    \ += 2\n    return factor\n\n", "    if n < 2:\n        raise ValueError(\"n must\
    \ be > 1\")\n    factors = []\n    if n % 2 == 0:\n        factors.append(2)\n\
    \    next_n = 3\n    while next_n % 2 == 0:\n        next_n += 2\n    while next_n\
    \ % 3 == 0:\n        next_n += 3\n    if next_n > n:\n        raise ValueError(\"\
    Not prime\")\n    while next_n <= n:\n        factors.append(next_n)\n       \
    \ next_n += 2\n    return max(factors)\n\n", "    factors = [i for i in range(2,\
    \ n) if n % i == 0]\n    return max(factors)\n\n", "    # Sieve of Eratosthenes\n\
    \    # http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n    sieve = [True]\
    \ * (n + 1)\n    sieve[0] = sieve[1] = False\n    for i in range(3, int(math.sqrt(n))\
    \ + 1, 2):\n        if sieve[i]:\n            sieve[i * i::2 * i] = [False] *\
    \ ((n - i * i) // i)\n    return 2 if n == 2 else 3\n\n", "    # http://primes.utm.edu/prove/prove2_3.html\n\
    \    g = 2\n    while g * g <= n:\n        if n % g == 0:\n            n //= g\n\
    \        else:\n            g += 1\n    return n if n > 1 else 2\n\n", "    if\
    \ n < 2:\n        return n\n    result = 1\n    while n % 2 == 0:\n        result\
    \ += 1\n        n //= 2\n    while n % 3 == 0:\n        result += 1\n        n\
    \ //= 3\n    if n > 2:\n        result += 1\n    return result * n\n\n", "   \
    \ # see https://en.wikipedia.org/wiki/Primality_test\n    if n == 1:\n       \
    \ return 2\n    for i in range(2, n):\n        if n % i == 0:\n            return\
    \ i\n    return 1\n\n", "    n, isprime = n, True\n    while isprime:\n      \
    \  isprime = False\n        for i in range(2, n):\n            if (n % i) == 0:\n\
    \                isprime = True\n                break\n    if n > 1:\n      \
    \  factor = 1\n        for i in range(2, n):\n            factor *= i + 1\n  \
    \          if factor > n:\n                factor = n\n            if factor ==\
    \ n:\n                break\n    return factor\n\n", "    primes = factorize(n)\n\
    \    primes = [p for p in primes if p > 1]\n    return primes[-1]\n\n", "    factors\
    \ = factor(n-1)\n    for p in factors:\n        if p > n:\n            break\n\
    \    else:\n        return factors[-1]\n    return p\n", "    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return i\n    return n\n", "    i =\
    \ 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i\
    \ += 1\n        else:\n            n //= i\n            factors.append(i)\n  \
    \  if n > 1:\n        factors.append(n)\n    return max(factors)\n\n", "    i\
    \ = 2\n    factor = 1\n    while i <= n / i:\n        while n % i == 0:\n    \
    \        n //= i\n            factor += 1\n        i += 1\n    return factor\n",
  "    if n < 2:\n        return n\n    s, d = n, 2\n    while d % 2 == 0:\n     \
    \   d //= 2\n        s += 1\n    if s == 1:\n        return n\n    factor = 2\n\
    \    while s % 2 == 0:\n        s //= 2\n        factor += 1\n    return factor\n\
    \n", "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            i\
    \ += 1\n        else:\n            return i\n    return n\n\n", "    primes =\
    \ sieve_of_eratosthenes(n)\n    if primes.count(1) == n: \n        return n\n\
    \    else:\n        return max(primes)\n\n", "    while n % 2 == 0:\n        n\
    \ //= 2\n    while n % 3 == 0:\n        n //= 3\n    while n % 5 == 0:\n     \
    \   n //= 5\n    while n % 7 == 0:\n        n //= 7\n    while n % 11 == 0:\n\
    \        n //= 11\n    while n % 13 == 0:\n        n //= 13\n    while n % 17\
    \ == 0:\n        n //= 17\n    return n if n > 1 else 1\n\n", "    import math\n\
    \    if n <= 1:\n        raise ValueError(\"n must be > 1\")\n    if n == 1:\n\
    \        return 2\n    max_prime = isprime(n)\n    if max_prime:\n        factor\
    \ = 2\n        while not isprime(factor * n):\n            factor = factor * 2\n\
    \        return factor\n    while True:\n        if n % 2 == 0 and isprime(n /\
    \ 2):\n            return 2\n        while n % 6 == 0 and isprime(n / 6):\n  \
    \          return 6\n        while n % 12 == 0 and isprime(n / 12):\n        \
    \    return 12\n        while n % 18 == 0 and isprime(n / 18):\n            return\
    \ 18\n        if n == 2 or n == 3:\n            return n\n        if n % 6 ==\
    \ 0:\n            return 6\n        if n % 12 == 0:\n            return 12\n \
    \       if n % 18 == 0:\n            return 18\n        n = n // 6\n    return\
    \ n\n\n", "    assert n > 1\n    factors = sieve_of_eratosthenes(n)\n    return\
    \ max(factors, key=lambda f: int((n - f) ** 0.5))\n\n", "    # Sieve of Erastosthenes\n\
    \    # https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n    # See also https://stackoverflow.com/questions/11494575/python-prime-factorization\n\
    \    sieve = [True] * n\n    sieve[0] = False\n    next_prime = 2\n    while next_prime\
    \ < n:\n        if sieve[next_prime]:\n            for i in range(next_prime *\
    \ next_prime, n + 1, next_prime):\n                sieve[i] = False\n        prime\
    \ = next_prime\n        while prime < n and n % prime == 0:\n            prime\
    \ += 1\n        sieve[next_prime] = True\n        next_prime += prime\n    return\
    \ next_prime - 1\n\n", "    largest_factor = 0\n    for factor in prime_factors(n):\n\
    \        if factor > largest_factor:\n            largest_factor = factor\n  \
    \  return largest_factor\n\n", "    i = 3\n    while i * i <= n:\n        if n\
    \ % i == 0:\n            i += 1\n        else:\n            break\n    return\
    \ i\n\n", "    if n < 2:\n        raise ValueError(\"n must be > 1\")\n    if\
    \ n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    i = 5\n\
    \    while i * i <= n:\n        if n % i == 0:\n            return i\n       \
    \ i += 1\n    return n\n\n<|/ file source=github dstars=1 ext=.py |>", "    #\
    \ make sure n is greater than 1 and that n is not prime\n    n = abs(n)\n    if\
    \ n < 2:\n        raise ValueError('n must be greater than 1 and not be prime')\n\
    \    if n % 2 == 0:\n        return 2\n    i = 5\n    factor = 2\n    while i\
    \ * i <= n:\n        if n % i == 0:\n            i += 1\n            factor =\
    \ 2\n        else:\n            n = n / i\n            factor += 1\n    return\
    \ factor\n\n", "    if n == 1:\n        return 2\n    if n % 2 == 0:\n       \
    \ return 3\n    if n % 3 == 0:\n        return 6\n    prime_candidates_sieve =\
    \ [True for n in range(5 * int(n ** 0.5) + 1, n + 1, 3)]\n    prime_candidates_sieve[0]\
    \ = False\n    prime_candidates_sieve[1] = False\n    prime_candidates_sieve[2]\
    \ = True\n    prime_candidates_sieve[3] = True\n    prime_candidates_sieve[4]\
    \ = True\n    prime_candidates_sieve[-1] = False\n    prime_candidates_sieve[-2]\
    \ = False\n    prime_candidates_sieve[-3] = False\n    prime_candidates_sieve[-4]\
    \ = False\n    prime_candidates_sieve[-5] = False\n    prime_candidates_sieve[-6]\
    \ = False\n    prime_candidates_sieve[7] = True\n    prime_candidates_sieve[8]\
    \ = True\n    prime_candidates_sieve[9] = True\n    prime_candidates_sieve[11]\
    \ = True\n    prime_candidates_sieve[12] = True\n    prime_candidates_sieve[13]\
    \ = True\n    prime_candidates_sieve[14] = True\n    prime_candidates_sieve[15]\
    \ = True\n    prime_candidates_sieve[16] = True\n    prime_candidates_sieve[17]\
    \ = True\n    prime_candidates_sieve[18] = True\n    prime_candidates_sieve[19]\
    \ = True\n    prime_candidates_sieve[20] = True\n    prime_candidates_sieve[21]\
    \ = True\n    prime_candidates_sieve[23] = True\n    prime_candidates_sieve[24]\
    \ = True\n    prime_candidates_sieve[25] = True\n    prime_candidates_sieve[26]\
    \ = True\n    prime_candidates_sieve[27] = True\n    prime_candidates_sieve[28]\
    \ = True\n    prime_candidates_sieve[29] = True\n    prime_candidates_sieve[30]\
    \ = True\n    prime_candidates_sieve[31] = True\n    prime_candidates_sieve[32]\
    \ = True\n    prime_candidates_sieve[33] = True\n    prime_candidates_sieve[34]\
    \ = True\n    prime_candidates_sieve[35] = True\n    prime_candidates_sieve[36]\
    \ = True\n    prime_candidates_sieve[37] = True\n    prime_candidates_sieve",
  "    if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n\n    primes\
    \ = prime_factors(n)\n    return max(primes)\n\n", "    i = 2\n    while i < n\
    \ and n % i == 0:\n        i = i + 1\n    if i == 2:\n        return n\n    while\
    \ n % i == 0 and i > 2:\n        i = i / 2\n    return i\n\n", "    \n    prime_factors\
    \ = prime_factorization(n)\n    return max(prime_factors)\n", "    prime_numbers\
    \ = sieve.find_prime_numbers(n)\n    largest_prime_number = prime_numbers[-1]\n\
    \    return largest_prime_number - 1\n\n", "    if n % 2 == 0:\n        return\
    \ 2\n    \n    # Find largest factor p s.t. p * p > n\n    largest = 2\n    while\
    \ n > largest:\n        largest += 2\n        while largest % n == 0:\n      \
    \      largest = largest // 2\n    \n    # Check if n is a prime number using\
    \ trial division\n    if n == largest:\n        return largest\n    \n    # Check\
    \ if n is divisible by all the prime factors of largest\n    for p in range(largest,\
    \ n + 1, largest):\n        while n % p == 0:\n            n = n // p\n      \
    \      if n == 1:\n                return p\n    \n    return largest\n\n", " \
    \   if n == 1:\n        return 2\n    while n % 2 == 0:\n        n = n // 2\n\
    \    if n > 2:\n        return largest_prime_factor(n * 3 + 1)\n    return n\n\
    \n", "    # http://stackoverflow.com/questions/126864/fastest-way-to-list-all-primes-below-n\n\
    \    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    i = 2\n\
    \    limit = n / i\n    while i <= limit:\n        if is_prime(i):\n         \
    \   return i\n        i += 1\n    return n\n\n", "    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            break\n        i += 1\n    if i < n:\n  \
    \      i += 1\n    return i\n\n", "    factor = 2\n    while n % factor == 0:\n\
    \        n //= factor\n        factor += 1\n    return factor\n\n", "    if n\
    \ == 1:\n        return 2\n    i = 2\n    while i * i <= n:\n        if n % i\
    \ == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n\
    \n", "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n\
    \        else:\n            n //= i\n    return i\n\n", "    factor = 2\n    while\
    \ n % factor == 0:\n        n //= factor\n        factor = 3\n    while factor\
    \ * factor <= n:\n        factor += 1\n    return factor\n\n\n@lru_cache(maxsize=32768)",
  "    # Method is based on\n    # http://en.wikipedia.org/wiki/Prime_number_theory\n\
    \    if n < 2:\n        raise ValueError(\"Input must be greater than 1.\")\n\
    \    factors = [2]\n    while n % 2 == 0:\n        n //= 2\n        factors.append(2)\n\
    \    for prime in factors:\n        while n % prime == 0:\n            n //= prime\n\
    \            if n == 1:\n                return prime\n            else:\n   \
    \             factors.append(prime)\n    if n == 1:\n        return factors[-1]\n\
    \    return factors[-1]\n\n", "    num = n\n    while num % 2 == 0:\n        num\
    \ /= 2\n    while num % 3 == 0:\n        num /= 3\n    if num == 1:\n        return\
    \ num\n    else:\n        return num\n\n", "    if n < 2:\n        raise ValueError\n\
    \    # Sieve of Erastothenes and Newton's rule\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i == 0:\n            return i\n        i += 1\n    if n >\
    \ 1:\n        return n\n    raise ValueError\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
