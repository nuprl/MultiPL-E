name: HumanEval_24_largest_divisor
language: py
prompt: "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find\
  \ the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n\
  \    5\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7)\
  \ == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert\
  \ candidate(49) == 7\n\ndef test_check():\n    check(largest_divisor)\n\ntest_check()\n"
completions: ["    primes = divisors(n)\n    return max(primes, key=lambda p: p //\
    \ 2)\n\n", "    factors = []\n\n    for i in range(1, n):\n        if n % i ==\
    \ 0:\n            factors.append(i)\n            if n > i:\n                factors.append(n\
    \ // i)\n                break\n        else:\n            factors.append(i)\n\
    \            if n > i:\n                break\n\n    return factors[-1]\n", " \
    \   largest_divisor = 1\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n\
    \            largest_divisor = i\n        i += 1\n    return largest_divisor\n\
    \n", "    s = 0\n    i = n - 1\n    while (i > 1) and (i%2 == 0):\n        s =\
    \ s + i\n        i = i / 2\n    return s\n", "    \n    # Base case\n    if n\
    \ < 2:\n        return n\n    \n    # Recursive case\n    div = 0\n    for d in\
    \ range(2, int(math.sqrt(n)) + 1):\n        if n % d == 0:\n            div =\
    \ d\n    return div\n\n", "    return sum(int(k) for k in range(1, n // 2 + 1)\
    \ if n % k == 0)\n\n", "    \n    return max([x for x in range(1, n + 1) if x\
    \ == n // x]) # Greatest divisor of n that is less than n\n</cell>\n<cell>\nlargest_divisor(15)\n\
    </cell>\n<cell>\nlargest_divisor(50)\n</cell>\n<cell>\nlargest_divisor(50)\n</cell>\n\
    <cell>\nlargest_divisor(100)\n</cell>\n<cell>\nlargest_divisor(1000)\n</cell>\n\
    <cell>\nlargest_divisor(100000)\n</cell>\n<cell>\nlargest_divisor(1000000)\n</cell>\n\
    <cell>\nlargest_divisor(150000000)\n</cell>\n<cell>\nlargest_divisor(1500000000)\n\
    </cell>\n<text>\nThe fibonacci sequence is useful as it provides a quick way of\
    \ calculating the nth term of the sequence, starting with 0. By carefully avoiding\
    \ repetition, we can calculate large numbers of terms without overflowing the\
    \ size of an integer.\n\n\n</text>\n<cell>", "    i = n\n    factors = []\n  \
    \  while i != 1:\n        i = i // 2 if i % 2 == 0 else i ** 2\n        factors.append(i)\n\
    \    return factors[len(factors)-1]\n\n", "    return max(int(n ** 0.5) // i for\
    \ i in factorize(n))\n\n", "    for i in range(3, n, 2):\n        if n % i ==\
    \ 0:\n            return i\n    return n\n\n", "    \n    return max_divisor(n)\
    \ // 2\n    \n</cell>\n<cell>\nassert largest_divisor(14) == 3\nassert largest_divisor(11)\
    \ == 3\nassert largest_divisor(27) == 3\nassert largest_divisor(39) == 3\nassert\
    \ largest_divisor(29) == 3\nassert largest_divisor(59) == 3\nassert largest_divisor(1012)\
    \ == 3\nassert largest_divisor(1831) == 4\nassert largest_divisor(1797) == 5\n\
    </cell>\n<text>\nProblem 10\nThe sum of squares of the first ten natural numbers\
    \ is,\n$$1^2 + 2^2 + ... + 10^2 = 385$$\nThe square of the sum of the first ten\
    \ natural numbers is,\n$$(1 + 2 + ... + 10)^2 = 55^2 = 3025$$\nHence the difference\
    \ between the sum of the squares of the first ten natural numbers and the square\
    \ of the sum is 3025 \u2212 385 = 2640.\nFind the difference between the sum of\
    \ the squares of the first one hundred natural numbers and the square of the sum.\n\
    \n\n</text>\n<cell>", "    return n // 2\n\n", "    while n % 2 == 0:\n      \
    \  n /= 2\n    return n\n\n", "    ans = n\n    \n    while n > 1:\n        while\
    \ n % 2 == 0:\n            n /= 2\n        ans = max(ans, n)\n    return ans\n",
  "    i = n - 1\n    div = 1\n    while i > 0 and n % i == 0:\n        div += 1\n\
    \        i //= 2\n    return div\n\n", "    return max(isprime(i) and (n//i)**2\
    \ for i in range(1, n//2 + 1))\n\n", "    divisors = []\n    for d in range(1,\
    \ n + 1):\n        if n % d == 0:\n            divisors.append(d)\n    return\
    \ max(divisors)\n\n", "    n = abs(n)\n    ldiv = 0\n    while True:\n       \
    \ ldiv += 1\n        if n % ldiv == 0:\n            return ldiv\n        n //=\
    \ ldiv\n", "    count = 2\n\n    while n > 1:\n        n -= count\n        count\
    \ += 1\n\n    return count\n\n", "    i = n\n    j = n\n    k = n\n    while True:\n\
    \        while i % (j + 2) == 1:\n            i += j\n            while i % (k\
    \ + 2) == 1:\n                i += k\n                if i % 2 == 0:\n       \
    \             break\n                k += j\n            if i % 2 == 0:\n    \
    \            break\n        j += 1\n        k -= 1\n\n    return i\n\n\n@lru_cache(maxsize=16)"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
