name: HumanEval_16_count_distinct_characters
language: py
prompt: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string,\
  \ find out how many distinct characters (regardless of case) does it consist of\n\
  \    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
  \    4\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
  \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
  \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n \
  \   check(count_distinct_characters)\n\ntest_check()\n"
completions: ["    cnt = 1\n    for char in string:\n        if char not in string.lower():\n\
    \            cnt += 1\n    return cnt\n", "    distinct_characters = 0\n    for\
    \ c in string:\n        if c.isalpha():\n            distinct_characters += 1\n\
    \    return distinct_characters\n\n", "    return len(set(string))\n", "    return\
    \ len(set(string.lower()))\n\n", "    return len(set(string))\n\n", "    return\
    \ len(set(string))\n\n", "    # your code goes here\n    return len(set(string))\n",
  "    return len(set(string))\n\n", "    distinct_characters = 0\n    for character\
    \ in string:\n        if character.isupper():\n            distinct_characters\
    \ += 1\n        elif character.islower():\n            distinct_characters +=\
    \ 1\n    return distinct_characters\n\n", "    count = 0\n    for c in string:\n\
    \        if c.isalpha():\n            count += 1\n        else:\n            count\
    \ = count + 1\n    return count\n\n", "    return len(set(string.lower()))\n\n",
  "    return len(set(string))\n\n", "    return len(set(string))\n\n", "    \n  \
    \  # use set to remove duplicates, then return len of the set\n    return len(set(string))\n\
    </cell>\n<cell>\nassert count_distinct_characters('xyzXYZ') == 3\nassert count_distinct_characters('Jerry')\
    \ == 4\n</cell>\n<text>\nAnd finally, let's count how many times each character\
    \ shows up in a string:\n\n\n</text>\n<cell>\nfrom collections import defaultdict\n",
  "    char_counts = {}\n    for char in string:\n        if char in char_counts:\n\
    \            char_counts[char] += 1\n        else:\n            char_counts[char]\
    \ = 1\n    return len(char_counts)\n\n", "    return len(set(string))\n\n", " \
    \   return len(set(string))\n\n", "    distinct_count = 0\n    for char in string:\n\
    \        if char.isupper():\n            distinct_count += 1\n        elif char.islower():\n\
    \            distinct_count += 1\n        elif char.isdigit():\n            distinct_count\
    \ += 1\n        elif char.isspace():\n            distinct_count += 1\n    return\
    \ distinct_count\n\n", "    count = 1\n    letters = list(string.lower())\n  \
    \  for letter in letters:\n        if letter not in string:\n            break\n\
    \        else:\n            count += 1\n    return count\n\n", "    return len(set(string.lower()))\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
