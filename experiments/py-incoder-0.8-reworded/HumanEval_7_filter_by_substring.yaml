name: HumanEval_7_filter_by_substring
language: py
prompt: "from typing import List\n\ndef filter_by_substring(strings: List[str], substring:\
  \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that\
  \ contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>>\
  \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd',\
  \ 'array']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([], 'john') == []\n    assert\
  \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
  \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
  \ 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
  \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
  \    check(filter_by_substring)\n\ntest_check()\n"
completions: ["    return [s for s in strings if substring in s]\n", "    return [x\
    \ for x in strings if substring in x]\n", "    return [s for s in strings if substring\
    \ in s]\n", "    return [s for s in strings if substring in s]\n", "    return\
    \ [string for string in strings if substring in string]\n", "    return list(filter(lambda\
    \ s: substring in s, strings))\n", "    if not strings:\n        return []\n \
    \   if not substring:\n        return strings\n    res = [s for s in strings if\
    \ substring in s]\n    return res\n", "    filtered = filter(lambda string: string.startswith(substring),\
    \ strings)\n    return list(filtered)\n", "    return [string for string in strings\
    \ if substring in string]\n", "    if not strings:\n        return []\n    return\
    \ [s for s in strings if substring in s]\n", "    return [s for s in strings if\
    \ substring in s]\n", "    return list(filter(lambda s: substring in s, strings))\n",
  "    filtered_list = []\n    for s in strings:\n        if substring in s:\n   \
    \         filtered_list.append(s)\n    return filtered_list\n", "    return list(filter(lambda\
    \ x: substring in x, strings))\n\n", "    return [x for x in strings if substring\
    \ in x]\n", "    return [s for s in strings if substring in s]\n", "    filtered\
    \ = []\n    for str in strings:\n        if substring in str:\n            filtered.append(str)\n\
    \    return filtered\n", "    return [s for s in strings if substring in s]\n",
  "    return [string for string in strings if substring in string]\n</code>\n<|/\
    \ a tags=list-comprehension,list,python |>\n<| a |>\n<code>", "    return [s for\
    \ s in strings if substring in s]\n</cell>\n<cell>\nstrings = ['abc', 'bacd',\
    \ 'cde', 'array']\nsubstring = 'ab'\nsubstring_2 = substring + 'c'\nsubstring_3\
    \ = substring + 'de'\nsubstring_4 = substring + 'array'\n\nprint(f'Substring {substring}\
    \ found in {strings}')\nprint(f'Substring {substring_2} found in {strings}')\n\
    print(f'Substring {substring_3} found in {strings}')\nprint(f'Substring {substring_4}\
    \ found in {strings}')\nprint(f'Substring {substring_2} and {substring_3} found\
    \ in {strings}')\nprint(f'Substring {substring_2} and {substring_4} found in {strings}')\n\
    </cell>\n<cell>\nlist1 = [1,2,3]\nlist2 = [2,3,4]\nlist3 = [3,4,5]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
