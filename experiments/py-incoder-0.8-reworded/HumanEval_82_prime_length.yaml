name: HumanEval_82_prime_length
language: py
prompt: "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes\
  \ a string and returns True if the string\n    length is a prime number or False\
  \ otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n\
  \    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hello') == True\n    assert candidate('abcdcba')\
  \ == True\n    assert candidate('kittens') == True\n    assert candidate('orange')\
  \ == False\n    assert candidate('wow') == True\n    assert candidate('world') ==\
  \ True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n\
  \    assert candidate('') == False\n    assert candidate('HI') == True\n    assert\
  \ candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa')\
  \ == False\n    assert candidate('Madam') == True\n    assert candidate('M') ==\
  \ False\n    assert candidate('0') == False\n\ndef test_check():\n    check(prime_length)\n\
  \ntest_check()\n"
completions: ["    if len(string) < 2:\n        return False\n    if len(string) >\
    \ len(set(string)):\n        return True\n    if string[0] in '0123456789':\n\
    \        return False\n    if len(set(string)) < 2:\n        return True\n   \
    \ prime_number = True\n    for character in string:\n        prime_number = prime_number\
    \ and character in '0123456789'\n    if prime_number:\n        count_of_characters_with_one\
    \ = 0\n        for character in string:\n            if character == '1':\n  \
    \              count_of_characters_with_one += 1\n        if count_of_characters_with_one\
    \ >= len(string)-1:\n            return False\n    return True\n\n", "    if len(string)\
    \ < 2:\n        return False\n    if string[0] not in string.upper():\n      \
    \  return False\n    if len(set(string)) > 2:\n        return False\n    prime\
    \ = True\n    for i in range(2, len(string)):\n        if string[i] not in string.upper():\n\
    \            return False\n        if string[i] not in string.lower():\n     \
    \       return False\n        if string[i].isupper():\n            pass\n    \
    \    else:\n            return False\n        \n        if i ** 2 > len(string):\n\
    \            return False\n        \n        if string[i] not in string.lower():\n\
    \            return False\n            \n    return prime\n", "    if len(string)\
    \ <= 1:\n        return True\n    return all(string[i - 1] % string[i] == 0 for\
    \ i in range(2, len(string)))\n\n", "    if len(string) < 2:\n        return True\n\
    \    for i in range(2, int(sqrt(len(string)))):\n        if string[-i:] == string[:-i]:\n\
    \            return False\n    return True\n\n", "    if len(string) < 2:\n  \
    \      return False\n    if string[0] not in '0123456789':\n        return False\n\
    \    sieve_primes = [True] * len(string)\n    sieve_primes[0] = False\n    for\
    \ length in range(1, len(string)):\n        for offset in range(length - 1, 1,\
    \ -1):\n            if sieve_primes[offset]:\n                prime = string[offset:length]\n\
    \                for index in range(offset, len(string) - offset):\n         \
    \           sieve_primes[index] = False\n                break\n            for\
    \ index in range(offset + 1, length):\n                sieve_primes[index] = False\n\
    \    return len(string) % 2 == 0 and len(string) in [\n        (offset + 1) *\
    \ index for offset in range(0, len(string))\n        for index in range(0, offset\
    \ + 1)]\n\n", "    # your code here\n    # remove non-alpha characters and convert\
    \ to lowercase string\n    string = string.lower()\n    string = string.translate(None,\n\
    \                               string.maketrans(\"\", \"\", string.punctuation)).lower()\n\
    \    if len(string) < 1:\n        return False\n    odd_counter = 0\n    even_counter\
    \ = 0\n    for char in string:\n        if char.isalpha():\n            odd_counter\
    \ += 1 if char == 'o' else 0\n            even_counter += 1 if char == 'e' else\
    \ 0\n    if odd_counter % 2 == 0:\n        return False\n    return True\n\n",
  "    # BEGIN Question 3\n    prime = True\n    for length in range(len(string)):\n\
    \        if string[length] not in string.ascii_lowercase:\n            prime =\
    \ False\n            break\n    if prime:\n        return True\n    else:\n  \
    \      return False\n    # END Question 3\n\n", "    if len(string) != len(set(string)):\n\
    \        return False\n    return all(string[i].isdigit() or string[i] == string[len(string)\
    \ - i - 1] for i in\n               range(len(string) - 1))\n\n", "    if len(string)\
    \ == 1:\n        return all(string[0])\n    return all(string[i] + string[i -\
    \ 1] >> 1 for i in range(1, len(string) + 1))\n\n", "    return all(string in\
    \ '0123456789' for string in string)\n\n", "    if len(string) < 2:\n        return\
    \ False\n    prime = True\n    for char in string:\n        if char in '0123456789':\n\
    \            prime *= False\n        elif char in 'bcdfghjklmnpqrstvwxyz':\n \
    \           prime *= False\n            prime += int(char + '2')\n        else:\n\
    \            prime *= False\n            prime += int(char)\n        if prime\
    \ > 2:\n            prime = True\n        else:\n            prime = False\n \
    \   return prime\n\n", "    if len(string) < 2:\n        return False\n    if\
    \ len(string) == 2:\n        return True\n    if string[0] != string[1]:\n   \
    \     return False\n    if string[0] == string[1]:\n        return True\n    count\
    \ = 0\n    for i in range(len(string) - 1):\n        if string[i] != string[i\
    \ + 1]:\n            return False\n        count += 1\n    if count % 2 == 0:\n\
    \        return False\n    return True\n\n", "    return len(string) != 1 and\
    \ all(num > 1 for num in string) if len(string) > 0 else False\n\n", "    length\
    \ = len(string)\n    sqrt_length = int(math.sqrt(length))\n    count = 0\n   \
    \ for i in range(0, sqrt_length):\n        if string[i] == string[len(string)-1]:\n\
    \            count += 1\n        if count == 2:\n            break\n    if count\
    \ < 2:\n        return True\n    return False\n\n", "    length = len(string)\n\
    \    # Your code here\n    if length <= 1:\n        return False\n    if length\
    \ == 2:\n        return True\n    if length == 3 or length == 5:\n        if string[0]\
    \ % 2 == 0 or string[1] % 2 == 0:\n            return True\n        return False\n\
    \    if length == 6:\n        if string[0] % 3 == 0 or string[1] % 3 == 0:\n \
    \           return True\n        elif string[2] % 3 == 0:\n            return\
    \ True\n        elif string[0] % 5 == 0 and string[1] % 5 == 0:\n            return\
    \ True\n        elif string[2] % 5 == 0:\n            return True\n        return\
    \ False\n    if length == 7:\n        if string[0] % 5 == 0 or string[1] % 5 ==\
    \ 0 or string[2] % 5 == 0:\n            return True\n        elif string[3] %\
    \ 5 == 0:\n            return True\n        elif string[0] % 7 == 0 and string[1]\
    \ % 7 == 0 and string[2] % 7 == 0:\n            return True\n        elif string[3]\
    \ % 7 == 0:\n            return True\n        elif string[4] % 7 == 0:\n     \
    \       return True\n        elif string[0] % 11 == 0 and string[1] % 11 == 0\
    \ and string[2] % 11 == 0 and string[3] % 11 == 0 and string[4] % 11 == 0:\n \
    \           return True\n        return False\n    if length == 9:\n        if\
    \ string[0] % 11 == 0 or string[1] % 11 == 0 or string[2] % 11 == 0 or string[3]\
    \ % 11 == 0 or string[4] % 11 == 0 or string[5] % 11 == 0 or string[6] % 11 ==\
    \ 0 or string[7] % 11 == 0 or string[8] % 11 == 0:\n            return True\n\
    \        elif string[9] % 11 == 0:\n            return True\n        elif string[10]\
    \ % 11 == 0:\n            return True\n        elif string[11] % 11 == 0:\n  \
    \          return True\n        elif string[0] % 13 == 0 and string[1] % 13 ==\
    \ 0 and string[2] % 13 == 0 and string[3] % 13 == 0 and string[4] % 13 == 0 and\
    \ string[5] % 13 == 0 and string[6] % 13 == 0 and string[7] % 13 == 0 and string[8]\
    \ % 13 == 0 and string[9] % 13 == 0 and string[10] % 13 == 0 and string[11] %\
    \ 13 == 0 and string[12] % 13 == 0:\n            return True\n        return False\n\
    \    if length == 10:\n        if string[0] % 13 == 0 or string[1] % 13 == 0 or\
    \ string[2] % 13 == 0 or string[3] % 13 == 0 or string[4] % 13 == 0 or string[5]\
    \ % 13 == 0 or string[6] % 13 == 0 or string[7] % 13 == 0 or string[8] % 13 ==\
    \ 0 or string[9] % 13 == 0 or string[10] % 13 == 0:\n            return True\n\
    \        elif string[11] % 13 == 0:\n            return True\n        elif string[12]\
    \ % 13 == 0:\n            return True\n        elif string[13] % 13", "    n =\
    \ len(string)\n    if n <= 1:\n        return True\n    if n == 2:\n        return\
    \ True\n    if n % 2 == 0:\n        return is_odd(n)\n    for x in range(3, int(math.sqrt(n))\
    \ + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n\
    \n", "    pass\n", "    if len(string) == 0:\n        return False\n\n    if string[0]\
    \ == '#':\n        return True\n\n    if string[0] == '*':\n        return False\n\
    \n    if string[0] not in string.upper():\n        return False\n\n    if string[1]\
    \ != ' ' and string[1] not in string.upper():\n        return False\n\n    if\
    \ string[2] == ' ':\n        return True\n\n    odd_num = 1\n\n    for char in\
    \ string[2:]:\n        if char == '#':\n            continue\n\n        if char\
    \ == '*':\n            return False\n\n        if ord(char) < 48 or ord(char)\
    \ > 57:\n            return False\n\n        if ord(char) == 45 or ord(char) ==\
    \ 46:\n            odd_num += 1\n\n        if ord(char) == 32:\n            odd_num\
    \ += 1\n\n        if odd_num > 2:\n            return False\n\n    return True\n\
    \n", "    length = 0\n    for char in string:\n        if char.isalpha():\n  \
    \          length += 1\n    return length in primes\n\n", "    if len(string)\
    \ <= 1:\n        return False\n\n    if string.isdigit():\n        return True\n\
    \n    if string[0].isdigit():\n        return False\n\n    if string[0] in 'aeiou':\n\
    \        counter = 1\n\n        for c in string:\n            if c.isdigit():\n\
    \                counter += 1\n\n                if counter > 3:\n           \
    \         return False\n\n        return not any(string[i + 1:].isdigit() for\
    \ i in range((len(string) - counter)))\n\n    return False\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
