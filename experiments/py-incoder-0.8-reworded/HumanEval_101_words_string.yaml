name: HumanEval_101_words_string
language: py
prompt: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    \"\
  \"\"\n    You will be given a string of words separated by commas or spaces. Your\
  \ task is\n    to split the string into words and return an array of the words.\n\
  \    \n    For example:\n    >>> words_string('Hi, my name is John')\n    ['Hi',\
  \ 'my', 'name', 'is', 'John']\n    >>> words_string('One, two, three, four, five,\
  \ six')\n    ['One', 'two', 'three', 'four', 'five', 'six']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
  \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
  \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
  \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
  \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
  \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
  \ test_check():\n    check(words_string)\n\ntest_check()\n"
completions: ["    # Split the string into a list of words\n    # You can use s.split()\
    \ to split into a list\n    words = s.split(',')\n    \n    # Print out each word\
    \ and add it to a new list\n    new_list = []\n    for word in words:\n      \
    \  new_list.append(word.strip())\n    \n    return new_list\n</cell>\n<cell>",
  "    return s.strip().lower().replace(' ', ',').split(',')\n</cell>\n<text>\nLet's\
    \ check that your function works as expected:\n\n\n</text>\n<cell>\nwords_string(\"\
    Hello, my name is John\")\n</cell>\n<text>\nExercise: Write a function title_string()\
    \ that takes in a string and capitalizes the first letter of each word. Use the\
    \ map function with a lambda function that capitalizes the first letter of each\
    \ word. Print the result of the function.\n\n\n</text>\n<cell>", "    \n    #\
    \ Convert the input string into a list of words\n    words=s.split(', ')\n   \
    \ \n    # Return the list\n    return words\n    \n", "    return s.split(',')\n",
  "    pass\n</cell>\n<cell>", "    return s.replace(' ', '').split(',')\n\n", " \
    \   return s.replace(' ', ','+',').split(',')\n", "    lst = []\n    if s:\n \
    \       lst = [s.strip() for s in s.split(',')]\n    return lst\n", "    return\
    \ s.split(', ')\n", "    \n    return list(s)\n", "    return s.replace(' ', ',').split(',')\n",
  "    return s.strip().replace(\",\", \" \").replace(\"-\", \" \").split()\n\n",
  "    return s.replace(',', ' ').split()\n", "    s=s.replace(\",\",\" \").split()\n\
    \    return s\n</cell>\n<cell>", "    #Split the string into a list on space\n\
    \    words = s.replace(' ','').split(',')\n    \n    #Return a list of strings\
    \ of the words\n    return words\n", "    # Your code here\n    return s.split(',')\n\
    \n", "    return s.lower().replace(',', ' ').split()\n\n", "    # Convert to a\
    \ list of words\n    return s.split()\n    ", "    return s.replace(',', ' ').split()\n\
    </cell>\n<cell>", "    \n    s = s.replace(\",\", \"\").replace(\" \", \"\")\n\
    \    split_s = s.split(\",\")\n    return list(split_s)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
