name: HumanEval_140_fix_spaces
language: py
results:
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    # Add an underscore\
    \ before any sequence of spaces\n    \n    return re.sub(' +', '_', text)\n\n\n\
    def check(candidate):\n    assert candidate('Example') == 'Example'\n    assert\
    \ candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow\
    \ Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa\
    \   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\
    \ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgyr0c40h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgyr0c40h.py\", line 29,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmpgyr0c40h.py\", line 22,\
    \ in check\n    assert candidate('Example') == 'Example'\n  File \"/tmp/tmpgyr0c40h.py\"\
    , line 18, in fix_spaces\n    return re.sub(' +', '_', text)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    \n    text\
    \ = re.sub(' +',\"_\",text)\n    text = re.sub('\\s{2,}', '_', text)\n    \n \
    \   return text\n</cell>\n<cell>\ntrain_df['id'] = train_df['id'].apply(fix_ids)\n\
    train_df['text_lemmatized'] = train_df['text_lemmatized'].apply(fix_spaces)\n\
    train_df['title_lemmatized'] = train_df['title_lemmatized'].apply(fix_spaces)\n\
    train_df.head(4)\n</cell>\n<text>\nSave the cleaned data\n\n\n</text>\n<cell>\n\
    train_df.to_csv(path_or_buf='data/amazon_reviews_us_Digital_Software_v1_00_train.csv',\
    \ header=True, index=False, quoting=csv.QUOTE_NONNUMERIC)\n</cell>\n<text>\nPreparing\
    \ the Test Data\n\n</text>\n<cell>\ntest_df = pd.read_csv('./data/amazon_reviews_us_Digital_Software_v1_00_test_public.csv',\
    \ \n                      dtype=str, \n                      error_bad_lines=False,\
    \ \n                      warn_bad_lines=True)\n\ntest_df['id'] = test_df['id'].apply(fix_ids)\n\
    test_df['text_lemmatized'] = test_df['text_lemmatized'].apply(fix_spaces)\ntest_df['title_lemmatized']\
    \ = test_df['title_lemmatized'].apply(fix_spaces)\ntest_df.head()\n</cell>\n<cell>\n\
    test_df.to_csv(path_or_buf='data/amazon_reviews_us_Digital_Software_v1_00_test.csv',\
    \ header=True, index=False, quoting=csv.QUOTE_NONNUMERIC)\n</cell>\n<cell>\n!pip\
    \ install konlpy wordcloud\n</cell>\n<text>\nLoad in the cleaned Test data\n\n\
    \n</text>\n<cell>\ntest_df = pd.read_csv('./data/amazon_reviews_us_Digital_Software_v1_00_test.csv',\
    \ \n                      dtype=str, \n                      error_bad_lines=False,\
    \ \n                      warn_bad_lines=True)\n\ntest_df['id'] = test_df['id'].apply(fix_ids)\n\
    test_df['text_lemmatized'] = test_df['text_lemmatized'].apply(fix_spaces)\ntest_df['title_lemmatized']\
    \ = test_df['title_lemmatized'].apply(fix_spaces)\ntest_df.head()\n</cell>\n<cell>\n\
    from konlpy.tag import Okt\n\nokt = Okt()\n\ndef check(candidate):\n    assert\
    \ candidate('Example') == 'Example'\n    assert candidate('Mudasir Hanif ') ==\
    \ 'Mudasir_Hanif_'\n    assert candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n\
    \    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa\
    \ 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2qo_u4u5.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    return re.sub('\\\
    s+', '_', text)\n\n\n@lru_cache(maxsize=1024)\ndef check(candidate):\n    assert\
    \ candidate('Example') == 'Example'\n    assert candidate('Mudasir Hanif ') ==\
    \ 'Mudasir_Hanif_'\n    assert candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n\
    \    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa\
    \ 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9w35wa5l.py\", line\
    \ 19, in <module>\n    @lru_cache(maxsize=1024)\nNameError: name 'lru_cache' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    \n    tokens\
    \ = text.split()\n    \n    # replace spaces with underscores\n    for i in range(len(tokens)):\n\
    \        if tokens[i].isspace():\n            tokens[i] = tokens[i].replace('\
    \ ', '_')\n    \n    # replace double consecutive spaces with -\n    space_counter\
    \ = 0\n    \n    for i in range(len(tokens)):\n        if tokens[i].isspace():\n\
    \            if space_counter > 0:\n                tokens[i] = '-' + tokens[i]\n\
    \                space_counter = 0\n        else:\n            space_counter +=\
    \ 1\n    \n    return ' '.join(tokens)\n\n\ndef check(candidate):\n    assert\
    \ candidate('Example') == 'Example'\n    assert candidate('Mudasir Hanif ') ==\
    \ 'Mudasir_Hanif_'\n    assert candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n\
    \    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa\
    \ 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2r30dry.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpl2r30dry.py\", line 46,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmpl2r30dry.py\", line 40,\
    \ in check\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    return ' '.join(text.split())\n\
    \ndef check(candidate):\n    assert candidate('Example') == 'Example'\n    assert\
    \ candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow\
    \ Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa\
    \   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\
    \ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprcxdd9tq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprcxdd9tq.py\", line 26,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmprcxdd9tq.py\", line 20,\
    \ in check\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    if text.find('\
    \ ') >= 0:\n        spaces = re.sub(' +', ' ', text)\n        consecutive = re.sub('\
    \ +', ' ', spaces)\n        no_space = re.sub(' +', '', consecutive)\n       \
    \ no_space = re.sub('-+', '-', no_space)\n        no_space = re.sub(' +', '',\
    \ no_space)\n        return no_space\n    else:\n        return text\n\n\ndef\
    \ check(candidate):\n    assert candidate('Example') == 'Example'\n    assert\
    \ candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow\
    \ Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa\
    \   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\
    \ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_xfijy4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4_xfijy4.py\", line 35,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmp4_xfijy4.py\", line 29,\
    \ in check\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n  File\
    \ \"/tmp/tmp4_xfijy4.py\", line 17, in fix_spaces\n    spaces = re.sub(' +', '\
    \ ', text)\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    return re.sub('\
    \ +', ' ', text)\n\n\ndef check(candidate):\n    assert candidate('Example') ==\
    \ 'Example'\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert\
    \ candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n\
    \    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa\
    \ 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw30a51fc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpw30a51fc.py\", line 27,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmpw30a51fc.py\", line 20,\
    \ in check\n    assert candidate('Example') == 'Example'\n  File \"/tmp/tmpw30a51fc.py\"\
    , line 16, in fix_spaces\n    return re.sub(' +', ' ', text)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    \n    spaces\
    \ = [i for i in text if i in ' ']\n    if len(spaces) >= 2:\n        return '_'.join(spaces)\n\
    \    else:\n        return text\n</cell>\n<text>\nTest your work\nWith this function,\
    \ you can (mostly) automate the process of fixing text data.\n\n\n</text>\n<cell>\n\
    fix_spaces(' Example')\n</cell>\n<cell>\nfix_spaces(' Example 1')\n</cell>\n<cell>\n\
    fix_spaces(' Example 2')\n</cell>\n<cell>\nfix_spaces(' Example 3')\n</cell>\n\
    <text>\nOptional: Removing punctuation\nSome text analysis tasks consider punctuation\
    \ to be an important aspect of a word. \nIf you're working with some text that\
    \ includes punctuation, like names, addresses, \nor phone numbers, you might want\
    \ to remove it.\n\nFor example, text that might be a\n\nname or email\naddress,\n\
    phone number,\nsocial security number\n\nmight contain punctuation like commas\
    \ and periods. \nOther tasks might want to remove all punctuation. \nIt's okay\
    \ to remove punctuation if and only if it doesn't hurt the semantics of the text.\
    \ \nFor this optional task, you are welcome to specify a list containing the specific\
    \ punctuation you want to remove. \n(Later on in this specialization, you'll learn\
    \ how to include other punctuation in your \nlist and how to handle text that\
    \ includes multiple consecutive punctuations. You'll see how to do that later.)\n\
    \nInstructions\n\nIn the list below, write a list of the punctuations that you\
    \ want to remove. \nNote that punctuations are like commas and periods, so be\
    \ sure to include them in the list.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Example') == 'Example'\n    assert candidate('Mudasir Hanif\
    \ ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow Yellow  Dirty  Fellow')\
    \ == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa   mple') == 'Exa-mple'\n\
    \    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n\
    \    check(fix_spaces)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpu17k8877.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    return re.sub('\\\
    s+', '_', text)\n</cell>\n<cell>\nprint(fix_spaces(' Example'))\nprint(fix_spaces('\
    \ Example 1'))\nprint(fix_spaces(' Example 2'))\nprint(fix_spaces(' Example 3'))\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Example') == 'Example'\n\
    \    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow\
    \ Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa\
    \   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\
    \ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpe0oq2xk0.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    text = re.sub(r'\\\
    s+', '_', text).strip()\n    return re.sub(r'_{2,}', '_', text)\n\ndef check(candidate):\n\
    \    assert candidate('Example') == 'Example'\n    assert candidate('Mudasir Hanif\
    \ ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow Yellow  Dirty  Fellow')\
    \ == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa   mple') == 'Exa-mple'\n\
    \    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n\
    \    check(fix_spaces)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpboxgxdhd.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpboxgxdhd.py\", line 27,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmpboxgxdhd.py\", line 20,\
    \ in check\n    assert candidate('Example') == 'Example'\n  File \"/tmp/tmpboxgxdhd.py\"\
    , line 16, in fix_spaces\n    text = re.sub(r'\\s+', '_', text).strip()\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    return text.replace('\
    \ ', '-')\n\n\ndef check(candidate):\n    assert candidate('Example') == 'Example'\n\
    \    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow\
    \ Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa\
    \   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\
    \ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpza2i_9h2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpza2i_9h2.py\", line 27,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmpza2i_9h2.py\", line 21,\
    \ in check\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    text = text.replace('\
    \ ', '_')\n    if len(text.split(' ')) > 1:\n        space_replacement = ''\n\
    \        for space in text.split(' '):\n            if space != text.replace(space,\
    \ '_'):\n                space_replacement += space + '_'\n        text = text.replace(space_replacement,\
    \ '')\n    return text\n\n\ndef check(candidate):\n    assert candidate('Example')\
    \ == 'Example'\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n \
    \   assert candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n\
    \    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa\
    \ 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwup7pt_y.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpwup7pt_y.py\", line 34,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmpwup7pt_y.py\", line 30,\
    \ in check\n    assert candidate('Exa   mple') == 'Exa-mple'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    return text.replace('\
    \ ', '_').replace('  ', '-')\n\ndef check(candidate):\n    assert candidate('Example')\
    \ == 'Example'\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n \
    \   assert candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n\
    \    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa\
    \ 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp26zjya_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpp26zjya_.py\", line 26,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmpp26zjya_.py\", line 22,\
    \ in check\n    assert candidate('Exa   mple') == 'Exa-mple'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    # remove double\
    \ spaces\n    text = re.sub(r'  +', ' ', text)\n    # replace consecutive spaces\
    \ with a single -\n    text = re.sub(r'  +', '-', text)\n    return text\n\ndef\
    \ check(candidate):\n    assert candidate('Example') == 'Example'\n    assert\
    \ candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow\
    \ Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa\
    \   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\
    \ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpow_4s4g8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpow_4s4g8.py\", line 30,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmpow_4s4g8.py\", line 23,\
    \ in check\n    assert candidate('Example') == 'Example'\n  File \"/tmp/tmpow_4s4g8.py\"\
    , line 17, in fix_spaces\n    text = re.sub(r'  +', ' ', text)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    return re.sub('\
    \ +', ' ', text)\n\ndef check(candidate):\n    assert candidate('Example') ==\
    \ 'Example'\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert\
    \ candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n\
    \    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa\
    \ 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn1mvbkd9.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpn1mvbkd9.py\", line 26,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmpn1mvbkd9.py\", line 19,\
    \ in check\n    assert candidate('Example') == 'Example'\n  File \"/tmp/tmpn1mvbkd9.py\"\
    , line 16, in fix_spaces\n    return re.sub(' +', ' ', text)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    pattern =\
    \ re.compile(r\"\\s(?=\\s|$)\", re.UNICODE)\n    return pattern.sub(lambda m:\
    \ \"_\", text)\n</cell>\n<text>\nLet's test this function on some examples:\n\n\
    \n</text>\n<cell>\nfor i in range(100):\n    print(fix_spaces(\"Example {}\".format(i)),\
    \ end=', ')\n</cell>\n<text>\nLet's also define some custom classes to play around\
    \ with:\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Example')\
    \ == 'Example'\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n \
    \   assert candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n\
    \    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa\
    \ 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpr0vc3q9b.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    if text.find('\
    \ ') != -1:\n        spaces = text.find(' ')\n        spaces_left = text.find('\
    \ ', spaces + 1)\n        spaces_right = text.find(' ', spaces + 2)\n        text\
    \ = text.replace(text[spaces:spaces_left], '_')\n        text = text.replace(text[spaces_left:spaces_right],\
    \ '-')\n    return text\n\n\ndef check(candidate):\n    assert candidate('Example')\
    \ == 'Example'\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n \
    \   assert candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n\
    \    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa\
    \ 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps58c1a_7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmps58c1a_7.py\", line 33,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmps58c1a_7.py\", line 27,\
    \ in check\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    \n    if text\
    \ == '':\n        return ''\n    \n    spaces = text.count(' ')\n    \n    if\
    \ spaces > 2:\n        new_spaces = '-' * spaces\n        text = ''.join([s.strip()\
    \ for s in text.split(' ')]) + new_spaces\n    \n    return text\n\n\ndef check(candidate):\n\
    \    assert candidate('Example') == 'Example'\n    assert candidate('Mudasir Hanif\
    \ ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow Yellow  Dirty  Fellow')\
    \ == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa   mple') == 'Exa-mple'\n\
    \    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n\
    \    check(fix_spaces)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjpj44t8g.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpjpj44t8g.py\", line 37,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmpjpj44t8g.py\", line 31,\
    \ in check\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    words = text.split()\n\
    \    for i in range(len(words)):\n        if words[i].endswith(' '):\n       \
    \     words[i] = words[i][0:-1]\n    if len(words) == 1:\n        return text\n\
    \    elif len(words) == 2 and words[1] == '':\n        return text\n    else:\n\
    \        return ' '.join(words[1:])\n\n\ndef check(candidate):\n    assert candidate('Example')\
    \ == 'Example'\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n \
    \   assert candidate('Yellow Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n\
    \    assert candidate('Exa   mple') == 'Exa-mple'\n    assert candidate('   Exa\
    \ 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n    check(fix_spaces)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd0feb15b.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpd0feb15b.py\", line 36,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmpd0feb15b.py\", line 30,\
    \ in check\n    assert candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(' Example')\n    'Example'\n    >>> fix_spaces(' Example\
    \ 1')\n    'Example_1'\n    >>> fix_spaces(' Example 2')\n    '_Example_2'\n \
    \   >>> fix_spaces(' Example 3')\n    '_Example-3'\n    \"\"\"\n    \n    pattern\
    \ = re.compile(r' +')\n    return pattern.sub('_', text)\n\n\ndef check(candidate):\n\
    \    assert candidate('Example') == 'Example'\n    assert candidate('Mudasir Hanif\
    \ ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow Yellow  Dirty  Fellow')\
    \ == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa   mple') == 'Exa-mple'\n\
    \    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\ndef test_check():\n\
    \    check(fix_spaces)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_p4j0le.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmph_p4j0le.py\", line 29,\
    \ in test_check\n    check(fix_spaces)\n  File \"/tmp/tmph_p4j0le.py\", line 22,\
    \ in check\n    assert candidate('Example') == 'Example'\n  File \"/tmp/tmph_p4j0le.py\"\
    , line 17, in fix_spaces\n    pattern = re.compile(r' +')\nNameError: name 're'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
