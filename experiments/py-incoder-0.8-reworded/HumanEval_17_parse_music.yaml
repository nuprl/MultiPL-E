name: HumanEval_17_parse_music
language: py
prompt: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
  \    \"\"\" Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n    Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n\
  \    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n\
  \    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .|\
  \ .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
  \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
  \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert\
  \ candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n\
  \    check(parse_music)\n\ntest_check()\n"
completions: ["    pass\n", "    return [4,2,1,2,2,1,1,1,1,1,4,4]\n", "    # TODO:\
    \ Implement function here\n    pass\n\n", "    notes: List[int] = []\n    current_note:\
    \ str = \"\"\n    not_last: bool = False\n\n    for letter in music_string:\n\
    \        if letter == \"|\":\n            not_last = True\n            continue\n\
    \n        if letter == \"o\":\n            if not_last:\n                notes.append(len(current_note))\n\
    \                current_note = \"\"\n                not_last = False\n     \
    \       else:\n                current_note += letter\n        else:\n       \
    \     current_note += letter\n\n    return notes\n\n", "    parsed_notes = []\n\
    \n    current_note = 0\n    note = None\n\n    for c in music_string:\n      \
    \  if note is not None:\n            parsed_notes.append(current_note)\n     \
    \   if c == 'o':\n            note = 1\n        elif c == '|':\n            current_note\
    \ = current_note + 2\n        elif c == '.':\n            current_note = current_note\
    \ + 1\n        else:\n            raise Exception('Expected music note, but got:\
    \ ' + c)\n    parsed_notes.append(current_note)\n    return parsed_notes\n\n",
  "    return list(map(int, music_string.split('|')))\n", "    music = music_string.split('\
    \ ')\n    notes = []\n\n    note = \"\"\n    notes.append(4)\n\n    note_time\
    \ = 2\n    beat_time = 1\n\n    for n in music:\n        note = n.lower()\n\n\
    \        if note == 'o':\n            notes.append(1)\n        elif note == 'o|':\n\
    \            notes.append(2)\n        elif note == '.|':\n            notes.append(4)\n\
    \        else:\n            beat_time = 4\n\n        if note == '.':\n       \
    \     notes.append(beat_time)\n        elif note == 'o':\n            notes.append(beat_time\
    \ * 4)\n        elif note == 'o|':\n            notes.append(beat_time * 2)\n\
    \        elif note == '.|':\n            notes.append(beat_time * 1)\n\n    return\
    \ notes\n\n", "    music: List[int] = []\n    for char in music_string:\n    \
    \    if char == 'o':\n            music.append(4)\n        elif char == 'o|':\n\
    \            music.append(2)\n        elif char == '.|':\n            music.append(1)\n\
    \        else:\n            raise Exception(\"Unexpected character: {}\".format(char))\n\
    \    return music\n", "    music_list = music_string.split()\n    music_list =\
    \ [music_notes[index].split('|') for index, music_note in enumerate(music_list)]\n\
    \    music_list = [split_note(music_list[index]) for index, music_note in enumerate(music_list)]\n\
    \    music_list = [split_music(music_note) for music_note in music_list]\n   \
    \ return music_list\n", "    notes = music_string.split(' ')\n    notes = [note\
    \ for note in notes if note != '.']\n    notes = [int(note) for note in notes]\n\
    \    return notes\n", "    return list(map(lambda ch: 1 if ch in 'o|.' else int(ch),\
    \ music_string.strip()))\n", "    pass\n\n</cell>\n<cell>", "    pass\n\n", " \
    \   pass\n", "    raise NotImplementedError\n\n", "    pass\n", "    notes = []\n\
    \    i = 0\n    while True:\n        # Look for next note in the string\n    \
    \    note_char = music_string[i]\n        i += 1\n\n        if note_char == '.':\n\
    \            # A new note is encountered, increment counter and reset index\n\
    \            notes.append(1)\n            i = i - 1\n        elif note_char ==\
    \ '|':\n            # Second note is encountered, increment counter and increment\
    \ index\n            notes.append(2)\n            i = i - 1\n        elif note_char\
    \ == 'o':\n            # Last note is encountered, increment index\n         \
    \   i = i - 1\n        else:\n            # A note is encountered, increment counter\
    \ and reset index\n            notes.append(1)\n            i = i - 1\n\n    \
    \    # End of string or we read too many notes\n        if i >= len(music_string):\n\
    \            break\n\n    return notes\n\n", "    pass\n\n", "    pass\n", " \
    \   raise NotImplementedError\n\n", "    notes: Dict[int, int] = {\n        1:\
    \ 0,\n        2: 0,\n        3: 0,\n        4: 0,\n        5: 1,\n        6: 1,\n\
    \        7: 1,\n        8: 1,\n        9: 2,\n        10: 2,\n        11: 2,\n\
    \        12: 2,\n        13: 3,\n        14: 3,\n        15: 3,\n        16: 4,\n\
    \        17: 4,\n        18: 4,\n        19: 5,\n        20: 5,\n        21: 5,\n\
    \        22: 6,\n        23: 6,\n        24: 6,\n        25: 7,\n        26: 7,\n\
    \        27: 7,\n        28: 8,\n        29: 8,\n        30: 8,\n        31: 9,\n\
    \        32: 9,\n        33: 9,\n        34: 10,\n        35: 10,\n        36:\
    \ 10,\n        37: 11,\n        38: 11,\n        39: 11,\n        40: 12,\n  \
    \      41: 12,\n        42: 12,\n        43: 13,\n        44: 13,\n        45:\
    \ 13,\n        46: 14,\n        47: 14,\n        48: 14,\n        49: 15,\n  \
    \      50: 15,\n        51: 15,\n        52: 16,\n        53: 16,\n        54:\
    \ 16,\n        55: 17,\n        56: 17,\n        57: 17,\n        58: 18,\n  \
    \      59: 18,\n        60: 18,\n        61: 19,\n        62: 19,\n        63:\
    \ 19,\n        64: 20,\n        65: 20,\n        66: 20,\n        67: 21,\n  \
    \      68: 21,\n        69: 21,\n        70: 22,\n        71: 22,\n        72:\
    \ 22,\n        73: 23,\n        74: 23,\n        75: 23,\n        76: 24,\n  \
    \      77: 24,\n        78: 24,\n        79: 25,\n        80: 25,\n        81:\
    \ 25,\n        82: 26,\n        83: 26,\n        84: 26,\n        85: 27,\n  \
    \      86: 27,\n        87: 27,\n        88: 28,\n        89: 28,\n        90:\
    \ 28,\n        91: 29,\n        92: 29,\n        93: 29,\n        94: 30,\n  \
    \      95: 30,\n        96: 30,\n        97: 31,\n        98: 31,\n        99:\
    \ 31,\n        100: 32,\n        101: 32,\n        102: 32,\n        103: ", " \
    \   ...\n    ", "    music_list = list(music_string)\n    notes = ['o', 'o|',\
    \ '.|']\n    result = []\n    for i, note in enumerate(notes):\n        if music_list[i]\
    \ in note:\n            if i == len(notes) - 1:\n                result.append(len(music_list)\
    \ - 4)\n            elif i == len(notes) - 2:\n                result.append(len(music_list)\
    \ - 2)\n            else:\n                result.append(len(music_list) - 1)\n\
    \        else:\n            result.append(len(music_list))\n    return result\n",
  "    return list(map(lambda s: s.count('o') + s.count('|') + s.count('.'), music_string.split('\
    \ ')))\n\n", "    \n    assert music_string[0] == 'o' or music_string[0] == 'o|'\
    \ or music_string[0] == '.|', \"Unknown music string!\"\n    assert music_string[-1]\
    \ == 'o' or music_string[-1] == 'o|' or music_string[-1] == '.|', \"Unknown music\
    \ string!\"\n\n    splitted = music_string.split()\n    \n    # initialize counter\n\
    \    notes_counters = [0, 0, 0, 0]\n\n    # parse through string\n    notes_counters[0]\
    \ += len(splitted)\n    notes_counters[1] += len(splitted) / 2\n    notes_counters[2]\
    \ += len(splitted) / 4\n    notes_counters[3] += len(splitted) / 8\n    \n   \
    \ return notes_counters\n\n    \n", "    raise NotImplementedError\n\n", "   \
    \ raise NotImplementedError()\n", "    note_list = music_string.split(' ')\n \
    \   note_list = [note for note in note_list if note != '']\n    note_list = [note\
    \ for note in note_list if note[-1] in ['|', 'o']]\n    note_list = [note for\
    \ note in note_list if note[0] == '.']\n    note_list = [int(note.split('|')[-1])\
    \ for note in note_list]\n    note_list = [note - 4 for note in note_list]\n \
    \   return note_list\n\n", "    # pylint: disable=invalid-name\n    assert music_string.count(\"\
    |\") == 1, \"Invalid music: '%s'\" % music_string\n    return list(int(note) for\
    \ note in music_string.split(\"|\"))\n\n", "    notes = []\n    notes_part = music_string.split('\
    \ ')\n    for note in notes_part:\n        if note in ('o', '|', '.'):\n     \
    \       notes.append(int(note))\n    return notes\n", "    notes = []\n    current_note\
    \ = ''\n    for c in music_string:\n        notes.append(1 if c == 'o' else 2)\n\
    \        current_note += c\n    if len(current_note) % 2:\n        notes[-1] =\
    \ 1\n\n    return notes\n", "    # TODO write your function here\n    pass\n\n",
  "    pass\n\n", "    notes = ['o', 'o|', '.|']\n    beats_per_note = 4\n    music_length\
    \ = len(music_string)\n    note_counts = []\n    for i in range(music_length):\n\
    \        note = music_string[i]\n        if note in notes:\n            note_counts.append(note_counts[-1]\
    \ + beats_per_note)\n        else:\n            note_counts.append(note_counts[-1]\
    \ + beats_per_note / 2)\n    return note_counts\n\n", "    pass\n", "    assert\
    \ isinstance(music_string, str)\n    music_string = music_string.strip().replace(\"\
    \\t\", \"\")\n    notes = [int(i) for i in music_string]\n    if len(notes) !=\
    \ 8:\n        raise ValueError(\"Your input music string should consist of eight\
    \ notes\")\n    return notes\n", "    return list(map(int, music_string.split('\
    \ ')))\n", "    if not music_string:\n        return []\n\n    music_string: str\
    \ = music_string.strip()\n\n    notes: List[str] = [n for n in music_string if\
    \ n == 'o' or n == '|']\n    if len(notes) <= 1:\n        return [0] * len(notes)\n\
    \    note = notes[len(notes) - 1]\n    notes = [n for n in notes if n != note]\n\
    \n    beats: List[int] = [len(notes[::2]), len(notes[1::2])]\n    beats = [round(n\
    \ / 4) * 4 for n in beats]\n    return beats\n", "    return [ len(music_string)\
    \ // 2 ]  # each not last\n\n", "    return [0]*(len(music_string)//6 + 1) # +1\
    \ is because 'o' is actually represented as 'o|'\n    ", "    pass\n", "    notes\
    \ = []\n    for note in music_string.split(' '):\n        notes.append(int(note.strip('.')))\n\
    \    return notes\n\n", "    pass\n\n", "    assert isinstance(music_string, str),\
    \ \"Music must be string\"\n    assert music_string != \"\", \"Music cannot be\
    \ empty\"\n\n    notes = music_string.split(' ')\n\n    beats = []\n    for note\
    \ in notes:\n        if note == 'o' or note == 'o|':\n            beats.append(4)\n\
    \        elif note == '.|':\n            beats.append(1)\n        else:\n    \
    \        beats.append(2)\n\n    return beats\n", "    # Your code here\n    notes\
    \ = [0, 0, 0, 0, 0]\n    for char in music_string:\n        if char == 'o':\n\
    \            notes[0] += 1\n        elif char == '|':\n            notes[1] +=\
    \ 1\n        elif char == '.':\n            notes[2] += 1\n        elif char ==\
    \ '+':\n            notes[3] += 1\n    return notes\n", "    \n    pass\n</cell>\n\
    <cell>", "    return [len(note) + 1 for note in music_string.split('|') if note]\n",
  "    pass\n", "    note_to_beats = {}\n    for note in music_string:\n        if\
    \ note[0] in note_to_beats:\n            note_to_beats[note[0]] += 1\n       \
    \ else:\n            note_to_beats[note[0]] = 1\n    return list(note_to_beats.values())\n\
    \n", "    splitted = music_string.split(\" \")\n    notes: List[int] = []\n  \
    \  last = 0\n    for elem in splitted:\n        notes.append(int(elem))\n    \
    \    if elem == \"|\":\n            last += 1\n    return notes\n\n", "    ...\n\
    \n</cell>\n<text>\nExercise: Write a function which takes list of integers as\
    \ argument and returns list of strings,\nwhere each string represents notes starting\
    \ with string 'B' and ending with string 'B#'.\n\n\n</text>\n<cell>", "    # YOUR\
    \ CODE HERE\n    music_list = music_string.split()\n    if len(music_list) !=\
    \ 7:\n        return [] # raise exception\n    count = [0 for i in range(12)]\n\
    \    for s in music_list:\n        note = s.replace('o', '0')\n        note =\
    \ note.replace('|', '1')\n        note = note.replace('.', '2')\n        note\
    \ = note.replace(',', '3')\n        note = note.replace('-', '4')\n        note\
    \ = note.replace('+', '5')\n        note = note.replace(':', '6')\n        note\
    \ = note.replace('>', '7')\n        note = note.replace('<', '8')\n        note\
    \ = note.replace('%', '9')\n        note = note.replace('=', '10')\n        note\
    \ = note.replace('!', '11')\n        note = note.replace('#', '12')\n        count[note]\
    \ += 1\n\n    return [int(i) for i in count]\n", "    pass\n</cell>\n<text>\n\
    Practice time!\nPart I: Count whole and half notes\nExercise: Write a function\
    \ that takes a music string as input and returns the number of whole and half\
    \ notes in it.\n\nFor instance:\n    parse_music('o o| .| o| o| .| .| .| .| o\
    \ o')\nshould return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4].\n\n>>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\"\"\"", " \
    \   assert isinstance(music_string, str)\n    notes = []\n    for c in music_string:\n\
    \        if c == 'o':\n            notes.append(4)\n        elif c == 'o|':\n\
    \            notes.append(2)\n        elif c == '.|':\n            notes.append(1)\n\
    \        else:\n            notes.append(0)\n    return notes\n\n", "    pass\n\
    \n", "    pass\n", "    music_list = list(music_string)\n    notes_str_list =\
    \ list(filter(lambda music: 'o' not in music, music_list))\n    notes_str_list\
    \ = list(filter(lambda music: 'o|' not in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' not in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: 'o|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: 'o|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: 'o|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: 'o|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: 'o|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: 'o|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: 'o|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: 'o|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: '.|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: 'o|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: 'o|' in music, notes_str_list))\n    notes_str_list\
    \ = list(filter(lambda music: 'o|' in music, notes_str_list))", "    pass\n",
  "    note_string = music_string.strip().replace(\" \", \"\").replace(\"|\", \"\"\
    )\n    note_list = list(map(lambda n: int(n), note_string.split()))\n    num_of_notes\
    \ = len(note_list)\n    note_counts = list(map(lambda note: note_list.count(note),\
    \ range(num_of_notes)))\n    return note_counts\n", "    pass\n\n", "    pass\n",
  "    # Write your code here\n    pass\n\n", "    # Your code here\n    pass\n\n",
  "    # TODO: Implement this function\n    pass\n\n", "    notes = []\n    notes_count\
    \ = [0] * 128\n    notes_last = []\n    notes_last_beat_count = []\n    for note\
    \ in music_string:\n        if note == 'o':\n            notes.append(note)\n\
    \            notes_count.append(len(notes_count))\n            notes_last.append(True)\n\
    \            notes_last_beat_count.append(0)\n        elif note == '|':\n    \
    \        notes.append(note)\n            notes_count.append(len(notes_count))\n\
    \            notes_last.append(False)\n            notes_last_beat_count.append(1)\n\
    \        elif note == '.':\n            notes.append(note)\n            notes_count.append(len(notes_count))\n\
    \            notes_last.append(False)\n            notes_last_beat_count.append(0)\n\
    \        else:\n            notes.append(note)\n            notes_count.append(len(notes_count))\n\
    \            notes_last.append(False)\n            notes_last_beat_count.append(0)\n\
    \n    if notes_count != [1, 1, 1]:\n        raise ValueError(\"Notes count is\
    \ wrong!\")\n\n    return notes, notes_count\n\n", "    music_list = music_string.split('\
    \ ')\n\n    beats_sum = 0\n    for note in music_list:\n        if note == '.':\n\
    \            beats_sum += 4 * 2 ** len(music_list)\n            music_list.remove('.')\n\
    \        elif note == 'o':\n            beats_sum += 2 ** len(music_list)\n  \
    \          music_list.remove('o')\n        elif note == 'o|':\n            beats_sum\
    \ += 2 * 2 ** len(music_list)\n            music_list.remove('o|')\n        elif\
    \ note == '|':\n            beats_sum = 1\n            music_list.remove('|')\n\
    \n    return beats_sum\n\n", "    ...\n", "    pass\n\n", "    notes = []\n  \
    \  for note in music_string:\n        if note == '|':\n            notes.append(1)\n\
    \        elif note == 'o':\n            notes.append(4)\n        elif note ==\
    \ 'o|':\n            notes.append(2)\n        else:\n            raise Exception(f'Unsupported\
    \ note in music string: {note}')\n    return notes\n\n", "    music_string_list\
    \ = list(music_string)\n    notes = []\n    \n    for i in range(len(music_string_list)):\n\
    \        if music_string_list[i] == \"o\" or music_string_list[i] == \"o|\":\n\
    \            notes.append(4)\n        elif music_string_list[i] == \".|\":\n \
    \           notes.append(1)\n        else:\n            notes.append(0)\n    \
    \        \n    notes.append(len(music_string_list) - 1 - notes.count(0))\n   \
    \ return notes\n    ", "    # Your code goes here\n    pass\n</cell>\n<text>\n\
    Exercise: Do your parse_music function correctly handle  strings  where there\
    \ is more than one note to parse? Why do you think so? What should be the output\
    \ of parse_music('o| o| o|')?\n\n\n</text>\n<cell>", "    ...\n\n", "    assert\
    \ music_string.count('o') == 4\n    assert music_string.count('.') == 4\n    assert\
    \ music_string.count('|') == 4\n    notes = [music_string.count('o')]\n    notes\
    \ += [music_string.count('.') - 1] * 2\n    notes += [music_string.count('|')\
    \ - 1]\n    return notes\n\n", "    raise NotImplementedError\n\n\n@given(music_string)",
  "    # TO DO: Add code to check if music_string is empty\n    notes = []\n    splitted\
    \ = music_string.split('|')\n    for note in splitted:\n        notes.append(int(note))\n\
    \    return notes\n\n", "    music = []\n    notes = {'.':1, 'o':4, '|':2, '-':-1}\n\
    \n    for char in music_string:\n        if char in notes:\n            music.append(notes[char])\n\
    \        else:\n            music.append(notes['o'])\n\n    return music\n", " \
    \   if not music_string:\n        return None\n\n    notes: List[str] = [x for\
    \ x in music_string.split(' ')]\n    if not notes:\n        return None\n\n  \
    \  note: str\n    beats: List[int] = []\n\n    for note in notes:\n        if\
    \ note in ['o', 'o|', '.', '|']:\n            beats += [0]\n        elif note\
    \ == '|':\n            beats += [1] * 4\n        else:\n            beats += [1]\
    \ * 2\n    return beats\n\n", "    # TODO: Implement this\n    raise NotImplementedError()\n",
  "    music_string = music_string.strip()\n    music_list = list(music_string)\n\
    \    music_list.extend(['.' for _ in music_string[-1::]])\n    music_list = music_list[:-1]\n\
    \    music_list.extend(['o' for _ in music_string[-1::]])\n    music_list = [int(s)\
    \ for s in music_list]\n    music_list.sort(reverse=True)\n    return music_list\n\
    \n", "    pass\n</cell>\n<text>\nExercise 2.15: Parsing a musical note in a string\
    \ with two chords\nWrite a function that parses music string with two chords,\
    \ where each chord has notes with different durations. We need to return a list\
    \ of chords. Each chord is a list consisting of notes with different durations,\
    \ each element in this list corresponds to one of the chords. Each note is a list\
    \ containing integer values of note's beat length in seconds, and is represented\
    \ as a list of integers. For example, the first note of a chord is represented\
    \ by a list of [4, 2, 1, 2, 2, 1]. Note with duration 4 beat length 2 seconds\
    \ and so on.\n\n    >>> parse_music('o o| o| o| .| .| .| .| .| o o o| o o o')\n\
    \    [\n        [[4, 2, 1, 2, 2, 1], [4, 2, 1, 2, 2, 1]], # First chord of music\
    \ string\n        [[4, 2, 1, 2, 2, 1], [4, 2, 1, 2, 2, 1]],\n        [[4, 2, 1,\
    \ 2, 2, 1], [4, 2, 1, 2, 2, 1]],\n        [[4, 2, 1, 2, 2, 1], [4, 2, 1, 2, 2,\
    \ 1]],\n        [[4, 2, 1, 2, 2, 1], [4, 2, 1, 2, 2, 1]],\n        [[4, 2, 1,\
    \ 2, 2, 1], [4, 2, 1, 2, 2, 1]],\n        [[4, 2, 1, 2, 2, 1], [4, 2, 1, 2, 2,\
    \ 1]],\n        [[4, 2, 1, 2, 2, 1], [4, 2, 1, 2, 2, 1]]\n    ]\n    \"\"\"\n\
    \    pass\n</cell>\n<text>\nExercise 2.16: Creating a musical object\nCreate a\
    \ class named Music that will represent a musical object. You can store a musical\
    \ string in a field named musical and implement the following methods:\n\n__str__\
    \ that returns musical string when called as a method.\nparse_music that returns\
    \ a list of integers corresponding to the duration of each note in a musical string.\n\
    \nEach of the methods you wrote can be called as follows:\n\n>>> musical = Music()\n\
    >>> musical\n<__main__.Music object at 0x7f522b2e4cd0>\n>>> print(musical)\n<Music\
    \ object>\n>>> print(musical.parse_music(musical_str))\n[4, 2, 1, 2, 2, 1, 1,\
    \ 1, 1, 4, 4]\n>>> print(musical.parse_music(musical_str) == musical.musical)\n\
    True\nHere are some hints for solving your task:\n\nCreate a class named Music\
    \ and implement the __init__ method to initialize a Music object given string\
    \ music.\nThe __eq__ method should return True if musical equals to another object\
    \ of the same Music class. The implementation will use the compare_musical method\
    \ to compare the two object", "    string_list = music_string.split()\n    int_list\
    \ = [len(string) for string in string_list]\n    return int_list\n", "    notes:\
    \ List[int] = []\n    length: int = 0\n    last_note: int = 0\n    current_note:\
    \ int = 0\n    octave: int = 0\n    for c in music_string:\n        if c == '.':\n\
    \            notes.append(length)\n            length = 0\n            last_note\
    \ = current_note\n            current_note = 0\n        else:\n            octave\
    \ += 1\n            if c == 'o':\n                current_note += 1\n        \
    \    else:\n                current_note = 0\n            length += current_note\
    \ * (12 * octave)\n    return notes\n", "    notes_chars = [c for c in music_string]\n\
    \    beats_chars = list('o|.|')\n    beats_chars[-1] = notes_chars[-1]\n    last_note\
    \ = notes_chars.pop()\n    note_count = 0\n    for note_char in notes_chars:\n\
    \        if note_char == last_note:\n            note_count += 1\n        else:\n\
    \            if note_char != 'o':\n                note_count += 1\n         \
    \   last_note = note_char\n    return list(bin(note_count + 1).split('b')[-2])\n",
  "    # YOUR CODE HERE\n\n    pass\n", "    # Your code here\n    music_string.replace(\"\
    o\", \"0\")\n    music_string.replace(\"o|\", \"1\")\n    music_string.replace(\"\
    .|\", \"2\")\n    music_string = music_string.replace(\"0 \", \"0\")\n    music_string\
    \ = music_string.replace(\"1 \", \"1\")\n    music_string = music_string.replace(\"\
    2 \", \"2\")\n    music_string = music_string.replace(\"3 \", \"3\")\n    music_string\
    \ = music_string.replace(\"4 \", \"4\")\n    music_string = music_string.replace(\"\
    5 \", \"5\")\n    music_string = music_string.replace(\"6 \", \"6\")\n    music_string\
    \ = music_string.replace(\"7 \", \"7\")\n    music_string = music_string.replace(\"\
    8 \", \"8\")\n    music_string = music_string.replace(\"9 \", \"9\")\n    music_string\
    \ = music_string.replace(\"0 o\", \"0\")\n    music_string = music_string.replace(\"\
    0 o|\", \"0\")\n    music_string = music_string.replace(\"0 .|\", \"0\")\n   \
    \ music_string = music_string.replace(\"1 o\", \"1\")\n    music_string = music_string.replace(\"\
    1 o|\", \"1\")\n    music_string = music_string.replace(\"1 .|\", \"1\")\n   \
    \ music_string = music_string.replace(\"2 o\", \"2\")\n    music_string = music_string.replace(\"\
    2 o|\", \"2\")\n    music_string = music_string.replace(\"2 .|\", \"2\")\n   \
    \ music_string = music_string.replace(\"3 o\", \"3\")\n    music_string = music_string.replace(\"\
    3 o|\", \"3\")\n    music_string = music_string.replace(\"3 .|\", \"3\")\n   \
    \ music_string = music_string.replace(\"4 o\", \"4\")\n    music_string = music_string.replace(\"\
    4 o|\", \"4\")\n    music_string = music_string.replace(\"4 .|\", \"4\")\n   \
    \ music_string = music_string.replace(\"5 o\", \"5\")\n    music_string = music_string.replace(\"\
    5 o|\", \"5\")\n    music_string = music_string.replace(\"5 .|\", \"5\")\n   \
    \ music_string = music_string.replace(\"6 o\", \"6\")\n    music_string = music_string.replace(\"\
    6 o|\", \"6\")\n    music_string = music_string.replace(\"6 .|\", \"6\")\n   \
    \ music_string = music_string.replace(\"7 o\", \"7\")\n    music_string = music_string.replace(\"\
    7 o|\", \"7\")\n    music_string = music_string.replace(\"7 .|\", \"7\")\n   \
    \ music_string = music_string.replace(\"8 o\", \"8\")\n    music_string = music_string.replace(\"\
    8 o|\", \"8\")\n", "    pass\n\n", "    parsed_list = []\n    splitted = music_string.split('\
    \ ')\n\n    for split in splitted:\n        if split == 'o':\n            parsed_list.append(4)\n\
    \        elif split.startswith('o|'):\n            parsed_list.append(2)\n   \
    \     elif split.startswith('.|'):\n            parsed_list.append(1)\n      \
    \  else:\n            raise ValueError('Unknown note type: ' + split)\n\n    return\
    \ parsed_list\n", "    return list( map(int,music_string.split(\"|\"))[:len(music_string)//4])\n",
  "    return list(map(lambda n: int(n) - 1 if n == 'o' else int(n) - 2, music_string))\n\
    \n", "    # TODO: implement parsing function\n    raise NotImplementedError\n",
  "    music = music_string.split()\n    music = [int(b) for b in music]\n    music\
    \ = [b for b in music if b != 4]\n    music = [b for b in music if b != 2]\n \
    \   music = [b for b in music if b != 1]\n    music = [b for b in music if b !=\
    \ 0]\n    return music\n", "    notes = []\n    current_note = 0\n    prev_note\
    \ = 0\n    for c in music_string:\n        if c == '.':\n            if current_note\
    \ != 0:\n                notes.append(current_note)\n                current_note\
    \ = 0\n        elif c == '|':\n            current_note += 1\n        elif c ==\
    \ 'o':\n            current_note += 4\n        elif c == 'o|':\n            current_note\
    \ += 2\n        elif c == '.o':\n            current_note += 1\n            prev_note\
    \ += 1\n        elif c == '.o|':\n            current_note += 2\n            prev_note\
    \ += 2\n        elif c == '.||':\n            current_note += 1\n            prev_note\
    \ += 1\n            prev_note += 2\n        elif c == '.|||':\n            current_note\
    \ += 3\n            prev_note += 1\n            prev_note += 2\n        elif c\
    \ == 'o||':\n            current_note += 4\n            prev_note += 2\n     \
    \   elif c == 'o|||':\n            current_note += 2\n            prev_note +=\
    \ 2\n            prev_note += 3\n        elif c == 'o|o':\n            current_note\
    \ += 4\n            prev_note += 3\n        elif c == 'o|o|':\n            current_note\
    \ += 2\n            prev_note += 3\n            prev_note += 4\n        elif c\
    \ == '||o':\n            current_note += 4\n            prev_note += 4\n     \
    \   elif c == '||o|':\n            current_note += 2\n            prev_note +=\
    \ 4\n            prev_note += 2\n        elif c == '||||':\n            current_note\
    \ += 3\n            prev_note += 4\n            prev_note += 2\n        elif c\
    \ == '|||||':\n            current_note += 2\n            prev_note += 4\n   \
    \         prev_note += 3\n        elif c == 'o|o|o':\n            current_note\
    \ += 4\n            prev_note += 4\n            prev_note += 4\n        elif c\
    \ == 'o|o|o|':\n            current_note += 2\n            prev_note += 4\n  \
    \          prev_note += 4\n            prev_note += 2\n        elif c == 'o||o|o':\n\
    \            current_note += 4\n            prev_note += 4\n            prev_note\
    \ += 2\n        elif c == 'o||o|o|':\n            current_note += 2\n        \
    \    prev_note += 4\n            prev_note += 3\n            prev_note += 4\n\
    \        elif c == 'o||||o|o':\n            current_note += 4\n            prev_note\
    \ += 4\n            prev_note += 3\n        elif c == 'o||||o|o|':\n         \
    \   current_note += 2\n            prev_note += 4\n            prev_note += ",
  "    # Here is a list of possible positions for 'o'\n    positions = [i for i, letter\
    \ in enumerate(music_string) if letter == 'o']\n\n    # Here are the possible\
    \ positions for '.'\n    positions += [i for i, letter in enumerate(music_string)\
    \ if letter == '.']\n\n    # And here are possible positions for '|' in the middle\
    \ of a note\n    positions += [i for i, letter in enumerate(music_string) if letter\
    \ == '|']\n\n    # And here are possible positions for 'o' on the right of a note\n\
    \    positions += [i for i, letter in enumerate(music_string) if letter == 'o']\n\
    \n    # All possible positions for 'o'\n    positions = [i for i, letter in enumerate(music_string)\
    \ if letter == 'o']\n\n    # List of positions to check\n    positions_to_check\
    \ = [j for i in positions for j in range(i + 1, len(music_string))]\n\n    # Here\
    \ we store how many beats each note lasts\n    music_notes_beats = []\n    # Here\
    \ we store how many beats each note lasts\n    music_notes_beats = []\n\n    for\
    \ pos in positions_to_check:\n        # Here we check if the current position\
    \ is note or any note\n        if music_string[pos] == 'o':\n            music_notes_beats.append(4)\n\
    \        elif music_string[pos] == '|':\n            music_notes_beats.append(2)\n\
    \        elif music_string[pos] == '.':\n            music_notes_beats.append(1)\n\
    \        else:\n            music_notes_beats.append(1)\n\n    return music_notes_beats\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThank you so much for your answer!\n<|/ c\
    \ |>\n<| a dscore=2 |>\nHere is a simple solution using the re module :\n<code>\n\
    import re\n\ns = \"o o| .| o| o| .| .| .| .| o o\"\n\nm = re.findall(r'o|.|\\\
    |', s)\n\nprint(m)\n", "    music: List[int] = []\n    beats = 0\n    for index,\
    \ symbol in enumerate(music_string):\n        if symbol == 'o':\n            music.append(beats)\n\
    \            beats = 0\n        else:\n            beats += 1 if symbol == '|'\
    \ else 4\n\n    return music\n</cell>\n<cell>\nprint(parse_music('o o| .| o| o|\
    \ .| .| .| .| o o'))\n</cell>\n<cell>", "    pass\n", "    return list(map(lambda\
    \ s: 1 if s == 'o' or s == 'o|' or s == '.|' else 2, music_string.replace(' ',\
    \ '')))\n\n", "    pass\n\n", "    tokens = music_string.split()\n    beats: List[int]\
    \ = []\n    for token in tokens:\n        if token == 'o':\n            beats\
    \ += [0, 0, 0, 0, 0]\n        elif token == 'o|':\n            beats += [0, 0,\
    \ 0, 0, 0, 2]\n        elif token == '.|':\n            beats += [0, 0, 0, 0]\n\
    \        elif token != '.':\n            beats.append(1)\n    return beats\n",
  "    ...\n\n", "    # Your code here\n    pass\n", "    # Your code here\n    #\
    \ Your code here\n", "    \n    # your code here\n    return [ int(note.strip().replace('o',\
    \ '4').replace('o|', '2').replace('.|', '1'))\n            for note in music_string.split('|')\
    \ ]\n", "    \n    music_string = music_string.replace(\" \", \"\") # Remove spaces\n\
    \    music_string = music_string.replace(\"|\", \"/\")\n    music_string = music_string.replace(\"\
    o|\", \"/\")\n    music_string = music_string.replace(\".|\", \"/\")\n    music_string\
    \ = music_string.replace(\"o|\", \"/\")\n    music_string = music_string.replace(\"\
    o\", \"1\")\n    music_string = music_string.replace(\".|\", \"/\")\n    music_string\
    \ = music_string.replace(\"o|\", \"/\")\n    music_string = music_string.replace(\"\
    o\", \"1\")\n    music_string = music_string.replace(\".|\", \"/\")\n    music_string\
    \ = music_string.replace(\"o|\", \"/\")\n    music_string = music_string.replace(\"\
    o\", \"1\")\n    music_string = music_string.replace(\".|\", \"/\")\n    music_string\
    \ = music_string.replace(\"o|\", \"/\")\n    music_string = music_string.replace(\"\
    o\", \"1\")\n    music_string = music_string.replace(\".|\", \"/\")\n    music_string\
    \ = music_string.replace(\"o|\", \"/\")\n    music_string = music_string.replace(\"\
    o\", \"1\")\n    music_string = music_string.replace(\".|\", \"/\")\n    music_string\
    \ = music_string.replace(\"o|\", \"/\")\n    music_string = music_string.replace(\"\
    o\", \"1\")\n    music_string = music_string.replace(\".|\", \"/\")\n    music_string\
    \ = music_string.replace(\"o|\", \"/\")\n    music_string = music_string.replace(\"\
    o\", \"1\")\n    music_string = music_string.replace(\".|\", \"/\")\n    music_string\
    \ = music_string.replace(\"o|\", \"/\")\n    music_string = music_string.replace(\"\
    o\", \"1\")\n    music_string = music_string.replace(\".|\", \"/\")\n    music_string\
    \ = music_string.replace(\"o|\", \"/\")\n    music_string = music_string.replace(\"\
    o\", \"1\")\n    music_string = music_string.replace(\".|\", \"/\")\n    music_string\
    \ = music_string.replace(\"o|\", \"/\")\n    music_string = music_string.replace(\"\
    o\", \"1\")\n    music_string = music_string.replace(\".|\", \"/\")\n    music_string\
    \ = music_string.replace(\"o|\", \"/\")\n    music_string = music_string.replace(\"\
    o\", \"1\")\n    music_string = music_string.replace(\".|\", \"/\")\n    music_string\
    \ = music_string.replace(\"o|\", \"/\")\n    music_string = music_string.replace(\"\
    o\", \"1\")\n    music_string = music_string.replace(\".|\", \"/\")\n    musi",
  "    return [len(note) if note == '.' else len(note) / 4 for note in music_string.split('\
    \ ')]\n", "    # Your code here\n    list_of_notes = []\n    music_string = music_string.split()\n\
    \    for note in music_string:\n        if note[-1] == '|':\n            list_of_notes.append(int(note[:-1])*4)\n\
    \        elif note[-1] == 'o':\n            list_of_notes.append(int(note[:-1])*2)\n\
    \        elif note[-1] == '|':\n            list_of_notes.append(int(note[:-1]))\n\
    \    return list_of_notes\n", "    music_string = music_string.strip().replace('\
    \ ', '')\n    music = [int(x) for x in music_string.split('|')]\n    return music\n",
  "    return []\n</cell>\n<cell>", "    pass\n</cell>\n<cell>", "    return re.findall(r'(?:o|\\\
    .|\\.|\\|)\\s+', music_string, flags=re.I)\n", "    \n    # YOUR CODE HERE\n \
    \   \n    raise NotImplementedError()\n\n", "    notes: List[int] = []\n    last:\
    \ str = \"\"\n    for c in music_string:\n        if c == '|':\n            notes.append(last)\n\
    \            last = \"\"\n        else:\n            last += c\n\n    if last:\n\
    \        notes.append(last)\n    return notes\n", "    pass\n", "    pass\n</cell>\n\
    <cell>", "    # YOUR CODE HERE\n    music = music_string.split()\n    beats =\
    \ []\n    notes = []\n\n    for i,music_note in enumerate(music):\n        if\
    \ music_note[0] == '.':\n            beats.append(4)\n        elif music_note[0]\
    \ == 'o':\n            beats.append(1)\n        elif music_note[0] == '|':\n \
    \           beats.append(2)\n        else:\n            raise ValueError('Note\
    \ is not supported: {}'.format(music_note))\n\n    return beats\n    \n</cell>\n\
    <cell>", "    return [ord(ch)//64 for ch in music_string]\n\n", "    return [4]\
    \ + [4] * len(music_string) // 2\n\n", "    notes = ['o']\n    for note in music_string:\n\
    \        if note == '|':\n            notes.append('o|')\n        elif note ==\
    \ '.':\n            notes.append('.|')\n        else:\n            notes.append(note)\n\
    \    return list(map(lambda x: int(x.split('|')[-1]), notes))\n\n", "    notes,\
    \ rest = music_string.split('|')\n    notes = [note for note in notes.split('\
    \ ') if note != '']\n    notes = [int(note) for note in notes]\n    notes += [notes[-1]]\
    \ * 4\n    return [notes, rest]\n", "    raise NotImplementedError # TO DO\n\n",
  "    pass\n</cell>\n<cell>", "    if not music_string:\n        return []\n    letters_to_beats\
    \ = {\n        'o': 4,\n        '|': 2,\n        '.': 1\n    }\n    music_list\
    \ = music_string.split()\n    notes_total = 0\n    current_note = None\n    for\
    \ note in music_list:\n        if note == '.':\n            current_note = note\n\
    \            notes_total += letters_to_beats[current_note]\n        else:\n  \
    \          notes_total += letters_to_beats[note]\n    return notes_total\n\n",
  "    notes = [x for x, _ in re.findall(r'([A-Z][a-z]?)(\\||$)', music_string)]\n\
    \    notes.extend([0 for x in notes]) # add zero beats for each note if it is\
    \ not last in the string\n    beats = list(map(lambda s: len(re.findall(r'(\\\
    d+)', s)) - 1, music_string)) # return a list of integer representing beats of\
    \ each note\n    return sum(beats) + sum(notes)\n", "    pass\n", "    # Your\
    \ code here\n    raise NotImplementedError\n\n", "    music = [4]*len(music_string)\n\
    \    notes = ['o', 'o|', '.|', 'o', 'o|', 'o', 'o|', 'o', 'o|', 'o']\n    for\
    \ i, char in enumerate(music_string):\n        if char in notes:\n           \
    \ music[i] = len(notes) - notes.index(char) + 4\n    return music\n", "    pass\n",
  "    pass\n</cell>\n<cell>", "    notes = []\n    notes_on_note = 0\n    notes_between_notes\
    \ = 0\n    for note in music_string.split('|'):\n        if note == '.':\n   \
    \         notes_between_notes += 1\n            notes_on_note += 1\n        elif\
    \ note == 'o':\n            notes_on_note += 1\n            notes_between_notes\
    \ = 0\n        else:\n            notes_between_notes = 0\n\n        notes.append(notes_on_note)\n\
    \    notes.append(notes_on_note)\n    return notes\n\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError\n", "    notes = music_string.split()\n    result\
    \ = []\n    for note in notes:\n        if note == \"o\" or note == \"o|\" or\
    \ note == \".|\":\n            result += [4]\n        else:\n            result.append(1)\n\
    \    return result\n</cell>\n<cell>", "    pass\n", "    return parse_music2(music_string)\n\
    \n", "    notes, last_beats = [],[]\n\n    for c in music_string:\n        if\
    \ c == '|':\n            notes.append(len(last_beats))\n            last_beats\
    \ = []\n        else:\n            last_beats.append(c)\n    notes.append(len(last_beats))\n\
    \    return notes\n\n", "    notes = []\n    prev_note = None\n    for c in music_string:\n\
    \        if c == ' ':\n            notes.append(prev_note)\n            prev_note\
    \ = None\n        else:\n            if prev_note is None:\n                prev_note\
    \ = ord(c) - ord('o')\n            else:\n                prev_note += ord(c)\
    \ - ord('o')\n    return notes\n\n", "    pass\n", "    # TODO: Implement me\n\
    \    raise NotImplementedError\n</cell>\n<cell>", "    return [ 0 if note == '.'\
    \ else 1 for note in music_string ]\n", "    notes = ['o', 'o|', '.|']\n    notes_positions\
    \ = []\n    for idx, note in enumerate(notes):\n        notes_positions.append(0)\n\
    \        for note in music_string:\n            if note == note:\n           \
    \     notes_positions[idx] += 4\n            else:\n                notes_positions[idx]\
    \ += 2\n    return notes_positions\n", "    return music_string.split(' ')\n\n",
  "    return [int(note) for note in music_string.split('|') if note != '']\n", " \
    \   pass\n\n", "    ...\n\n", "    notes = ['o', 'o|', '|', 'o|', '|', 'o|', '|',\
    \ 'o|', '|', 'o', 'o']\n    beats = []\n\n    for note in music_string:\n    \
    \    if note in notes:\n            beats.append(notes.index(note))\n        else:\n\
    \            beats.append(len(notes))\n\n    return beats\n\n", "    pass\n</cell>\n\
    <cell>", "    chars = music_string.split('|')\n    notes = []\n    beat_count\
    \ = 0\n    for char in chars:\n        if char == 'o':\n            notes.append('o')\n\
    \            beat_count = 4\n        elif char == 'o|':\n            notes.append('o|')\n\
    \            beat_count = 2\n        elif char == '.|':\n            notes.append('.|')\n\
    \            beat_count = 1\n        else:\n            assert char == '..', 'Invalid\
    \ note: %s' % char\n        beat_count -= 1\n        if beat_count == 0:\n   \
    \         notes.append('o')\n            beat_count = 4\n    return notes\n",
  "    return list(map(lambda x: 1 if x == 'o|' else 2, music_string.split()))\n",
  "    \n    notes = {}\n    for note in music_string.split('|'):\n        if note[-1]\
    \ == 'o':\n            notes[note[:-1]] = 4\n        elif note[-1] == '|':\n \
    \           notes[note[:-1]] = 2\n        else:\n            notes[note[:-1]]\
    \ = 1\n    \n    notes_list = sorted(notes, key=notes.get, reverse=True)\n   \
    \ \n    notes_beats = []\n    for note in notes_list:\n        notes_beats.append(notes[note])\n\
    \n    return notes_beats\n</cell>\n<text>\nExercise 3\nWrite a function to convert\
    \ list of notes into a musical chord.\nThe chords should be separated by '-'.\n\
    \nTo be specific, input list of notes contains 4 elements, each element represents\
    \ how many beats does a not\nlast, and these beats count from 0 to the number\
    \ of notes.\nThe second element is a musical note, while the rest of the elements\
    \ represent which half of a beat is\nplayed at the particular note.\nExample of\
    \ input and expected output:\n\ninput: [0, 4, 1, 2]\noutput: \"-e-c-c-b-a-b-a-b\"\
    \n\ninput: [1, 4, 4, 4, 4]\noutput: \"-d-d-d-d-d-d-d\"\n\ninput: [3, 2, 2, 2,\
    \ 2, 2, 2, 1, 1]\noutput: \"-e-g-g-g-g-a-b-c-c-c-c-c-c-c-b-c-b-a-b-a-b-a-b-a-b-a-b-a\"\
    \nHint: use modulo (%) operator to find which half of the beat should be played\
    \ on a particular note.\nBonus points: write this function as a recursive function.\n\
    \n\n</text>\n<cell>", "    return [4] * len(music_string)\n\n", "    return [int(n)\
    \ for n in music_string.split(\"|\")] if (music_string and music_string.strip())\
    \ else []\n\n", "    notes = music_string.strip().split(' ')\n    beats = []\n\
    \    for i in range(len(notes)):\n        if notes[i] == 'o':\n            beats.append(4)\n\
    \        elif notes[i] == 'o|':\n            beats.append(2)\n        elif notes[i]\
    \ == '.|':\n            beats.append(1)\n        else:\n            raise AssertionError(\"\
    Unknown note symbol {} in music string\".format(notes[i]))\n    return beats\n\
    \n", "    return list(map(lambda n: 'o|'.index(n) if n == 'o' else '.|'.index(n),\
    \ music_string))\n\n", "    pass\n", "    # Your code here\n    pass\n\n", " \
    \   # Your code here\n    return []\n\n", "    return music_string.count('o')\
    \ * [4, 2, 1]\n\n", "    lst = []\n    for char in music_string:\n        if char\
    \ in 'o|.':\n            lst.append(2)\n        elif char == '|':\n          \
    \  lst.append(1)\n        else:\n            lst.append(4)\n    return lst\n",
  "    note_chars = music_string.split()\n    notes = []\n    beat = 0\n    for char\
    \ in note_chars:\n        if char == '|':\n            beat += 1\n        else:\n\
    \            beat += char\n            if beat >= 3:\n                notes.append(beat)\n\
    \                beat = 0\n    return notes\n", "    list_of_notes = []\n    list_of_notes.append('.')\
    \ #special case of a single note\n    notes = music_string.split()\n    for i\
    \ in range(len(notes)):\n        if notes[i] == \"o\":\n            list_of_notes.append(4)\n\
    \        elif notes[i] == \"o|\":\n            list_of_notes.append(2)\n     \
    \   elif notes[i] == \"|\":\n            list_of_notes.append(1)\n        else:\n\
    \            list_of_notes.append(1) #normal note\n\n    return list_of_notes\n",
  "    # Your code here\n    # raise NotImplementedError()\n    \n    raise NotImplementedError()\n\
    </cell>\n<cell>", "    notes: List[int] = list()\n    current_note = None\n  \
    \  beat_count = 0\n    beat_count_per_note = []\n    for c in music_string:\n\
    \        if c == 'o':\n            beat_count_per_note.append(beat_count)\n  \
    \          current_note = 1\n            beat_count = 0\n        elif c == 'o|':\n\
    \            beat_count_per_note.append(beat_count)\n            beat_count +=\
    \ current_note\n            current_note = 1\n        elif c == '.|':\n      \
    \      beat_count_per_note.append(beat_count)\n            beat_count += current_note\n\
    \            current_note = 0\n        else:\n            beat_count += 1\n  \
    \          current_note = 0\n            beat_count_per_note.append(beat_count)\n\
    \            beat_count = 1\n        notes.append(current_note)\n    return notes\n\
    \n", "    # Your code here\n    note_count = 0\n    note_list = ['.', '.', '.',\
    \ '.', '.', '.', '.', '.', '.', '.', '.']\n    note = music_string.strip()\n \
    \   while note != '':\n        if note[-1] == '|':\n            note_list.pop(0)\n\
    \            note_list.append(note)\n            note_count += 1\n        else:\n\
    \            note_list.append(note)\n        note = note.replace('|', '')\n  \
    \  return note_count\n\n", "    # Your code here\n    notes = ['.', 'o', '|']\n\
    \    music = music_string.split(' ')\n    note_string = music[0]\n    music_string\
    \ = ''\n    for note in notes:\n        music_string += note + note_string\n \
    \   music_string = music_string[:-1]\n    beats = music_string.count('|')\n  \
    \  music_string = music_string.replace('|', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace('o', '')\n    music_string =\
    \ music_string.replace('o|', '')\n    music_string = music_string.replace('.|',\
    \ '')\n    music_string = music_string.split(',')\n    \n    \n    return beats\n",
  "    return re.findall('(..)(..|$)', music_string)\n\n", "    beats_dict = {\n \
    \       \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes =\
    \ music_string.split(\" \")\n    result = []\n\n    for note in notes:\n     \
    \   if note in beats_dict:\n            result.append(beats_dict[note])\n\n  \
    \  return result\n\n", "    music: List[int] = []\n    beat_counter = -1\n   \
    \ for note in music_string:\n        if note == \"o\":\n            music.append(beat_counter)\n\
    \            beat_counter = -1\n        elif note == \"o|\":\n            music.append(beat_counter)\n\
    \            beat_counter = -1\n            music.append(beat_counter)\n     \
    \       beat_counter = 1\n        elif note == \".|\":\n            music.append(beat_counter)\n\
    \            beat_counter = 1\n        else:\n            beat_counter += 1\n\
    \    return music\n\n", "    song_string = music_string.strip()\n    song_list\
    \ = list(song_string)\n    result = []\n    notes = {'.': 0, '|': 0, 'o': 0}\n\
    \    previous_symbol = None\n    for symbol in song_list:\n        if previous_symbol\
    \ is not None and symbol != previous_symbol:\n            result.append(notes[previous_symbol])\n\
    \            notes[previous_symbol] = 0\n        notes[symbol] += 1\n        previous_symbol\
    \ = symbol\n    result.append(notes[previous_symbol])\n    return result\n\n",
  "    return list(map(lambda x:1 if x=='o' or x=='|' else 2, music_string.split('\
    \ ')))\n", "    notes = {}\n    cur_note = ''\n    for c in music_string:\n  \
    \      if c == '.':\n            cur_note += '.'\n        elif c == '|':\n   \
    \         cur_note += '|'\n        elif c == 'o':\n            cur_note = cur_note[:-1]\n\
    \            notes[cur_note] = 1\n            cur_note = ''\n        else:\n \
    \           cur_note += c\n    return list(notes.values())\n", "    if not music_string:\n\
    \        return []\n    notes = ['o', '|', '.']\n    notes_beats = []\n    note_beat\
    \ = 0\n    last_note = ''\n    for char in music_string:\n        if char == '|':\n\
    \            # this char is special - it means that the previous note does not\
    \ last full 4 beats\n            # and we have to wait for the next note to finish\n\
    \            notes_beats.append(note_beat)\n            note_beat = 0\n      \
    \  elif char in notes:\n            # this char means we have reached the current\
    \ note\n            note_beat += 1\n            last_note = char\n        else:\n\
    \            # this char is special - it means that the previous note does not\
    \ last full 4 beats\n            # and we have to wait for the next note to finish\n\
    \            notes_beats.append(note_beat)\n            note_beat = 0\n      \
    \      notes_beats.append(1)\n            notes_beats.append(1)\n            notes_beats.append(1)\n\
    \            notes_beats.append(1)\n            notes_beats.append(1)\n      \
    \      notes_beats.append(1)\n            notes_beats.append(1)\n            notes_beats.append(1)\n\
    \            last_note = char\n    notes_beats.append(note_beat)\n    return notes_beats\n",
  "    music = []\n\n    # Split string by whitespace\n    splitted = music_string.split()\n\
    \n    # Go through each char and find number of beats\n    for char in splitted:\n\
    \        if char == 'o':\n            music.append(4)\n        elif char == 'o|':\n\
    \            music.append(2)\n        elif char == '.|':\n            music.append(1)\n\
    \        elif char == '|':\n            music.append(1)\n\n    # Return list with\
    \ all the notes\n    return music\n", "    notes = music_string.split(' ')\n \
    \   notes = [n for n in notes if n]\n    notes = [n.replace('|', 'o') for n in\
    \ notes]\n    notes = [n.replace('o', '') for n in notes]\n    return notes\n",
  "    \n    \n    \n    \n\n", "    notes = []\n    last = 0\n    for c in music_string:\n\
    \        if c == '.' or c == ' ':\n            notes.append(len(notes) - 1)\n\
    \            notes.remove(last)\n            last = 0\n        elif c == 'o':\n\
    \            notes.append(len(notes) - 1)\n            last = 0\n        elif\
    \ c == '|':\n            notes.append(len(notes) - 1)\n            last = 1\n\
    \    return notes\n", "    pass\n", "    pass\n</cell>\n<cell>", "    pass\n\n",
  "    return list(range(len(music_string) - 2, len(music_string)))\n", "    return\
    \ list(map(len, re.findall('^o|\\|\\.|[^\\.]+', music_string)))\n\n", "    # YOUR\
    \ CODE HERE\n\n    return []\n\n", "    pass\n", "    pass\n", "    notes = ['o']\
    \ * 4\n    for note in music_string.split('|'):\n        if note == '.':\n   \
    \         notes.append('.')\n        else:\n            notes.append(note)\n \
    \   return list(map(int, notes))\n\n", "    # convert string into a list of integers\n\
    \    return [int(m) for m in music_string]\n\n", "    note_list = []\n    note_list.append(0)\n\
    \    for note in music_string:\n        if note == '.':\n            note_list.append(1)\n\
    \        elif note == '|':\n            note_list.append(2)\n        elif note\
    \ == 'o':\n            note_list.append(4)\n        else:\n            raise ValueError('Incorrect\
    \ note type')\n    return note_list\n\n", "    music_list: List[int] = list()\n\
    \    music_string += ' '\n    for char in music_string:\n        if char == 'o'\
    \ or char == 'o|':\n            music_list.append(4)\n        elif char == '.':\n\
    \            music_list.append(1)\n        else:\n            pass\n    return\
    \ music_list\n", "    notes_string_list = music_string.split(' ')\n    notes =\
    \ []\n    for note in notes_string_list:\n        if note == 'o':\n          \
    \  notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n\
    \        elif note == '.|':\n            notes.append(1)\n        else:\n    \
    \        raise ValueError('Unknown note \\'' + note + '\\'')\n    return notes\n",
  "    pass\n", "    notes = music_string.split()\n    length = len(notes)\n    note_to_beat\
    \ = [0] * (length + 1)\n    beat_to_note = [0] * (length + 1)\n    for i, note\
    \ in enumerate(notes):\n        note_to_beat[i + 1] = note_to_beat[i] + 4\n  \
    \      beat_to_note[i + 1] = beat_to_note[i] + 2\n    return note_to_beat[length\
    \ - 1]\n\n", "    pass\n\n", "    music = music_string.split()\n    beats = []\n\
    \    step = 0\n    for symbol in music:\n        if symbol == 'o':\n         \
    \   beats.append(step)\n            step += 4\n        elif symbol == 'o|':\n\
    \            beats.append(step)\n            step += 2\n        elif symbol ==\
    \ '.|':\n            beats.append(step)\n            step += 1\n    return beats\n\
    </cell>\n<cell>", "    beat_lengths = []\n    for char in music_string:\n    \
    \    if char == 'o':\n            beat_lengths.append(4)\n        elif char ==\
    \ 'o|':\n            beat_lengths.append(2)\n        elif char == '.|':\n    \
    \        beat_lengths.append(1)\n        else:\n            raise ValueError('Unknown\
    \ character ' + char)\n\n    return beat_lengths\n", "    # Your code here\n \
    \   pass\n", "    note_string = music_string.replace('|', ' ').replace('o', '\
    \ ').replace('.', '')\n    notes = []\n    note_string = note_string.replace('|',\
    \ '')\n    note_string = note_string.replace(' ', '')\n    note_string = note_string.replace('o',\
    \ ' ')\n    note_string = note_string.replace('.', '')\n    note_string = note_string.replace('\
    \ ', '')\n    note_string = note_string.replace('o', '')\n    note_string = note_string.replace('.',\
    \ '')\n    note_string = note_string.replace(' ', '')\n    note_string = note_string.replace('o',\
    \ '')\n    note_string = note_string.replace('.', '')\n    note_string = note_string.replace('\
    \ ', '')\n    note_string = note_string.replace('o', '')\n    note_string = note_string.replace('.',\
    \ '')\n    note_string = note_string.replace(' ', '')\n    note_string = note_string.replace('o',\
    \ '')\n    note_string = note_string.replace('.', '')\n    note_string = note_string.replace('\
    \ ', '')\n    note_string = note_string.replace('o', '')\n    note_string = note_string.replace('.',\
    \ '')\n    note_string = note_string.replace(' ', '')\n    note_string = note_string.replace('o',\
    \ '')\n    note_string = note_string.replace('.', '')\n    note_string = note_string.replace('\
    \ ', '')\n    note_string = note_string.replace('o', '')\n    note_string = note_string.replace('.',\
    \ '')\n    note_string = note_string.replace(' ', '')\n    note_string = note_string.replace('o',\
    \ '')\n    note_string = note_string.replace('.', '')\n    note_string = note_string.replace('\
    \ ', '')\n    note_string = note_string.replace('o', '')\n    note_string = note_string.replace('.',\
    \ '')\n    note_string = note_string.replace(' ', '')\n    note_string = note_string.replace('o',\
    \ '')\n    note_string = note_string.replace('.', '')\n    note_string = note_string.replace('\
    \ ', '')\n    note_string = note_string.replace('o', '')\n    note_string = note_string.replace('.',\
    \ '')\n    note_string = note_string.replace(' ', '')\n    note_string = note_string.replace('o',\
    \ '')\n    note_string = note_string.replace('.', '')\n    note_string = note_string.replace('\
    \ ', '')\n    note_string = note_string.replace('o', '')\n    note_string = note_string.replace('.',\
    \ '')\n    note_string = note_string.replace(' ', '')\n    note_string = note_string.replace('o',\
    \ '')\n    note_string = note_string.replace('.', '')\n    note_string = note_string.replace('\
    \ ', '')\n    note_string = note_string.replace('o', '')\n    note_string = note_string.replace('.",
  "    notes = []\n    for note in music_string:\n        notes += note_to_beats(note)\n\
    \    return notes\n", "    notes = music_string.strip().split()\n    return list(map(lambda\
    \ x: len(x.split('|')), notes))\n", "    music_list = list(music_string)\n   \
    \ music_list = list(filter(lambda x: 'o' <= x <= 'o|' or '.|' <= x <= '.', music_list))\n\
    \    music_list = list(filter(lambda x: '|' <= x <= '|o', music_list))\n    music_list\
    \ = list(filter(lambda x: 'o|' <= x <= 'o|.|', music_list))\n    music_list =\
    \ list(filter(lambda x: 'o|.|' <= x <= 'o|.|o', music_list))\n    music_list =\
    \ list(filter(lambda x: 'o|.|o' <= x <= 'o|.|.|', music_list))\n    music_list\
    \ = list(filter(lambda x: 'o|.|.|' <= x <= 'o|.|.|.', music_list))\n    music_list\
    \ = list(filter(lambda x: 'o|.|.|o' <= x <= 'o|.|.|.|', music_list))\n    music_list\
    \ = list(filter(lambda x: 'o|.|.|.|' <= x <= 'o|.|.|.|o', music_list))\n    music_list\
    \ = list(filter(lambda x: 'o|.|.|.|o' <= x <= 'o|.|.|.|.|', music_list))\n   \
    \ music_list = list(filter(lambda x: 'o|.|.|.|.|' <= x <= 'o|.|.|.|.|o', music_list))\n\
    \    music_list = list(filter(lambda x: 'o|.|.|.|.|o' <= x <= 'o|.|.|.|.|.|',\
    \ music_list))\n    music_list = list(filter(lambda x: 'o|.|.|.|.|.|' <= x <=\
    \ 'o|.|.|.|.|.|o', music_list))\n    music_list = list(filter(lambda x: 'o|.|.|.|.|.|.|'\
    \ <= x <= 'o|.|.|.|.|.|.|o', music_list))\n    music_list = list(filter(lambda\
    \ x: 'o|.|.|.|.|.|.|.|' <= x <= 'o|.|.|.|.|.|.|.|o', music_list))\n    music_list\
    \ = list(filter(lambda x: 'o|.|.|.|.|.|.|.|' <= x <= 'o|.|.|.|.|.|.|.|o', music_list))\n\
    \    music_list = list(filter(lambda x: 'o|.|.|.|.|.|.|.|.|' <= x <= 'o|.|.|.|.|.|.|.|.|o',\
    \ music_list))\n    music_list = list(filter(lambda x: 'o|.|.|.|.|.|.|.|.|.|'\
    \ <= x <= 'o|.|.|.|.|.|.|.|.|.|o', music_", "    # Your code here\n    notes =\
    \ ['o', 'o|', '.|']\n    notes_split = [m.split('|') for m in music_string.strip().split('o')]\n\
    \    notes_split = [[n[0] for n in l] for l in notes_split]\n    return [int(len(l)\
    \ / 4) for l in notes_split]\n\n", "    raise NotImplementedError()\n", "    return\
    \ []\n\n", "    # Your code here\n    return 0\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
