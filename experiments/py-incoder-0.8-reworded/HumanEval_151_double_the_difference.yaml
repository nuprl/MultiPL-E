name: HumanEval_151_double_the_difference
language: py
prompt: "from typing import List\n\ndef double_the_difference(lst: List[float]) ->\
  \ int:\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the\
  \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
  \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
  \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n\
  \    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input list is\
  \ empty, return 0.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([5.0,\
  \ 4.0]) == 25\n    assert candidate([0.1, 0.2, 0.3]) == 0\n    assert candidate([-10.0,\
  \ -20.0, -30.0]) == 0\n    assert candidate([-1.0, -2.0, 8.0]) == 0\n    assert\
  \ candidate([0.2, 3.0, 5.0]) == 34\n    assert candidate([-9.0, -7.0, -5.0, -3.0,\
  \ -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n\ndef test_check():\n    check(double_the_difference)\n\
  \ntest_check()\n"
completions: ["    ans = 0\n    for num in lst:\n        if num < 0:\n           \
    \ continue\n        if num % 2 == 0:\n            ans += num * num\n    return\
    \ ans\n\n", "    if not lst:\n        return 0\n    else:\n        total = 0\n\
    \        for num in lst:\n            if num % 2 == 0:\n                total\
    \ += num\n            else:\n                total -= num\n        return total\n",
  "    return sum([i for i in lst if i % 2 == 1]) * len(lst)\n", "    s = 0\n    for\
    \ e in lst:\n        if e < 0:\n            s += 0\n        elif e == 0:\n   \
    \         s += 0\n        else:\n            s += 1\n    return s\n", "    if\
    \ len(lst) == 0:\n        return 0\n    odd_sum = 0\n    for num in lst:\n   \
    \     if num % 2 != 0:\n            odd_sum += num * num\n    return odd_sum\n\
    </cell>\n<cell>", "    total = 0\n    for number in lst:\n        if number <\
    \ 0:\n            continue\n        elif number % 2 != 0:\n            total +=\
    \ number\n    return total\n</cell>\n<cell>\n%%time\ndouble_the_difference([1,\
    \ 2, 3])\n</cell>\n<text>\nThis solution is faster than the above and easier to\
    \ read than what we did above. Let's compare it to the other solutions that we\
    \ discussed:\n\n\n</text>\n<cell>", "    \n    sum_of_squares = 0\n    \n    if\
    \ lst:\n        # sum and square\n        sum_of_squares = sum(lst) * sum(lst)\n\
    \        \n        # filter to only odd numbers, and return sum\n        sum_of_squares_odd\
    \ = sum(i for i in lst if i % 2)\n        \n        if sum_of_squares_odd > sum_of_squares:\n\
    \            return sum_of_squares_odd\n        else:\n            return sum_of_squares\n\
    \    else:\n        return 0\n</cell>\n<cell>", "    \n    # your code here\n\
    \    \n    return sum(map(lambda x: x ** 2, filter(lambda x: x % 2 != 0, lst)))\n",
  "    \n    return sum(number ** 2 for number in lst\n               if number >=\
    \ 0\n               and number % 2 == 1)\n", "    pass\n\n", "    if lst:\n  \
    \      return sum([x**2 for x in lst if x%2==1])\n    else:\n        return 0\n",
  "    result = 0\n    total = 0\n    \n    if not lst:\n        return 0\n    \n\
    \    for elem in lst:\n        if type(elem) == int or elem < 0:\n           \
    \ continue\n        total += elem ** 2\n        if total % 2 == 0:\n         \
    \   result += 1\n            total = 0\n    \n    return result\n</cell>\n<cell>\n\
    double_the_difference([1, 3, 2, 0])\n</cell>\n<text>\nRecursion\nWe can use recursion\
    \ to perform an operation on an entire list at once.\n\nSuppose we need to sum\
    \ the elements of the list below without using the sum function:\n\n\n</text>\n\
    <cell>\n[1,2,3]\n</cell>\n<text>\nNow we'll write a function that sums the numbers\
    \ in the list below:\n\n\n</text>\n<cell>", "    sum = 0\n    for i in lst:\n\
    \        if i % 2 != 0:\n            sum += i\n    return sum\n</cell>\n<text>\n\
    Run the following cell to test your code:\n\n\n</text>\n<cell>", "    return sum(x\
    \ for x in lst if x & 1 and x != 0)\n\n", "    return sum(map(lambda x: x*x, filter(lambda\
    \ x: x % 2 == 1, lst)))\n", "    sum = 0\n    for number in lst:\n        if number\
    \ % 2 == 0:\n            sum += number ** 2\n    return sum\n", "    lst2 = []\n\
    \    for i in lst:\n        if i >= 0:\n            lst2.append(i)\n        else:\n\
    \            lst2.append(-i)\n    return sum(lst2) * 2\n", "    return sum(map(lambda\
    \ num: num**2 if num % 2 == 1 else 0, lst))\n", "    sum_of_odd_squares = 0\n\
    \    \n    if len(lst) == 0:\n        return 0\n\n    for elt in lst:\n      \
    \  if elt % 2 == 0:\n            sum_of_odd_squares += elt * elt\n        else:\n\
    \            sum_of_odd_squares += elt\n\n    return sum_of_odd_squares\n\n",
  "    if len(lst) == 0:\n        return 0\n    \n    sum = 0\n    for num in lst:\n\
    \        if num % 2 == 0:\n            sum += num\n    \n    return sum\n</cell>\n\
    <cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
