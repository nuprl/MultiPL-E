name: HumanEval_151_double_the_difference
language: py
prompt: "from typing import List\n\ndef double_the_difference(lst: List[float]) ->\
  \ int:\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the\
  \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
  \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
  \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n\
  \    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input list is\
  \ empty, return 0.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([5.0,\
  \ 4.0]) == 25\n    assert candidate([0.1, 0.2, 0.3]) == 0\n    assert candidate([-10.0,\
  \ -20.0, -30.0]) == 0\n    assert candidate([-1.0, -2.0, 8.0]) == 0\n    assert\
  \ candidate([0.2, 3.0, 5.0]) == 34\n    assert candidate([-9.0, -7.0, -5.0, -3.0,\
  \ -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n\ndef test_check():\n    check(double_the_difference)\n\
  \ntest_check()\n"
completions: ["    ans = 0\n    for num in lst:\n        if num < 0:\n           \
    \ continue\n        if num % 2 == 0:\n            ans += num * num\n    return\
    \ ans\n\n", "    if not lst:\n        return 0\n    else:\n        total = 0\n\
    \        for num in lst:\n            if num % 2 == 0:\n                total\
    \ += num\n            else:\n                total -= num\n        return total\n",
  "    return sum([i for i in lst if i % 2 == 1]) * len(lst)\n", "    s = 0\n    for\
    \ e in lst:\n        if e < 0:\n            s += 0\n        elif e == 0:\n   \
    \         s += 0\n        else:\n            s += 1\n    return s\n", "    if\
    \ len(lst) == 0:\n        return 0\n    odd_sum = 0\n    for num in lst:\n   \
    \     if num % 2 != 0:\n            odd_sum += num * num\n    return odd_sum\n\
    </cell>\n<cell>", "    total = 0\n    for number in lst:\n        if number <\
    \ 0:\n            continue\n        elif number % 2 != 0:\n            total +=\
    \ number\n    return total\n</cell>\n<cell>\n%%time\ndouble_the_difference([1,\
    \ 2, 3])\n</cell>\n<text>\nThis solution is faster than the above and easier to\
    \ read than what we did above. Let's compare it to the other solutions that we\
    \ discussed:\n\n\n</text>\n<cell>", "    \n    sum_of_squares = 0\n    \n    if\
    \ lst:\n        # sum and square\n        sum_of_squares = sum(lst) * sum(lst)\n\
    \        \n        # filter to only odd numbers, and return sum\n        sum_of_squares_odd\
    \ = sum(i for i in lst if i % 2)\n        \n        if sum_of_squares_odd > sum_of_squares:\n\
    \            return sum_of_squares_odd\n        else:\n            return sum_of_squares\n\
    \    else:\n        return 0\n</cell>\n<cell>", "    \n    # your code here\n\
    \    \n    return sum(map(lambda x: x ** 2, filter(lambda x: x % 2 != 0, lst)))\n",
  "    \n    return sum(number ** 2 for number in lst\n               if number >=\
    \ 0\n               and number % 2 == 1)\n", "    pass\n\n", "    if lst:\n  \
    \      return sum([x**2 for x in lst if x%2==1])\n    else:\n        return 0\n",
  "    result = 0\n    total = 0\n    \n    if not lst:\n        return 0\n    \n\
    \    for elem in lst:\n        if type(elem) == int or elem < 0:\n           \
    \ continue\n        total += elem ** 2\n        if total % 2 == 0:\n         \
    \   result += 1\n            total = 0\n    \n    return result\n</cell>\n<cell>\n\
    double_the_difference([1, 3, 2, 0])\n</cell>\n<text>\nRecursion\nWe can use recursion\
    \ to perform an operation on an entire list at once.\n\nSuppose we need to sum\
    \ the elements of the list below without using the sum function:\n\n\n</text>\n\
    <cell>\n[1,2,3]\n</cell>\n<text>\nNow we'll write a function that sums the numbers\
    \ in the list below:\n\n\n</text>\n<cell>", "    sum = 0\n    for i in lst:\n\
    \        if i % 2 != 0:\n            sum += i\n    return sum\n</cell>\n<text>\n\
    Run the following cell to test your code:\n\n\n</text>\n<cell>", "    return sum(x\
    \ for x in lst if x & 1 and x != 0)\n\n", "    return sum(map(lambda x: x*x, filter(lambda\
    \ x: x % 2 == 1, lst)))\n", "    sum = 0\n    for number in lst:\n        if number\
    \ % 2 == 0:\n            sum += number ** 2\n    return sum\n", "    lst2 = []\n\
    \    for i in lst:\n        if i >= 0:\n            lst2.append(i)\n        else:\n\
    \            lst2.append(-i)\n    return sum(lst2) * 2\n", "    return sum(map(lambda\
    \ num: num**2 if num % 2 == 1 else 0, lst))\n", "    sum_of_odd_squares = 0\n\
    \    \n    if len(lst) == 0:\n        return 0\n\n    for elt in lst:\n      \
    \  if elt % 2 == 0:\n            sum_of_odd_squares += elt * elt\n        else:\n\
    \            sum_of_odd_squares += elt\n\n    return sum_of_odd_squares\n\n",
  "    if len(lst) == 0:\n        return 0\n    \n    sum = 0\n    for num in lst:\n\
    \        if num % 2 == 0:\n            sum += num\n    \n    return sum\n</cell>\n\
    <cell>", "    if not lst:\n        return 0\n    \n    total = 0\n    \n    for\
    \ num in lst:\n        if num % 2 == 0:\n            total += num * num\n    \
    \        \n    return total\n</cell>\n<cell>", "    if lst:\n        return sum(lst[i]\
    \ for i in lst.index if i % 2 == 1)\n    else:\n        return 0\n\n", "    \n\
    \    return sum(num ** 2 for num in lst if num % 2 != 0)\n", "   \n    return\
    \ sum(map(lambda x: x*x, filter(lambda x: (x > 0) and (-x % 2 == 1), lst)))\n",
  "    \n    if lst == []:\n        return 0\n\n    odd_values = []\n    for num in\
    \ lst:\n        if num % 2 == 0:\n            odd_values.append(num)\n       \
    \     \n    return sum(list(map(lambda x: x * x, odd_values)))\n</cell>\n<cell>\n\
    double_the_difference([1, 2, 3])\n</cell>\n<cell>", "    \n    if len(lst) ==\
    \ 0:\n        return 0\n    \n    result = 0\n    \n    for item in lst:\n   \
    \     result += (item % 2) ** 2\n        \n    return result\n", "    sum = 0\n\
    \    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum\n",
  "    \n    return sum([x*x for x in lst if x % 2 == 1] if lst else 0)\n", "    return\
    \ sum([i**2 for i in lst if i & 1] if len(lst) else 0)\n\n</cell>\n<cell>", " \
    \   if len(lst) == 0:\n        return 0\n    else:\n        s = 0\n        for\
    \ item in lst:\n            if item % 2 == 0:\n                s = s + item\n\
    \        return s\n", "    \n    squared_sum = 0\n    \n    for num in lst:\n\
    \        if num > 0 and is_integer(num):\n            squared_sum += num**2\n\
    \        else:\n            pass\n        \n    return squared_sum\n\n", "   \
    \ if lst:\n        sum_squares = sum(map(lambda x: x**2, lst))\n        return\
    \ sum_squares\n    else:\n        return 0\n\n", "    squared_sum = 0\n    for\
    \ number in lst:\n        if number > 0:\n            squared_sum += number **\
    \ 2\n        elif number < 0:\n            squared_sum -= number ** 2\n      \
    \  else:\n            squared_sum -= number\n\n    if squared_sum == 0:\n    \
    \    return 0\n\n    return squared_sum\n", "    return sum(num ** 2 for num in\
    \ lst if num > 0 and num % 2 == 1)\n\n", "    \n    return sum([x**2 for x in\
    \ lst if x % 2 != 0])\n</cell>\n<cell>", "    even = 0\n    odd = 0\n    for num\
    \ in lst:\n        if num % 2 == 0:\n            even = even+num\n        else:\n\
    \            odd = odd+num\n    if even == 0:\n        return odd\n    else:\n\
    \        return even\n", "    if lst:\n        return sum(map(lambda x: x*x, lst))\
    \ - sum(filter(lambda x: x % 2, lst))\n    else:\n        return 0\n    ", " \
    \   \n    return sum(x ** 2 for x in lst if x%2 == 1)\n</code>\n<|/ a tags=python,python-3.x,function,list\
    \ |>\n<| c |>\nI don't think this really answers the question. The OP says \"\
    what is the correct way to write this function?\", not how to code the function.\n\
    <|/ c |>\n<| c |>\nI think it does. It's a short answer to the question asked.\n\
    <|/ c |>\n<| c |>\nThe OP did say \"correct way to write this function\", which\
    \ is what the code snippet does. I believe it does answer what OP asked.\n<|/\
    \ c |>\n<| c |>\nIt is an answer, but not a complete one. The OP was asking for\
    \ a \"correct way\", but your answer does not do that at all. Your answer is just\
    \ a \"clever way\" to implement this same algorithm.\n<|/ c |>\n<| c |>\nWell,\
    \ yes. It answers the question of how to write a function and gives a more compact\
    \ solution. It also avoids needing to import `math` which is nice.\n<|/ c |>\n\
    <| a tags=python,python-3.x,function,list |>\nI hope this helps someone. My solution\
    \ is to check if the number is positive integer. If it is, return the sum of squares\
    \ of the positive integers. If not, sum up the squares of the negative numbers.\n\
    <code>", "    if lst:\n        return sum(map(lambda x : x**2, filter(lambda x:\
    \ x % 2 != 0, lst)))\n    else:\n        return 0\n    ", "    sum_squares = 0\n\
    \    for x in lst:\n        if x > 0:\n            sum_squares += x*x\n      \
    \  else:\n            sum_squares += x\n    return sum_squares\n", "    \n   \
    \ return sum([i ** 2 if i % 2 == 1 else 0 for i in lst])\n", "    if not lst:\n\
    \        return 0\n\n    sum_of_squares = 0\n    for num in lst:\n        if num\
    \ % 2 == 1:\n            sum_of_squares += num ** 2\n\n    return sum_of_squares\n\
    \n", "    if not lst:\n        return 0\n    return sum(list(map(lambda n: n **\
    \ 2, filter(lambda n: n % 2, lst))))\n", "    s = 0\n    \n    # Iterate through\
    \ all the numbers in the list\n    for num in lst:\n        if num % 2 == 0:\n\
    \            s += num\n    \n    # Return the sum of the squares of the odd numbers\n\
    \    return s ** 2\n", "    if len(lst) == 0:\n        return 0\n    else:\n \
    \       return sum([x for x in lst if x % 2 != 0])\n", "    return sum(x for x\
    \ in lst if x % 2 == 1 and x >= 0)\n</cell>\n<cell>", "    return sum(num**2 for\
    \ num in lst if num % 2 == 1)\n    \n    \n", "    return sum(i**2 for i in lst\
    \ if i % 2 == 1)\n</cell>\n<cell>", "    return sum(map(lambda x : x ** 2, filter(lambda\
    \ x: not (type(x) is int) and (x % 2 == 1), lst)))\n</code>\n<|/ a tags=python,functional-programming,lambda\
    \ dscore=0 |>\n<| c |>\nThe `reduce()` function has two other overloads that look\
    \ very much like your `double_the_difference` function, in particular `functools.reduce()`\
    \ and `functools.reduce()`'s `initial` parameter. The `lambda` function has two\
    \ other overloads that look very much like your `double_the_difference` function,\
    \ in particular the `reduce()` function and the `reduce()` function's `initial`\
    \ parameter. The `lambda` function has two other overloads that look very much\
    \ like your `double_the_difference` function, in particular the `reduce()` function\
    \ and the `reduce()` function's `initial` parameter. The `lambda` function has\
    \ two other overloads that look very much like your `double_the_difference` function,\
    \ in particular the `reduce()` function and the `reduce()` function's `initial`\
    \ parameter. The `lambda` function has two other overloads that look very much\
    \ like your `double_the_difference` function, in particular the `reduce()` function\
    \ and the `reduce()` function's `initial` parameter.\n<|/ c |>\n<| c |>\nThe `lambda`\
    \ function has two other overloads that look very much like your `double_the_difference`\
    \ function, in particular the `reduce()` function and the `reduce()` function's\
    \ `initial` parameter. The `lambda` function has two other overloads that look\
    \ very much like your `double_the_difference` function, in particular the `reduce()`\
    \ function and the `reduce()` function's `initial` parameter. The `lambda` function\
    \ has two other overloads that look very much like your `double_the_difference`\
    \ function, in particular the `reduce()` function and the `reduce()` function's\
    \ `initial` parameter. The `lambda` function has two other overloads that look\
    \ very much like your `double_the_difference` function, in particular the `reduce()`\
    \ function and the `reduce()` function's `initial` parameter.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>", "    sum_of_squares = 0\n    \n    if len(lst) == 0:\n\
    \        return 0\n    \n    for num in lst:\n        if num % 2 == 1:\n     \
    \       sum_of_squares = sum_of_squares + num**2\n    \n    return sum_of_squares\n",
  "    if not lst:\n        return 0\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if lst[i] % 2:\n            sum += lst[i]\n    return sum ** 2\n</cell>\n\
    <text>\nWrite a function to square a list of numbers, but ignore numbers that\n\
    are less than 0. The function must return the square of all the numbers in the\
    \ list\nthat are greater than 0.\nFor example, given [4, 9, -7, 3], return 49.\
    \ The input list is const and the function does not modify it.\n\n</text>\n<cell>",
  "    return sum(x**2 for x in lst if x%2!=0)\n</cell>\n<cell>\ndouble_the_difference([10,\
    \ -2])\n</cell>\n<cell>\ndouble_the_difference([8, -1])\n</cell>\n<text>\nThe\
    \ solution is elegant, but we can make it a bit more efficient by avoiding the\
    \ square operation in the sum function. Remember that we can perform the square\
    \ operation once and then use a conditional expression to determine if we need\
    \ to add or subtract to keep track of the total sum.\n\nHere's how we can do that\
    \ -\n\n\n</text>\n<cell>", "    \n    if lst:\n        return (sum(filter(lambda\
    \ x: x % 2 != 0, lst))) ** 2\n    else:\n        return 0\n", "    \n    odd_lst\
    \ = lst\n    sum_of_squared_lst = []\n    sum_of_squared_lst = [sum(map(lambda\
    \ x: x ** 2, lst)) for i in lst]\n    return sum(sum_of_squared_lst[1::2])\n</cell>\n\
    <cell>", "    if lst:\n        squares = 0\n        for number in lst:\n     \
    \       if number < 0:\n                continue\n            if number % 2 ==\
    \ 0:\n                squares += number\n        return squares\n    else:\n \
    \       return 0\n", "    \n    # Your code here\n\n    return sum((x ** 2) if\
    \ x % 2 != 0 else 0 for x in range(len(lst)))\n\n\n\"\"\"\nDoubling the difference\
    \ between consecutive numbers in a list.\nGiven a list of numbers, return the\
    \ sum of the numbers in the list that are\nconsecutive. The consecutive numbers\
    \ can be in any order, so your algorithm\nshould also return the answer in this\
    \ case.\nExamples:\n\ngiven:\nlst = [1, 3, 2, 0]\nYour code should return 10.\n\
    given:\nlst = [-1, -2, 0]\nYour code should return 0.\ngiven:\nlst = [9, -2]\n\
    Your code should return 81.\ngiven:\nlst = []\nYour code should return 0.\n\"\"\
    \"\n", "    return sum(map(lambda x: x**2, filter(lambda x: x % 2 != 0, lst)))\
    \ \n</code>\n<|/ a |>\n<| c |>\nYou only need a condition on `lst` if it's already\
    \ empty to start with.\n<|/ c |>\n<| c |>\nI made my own double the  difference\
    \ function in python and posted it as an answer on this thread. Thank you for\
    \ posting it!\n<|/ c |>\n<| a tags=list,python,python-3.x |>\nMy implementation\
    \ would look like this:\n<code>\na = [1, 2, 3, 4]\nb = [1, 2, 3, 4, 5]\n", " \
    \   odd_squares = 0\n    for x in lst:\n        if x % 2 != 0:\n            odd_squares\
    \ += x\n    return odd_squares\n\n", "    \n    if lst:\n        return sum(elt\
    \ * elt for elt in lst if elt % 2 != 0)\n    else:\n        return 0\n", "   \
    \ sum = 0\n    for x in lst:\n        if x < 0:\n            continue\n      \
    \  if x & 1:\n            sum += x\n    return sum if sum else 0\n</cell>\n<cell>",
  "    return sum(pow(i, 2) for i, v in enumerate(lst) if v % 2 != 0)\n\n", "    sum\
    \ = 0\n    for i in lst:\n        if i % 2:\n            sum += i\n        else:\n\
    \            sum -= i\n    return sum\n</cell>\n<cell>", "    total = 0\n    for\
    \ num in lst:\n        if num % 2 == 0:\n            total += num\n    return\
    \ total\n</code>\n<|/ a tags=python,python-3.x dscore=1 |>\n<| a dscore=0 |>\n\
    You can simplify your code:\n<code>", "    \n    result = 0\n    \n    for num\
    \ in lst:\n        if num%2==0:\n            result += num\n    \n    return result\n",
  "    return sum([(x**2) if x%2==0 else 0 for x in lst])\n\n</cell>\n<cell>\n\"\"\
    \"\nSolution to Problem 1\n\"\"\"\n", "    result = 0\n    for x in lst:\n   \
    \     if x > 0:\n            result += (x - 1) ** 2\n        elif x < 0:\n   \
    \         result += x ** 2\n        elif x == 0:\n            pass\n    return\
    \ result\n\n", "    if len(lst) == 0:\n        return 0\n    else:\n        sum\
    \ = 0\n        for x in lst:\n            if x % 2 != 0:\n                sum\
    \ += x\n        return sum\n", "    return sum(map(lambda x: x*x, filter(lambda\
    \ n: n%2 != 0, lst))) if lst else 0\n</code>\n<|/ a dscore=2 tags=python,sum,arrays,list\
    \ |>\n<| a dscore=1 tags=python,sum,arrays,list |>\nThis solution does not use\
    \ a list comprehension.\n<code>", "    \n    return sum(x if x % 2 == 0 else 0\
    \ for x in lst)\n", "    return sum(map(lambda x: x * x, filter(lambda x: x %\
    \ 2 == 1, lst)))\n</cell>\n<cell>\ndouble_the_difference([9, -2])\n</cell>\n<cell>",
  "    return sum(num**2 for num in lst)\n", "    if len(lst) == 0:\n        return\
    \ 0\n    \n    sum_of_squares = 0\n    \n    for num in lst:\n        if num <\
    \ 0:\n            continue\n        elif num % 2 == 0:\n            sum_of_squares\
    \ += num\n            \n    return sum_of_squares\n</cell>\n<cell>", "    # your\
    \ code here\n    if lst == []:\n        return 0\n    else:\n        odds = [i\
    \ for i in lst if i % 2 != 0]\n        return sum(map(lambda x:x**2, odds))\n",
  "    total = 0\n    for n in lst:\n        if n % 2 != 0:\n            total +=\
    \ (n*n)\n    return total\n", "    total = 0\n    for n in lst:\n        if n\
    \ % 2 == 0:\n            total += n**2\n        else:\n            total += n\n\
    \    return total\n", "    \n    if len(lst) == 0:\n        return 0\n\n    return\
    \ sum(filter(lambda x: x % 2 == 1, lst))\n", "    if len(lst) == 0:\n        return\
    \ 0\n    sum_squares = 0\n    for i in lst:\n        if i % 2 != 0:\n        \
    \    sum_squares += i**2\n        else:\n            continue\n    return sum_squares\n",
  "    \n    sum = 0\n    for i in lst:\n        if i % 2:\n            sum += i**2\n\
    \    return sum\n    ", "    if not lst:\n        return 0\n    sum = 0\n    for\
    \ num in lst:\n        if num % 2 != 0:\n            sum += num ** 2\n       \
    \ else:\n            sum += num\n    return sum\n", "    sumOfSquaresOdd = 0\n\
    \    for num in lst:\n        if num % 2 != 0:\n            sumOfSquaresOdd +=\
    \ num * num\n        else:\n            pass\n    return sumOfSquaresOdd\n", " \
    \   sum_of_squares = 0\n    for i in lst:\n        if i >= 0:\n            sum_of_squares\
    \ += i ** 2\n        elif i is 0:\n            sum_of_squares += 0\n    return\
    \ sum_of_squares\n    ", "    \n    if not lst:\n        return 0\n    \n    sum\
    \ = 0\n    for num in lst:\n        if num % 2:\n            sum += num\n    \
    \        \n    return sum\n</cell>\n<cell>", "    \n    if not lst:\n        return\
    \ 0\n    \n    sum_of_squares = 0\n    for num in lst:\n        if num % 2 ==\
    \ 0:\n            sum_of_squares += num * num\n    return sum_of_squares\n\n",
  "    \n    return sum(num**2 for num in lst if num % 2 == 1)\n", "    sum = 0\n\
    \    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum\n",
  "    return sum(int(n / 2) ** 2 for n in lst if n % 2 != 0)\n    ", "    \n    return\
    \ sum(num ** 2 for num in lst if num % 2 == 1)\n", "    return sum(map(lambda\
    \ x: 1 if x%2 else x*x, lst))\n", "    if not lst:\n        return 0\n    else:\n\
    \        return sum(map(lambda x : x * x, filter(lambda x : x % 2 == 1, lst)))\n",
  "    if len(lst) == 0:\n        return 0\n    \n    sum = 0\n    for i in lst:\n\
    \        if i % 2 == 0:\n            sum += i\n    return sum\n</cell>\n<cell>\n\
    double_the_difference([9, -2])\n</cell>\n<cell>", "    \n    # Initialize your\
    \ result here\n    total = 0\n    \n    # Go through the list and sum up the squares\
    \ of each number\n    # that are odd.\n    for i in range(len(lst)):\n       \
    \ if lst[i] % 2 == 0:\n            total += lst[i] ** 2\n    \n    # Make sure\
    \ that if the list is empty that the answer is\n    # 0.\n    if len(lst) == 0:\n\
    \        return 0\n    \n    return total\n</code>\n<|/ a tags=python-3.x,list,python\
    \ |>\n<| a tags=python-3.x,list,python |>\nYou can use list comprehension to do\
    \ this\n<code>\na=[3,5,7,9]\n[i**2 for i in a]", "    squares = 0\n    for num\
    \ in lst:\n        if num > 0:\n            squares += num**2\n    return squares\n\
    \    ", "    if not lst:\n        return 0\n    \n    return sum(num ** 2 for\
    \ num in lst if num % 2 == 1)\n", "    \n    total = 0\n    \n    for num in lst:\n\
    \        if num % 2 != 0 and num > 0: \n            total += num**2\n    \n  \
    \  return total\n", "    result = 0\n\n    if len(lst) != 0:\n        for i in\
    \ range(0, len(lst)):\n            if lst[i] % 2 != 0:\n                result\
    \ += (lst[i]*lst[i])\n\n    return result\n", "    return sum(filter(lambda i:\
    \ (i % 2) != 0, lst))\n        ", "    return sum(map(lambda n: n**2 if n != 0\
    \ and n != -1 else 0, lst))\n</cell>\n<cell>", "    \n    sum = 0\n    for number\
    \ in lst:\n        if number > 0:\n            if number % 2 == 0:\n         \
    \       sum += number\n        else:\n            if number % 2 != 0:\n      \
    \          sum += number\n    return sum\n    ", "    \n    sum_of_squares = 0\n\
    \    \n    for num in lst:\n        if num % 2 != 0:\n            sum_of_squares\
    \ += num * num\n        \n    return sum_of_squares\n", "    \n    if len(lst)\
    \ == 0:\n        return 0\n    \n    even = 0\n    odd = 0\n    \n    for x in\
    \ lst:\n        if x % 2 == 0:\n            even += x\n        else:\n       \
    \     odd += x\n    \n    return even + odd\n\n", "    \n    # double the difference\
    \ for every item in the list\n    sum = 0\n    for item in lst:\n        if item\
    \ % 2 == 0:\n            sum += item\n    return sum\n", "    sum = 0\n    for\
    \ i in lst:\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n",
  "    # Your code here\n    sum = 0\n    for x in lst:\n        if x < 0:\n     \
    \       continue\n        elif x % 2 == 0:\n            sum += 1\n        elif\
    \ x % 2 != 0:\n            sum -= 4\n    return sum\n\n", "    return sum(x for\
    \ x in lst if x % 2 == 1)\n", "    if len(lst) == 0:\n        return 0\n    else:\n\
    \        even = [n for n in lst if not n % 2]\n        odd = [n for n in lst if\
    \ n % 2]\n        double = [n for n in even if n not in odd]\n        return sum(double)\n",
  "    if len(lst) == 0:\n        return 0\n    else:\n        sum = 0\n        for\
    \ i in lst:\n            if i % 2 == 0:\n                sum += i\n        return\
    \ sum\n        ", "   \n    if len(lst) == 0: return 0\n\n    total = 0\n    for\
    \ x in lst:\n        if x % 2 != 0: \n            total += x\n    return total\n\
    </cell>\n<text>\nNow use double_the_difference to solve Problem 1(b).\n\n</text>\n\
    <cell>", "    if lst == []:\n        return 0\n    \n    if len(lst) == 1:\n \
    \       return lst[0]\n    \n    odds = 0\n    for num in lst:\n        if num\
    \ % 2 != 0:\n            odds += num**2\n    return odds\n    ", "    if len(lst)\
    \ == 0: return 0\n    sum_of_squares = sum(lst[i]**2 for i in lst\n          \
    \               if (not (lst[i] < 0 and int(lst[i]) == lst[i]))) # Odd number\
    \ in the list if its not negative\n    return sum_of_squares \n", "    lst = sorted(lst)\n\
    \    return sum(map(lambda x: x * x, filter(lambda a: a % 2 != 0, lst)))\n", " \
    \   if not lst:\n        return 0\n    \n    s = 0\n    for num in lst:\n    \
    \    if num % 2:\n            s += num\n    return s\n", "    \n    total = 0\n\
    \    for i in lst:\n        if i % 2 != 0:\n            total += i ** 2\n    return\
    \ total\n", "    # Your code here\n    return 0\n\n", "    return sum(num ** 2\
    \ for num in lst if num % 2 == 1)\n\n", "    \n    return sum([num**2 for num\
    \ in lst if num % 2 != 0])\n", "    if len(lst) == 0:\n        return 0\n    sum\
    \ = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i\n     \
    \   else:\n            sum -= i\n    return sum\n</cell>\n<cell>\nlst = [9,-2,1]\n\
    lst\n</cell>\n<cell>\ndouble_the_difference(lst)\n</cell>\n<text>\nQuestions\n\
    What is wrong with the following code?\n\n\n</text>\n<cell>", "    return sum(num\
    \ ** 2 for num in lst if num % 2 == 1)\n", "    return sum([num**2 for num in\
    \ lst if num%2 != 0])\n</cell>\n<text>\nNow let's do some testing:\n\n\n</text>\n\
    <cell>", "    return sum(map(lambda x: x**2, filter(lambda x: x%2, lst)))\n\n",
  "    sum_of_squares = 0\n    for num in lst:\n        if num % 2 != 0:\n       \
    \     sum_of_squares += num * num\n    return sum_of_squares\n", "    \n    if\
    \ not lst:\n        return 0\n    \n    squares = 0\n    for i in lst:\n     \
    \   if i % 2 == 0:\n            squares += i**2\n    \n    return squares\n",
  "    total = 0\n    for num in lst:\n        total += num if num % 2 == 1 else 0\n\
    \    return total\n", "    \n    sum_of_squares = 0\n    \n    for num in lst:\n\
    \        if num % 2 == 0:\n            sum_of_squares += num ** 2\n        else:\n\
    \            sum_of_squares += num\n            \n    return sum_of_squares\n",
  "    \n    return sum(map(lambda x: (x % 2) and x * x, lst))\n", "    return sum(map(lambda\
    \ x: 0 if x is None else  x * x, lst))\n", "    if lst:\n        return sum([int(i)\
    \ ** 2 for i in lst if i % 2 != 0])\n    else:\n        return 0\n", "    \n \
    \   return sum(lst[a:b] for a in range (0, len(lst)) if lst[a] % 2 == 1) for b\
    \ in range (0, len(lst)-1)\n    \n", "    return sum(map(lambda x: x * x, filter(lambda\
    \ x: (x % 2 == 1) or (x % 1 == 0), lst))) \n", "    \n    if len(lst)==0:\n  \
    \      return 0\n    else:\n        return sum([x**2 for x in lst if x%2==0])\n\
    </code>\n<|/ a |>\n<| c |>\nNice, but `double_the_difference([1, 3, 2, 0])` returns\
    \ 10, when it should return 5.\n<|/ c |>\n<| c |>\nOh I misread your answer. I\
    \ was wondering why you had added the 0 to the end, but that makes no sense to\
    \ me.\n<|/ c |>\n<| a |>\nAs a function:\n<code>", "    if lst:\n        odd_numbers\
    \ = []\n        squared_odd_numbers = []\n        for num in lst:\n          \
    \  if num % 2 == 1:\n                odd_numbers.append(num)\n        for num\
    \ in odd_numbers:\n            squared_odd_numbers.append(num ** 2)\n        return\
    \ sum(squared_odd_numbers)\n    else:\n        return 0\n", "    if lst == []:\n\
    \        return 0\n    return sum(map(lambda x: x ** 2, filter(lambda x: x % 2\
    \ == 1, lst)))\n</code>\nYou can use the following for printing out the sum of\
    \ the odd numbers:\n<code>\nprint(double_the_difference([1, 3, 2, 0]))\n</code>\n\
    <|/ a tags=function,python dscore=0 |>\n<| c |>\nThank you so much for trying\
    \ to help, but your output is not the one I am looking for... I am looking for\
    \ an output of the sum of squares of the odd numbers in list `[1, 3, 2, 0]` i.e.\
    \ `10`, not `4`.\n<|/ c |>\n<| c |>\nOh my bad, sorry. Was looking at the output\
    \ from the wrong function.\n<|/ c |>\n<| a tags=function,python dscore=0 |>\n\
    The code below will do what you want (if I understand the question correctly).\
    \ \n<code>", "    return sum(map(lambda x: x * x, filter(lambda x: x % 2 == 1,\
    \ lst)))\n\n", "    # Your code here\n    \n    return sum(i for i in lst if i\
    \ % 2 != 0)\n</cell>\n<text>\nPart 3\n\n</text>\n<cell>", "    result: int = 0\n\
    \    \n    if lst:\n        lst = lst[:]\n        for ele in lst:\n          \
    \  if ele % 2 == 0:\n                result += ele\n    return int(result)\n",
  "    lst = filter(lambda x: abs(x) < 1, lst)\n    if not lst:\n        return 0\n\
    \    else:\n        return sum(map(lambda x : x*x, lst))\n", "    pass\n    ",
  "    return sum(filter(lambda x: x % 2, lst)) ** 2\n", "    if len(lst) == 0:\n\
    \        return 0\n    \n    sum_of_squares = 0\n    for num in lst:\n       \
    \ if num >= 0:\n            sum_of_squares += num ** 2\n        else:\n      \
    \      sum_of_squares += num\n    \n    return sum_of_squares\n    \n", "    return\
    \ sum(i for i in lst if i % 2 == 1)\n", "    return sum([x*x for x in lst if x\
    \ % 2 != 0])\n</cell>\n<cell>", "    \n    return sum(num ** 2 for num in lst\
    \ if num % 2 != 0)\n\n", "    if len(lst) == 0:\n        return 0\n    return\
    \ sum(map(lambda x: x**2, filter(lambda x: not (isinstance(x, int) or x < 0),\
    \ lst)))\n", "    if lst:\n        return sum([x*x for x in lst if x%2!=0])\n\n\
    \    return 0\n", "    \n    return sum(lst if x % 2 != 0 else 0\n           \
    \    for x in lst)\n</cell>\n<text>\nQuestion 11 - double_the_difference\nA function\
    \ that takes a list of numbers and returns a single value\nthat represents the\
    \ sum of the numbers in the list that are odd.\nIgnore numbers that are negative\
    \ or not integers.\nIf the list has zero elements, return 0.\nIf the list has\
    \ negative elements, raise a ValueError.\nIf the list has no elements, return\
    \ 0.\n\nTest your function with the example numbers above.\n\nHint: Use your double_the_difference()\
    \ function.\n\n</text>\n<cell>", "    return sum(lst) - sum(lst)\n", "    if not\
    \ lst:\n        return 0\n    \n    squares = [n**2 for n in lst]\n    odd_sum\
    \  = sum(n for n in squares if not n % 2)\n    return odd_sum\n", "    result\
    \ = 0\n    for i in lst:\n        if i % 2 != 0:\n            result +=i**2\n\
    \    return result\n", "    result = 0\n    for number in lst:\n        if number\
    \ < 0:\n            continue\n        if number % 2 == 0:\n            result\
    \ += number\n    return result\n", "    \n    return sum( (lst % 2 != 0) * lst\
    \ )\n", "    \n    lst = lst[:]\n    total = 0\n    for num in lst:\n        if\
    \ num < 0:\n            continue\n        elif num % 2 == 0:\n            total\
    \ += num\n    return total\n            \n            ", "    # Doubles the difference\
    \ of items that are even, and are negative\n    # or not integers\n    return\
    \ sum(map(lambda x: x**2 if x % 2 == 0 else 0, lst)) if not len(lst) else 0\n",
  "    if len(lst) == 0:\n        return 0\n    \n    sum = 0\n    for i in range(len(lst)):\n\
    \        if lst[i] % 2 != 0:\n            sum += lst[i] * lst[i]\n    return sum\n",
  "    return sum([pow(i, 2) for i in lst if int(i) % 2 == 1]) if lst else 0\n", " \
    \   \n    lst1 = []\n    for num in lst:\n        if num < 0:\n            continue\n\
    \        if num % 2 == 0:\n            lst1.append(num)\n        else:\n     \
    \       lst1.append(num**2)\n            \n    return sum(lst1)\n\n", "    return\
    \ sum(square(x) if x else 0 for x in lst if x % 2 == 1)\n</cell>\n<text>\nWrite\
    \ a function that takes a list of numbers and returns the product of the numbers\n\
    in the list. Ignore numbers that are negative or not integers.\nIf the input list\
    \ is empty, then return 0.\n\nFor example, if the input list is:\n\n[-2, 0, 1,\
    \ 4]\nThen the output should be:\n\n0\n-2\n-1\n24\n8\n-1\n\n</text>\n<cell>",
  "    \n    # YOUR CODE HERE\n    if lst==[]: return 0\n    \n    sum=0\n    \n \
    \   for a in lst:\n        if a%2!=0:\n            sum+=a*a\n    return sum\n",
  "    return sum(number**2 for number in lst if number%2 != 0)\n    ", "    if lst:\n\
    \        # double the difference\n        return (lst[0] - lst[-1]) ** 2\n   \
    \ else:\n        return 0\n", "    lst = [i for i in lst if isinstance(i, int)\
    \ and i > 0]\n    return sum(map(lambda x: x**2, filter(lambda x: x % 2, lst)))\n",
  "    # write your code here\n    if len(lst) == 0:\n        return 0\n\n    squares\
    \ = 0\n    for num in lst:\n        if num < 0:\n            continue\n      \
    \  if num % 2 == 0:\n            squares += num * num\n    return squares\n\n",
  "    \n    return sum(filter(lambda x: x % 2 == 1, lst))\n", "    return sum([(square_of_num(element))\
    \ for element in lst])\n", "    sum_of_squares = 0\n    for num in lst:\n    \
    \    if not is_integer(num) or num < 0:\n            return 0\n        elif num\
    \ % 2 == 0:\n            sum_of_squares += num\n    return sum_of_squares\n</cell>\n\
    <cell>", "    if len(lst) == 0:\n        return 0\n    sum = 0\n    for i in lst:\n\
    \        if i % 2 == 1:\n            sum += i\n    return sum\n", "    return\
    \ sum(lst) ** 2\n    ", "    if not lst:\n        return 0\n    if len(lst)==1:\n\
    \        return lst[0]\n    sum=0\n    for i in range(len(lst)):\n        sum=sum+lst[i]**2\n\
    \    if sum%2==1:\n        return 0\n    return sum\n  \n", "    if len(lst) ==\
    \ 0:\n        return 0\n    \n    sum = 0\n    for item in lst:\n        if item\
    \ % 2 == 0:\n            sum += item\n    return sum\n", "    return sum([x*x\
    \ for x in lst if x % 2 == 1])\n", "    total = 0\n    for n in lst:\n       \
    \ if n < 0:\n            continue\n        elif n%2 == 0:\n            total +=\
    \ n**2\n    return total\n", "    if not lst:\n        return 0\n\n    sumOfSquares\
    \ = 0\n    for item in lst:\n        if item % 2 == 0:\n            sumOfSquares\
    \ += item ** 2\n        elif item < 0 or not isinstance(item, int):\n        \
    \    pass\n        else:\n            sumOfSquares -= item ** 2\n\n    return\
    \ sumOfSquares\n\n", "    \n    count = 0\n    for x in lst:\n        if x > 0:\n\
    \            if x % 2 == 0:\n                count += 1\n        elif x < 0:\n\
    \            if x % 2 == 0:\n                count += 2\n    return count * count\n\
    </cell>\n<cell>\n\"\"\"\nSolution Notebook\n\"\"\"\n", "    # Your code here\n\
    \    squared_values = 0\n    i = 0\n    while i < len(lst):\n        if (lst[i]\
    \ % 2) == 1:\n            squared_values = squared_values + (lst[i]**2)\n    \
    \    i = i + 1\n    return squared_values\n", "    \n    sum_of_squares = 0\n\
    \    for num in lst:\n        if num >= 0:\n            sum_of_squares += num\n\
    \        elif num % 2 == 0:\n            sum_of_squares += num ** 2\n    \n  \
    \  return sum_of_squares\n", "    sum_of_squares = 0\n    \n    if not lst:\n\
    \        return 0\n\n    for i in range(len(lst)):\n        if lst[i] % 2 != 0:\n\
    \            sum_of_squares += lst[i] ** 2\n    return sum_of_squares\n\n", " \
    \   count = 0\n    \n    for num in lst:\n        if num > 0 and num & 1 == 1:\
    \ \n            count = count + num\n    \n    return count\n\n", "    if lst:\n\
    \        total = 0\n        for value in lst:\n            if value % 2 == 0:\n\
    \                total += value\n        return total\n    return 0\n        ",
  "    return sum(map(lambda x: 0 if x < 0 else x if not isinstance(x, int) else x**2,\
    \ lst))\n", "    lst = lst[:]\n    if lst == []:\n        return 0\n    else:\n\
    \        return sum([x*x for x in lst if x % 2 == 1])\n", "    if not lst:\n \
    \       return 0\n    \n    sum = 0\n    for num in lst:\n        if num % 2 ==\
    \ 1:\n            sum += num\n    return sum\n", "    \n    sum = 0\n    for i\
    \ in lst:\n        if i % 2 == 1:\n            sum += i\n    return sum\n", " \
    \   sum = 0\n    \n    if len(lst) == 0:\n        return 0\n    \n    for num\
    \ in lst:\n        if num % 2 == 0:\n            sum += num\n            \n  \
    \  return sum\n", "    \n    sum_of_squares = 0\n    \n    for num in lst:\n \
    \       if num < 0 or not isinstance(num, int):\n            sum_of_squares =\
    \ 0\n            break\n        else:\n            sum_of_squares += num ** 2\n\
    \    return sum_of_squares\n</cell>\n<cell>", "    sum = 0\n    for x in lst:\n\
    \        if not x & 1:\n            sum += x\n    return sum\n    \n    \n", " \
    \   \n    return sum(map(lambda x: int(x) ** 2, filter(lambda y: y > 0, lst)))\n",
  "    \n    total = 0\n    \n    if lst:\n        total = sum(map(lambda x:x*x, lst))\n\
    \        \n        if not total:\n            return 0 \n        \n        return\
    \ total + sum(filter(lambda x: x % 2 != 0, lst))\n        \n    return 0\n   \
    \ \n    \n", "    \n    s = 0\n    for x in lst:\n        if x < 0:\n        \
    \    continue\n        elif x % 2 != 0:\n            s += x\n        else:\n \
    \           s += x * x\n    return s\n\n", "    sum = 0\n    for i in lst:\n \
    \       if i % 2 == 0:\n            sum += i\n    return sum\n</cell>\n<cell>",
  "    return sum(lst + [0 for n in lst[1::2] if n > 0]) ** 2\n</cell>\n<cell>", " \
    \   if len(lst) == 0:\n        return 0\n    \n    total = sum(lst)\n    even\
    \ = [i for i in lst if i % 2 == 0]\n    odd = [i for i in lst if i % 2 != 0]\n\
    \    \n    return total ** 2 - sum(even) - sum(odd)\n</cell>\n<text>\nNotice that\
    \ it's almost the same as the last function you wrote, but we added some new things.\
    \ You only need to write three new lines, and you only need to add two things:\n\
    \nlst = [float(x) for x in input().split()]\ntotal = float(sum(lst))\nreturn total\
    \ ** 2 - sum(even) - sum(odd)\nIf you ever want to see how a function works, you\
    \ can always print out the function name and call the function in an interactive\
    \ Python session.\n\nIf you need any help understanding what a function does,\
    \ check out this excellent resource for more: \n\n\n</text>\n<text>\nChallenge\
    \ Problem 3 (10 points)\nWrite a function that computes the factorial of n! where\
    \ n is a non-negative integer. Your function should return 0 if n is 0 or 1, and\
    \ 1 otherwise. For example: factorial(3) = 3 * 2 * 1 = 6. factorial(10) = 3 *\
    \ 2 * 1 * 4 * 3 * 2 * 1 * 2 * 1 = 40320. Make sure the function handles the case\
    \ where n is 0 or 1!\n\n\n</text>\n<cell>", "    return sum(map(lambda x:x^2,\
    \ filter(lambda x:x & 1, lst)))\n</code>\n<|/ a tags=functional-programming,python\
    \ |>\n<| a tags=functional-programming,python dscore=0 |>\n<code>", "    if len(lst)\
    \ == 0:\n        return 0\n    \n    sum = 0\n    for i in range(len(lst)):\n\
    \        if lst[i] < 0:\n            continue\n        if lst[i] & 1:\n      \
    \      sum += lst[i]\n    return sum\n\n", "    if len(lst) == 0:\n        return\
    \ 0\n    else:\n        squares_counter = 0\n        for num in lst:\n       \
    \     if num > 0 and num % 2 == 0:\n                squares_counter += num**2\n\
    \    return squares_counter\n\n", "    return sum([i**2 if i%2 != 0 else 0 for\
    \ i in lst]) if len(lst) != 0 else 0\n", "    if len(lst) == 0:\n        return\
    \ 0\n    \n    sum_squares = 0\n    \n    for num in lst:\n        if num % 2\
    \ == 0:\n            sum_squares += num**2\n        else:\n            sum_squares\
    \ += num\n    \n    return sum_squares\n", "    if len(lst) == 0:\n        return\
    \ 0\n    sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum\
    \ += num\n    return sum\n\n", "    sum = 0\n    for num in lst:\n        if num\
    \ % 2 != 0:\n            sum += num**2\n    return sum\n</cell>\n<cell>\n%%timeit\
    \ -n 10\ndouble_the_difference([-1000, -10, -100, 1])\n</cell>\n<text>\nList Comprehensions\n\
    List comprehensions provide a concise way to create lists. \nThey are compact\
    \ and Pythonic and they make for readable code. \nThey also make the code run\
    \ quicker. The list comprehension below creates a list of even numbers (starting\
    \ at 0), up to 100 in steps of 10. It then adds 4 to each number.\n\n\n</text>\n\
    <cell>\neven_number_list1 = list(range(0,100,10))\neven_number_list2 = [ num +\
    \ 4 for num in even_number_list1 ]\nprint(even_number_list2)\n</cell>\n<text>\n\
    Let's rewrite the code above using list comprehensions:\n\n\n</text>\n<cell>\n\
    even_number_list1 = list(range(0,100,10))\neven_number_list2 = [ num + 4 for num\
    \ in even_number_list1 if num % 2 == 0 ]\nprint(even_number_list2)\n</cell>\n\
    <text>\nNow let's do the same thing with a loop:\n\n\n</text>\n<cell>\neven_number_list1\
    \ = list(range(0,100,10))\neven_number_list2 = []\nfor num in even_number_list1:\n\
    \    if num % 2 == 0:\n        even_number_list2.append(num + 4)\nprint(even_number_list2)\n\
    </cell>\n<text>\nLet's use a list comprehension to create a nested list. We want\
    \ the first element of each item in the outer list to be a list containing the\
    \ first 10 odd numbers and the second element to be a list containing the first\
    \ 10 even numbers. Each list will contain 10 elements.\n\n\n</text>\n<cell>\n\
    even_number_list = [ [ num for num in range(0,100,10) if (num % 2 == 0 and num\
    \ > 0) ] for num in range (0,100,10) ]\nprint(even_number_list)\n</cell>\n<text>\n\
    Here's another approach, using a nested for loop, which makes it clear that we\
    \ are looping over two variables and creating nested lists:\n\n\n</text>\n<cell>\n\
    even_number_list1 = list(range(0,100,10))\neven_number_list2 = []\nfor num in\
    \ even_number_list1:\n    even_number_list2.append([])\n    for x in range(0,100,10):\n\
    \        if num % 2 == 0 and num > x:\n            even_number_list2[-1].append(num\
    \ + x)\nprint(even_number_list2)\n</cell>\n<text>\nList comprehensions can be\
    \ used to create ", "    return sum(square_of_the_number(x) for x in lst if x\
    \ % 2 == 1)\n", "    if len(lst) == 0:\n        return 0\n\n    sum_of_squares:\
    \ int = 0\n\n    for element in lst:\n        if element < 0:\n            continue\n\
    \        if element % 2 == 0:\n            sum_of_squares += element * element\n\
    \        else:\n            sum_of_squares += element\n\n    return sum_of_squares\n",
  "    \n    total = 0\n    for num in lst:\n        if num < 0:\n            continue\n\
    \        if num % 2 == 0:\n            total += num * num\n    return total\n",
  "    return sum(a for a in lst if a % 2 != 0)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
