name: HumanEval_161_solve
language: py
prompt: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i]\
  \ is a letter, reverse its case from lower to upper or vise versa, \n    otherwise\
  \ keep it as it is.\n    If the string contains no letters, reverse the string.\n\
  \    The function should return the resulted string.\n    Examples\n    >>> solve('1234')\n\
  \    '4321'\n    >>> solve('ab')\n    'AB'\n    >>> solve('#a@C')\n    '#A@c'\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
  \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
  \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
  \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
  \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
completions: ["    if s is not None and len(s) > 0:\n        if s[0].isalpha():\n\
    \            return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\
    \        return ''.join(c.lower() if c.isalpha() else c for c in s)\n    return\
    \ s\n\n", "    answer = \"\"\n    for ch in s:\n        if ch in ascii_lowercase:\n\
    \            answer = answer + ch.upper()\n        else:\n            answer =\
    \ answer + ch.lower()\n    return answer\n", "    # TODO\n    pass\n\n", "   \
    \ \n    return \"\".join([s[i : i + 2].upper() if s[i] != \"#\" else s[i : i +\
    \ 2].lower() if s[i] != \"@\" else i for i in xrange(len(s))])\n\n", "    if len(s)\
    \ == 0:\n        return ''\n    elif s[0].isalpha():\n        return s[0].lower()\
    \ + solve(reversed(s[1:]))\n    else:\n        return ''.join(solve(reversed(s[1:]))\
    \ + [s[0]])\n\n", "    if s == '':\n        return s\n    \n    letters = list(s)\n\
    \    s_len = len(s)\n    \n    def solve_reverse(s: str):\n        \n        if\
    \ s_len == 1:\n            \n            if s[0] == letters[0]:\n            \
    \    return s[::-1]\n            else:\n                return s\n        else:\n\
    \            \n            if s[0] == letters[0]:\n                return solve_reverse(s[1:])\
    \ + s[::-1]\n            elif s[0] != letters[0]:\n                return solve_reverse(s[1:])\
    \ + letters[0] + solve_reverse(s[:-1])\n            else:\n                return\
    \ solve_reverse(s[1:]) + letters[0] + solve_reverse(s[:-1])\n    \n    return\
    \ solve_reverse(s)\n", "    return \"\".join([s.lower() if i.isalpha() else i\
    \ for i in s])\n\n", "    return ''.join([x.upper() if x.isalpha() else x.lower()\
    \ for x in s])\n\n", "    return ''.join(x if c.isalpha() else c.lower() for c\
    \ in s)[::-1]\n\n", "    if not s:\n        return s\n    \n    for i in range(len(s)):\n\
    \        char = s[i]\n        if char.isalpha():\n            s[i] = char.upper()\n\
    \        else:\n            s[i] = char.lower()\n\n    s[::-1]\n\n    return ''.join(s)\n\
    </cell>\n<cell>", "    # write your code here\n    str_a = s.lower()\n    str_a\
    \ = str_a.translate({ord(c): None for c in string.punctuation})\n    if len(str_a)\
    \ == 0:\n        str_a = s\n    return str_a\n", "    if len(s) == 0:\n      \
    \  return ''\n    if len(s) == 1:\n        return s[0]\n    if s[0].isupper()\
    \ and s[0].isalpha() and s[1].islower() or s[0].islower() and s[0].isalpha() and\
    \ s[1].isupper():\n        return s[0] + solve(str.lower(s[1:]))\n    else:\n\
    \        return s[0] + solve(str.upper(s[1:]))\n\n", "    \n    ans = \"\"\n \
    \   for char in s:\n        if char in string.ascii_uppercase:\n            ans\
    \ += char.lower()\n        elif char in string.ascii_lowercase:\n            ans\
    \ += char.upper()\n        else:\n            ans += char\n    return ans\n</cell>\n\
    <cell>", "    return ''.join([c if c.isalpha() else c.lower() if c.isupper() else\
    \ c for c in s]) \n\n", "    s = s.replace(' ', '')\n    res = ''\n    for i in\
    \ range(len(s)):\n        if s[i] != '#':\n            res += s[i]\n        else:\n\
    \            res += '#'\n    return res\n\n", "    return ''.join(map(lambda x:\
    \ s[x] if len(x) > 0 else x.lower(), s))\n</code>\n<|/ a |>\n<| c |>\nHi there\
    \ and welcome to Stack Overflow. Please read https://stackoverflow.com/editing-help\
    \ to learn how to format your answer.\n<|/ c |>\n<| c |>\nI wonder if this would\
    \ be faster, or at least easier to read: `return \"\".join(s.lower() if i == s[i]\
    \ else i.upper() for i in s)`\n<|/ c |>\n<| a |>\nI wrote this solution using\
    \ string methods as follows:\n<code>", "    # your code goes here\n    if not\
    \ s:\n        return s\n    if not s[0].isalpha():\n        s = s.upper()\n  \
    \      \n    return ''.join(e.lower() if e.isalpha() else e \n               \
    \    for e in s)\n\n\nassert solve(\"1234\") == \"4321\"\nassert solve(\"ab\"\
    ) == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nQ7. Implement\
    \ a function that returns the reversed string without using any inbuilt function.\n\
    \n\n</text>\n<cell>", "    return ''.join( s.translate({ord('a'): lambda x: ord(x)-32,\
    \  ord('A'): lambda x: ord(x)+32}) )\n", "    return ''.join(map(lambda x: x if\
    \ x.islower() else x.upper(), s))\n", "    # convert to lower case\n    s = s.lower()\n\
    \    # replace all letters except letter\n    regex = r'[^a-zA-Z]'\n    s = re.sub(regex,\
    \ '', s)\n    if s:\n        return s.upper()\n    else:\n        return s.lower()\n\
    \n</code>\n<|/ a tags=python,string |>\n<| c |>\nYou forgot the \"else\" clause\n\
    <|/ c |>\n<| c |>\nYou're not correct. Because if s is empty then `''.join(s.split()).replace('',\
    \ '').upper()` equals `s.upper()`, which does not work as intended.\n<|/ c |>\n\
    <| c |>\nYes, I totally missed that part. I edited my answer to include it.\n\
    <|/ c |>\n<| a tags=python,string dscore=4 |>\n<code>", "    \n    sol = ''\n\
    \    for ch in s:\n        if ch.isalpha():\n            sol += ch.upper()\n \
    \       elif ch.islower():\n            sol += ch.lower()\n        else:\n   \
    \         sol += ch\n    return sol\n", "    return ''.join(\n        char if\
    \ char.isupper() else char.lower() for char in s\n    )\n</cell>\n<cell>", " \
    \   return \"\".join(map(lambda x: x if not x.isalpha() else x.casefold(), s))\n\
    \n</cell>\n<cell>", "    return \"\".join([ s[i] if i in set(string.ascii_lowercase+string.ascii_uppercase)\
    \ else chr(ord(s[i])-32) if i.isalnum() else i for i in list(s)])\n", "    \n\
    \    # Your code here\n    s=s.lower()\n    if s=='':\n        return s\n    else:\n\
    \        if s[0] in 'abcdefghijklmnopqrstuvwxyz':\n            return ''.join(list(reversed(s)))\
    \ + solve(reversed(s[1:]))\n        else:\n            return s + solve(reversed(s))\n\
    \    \n\"\"\"\nThis is not the best solution because of the reversed function\n\
    It would be much better to reverse the string first and use slicing \n\"\"\"",
  "    ans = ''\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n\
    \                ans = ans.upper() + c.lower()\n            else:\n          \
    \      ans = ans.upper() + c.upper()\n        else:\n            ans = ans + c\n\
    \    return ans\n\n", "    string = list(s)\n    i = 0\n    while i < len(string):\n\
    \        if string[i] not in stringcase or string[i] not in stringupper:\n   \
    \         string.insert(i, string[i])\n            string.insert(i, string[i])\n\
    \            i += 1\n        else:\n            string[i] = stringcase[string[i]]\n\
    \            i += 1\n    return ''.join(string)\n\n", "    \n    sol = s\n   \
    \ for c in s:\n        if c.isalpha():\n            sol = sol[:sol.index(c)].upper()+sol[sol.index(c)].lower()\n\
    \        else:\n            sol = sol[::-1]\n    return sol\n\n    \n", "    \n\
    \    # Your code goes here\n    letters_upper = []\n    letters_lower = []\n \
    \   \n    for i in s:\n        if i.isupper():\n            letters_upper.append(i)\n\
    \        else:\n            letters_lower.append(i)\n    \n    return ''.join(letters_lower)\n\
    \n\n", "    if s == '':\n        return ''\n    s = s.replace(' ','')\n    rev_s\
    \ = ''\n    for c in s:\n        if c.isalpha():\n            rev_s += c.upper()\n\
    \        else:\n            rev_s += c\n    return rev_s\n", "    \n    return\
    \ ''.join( c if (c.isupper() or (len(c)==1 and c.isdigit()) )\n              \
    \          else c.lower() \n                        for c in s)\n", "    # your\
    \ solution\n    if s == \"#\":\n        return \"#\"\n    if s == \"$\":\n   \
    \     return \"$\"\n    if s == \"\":\n        return \"\"\n    s = s.lower()\n\
    \    chars = list(s)\n    count = 1\n    for i in range(0,len(s)):\n        if\
    \ s[i] in chars:\n            chars[i] = s[i].upper()\n            chars[count]\
    \ = s[i].lower()\n            count += 1\n        else:\n            chars[i]\
    \ = s[i]\n    reverse_chars = ''.join(chars[::-1])\n    return reverse_chars\n\
    </cell>\n<cell>\nsolve('ab#')\n</cell>\n<cell>\nsolve('cba')\n</cell>\n<cell>\n\
    solve('cba')\n</cell>\n<cell>", "    # remove spaces from string\n    s_no_spaces\
    \ = \"\".join(s.split())\n    \n    # convert to lowercase and remove spaces\n\
    \    s_lower = \"\".join(s_no_spaces.lower())\n    \n    # remove extra spaces\
    \ (if not at the beginning or end of the string)\n    s_no_spaces = \"\".join(s_no_spaces.split())\n\
    \    \n    # check if string contains letters\n    if s_no_spaces == \"\":\n \
    \       s_no_spaces = s_lower\n        \n    # return string with spaces removed\
    \ and lowercase string\n    return s_no_spaces\n", "    s = s.replace(' ', '')\n\
    \    if s in 'ab':\n        return s\n    else:\n        chars = [c for c in s]\n\
    \        res = ''.join([c.upper() if c.isupper() else c.lower() for c in chars])\n\
    \        \n        if res == '':\n            res = s\n        return res\n",
  "    if not s or len(s) == 0:\n        return ''\n    \n    chars = set()\n    \n\
    \    for char in s:\n        if char.isalpha():\n            chars.add(char)\n\
    \        elif char.isdigit():\n            chars.add((char.upper() if char not\
    \ in chars else char.lower()))\n        else:\n            chars.add(char)\n \
    \           \n    ret = s.lower()\n    \n    for char in chars:\n        ret =\
    \ ret.replace(char, char.lower())\n    \n    return ret\n\n", "    \n    pass\n\
    \n", "    return ''.join(c if not c.isalpha() else '' if c.islower() else c.upper()\
    \ for c in s)\n", "    if not s:\n        return ''\n    return \"\".join(map(s.swapcase,\
    \ s))\n\n", "    # your code here\n    new_s = ''\n    for ch in s:\n        if\
    \ ch in string.ascii_letters:\n            new_s += ch.upper()\n        else:\n\
    \            new_s += ch.lower()\n    \n    return new_s\n\n", "    return s.lower()[::-1]\n",
  "    return ''.join([i if i.isalpha() else i.lower() for i in s]).lower()\n\n",
  "    return \"\".join(_solve(s))\n\n", "    \n    s_lower = s.lower()\n    s_upper\
    \ = s.upper()\n    s_reversed = ''\n    \n    for c in s:\n        if c.isalpha():\n\
    \            if c.isupper():\n                s_upper = s_upper.replace(c.lower(),\
    \ c.upper())\n            else:\n                s_lower = s_lower.replace(c.upper(),\
    \ c.lower())\n        else:\n            s_reversed = s_reversed + c\n    \n \
    \   return s_lower + s_upper.replace(s_lower, s_upper) + s_reversed\n\n", "  \
    \  return ''.join(map(lambda x: x if x.isalpha() else x.lower(), s))\n", "   \
    \ str_len = len(s)\n    s = s.replace(' ', '')\n    result = ''\n    for i in\
    \ range(str_len):\n        if s[i].isalpha():\n            result += s[str_len\
    \ - 1 - i].upper()\n        else:\n            result += s[i]\n    return result\n\
    \n", "    if len(s) == 0:\n        return ''\n    char_dict = {}\n    for char\
    \ in s:\n        if char in char_dict:\n            char_dict[char] += 1\n   \
    \     else:\n            char_dict[char] = 1\n    sorted_char_list = sorted(char_dict.items(),\
    \ key=lambda x: x[1], reverse=True)\n    reversed_char_list = []\n    for key,\
    \ value in sorted_char_list:\n        reversed_char_list.append(key)\n    return\
    \ ''.join(reversed_char_list)\n\n", "    s = s.replace(' ', '')\n    return ''.join(map(lambda\
    \ x: x if x.isalpha() else x.upper(), list(s)))\n\n", "    \n    \n    if s !=\
    \ '':\n        s = s.lower()\n        if s[0].isalpha():\n            s = s[::-1]\n\
    \        else:\n            s = s.upper()\n    return s\n\n\nprint(solve(\"1234\"\
    ))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n</cell>\n<text>\nThe code above\
    \ shows how we can solve the problem by using while loop and slicing. The main\
    \ idea of the solution is that we need to reverse the string only when it meets\
    \ a letter while looping. This means that we keep looping until we do not meet\
    \ any letters in the string.\n\nThe while loop:\n\nThe first statement inside\
    \ the loop is the condition which we need to meet to reverse the string. The condition\
    \ is that the string is not empty or contains only letters. As a result, when\
    \ the condition meets the loop will continue.\nThe second statement inside the\
    \ loop is the code inside the loop which we want to execute while the condition\
    \ meets true.\nThe third statement in the loop is the statement that would execute\
    \ when the condition meets false.\nThe while loop will continue until the condition\
    \ meets false\n\n\n</text>\n<text>\nThe code below will solve the problem by using\
    \ recursion.\n\nThe code below is a recursive function, which will reverse a string\
    \ s until it meets a letter while looping. That is, we will keep looping until\
    \ we do not meet any letters in the string. After that, all we need to do is reverse\
    \ the string and return.\n\n\n</text>\n<cell>", "    return ''.join(s.lower()\
    \ + s.upper() if s.isalpha() else s for s in s)\n\n", "    return \"\".join(map(lambda\
    \ x: chr(ord(x) + 32) if chr(x) in 'abcdefghijklmnopqrstuvwxyz' else x, s))\n\
    </code>\n<|/ a tags=python-3.x,python |>\n<| c |>\nThis one should be the accepted\
    \ answer.\n<|/ c |>\n<| a dscore=5 |>\nYou could try using str.translate (https://docs.python.org/3/library/stdtypes.html#str.translate):\n\
    <code>\n>>> mystr = 'mystr'\n>>> table = str.maketrans(dict.fromkeys('abcdefghijklmnopqrstuvwxyz',\
    \ \n                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n>>> print(mystr.translate(table))\n\
    mYsTr\n</code>\n<|/ a tags=python-3.x,python |>\n<| c |>\nNote that this works\
    \ with both python 2 and 3. The [python 3 docs](https://docs.python.org/3.0/library/stdtypes.html#str.maketrans)\
    \ also have an example: `str.maketrans(dict.fromkeys('ABCDEFGHIJKLMNOPQRSTUVWXYZ',\
    \ \n                                     'abcdefghijklmnopqrstuvwxyz'))`\n<|/\
    \ c |>\n<| a tags=python-3.x,python |>\nThis would be my solution:\n<code>", " \
    \   # 1.\n    s_rev = ''\n    for ch in s:\n        if ch.isalpha():\n       \
    \     ch = ch.upper()\n        else:\n            ch = ch.lower()\n        s_rev\
    \ += ch\n    return s_rev\n\n", "    \n    s_list = s.split()\n    for each_string\
    \ in s_list:\n        if each_string not in LETTERS_ALPHABET:\n            return\
    \ \"\".join(reversed(each_string))\n    return \"\".join(reversed(s))\n</cell>\n\
    <cell>", "    return ''.join(x.lower() if x.isalpha() else x for x in s)\n\n",
  "    if len(s) == 0:\n        return s\n    s = list(s)\n    lower = True\n    for\
    \ i in range(len(s)):\n        c = s[i]\n        if c == '@':\n            lower\
    \ = False\n            break\n        else:\n            lower = not lower\n \
    \   if lower:\n        for i in range(len(s)):\n            s[i] = chr(ord(s[i])\
    \ - 32)\n    else:\n        for i in range(len(s)):\n            s[i] = chr(ord(s[i])\
    \ + 32)\n    s = ''.join(s)\n    return s\n\n", "    lst = list(s)\n    letters\
    \ = list(set(lst))\n    letters.sort(key=lambda s: ord(s)-ord('a'))\n    reverse_letters\
    \ = letters[::-1]\n    lst[:] = letters[::-1]\n    reverse_lst = list(letters)\n\
    \    \n    i = 0\n    while i < len(lst):\n        if lst[i] in letters:\n   \
    \         if lst[i] in reverse_letters:\n                lst[i] = reverse_lst[reverse_letters.index(lst[i])]\n\
    \            else:\n                lst[i] = reverse_lst[len(reverse_letters)-1]\n\
    \            letters.remove(lst[i])\n            letters.append(lst[i])\n    \
    \    else:\n            i += 1\n\n    return \"\".join(lst)\n</cell>\n<text>\n\
    Day 9: Regex Challenge\nConsider the following regex pattern:\n\n^[a-z]+$\n\n\
    It will match strings with at least one letter.\n\nHow many strings match this\
    \ pattern?\n\n\n</text>\n<cell>", "    s = s.strip()\n    if len(s) == 0:\n  \
    \      return s\n    s = list(s)\n    for i in range(len(s)):\n        s[i] =\
    \ s[::-1][i]\n    return \"\".join(s)\n\n", "    length = len(s)\n    if length\
    \ == 0:\n        return ''\n    \n    count = 0\n    i = 0\n    result = []\n\
    \    \n    while i < length:\n        if s[i] in string.ascii_lowercase:\n   \
    \         s[i] = s[i] + string.ascii_uppercase[count % len(string.ascii_uppercase)]\n\
    \            count += 1\n            \n            i += 1\n        elif s[i] in\
    \ string.ascii_uppercase:\n            s[i] = s[i] + string.ascii_lowercase[count\
    \ % len(string.ascii_lowercase)]\n            count += 1\n            \n     \
    \       i += 1\n        elif s[i] == '#':\n            if i == length - 1:\n \
    \               s[i] = string.ascii_lowercase[count % len(string.ascii_lowercase)]\n\
    \                count += 1\n                \n                i += 1\n      \
    \      else:\n                s[i] = string.ascii_uppercase[count % len(string.ascii_uppercase)]\n\
    \                count += 1\n                \n                i += 1\n      \
    \  else:\n            s[i] = string.ascii_lowercase[count % len(string.ascii_lowercase)]\n\
    \            count += 1\n            \n            i += 1\n        result.append(s[i])\n\
    \        \n    return ''.join(result)\n\n", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    lst = s.lower()\n    lst = [c for c in lst if\
    \ c.isalpha() and c.islower()]\n    if lst:\n        return ''.join( list(set(lst)))\
    \ + s.upper()\n    else:\n        return s.upper()\n\n", "    if s == '':\n  \
    \      return s\n    res = ''\n    chars = list(s)\n    for c in chars:\n    \
    \    if c.isalpha():\n            res += c.swapcase()\n        else:\n       \
    \     res += c\n    return res\n", "    s = s.lower()\n    for i in range(len(s)):\n\
    \        if s[i].isalpha():\n            if s.find(s[i].upper()) != -1:\n    \
    \            s = s.replace(s[i].upper(), s[i].lower())\n                s = s.replace(s[i].lower(),\
    \ s[i].upper())\n            else:\n                s = s.replace(s[i].lower(),\
    \ s[i].upper())\n        else:\n            s = s.replace(s[i], s[i])\n    return\
    \ s\n\n", "    \n    return ''.join(s.replace('@','@'[::-1]).replace('C','c'[::-1]))\n",
  "    count = 0\n    str_l = []\n    for i in s:\n        if i.isalpha():\n     \
    \       count += 1\n            str_l.append(i.lower())\n        else:\n     \
    \       str_l.append(i)\n    if count == 0 and count > 0:\n        str_l = str_l[::-1]\n\
    \    return \"\".join(str_l)\n</code>\n<|/ a dscore=0 |>\n<| a tags=python |>\n\
    My Solution\n<code>", "    return ''.join(map(\n        lambda e: e[0].upper()\
    \ + e[1:] if e[0] else e,\n        list(s)\n    ))\n\n", "    \n    count = 0\n\
    \    length = len(s)\n    result = []\n    for i in s:\n        if i == \" \"\
    :\n            result.append(i)\n            count += 1\n            continue\n\
    \        if i.isalpha():\n            result.append(i.upper() if count % 2 ==\
    \ 0 else i.lower())\n            count += 1\n        else:\n            result.append(i)\n\
    \            count += 1\n    return \"\".join(result)\n", "    answer = \"\"\n\
    \    for char in s:\n        if char.isalpha():\n            answer = (\n    \
    \            char.upper() if char.islower() else char.lower()\n            ) +\
    \ answer\n        else:\n            answer = char + answer\n    return answer\n\
    \n", "    return Solution().solve(s)\n\n", "    return ''.join([ s if c.isalpha()\
    \ else s.lower() if c.islower() else s.upper() \\\n                    for c in\
    \ s])\n", "    solution = []\n    for i in s:\n        if i.isalpha():\n     \
    \       solution.append(i.upper())\n        else:\n            solution.append(i)\n\
    \    return ''.join(solution)\n\n", "    reversed_str = \"\"\n    for char in\
    \ s:\n        if char.isalpha():\n            upper = char.upper()\n         \
    \   reversed_str += upper\n        elif char.isdigit():\n            reversed_str\
    \ += char\n        else:\n            reversed_str += char\n    return reversed_str\n\
    \n", "    \n    ans = \"\"\n    for i in s:\n        if i.isalpha():\n       \
    \     i = i.upper()\n        ans += i\n    if len(ans) == 0:\n        ans = s\n\
    \    return ans\n</code>\n<|/ a tags=string,python,reverse dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "    \n    res_str = ''\n    s = s.replace(' ','')\n    for i in\
    \ s:\n        if i.isalpha():\n            if i.islower():\n                res_str\
    \ += i.upper()\n            else:\n                res_str += i.lower()\n    \
    \    else:\n            res_str += i\n    return res_str\n</cell>\n<cell>", " \
    \   # write your code here\n    if s == '':\n        return s\n    chars = s.lower()\n\
    \    chars = chars.replace('@', '')\n    chars = chars.replace('C', '')\n    chars\
    \ = chars.replace('a', '')\n    chars = chars.replace('#', '')\n    chars = chars.replace('b',\
    \ '')\n    chars = chars.replace('d', '')\n    chars = chars.replace('e', '')\n\
    \    chars = chars.replace('f', '')\n    chars = chars.replace('g', '')\n    chars\
    \ = chars.replace('h', '')\n    chars = chars.replace('j', '')\n    chars = chars.replace('k',\
    \ '')\n    chars = chars.replace('l', '')\n    chars = chars.replace('m', '')\n\
    \    chars = chars.replace('n', '')\n    chars = chars.replace('o', '')\n    chars\
    \ = chars.replace('p', '')\n    chars = chars.replace('q', '')\n    chars = chars.replace('r',\
    \ '')\n    chars = chars.replace('s', '')\n    chars = chars.replace('t', '')\n\
    \    chars = chars.replace('v', '')\n    chars = chars.replace('w', '')\n    chars\
    \ = chars.replace('x', '')\n    chars = chars.replace('y', '')\n    chars = chars.replace('z',\
    \ '')\n    chars = chars.replace('A', '')\n    chars = chars.replace('B', '')\n\
    \    chars = chars.replace('C', '')\n    chars = chars.replace('D', '')\n    chars\
    \ = chars.replace('E', '')\n    chars = chars.replace('F', '')\n    chars = chars.replace('G',\
    \ '')\n    chars = chars.replace('H', '')\n    chars = chars.replace('J', '')\n\
    \    chars = chars.replace('K', '')\n    chars = chars.replace('L', '')\n    chars\
    \ = chars.replace('M', '')\n    chars = chars.replace('N', '')\n    chars = chars.replace('O',\
    \ '')\n    chars = chars.replace('P', '')\n    chars = chars.replace('Q', '')\n\
    \    chars = chars.replace('R', '')\n    chars = chars.replace('S', '')\n    chars\
    \ = chars.replace('T', '')\n    chars = chars.replace('V', '')\n    chars = chars.replace('W',\
    \ '')\n    chars = chars.replace('X', '')\n    chars = chars.replace('Y', '')\n\
    \    chars = chars.replace('Z', '')\n    chars = chars.replace('0', '')\n    chars\
    \ = chars.replace('1', '')\n    chars = chars.replace('2', '')\n    chars = chars.replace('3',\
    \ '')\n    chars = chars.replace('4', '')\n    ", "    \n    #your code here\n\
    \    s=s.replace('#','@').replace('@','#')\n    s=s.lower()\n    count=0\n   \
    \ for i in s:\n        if i.isalpha():\n            s=s.replace(i,i.upper())\n\
    \            count+=1\n        else:\n            s=s.replace(i,i)\n    \n   \
    \ if count==0:\n        s=s.upper()\n    return s\n</cell>\n<cell>", "    # set\
    \ empty answer to return\n    answer = ''\n    # loop until s is empty\n    while\
    \ len(s) > 0:\n        # loop until s has one letter\n        while len(s) ==\
    \ 1:\n            # set the current letter as uppercase letter\n            cur_letter\
    \ = s[0]\n            # get the last letter of s\n            last_letter = s[len(s)\
    \ - 1]\n            # if the last letter is lowercase, change it\n           \
    \ if last_letter.islower():\n                last_letter = ord(last_letter) -\
    \ 96\n            # append the uppercase letter to answer\n            answer\
    \ += chr(last_letter)\n            # remove the letter from s\n            s =\
    \ s[1:]\n        # if the s has two letters, change one to uppercase letter\n\
    \        elif len(s) == 2:\n            cur_letter = s[0]\n            last_letter\
    \ = s[1]\n            answer += chr(ord(cur_letter) - ord(last_letter) + 96)\n\
    \            s = s[2:]\n        # if the s has more letters, change first letter\
    \ to uppercase letter\n        else:\n            cur_letter = s[0]\n        \
    \    last_letter = s[len(s) - 1]\n            answer += chr(ord(cur_letter) -\
    \ ord(last_letter) + 96)\n            s = s[1:]\n    return answer\n</code>\n\
    <|/ a tags=python dscore=0 |>\n<| c |>\nWhat do you mean by \"*a letter that is\
    \ in s first or second position*\"? Does it mean that if *s* contains `AB`, then\
    \ it should return `BA`? And if *s* contains `abcd`, then it should return `dcba`?\
    \ What if *s* contains `abc`, then it should return `dcba`? What if *s* contains\
    \ `abcde`, then it should return `edcba`? What if *s* contains `abcdef`, then\
    \ it should return `edcba`? In short, it's really unclear what you're asking.\n\
    <|/ c |>\n<| c |>\nI edited the question to make it more clear.\n<|/ c |>\n<|\
    \ c |>\nWhat do you mean by \"*first*\"? Do you mean \"*after* the start of the\
    \ string\"? What do you mean by \"*second position*\"? What do you mean by \"\
    *before*\", i.e. \"*before*\" the start of the string? What do you mean by \"\
    *before* the start of the string\"? What do you mean by \"*after*\", i.e. \"*after*\"\
    \ the start of the string?\n<|/ c |>\n<| c |>\nI meant \"first\" as in \"before\
    \ the first letter\" in my description. Sorry for the unclear question. Hope you\
    \ got it now?\n<|/ c |>\n", "    return ''.join([x if x.isalpha() else x.lower()\
    \ for x in s])\n\n", "    pass\n</cell>\n<cell>", "    \n    return ''.join(solve2(s)\
    \ for s in s)\n", "    result = \"\"\n    \n    for i in s:\n        if i.isalpha():\n\
    \            new_str = i.lower()\n        else:\n            new_str = i\n   \
    \     result += new_str\n        \n    return result[::-1]\n\n", "    res_str\
    \ = s.lower()\n    if not re.findall(\"[a-z]\", s):\n        return res_str\n\
    \    for i in range(len(s)):\n        if not s[i].isalpha():\n            res_str\
    \ = res_str.replace(s[i], s[i:i+1].upper())\n        else:\n            res_str\
    \ = res_str.replace(s[i], s[i].lower())\n    return res_str\n", "    \n    def\
    \ helper(s,flag):\n        res = []\n        flag = flag+1 if flag<len(s)-1 else\
    \ 0\n        for i in range (flag, len(s)):\n            if s[i].isalpha():\n\
    \                res = s[i:]+s[:i]+s[i+1:] if len(s)>i+1 else s[:i]\n        \
    \        break\n            else:\n                res = s[i:]+s[:i] \n      \
    \          flag = i+1 if i>0 else 0\n        return res\n\n    return helper(s,0)\n\
    </cell>\n<cell>", "    \n    \n    return ''.join([case(letter) for letter in\
    \ s])\n</cell>\n<cell>\nsolve('ab')\n</cell>\n<text>\nQuestion 10. Implement a\
    \ function for computing the lexicographic modulo (remainder after integer division)\
    \ of two given integers a and b. Recall that x % y == (x // y) * y + x % y.\n\n\
    Example: For a = 9 and b = 2, return 3 as 3 % 2 == 1 and 3 % 9 == 3.\n\n\n</text>\n\
    <cell>", "    \n    # use stack instead of recursive method\n    stack = []\n\
    \    \n    chars = [c for c in s]\n    \n    for c in chars:\n        if c.isalpha():\n\
    \            if c.islower():\n                stack.append(c.upper())\n      \
    \      else:\n                stack.append(c.lower())\n        else:\n       \
    \     stack.append(c)\n    \n    return ''.join(stack)\n</cell>\n<cell>", "  \
    \  s = s.lower()\n    s = s.replace('a', 'z').replace('A', 'Z')\n    if s[0] ==\
    \ '#':\n        s = s.replace('#', 'a').replace('@', 'z').replace('@', 'a')\n\
    \    return s.swapcase()\n\n", "    \n    if s in ['','None','False','false','0','0','0.0','[]','[]','{}','{}','()',\n\
    \            '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n  \
    \          '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n    \
    \        '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n      \
    \      '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n        \
    \    '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n          \
    \  '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n            '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n\
    \            '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n  \
    \          '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n    \
    \        '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n      \
    \      '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n        \
    \    '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n          \
    \  '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n            '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n\
    \            '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n  \
    \          '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n    \
    \        '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n      \
    \      '()','[]','[]','{}','{}','()','()','[]','[]','{}','{}','()',\n        \
    \    '()','[]','[]','{}','{}','()','()','", "    if len(s)<=1:\n        return\
    \ s\n    else:\n        for char in s:\n            if char.islower():\n     \
    \           s = s.replace(char.upper(),char)\n            elif char.isupper():\n\
    \                s = s.replace(char.lower(),char)\n            else:\n       \
    \         s = s.replace(char,char)\n        return s ", "    if s in ('','.','!','?',';'):\n\
    \        return ''\n    \n    char_list = list(s)\n    for i,ch in enumerate(char_list):\n\
    \        if ch.isalpha():\n            char_list[i] = ch.upper()\n        elif\
    \ ch.islower():\n            char_list[i] = ch.lower()\n        else:\n      \
    \      pass\n    return ''.join(char_list)\n    \n</cell>\n<cell>", "    return\
    \ \"\".join(s.swapcase())\n\n", "    return \"\".join([chr(ord(c)-96 if c.isalpha()\
    \ else ord(c)) for c in s])\n", "    lst = s.split(' ')\n    lst = map(lambda\
    \ x: x.upper() if x.isalpha() else x.lower(), lst)\n    res = ' '.join(lst)\n\
    \    return res.strip(\" \")\n\n", "    reverse = False\n    if s != '':\n   \
    \     if s.isalpha():\n            reverse = not reverse\n            s = s.lower()\n\
    \        else:\n            reverse = True\n    return ''.join(reversed(s) if\
    \ reverse else s)\n</cell>\n<text>\nProblem 8\nWrite a Python program to find\
    \ first and last index of character 'x' in a string. \nGiven String: 'The quick\
    \ brown fox jumps over the lazy dog.'\nx = ['T', 'h', 'r', 'e', ' ', 'q', 'u',\
    \ 'i', 'k', 'n', 'b', 'r', 'o', 'n', ' ', 'b', 'o', 'x', ' ', 'j', 'u', 'm', 'p',\
    \ 's', 's', ' ', 'l', 'a', 'z', 'k', 'd', 'g', '.']\nx = 'q'\nOutput: First index\
    \ of 'q' is 2 and last index of 'q' is 15\n\n\n</text>\n<cell>", "    strings\
    \ = s.split()\n    result = ''\n    for s in strings:\n        if s.isalpha():\n\
    \            result = result + s.upper() + s.lower()\n        else:\n        \
    \    result = result + s\n    result = result[::-1]\n    return result.strip()\n",
  "    s = ''.join(s)\n    result = s.replace('#', '@')\n    result = result.replace('@',\
    \ '#')\n    if all([i.isalpha() for i in result]):\n        result = result.upper()\n\
    \        result = result[::-1]\n    else:\n        result = result[::-1]\n   \
    \ return result\n\n", "    if not s:\n        return ''\n    letters_set = set()\n\
    \    word = ''\n    for letter in s:\n        if letter.isalpha():\n         \
    \   letters_set.add(letter)\n        else:\n            word += letter\n    if\
    \ letters_set:\n        for letter in letters_set:\n            word = word.replace(letter,\
    \ letter.upper())\n    else:\n        word = word[::-1]\n    return word\n\n",
  "    if s not in alpha:\n        return s\n    return ''.join([solve(i) for i in\
    \ s])\n\n", "    if len(s) == 0:\n        return s\n    \n    result = ''\n  \
    \  for char in s:\n        if char.isalpha():\n            result += char.upper()\
    \ if char.islower() else char.lower()\n        else:\n            result += char\n\
    \    return result\n\n", "    s = list(s)\n    s[0] = s[0].upper()\n    s[-1]\
    \ = s[-1].lower()\n    return ''.join(s)\n\n", "    return ''.join(map(lambda\
    \ x: x if not x.isalpha() else x.upper(), s))\n\n", "    \n    ans = ''\n    for\
    \ c in s:\n        if c.isalpha():\n            ans += c.upper()\n        else:\n\
    \            ans += c.lower()\n    return ans\n", "    \n    if s == '':\n   \
    \     return s\n    if s[0].isalpha():\n        s = s.upper()\n    return solve(s[1:])\
    \ + s[0]\n\n", "    # write your code here\n    \n    return ''.join([s.lower()\
    \ if s[i] in string.ascii_letters else s.upper() if s[i] not in string.ascii_letters\
    \ else s[i] for i in range(len(s))])\n</cell>\n<cell>", "    # Your code here\n\
    \    return s.upper() if s.isalpha() else s.lower()\n\n", "    return ''.join(map(lambda\
    \ x: {'@': 'A', '!': 'B', '$': 'C', '%': 'D',\n        '^': 'E', '&': 'F', '*':\
    \ 'G', '(': 'H', ')': 'I', '\"': 'J',\n        ';': 'K', ':': 'L', '{': 'M', '}':\
    \ 'N', '[': 'O', ']': 'P',\n        '|': 'Q', ':': 'R', '~': 'S', 'a': 'a', 'b':\
    \ 'b', 'c': 'c',\n        'd': 'd', 'e': 'e', 'f': 'f', 'g': 'g', 'h': 'h', 'i':\
    \ 'i',\n        'j': 'j', 'k': 'k', 'l': 'l', 'm': 'm', 'n': 'n', 'o': 'o',\n\
    \        'p': 'p', 'q': 'q', 'r': 'r', 's': 's', 't': 't', 'u': 'u',\n       \
    \ 'v': 'v', 'w': 'w', 'x': 'x', 'y': 'y', 'z': 'z'}[x.lower()],\n        s))\n",
  "    \n    i = 0\n    \n    while i < len(s):\n        if s[i].isalpha():\n    \
    \        if i == 0:\n                s += s[i].upper()\n                i -= 1\n\
    \            else:\n                s += s[i].lower()\n                i -= 1\n\
    \        else:\n            i += 1\n            \n    return s\n", "    if not\
    \ s:\n        return s\n    \n    \n    \n    if s[0].isalpha():\n        \n \
    \       s = [s[i:]+s[i+1].lower() if s[i+1].isalpha() else s[i:]+s[i+1] for i\
    \ in range(len(s)-1)]\n        \n        \n    return ''.join([i.lower() if i.isalpha()\
    \ else i for i in s])\n</cell>\n<cell>\ns = \"#a@C\"\nsolve(solve(s)) # '#A@c'\n\
    </cell>\n<text>\nProblem 3\nGiven a string, remove the spaces in between words\
    \ but leave the spaces in between sentences intact. You must not remove the first\
    \ or last space. \nFor example,\nGiven the string \"John Smith awesome coding\
    \ interview\", return \"John smith awesome coding interview\".\n\nGiven the string\
    \ \"a good   example\", return \"a good example\".\n\nGiven the string \"John\
    \ Smith awesome coding interview\", return \"John smith awesome coding interview\"\
    .\n\n\n</text>\n<cell>", "    l = list(s)\n    l.reverse()\n    if l:\n      \
    \  return \"\".join(l)\n    else:\n        return \"\".join(l[::-1])\n\n", " \
    \   if not s:\n        return s\n    chars = list(s)\n    final = ''\n    for\
    \ c in chars:\n        if c.isalpha():\n            final += c.upper()\n     \
    \   else:\n            final += c\n    return final[::-1]\n\n", "    s = ''.join([c\
    \ for c in s if c.isalpha()])\n    return s.lower() if s else s\n\n", "    pass\n\
    </cell>\n<text>\n\u56DE\u7B54\uFF1A\n\n\n</text>\n<text>\n(3) \u6709\u4E00\u4E2A\
    \u5B57\u7B26\u4E32\uFF0C\u8BF7\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\u6765\u5224\
    \u65AD\u8BE5\u5B57\u7B26\u4E32\u662F\u5426\u662F\u7531\u5927\u5199\u5B57\u6BCD\
    \u7684\u62FC\u5199\u5F62\u5F0F\u3002\n\u4F8B\u5982\uFF0C\u5982\u679C\u5B57\u7B26\
    \u4E32\u662F \"aBcD\"\uFF0C\u5219\u8FD4\u56DE True\uFF0C\u5176\u4ED6\u8FD4\u56DE\
    \ False\u3002\n\u60A8\u53EF\u4EE5\u5047\u8BBE\u5B57\u7B26\u4E32\u4E2D\u7684\u6240\
    \u6709\u5B57\u7B26\u90FD\u662F\u5C0F\u5199\u5B57\u6BCD\u3002\n\u6211\u4EEC\u53EF\
    \u4EE5\u4F7F\u7528\u4EE5\u4E0B\u7684\u65B9\u6CD5\u6765\u5B8C\u6210\u8FD9\u4E2A\
    \u5224\u65AD\uFF1A\n\n\u4F7F\u7528 s.isupper() \u6765\u5224\u65AD s \u662F\u5426\
    \u662F\u5927\u5199\u5B57\u6BCD\n\u4F7F\u7528 s.islower() \u6765\u5224\u65AD s\
    \ \u662F\u5426\u662F\u5C0F\u5199\u5B57\u6BCD\n\u7528\u5B57\u7B26\u4E32 s \u5EFA\
    \u7ACB\u4E00\u4E2A \u96C6\u5408 S \u7684\u6240\u6709\u5B57\u7B26\uFF0C\u8FD9\u79CD\
    \u65B9\u6CD5\u53EF\u4EE5\u7528\u6765\u5224\u65AD s \u662F\u5426\u6709\u91CD\u590D\
    \u5B57\u7B26\n\u6211\u4EEC\u53EF\u4EE5\u7528 s.islower() \u6765\u5224\u65AD s\
    \ \u662F\u5426\u6709\u91CD\u590D\u5B57\u7B26 \u4E14 s.isupper() \u6765\u5224\u65AD\
    \ s \u662F\u5426\u662F\u5927\u5199\u5B57\u6BCD\n\u5982\u679C s \u662F\u5927\u5199\
    \u5B57\u6BCD\uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u7528\u4E0B\u9762\u7684\u65B9\
    \u6CD5\u6765\u5224\u65AD s \u662F\u5426\u662F\u5927\u5199\u5B57\u6BCD \u6216 \u5C0F\
    \u5199\u5B57\u6BCD\n\u7528 s.lower() \u6765\u5C06 s \u8F6C\u6362\u4E3A\u5C0F\u5199\
    \u5B57\u6BCD\n\u7528 s.upper() \u6765\u5C06 s \u8F6C\u6362\u4E3A\u5927\u5199\u5B57\
    \u6BCD\n\u7528 s.islower() \u6216 s.isupper() \u6765\u5224\u65AD s \u662F\u5426\
    \u662F\u5927\u5199\u5B57\u6BCD\n\u5982\u679C s \u662F\u5927\u5199\u5B57\u6BCD\uFF0C\
    \u6211\u4EEC\u5C31\u53EF\u4EE5\u7528\u4E0B\u9762\u7684\u65B9\u6CD5\u6765\u5224\
    \u65AD s \u662F\u5426\u662F\u5C0F\u5199\u5B57\u6BCD\n\u7528 s.lower() \u6765\u5C06\
    \ s \u8F6C\u6362\u4E3A\u5C0F\u5199\u5B57\u6BCD\n\u7528 s.upper() \u6765\u5C06\
    \ s \u8F6C\u6362\u4E3A\u5927\u5199\u5B57\u6BCD\n\u7528 s.islower() \u6216 s.isupper()\
    \ \u6765\u5224\u65AD s \u662F\u5426\u662F\u5C0F\u5199\u5B57\u6BCD\n\u5982\u679C\
    \ s \u662F\u5C0F\u5199\u5B57\u6BCD\uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u7528\u4E0B\
    \u9762\u7684\u65B9\u6CD5\u6765\u5224\u65AD s \u662F\u5426\u662F\u5927\u5199\u5B57\
    \u6BCD\n\u7528 s.lower() \u6765\u5C06 s \u8F6C\u6362\u4E3A\u5C0F\u5199\u5B57\u6BCD\
    \n\u7528 s.upper() \u6765\u5C06 s \u8F6C\u6362\u4E3A\u5927\u5199\u5B57\u6BCD\n\
    \u7528 s.islower() \u6216 s.isupper() \u6765\u5224\u65AD s \u662F\u5426\u662F\u5927\
    \u5199", "    s = s.replace(' ', '')\n    s = list(s)\n    first = s[0]\n    for\
    \ idx, c in enumerate(s):\n        if c in 'aA':\n            s[idx] = first.upper()\n\
    \        elif c in 'bB':\n            s[idx] = first.lower()\n        else:\n\
    \            s[idx] = c\n    return ''.join(s)\n", "    if len(s) == 1:\n    \
    \    return s.lower()\n    elif not any(c.isalpha() for c in s):\n        return\
    \ s.lower()\n    return ''.join([c.upper() if c.isalpha() else c for c in reversed(s)])\n",
  "    return ''.join(c if c.isupper() else c.lower() for c in s)\n", "    \n    #\
    \ convert string to list \n    s = ''.join(s.split()).lower()\n    \n    # loop\
    \ through\n    i = 0\n    while i < len(s):\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            s[i] = s[i].upper()\n            i += 1\n        else:\n        \
    \    s[i] = s[i].lower()\n            i += 1\n    return ''.join(s)\n", "    pass\n\
    \n", "    if len(s) == 0:\n        return s\n    else:\n        if s[0].isalpha():\n\
    \            return s[::-1].upper()\n        else:\n            return s[::-1]\n\
    </cell>\n<cell>", "    \n    \n    s = s.replace(' ', '')\n    \n    s = s.replace('\
    \ ', '')\n    \n    if s == \"\": return \"\"\n    \n    \n    if len(s) <= 0:\n\
    \        return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    str_len = len(s)\n    i\
    \ = 0\n    while i < str_len:\n        if s[i].isalpha():\n            s[i] =\
    \ s[i].replace(s[i:i+2].upper(), s[i:i+2].lower())\n            i += 2\n     \
    \   elif s[i].isdigit():\n            s[i] = s[i].replace(s[i:i+1], str(int(s[i:i+1])))\n\
    \            i += 1\n        else:\n            i += 1\n    return s[0] + \"\"\
    .join(s[1:])\n", "    # Your code here\n    if not s:\n        return s\n    \n\
    \    stack = []\n    for c in s:\n        if c.isalpha():\n            stack.append(c.lower())\n\
    \        else:\n            stack.append(c)\n    \n    stack.reverse()\n    return\
    \ ''.join(stack)\n</cell>\n<cell>", "    return ''.join(map(lambda x: x.swapcase()\
    \ if x.isalpha() else x, s))\n", "    # assert isinstance(s, str) # assert not\
    \ s # isinstance(s, str) # assert not s # assert not s\n    s = list(s)\n    #\
    \ assert all(isinstance(char, str) for char in s)\n\n    ans = \"\"\n    for i\
    \ in range(len(s)):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n    \
    \        # assert s[i] != s[i] # assert s[i] == s[i] # assert s[i] == s[i]\n \
    \           if s[i] == s[i]:\n                if s[i] in \"aeiou\":\n        \
    \            ans += s[i].lower() + s[i].upper()\n                else:\n     \
    \               ans += s[i].lower()\n            else:\n                ans +=\
    \ s[i].upper()\n        else:\n            ans += s[i]\n    return ans\n\n", " \
    \   return \"\".join(map(lambda x: s[x] if x in s else s[x].upper(), s))\n", " \
    \   \n    length = len(s)\n    if length <= 1:\n        return s\n    \n    for\
    \ i in range(length - 1, -1, -1):\n        if s[i].isalpha():\n            s =\
    \ s.replace(s[i].upper(), s[i].lower())\n            s = s.replace(s[i].lower(),\
    \ s[i].upper())\n        else:\n            s = s.replace(s[i], s[i])\n    return\
    \ s\n</cell>\n<cell>", "    return s\n\n", "    # O(1) Space\n    return ''.join(c\
    \ if c.islower() else c.upper() for c in s)\n</cell>\n<text>\nThe solution is\
    \ now complete! You can test it by running the cell below:\n\n\n</text>\n<cell>\n\
    solve('abeCf')\n</cell>\n<text>\nRevising the algorithm\nIf you would like to\
    \ go back to check your solution, please revisit our Solution Notebook\n\n\n</text>\n\
    <text>\nGood Job!\nExtra Credit: Reverse the case of a single character is pretty\
    \ easy, so let's try to implement that in one line of code.\n\n\n</text>\n<cell>",
  "    # Your code here\n    count=0\n    last=len(s)-1\n    for i in range(last):\n\
    \        if s[i]==s[i+1]:\n            count+=1\n        else:\n            count=0\n\
    \    if count==0:\n        s=s[::-1]\n    else:\n        s=s[::-1]\n\n    return\
    \ s\n", "    s = s.replace('@', '#')\n    return s.replace('#', '')\n\n", "  \
    \  \n    if len(s) == 0:\n        return \"\"\n    \n    length = len(s)\n   \
    \ \n    for i in range(0, length):\n        c = s[i]\n        if c.isupper():\n\
    \            s[i] = c.lower()\n        elif c.islower():\n            s[i] = c.upper()\n\
    \        else:\n            s[i] = c\n        \n    return \"\".join(s)\n</cell>\n\
    <text>\nProblem 3\nThe first two characters of every substring in the given string\
    \ are the same.\nThe first character is a letter.\nThe last character is a letter\
    \ or number.\nThe remaining characters are letters or numbers.\nIf you can calculate\
    \ the length of the string, return \"YES\".\nIf there is no way to calculate the\
    \ length return the string \"NO\".\nExample 1\nInput: \"abcabcbb\"\nOutput: \"\
    YES\"\nExplanation: The only valid substring for the string is \"abc\".\nExample\
    \ 2\nInput: \"bbbaacc\"\nOutput: \"NO\"\nExplanation: The first two characters\
    \ of the string are the same (\"b\" and \"b\").\n               There are two\
    \ ways to get to this answer:\n               \"bbaaac\" or \"cbbcaa\".\n    \
    \           The second one is the correct answer as it is the shorter string.\n\
    Example 3\nInput: \"pwwkew\"\nOutput: \"YES\"\n\n</text>\n<cell>", "    # Your\
    \ code here\n    # s =  s.replace('#','')\n    # print(s)\n    return s.replace('@',\
    \ '').replace('#', '')\n", "    resulted_string = ''\n    for char in s:\n   \
    \     char_upper = char.upper()\n        char_lower = char.lower()\n        if\
    \ char in string.ascii_letters:\n            resulted_string += char_lower + char_upper\n\
    \        else:\n            resulted_string += char_lower\n    return resulted_string\n\
    \n", "    return ''.join([x.lower() if x.isalpha() else x for x in reversed(s.lower())])\n",
  "    count = 0\n    for letter in s:\n        if letter.isalpha():\n           \
    \ count += 1\n            lower = letter.lower()\n            upper = letter.upper()\n\
    \            if count == 1:\n                s = upper\n            elif count\
    \ == 2:\n                s = lower\n        else:\n            s = letter\n  \
    \  return s\n\n", "    return ''.join(c if c.islower() else c.upper() for c in\
    \ s.replace('@', ''))\n\n", "    s = s.lower()\n    if not s:\n        return\
    \ s\n    \n    if s[0] in string.ascii_lowercase:\n        return \"\".join(list(map(lambda\
    \ x: chr((ord(x) + ord(s[0]) - 65) % 26 + 65), s[1:])))\n    elif s[0] in string.ascii_uppercase:\n\
    \        return \"\".join(list(map(lambda x: chr((ord(x) + ord(s[0]) - 97) % 26\
    \ + 97), s[1:])))\n    else:\n        return s.lower()\n\n", "    l = len(s)\n\
    \    i = 0\n    res = ''\n    while i < l:\n        if s[i].isalpha():\n     \
    \       char2 = s[i].upper()\n            char3 = s[i].lower()\n            if\
    \ i == l - 1:\n                res += char2\n                return res\n    \
    \        else:\n                char1 = s[i + 1].upper()\n                char2\
    \ = s[i + 1].lower()\n                if char1 < char2:\n                    char1\
    \ += char2\n                    char2 += char1\n                    res += char1\n\
    \                    i += 2\n                    continue\n                else:\n\
    \                    res += char1\n                    res += char2\n        \
    \            i += 2\n                    continue\n        else:\n           \
    \ res += s[i]\n            i += 1\n    return res\n\n", "    if len(s) == 0:\n\
    \        return ''\n    \n    for i in range(len(s)):\n        if s[i].isalpha():\n\
    \            s[i] = s[i].upper()\n        else:\n            s[i] = s[i].lower()\n\
    \n    return ''.join(s)\n</cell>\n<cell>", "    return \"\".join([c.lower() if\
    \ c.isalpha() else c.upper() if c.isdigit() else c for c in s])\n\n", "    return\
    \ s[::-1] if s.isalpha() else s\n\n", "    if s.isalpha():\n        uppers = s.upper()\n\
    \        lowers = s.lower()\n        return solve2(uppers) + solve2(lowers)\n\
    \    else:\n        return s.lower()\n    ", "    # Your code here\n    return\
    \ ''.join(c if c.islower() else c.upper() if c.isupper() else c for c in s.lower())\n\
    \n</cell>\n<cell>\nassert solve('1234') == '4321'\nassert solve('ab') == 'AB'\n\
    assert solve('#a@C') == '#A@c'\n</cell>\n<text>\n\u731C\u60F3\n\u5982\u679C\u6211\
    \u4EEC\u60F3\u77E5\u9053\u67D0\u4E2A\u6570\u5B57\u662F\u591A\u5C11\uFF0C\u5C31\
    \u53EF\u4EE5\u901A\u8FC7\u54C8\u5E0C\u8868\u7684hash\u503C\u6765\u6C42\u51FA\u3002\
    \u6BD4\u5982\uFF0C\u5982\u679C\u6211\u4EEC\u60F3\u77E5\u9053 1234 \u662F\u591A\
    \u5C11\uFF0C\u53EF\u4EE5\u901A\u8FC7\u54C8\u5E0C\u8868\u7684hash\u503C\u6765\u6C42\
    \u51FA\uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u901A\u8FC7hash('1234') % 10001\u6765\
    \u5224\u65AD 1234 \u662F\u591A\u5C11\u3002\u6211\u4EEC\u4E5F\u53EF\u4EE5\u901A\
    \u8FC7\u54C8\u5E0C\u8868\u7684hash\u503C\u6765\u6C42\u51FA\uFF0C\u6211\u4EEC\u5C31\
    \u53EF\u4EE5\u901A\u8FC7hash('1234') % 10000\u6765\u5224\u65AD 1234 \u662F\u591A\
    \u5C11\u3002\n\n\n</text>\n<text>\n\u7EC3\u4E60\n1\uFF0C\u5982\u679C\u4F60\u60F3\
    \u5199\u4E00\u4E2A\u7A0B\u5E8F\u6765\u6C42\u51FA\u8FD9\u4E2A\u6570\u7684\u4E58\
    \u79EF\uFF0C\u53EA\u8981\u662F\u9012\u589E\u7684\u6574\u6570\u3002\u6BD4\u5982\
    \ 123 \u4E58\u79EF 121 \u7684\u65B9\u6CD5\u662F 6\u3002\n2\uFF0C\u5982\u679C\u4F60\
    \u60F3\u5199\u4E00\u4E2A\u7A0B\u5E8F\u6765\u6C42\u51FA\u8FD9\u4E2A\u6570\u7684\
    \u4E58\u79EF\uFF0C\u53EA\u8981\u662F\u9012\u589E\u7684\u6574\u6570\u3002\u6BD4\
    \u5982 123 \u4E58\u79EF 121 \u7684\u65B9\u6CD5\u662F 6\u3002\n3\uFF0C\u5982\u679C\
    \u4F60\u60F3\u5199\u4E00\u4E2A\u7A0B\u5E8F\u6765\u6C42\u51FA\u8FD9\u4E2A\u6570\
    \u7684\u4E58\u79EF\uFF0C\u53EA\u8981\u662F\u9012\u589E\u7684\u6574\u6570\u3002\
    \u6BD4\u5982 123 \u4E58\u79EF 121 \u7684\u65B9\u6CD5\u662F 6\u3002\n\n\n</text>\n\
    <cell>\nfrom math import gcd\n", "    str_len = len(s)\n    for index in range(str_len):\n\
    \        if s[index].isalpha():\n            s[index] = s[index].upper()\n   \
    \         s[index] = s[index].lower()\n        else:\n            s[index] = s[index].lower()\n\
    \            s[index] = s[index].upper()\n    return s\n", "    def helper(s,\
    \ index, result):\n        if index >= len(s):\n            return\n        char\
    \ = s[index]\n        if char.isalpha():\n            helper(s, index + 1, result)\n\
    \            result.append(char.upper() if s[index].islower() else char.lower())\n\
    \        else:\n            result.append(char)\n            helper(s, index +\
    \ 1, result)\n\n    result = []\n    helper(s, '', result)\n    return ''.join(result)\n\
    \n", "    # TODO\n    return s\n\n", "    \n    if len(s) == 0:\n        return\
    \ ''\n    \n    str_len = len(s)\n    \n    if str_len == 0:\n        return s\n\
    \    \n    chars = list(s)\n    \n    for i in range(str_len):\n        \n   \
    \     if chars[i] == '#':\n            \n            letter = chars[i+1:i+2]\n\
    \            letter = list(letter)\n            \n            letter[0] = letter[0].upper()\n\
    \            letter[1] = letter[1].upper()\n            \n            letter =\
    \ reduce(lambda x, y: x + y, letter)\n            \n            chars[i+1] = letter\n\
    \            \n        elif chars[i] == '@':\n            \n            letter\
    \ = chars[i+1:i+3]\n            letter = list(letter)\n            \n        \
    \    letter[0] = letter[0].upper()\n            letter[1] = letter[1].upper()\n\
    \            letter[2] = letter[2].upper()\n            \n            letter =\
    \ reduce(lambda x, y: x + y, letter)\n            \n            chars[i+1] = letter\n\
    \        \n        elif chars[i] == '.':\n            \n            letter = chars[i+1:i+2]\n\
    \            letter = list(letter)\n            \n            letter[0] = letter[0].upper()\n\
    \            letter[1] = letter[1].upper()\n            \n            letter =\
    \ reduce(lambda x, y: x + y, letter)\n            \n            chars[i+1] = letter\n\
    \            \n        elif chars[i] == '$':\n            \n            letter\
    \ = chars[i+1:i+2]\n            letter = list(letter)\n            \n        \
    \    letter[0] = letter[0].upper()\n            letter[1] = letter[1].upper()\n\
    \            \n            letter = reduce(lambda x, y: x + y, letter)\n     \
    \       \n            chars[i+1] = letter\n        \n        elif chars[i] ==\
    \ '$':\n            \n            letter = chars[i+1:i+2]\n            letter\
    \ = list(letter)\n            \n            letter[0] = letter[0].upper()\n  \
    \          letter[1] = letter[1].upper()\n            \n            letter = reduce(lambda\
    \ x, y: x + y, letter)\n            \n            chars[i+1] = letter\n      \
    \      \n        elif chars[i] == '_':\n            \n            letter = chars[i+1:i+2]\n\
    \            letter = list(letter)\n            \n            letter[0] = letter[0].upper()\n\
    \            letter[1] = letter[1].upper()\n            \n            letter =\
    \ reduce(lambda x, y: x + y, letter)\n            \n            chars[i+1] = letter\n\
    \        \n        elif chars[i] == '-':\n            \n            letter = chars[i+1:i+2]\n\
    \            letter = list(letter)\n            \n            letter[0] = letter[0].upper()\n\
    \            letter[1] = letter[1].upper()\n            \n            letter =\
    \ reduce(lambda x, y: x + y, letter)\n            \n            chars[i+1] = letter\n\
    \            \n        elif chars[i]", "    \n    return ''.join(str.lower(s)[::-1]\
    \ if is_letter(s[i]) else i for i in s)\n</cell>\n<cell>", "    \n    if len(s)\
    \ == 0:\n        return ''\n    \n    if s[0].isalpha():\n        return s[0]+solve(s[1:])\n\
    \    else:\n        return s[0]+solve(s[1:]+s)\n", "    if len(s) == 0:\n    \
    \    return s\n    if s[0] in string.ascii_letters:\n        return s[0] + solve(s[1:])\n\
    \    return s[0] + solve(s[1:]).lower() + s[0].upper() + solve(s[1:])\n", "  \
    \  if not s:\n        return ''\n\n    s_lower = s.lower()\n\n    # first letter\
    \ of input string\n    first_letter = s_lower[0]\n\n    # reversing the case of\
    \ the first letter\n    if first_letter.isalpha():\n        if s_lower[0].isupper():\n\
    \            first_letter = first_letter.upper()\n        else:\n            first_letter\
    \ = first_letter.lower()\n\n    # removing the first letter and joining it\n \
    \   return first_letter + ''.join(s_lower[1:])\n\n", "    return \"\".join(str.lower(s)\
    \ if s[i] not in [\"A\", \"B\"] else \n                   str.upper(s[i]) for\
    \ i in range(len(s)))\n</cell>\n<text>\nProblem 2\nWrite a function that returns\
    \ the first character of a word capitalized.\n\nExample\n>>> first_letter('hello')\n\
    'H'\n>>> first_letter('HELLO')\n'H'\n>>> first_letter('HELLO WORLD')\n'H'\n>>>\
    \ first_letter('')\n''\n>>> first_letter(' ')\n''\n>>> first_letter('abc de')\n\
    'a'\n>>> first_letter('abc de fgh')\n'a'\n>>> first_letter('abc de fghijklm')\n\
    'a'\n>>> first_letter('abc de fghijklmnopqrstuvwxyz')\n'a'\n>>> first_letter('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\
    'A'\n>>> first_letter('abCDEFGHIJKLMNOPQRSTUVWXYZ')\n'A'\n>>> first_letter('0123')\n\
    '0'\n>>> first_letter('01234')\n'0'\n>>> first_letter('012345')\n'0'\n>>> first_letter('0123456')\n\
    '0'\n>>> first_letter('0123456789')\n'0'\n>>> first_letter('0123456789a')\n'0'\n\
    >>> first_letter('0123456789A')\n'0'\n>>> first_letter('0123456789a')\n'0'\n>>>\
    \ first_letter('0123456789A')\n'0'\n>>> first_letter('01')\n'0'\n>>> first_letter('0112')\n\
    '0'\n>>> first_letter('01123')\n'0'\n>>> first_letter('011234')\n'0'\n>>> first_letter('0112345')\n\
    '0'\n>>> first_letter('01123456')\n'0'\n>>> first_letter('011234567')\n'0'\n>>>\
    \ first_letter('011234567')\n'0'\n>>> first_letter('01')\n'0'\n>>> first_letter('0112')\n\
    '0'\n>>> first_letter('01123')\n'0'\n>>> first_letter('011234')\n'0'\n>>> first_letter('0112345')\n\
    '0'\n>>> first_letter('01123456')\n'0'\n>>> first_letter('011234567')\n'0'\n>>>\
    \ first_letter('011234567')\n'0'\n>>> first_letter('01')\n'0'\n>>> first_letter('0112')\n\
    '0'\n>>> first_letter('01123')", "    i = 0\n    \n    if s.isalpha():\n     \
    \   return solve_reverse(s[::-1])\n    else:\n        return s\n", "    def helper(s:str,i:int)\
    \ -> str:\n        if i == len(s): return s\n        ch = s[i]\n        if ch.isalpha():\n\
    \            if ch.islower():\n                return helper(helper(s,i-1),i)\n\
    \            return helper(helper(s,i),i-1)\n        else:\n            return\
    \ helper(helper(s,i),i-1)\n    return helper(s,0)\n</cell>\n<cell>\n%timeit solve(\"\
    \")\n</cell>\n<cell>\n%timeit solve(\"12\")\n</cell>\n<cell>\n%timeit solve(\"\
    12a\")\n</cell>\n<cell>\n%timeit solve(\"abc\")\n</cell>\n<cell>\n%timeit solve(\"\
    abca\")\n</cell>\n<text>\nA better way\n\n</text>\n<cell>", "    return ''.join(c\
    \ if c.isalpha() else c.upper() for c in s)\n\n</cell>\n<text>\nWhat happens if\
    \ we run the code cell above?\nDoes your code produce any errors?\nDoes the code\
    \ solve the problem of reversing a string?\n\n\n</text>\n<text>\nQuestion 5.2\n\
    \n</text>\n<text>\nNow try to solve the problem again with another string that\
    \ may contain a letter.\n\n\n</text>\n<cell>\nsolve('ab')\n</cell>\n<text>\nQuestion\
    \ 5.3\nNow try with another string that may contain a letter.\n\n\n</text>\n<cell>\n\
    solve('abcabcd')\n</cell>\n<text>\nQuestion 5.4\nNow try to solve the problem\
    \ again with another string that may not contain a letter.\n\n\n</text>\n<cell>\n\
    solve('aba')\n</cell>\n<text>\nQuestion 5.5\nNow try to solve the problem again\
    \ with another string that may not contain a letter.\n\n\n</text>\n<cell>\nsolve('acbbc')\n\
    </cell>\n<text>\nQuestion 5.6\nNow try to solve the problem again with another\
    \ string that may not contain a letter.\n\n\n</text>\n<cell>\nsolve('acbbcc')\n\
    </cell>\n<text>\nQuestion 5.7\nNow try to solve the problem again with another\
    \ string that may not contain a letter.\n\n\n</text>\n<cell>\nsolve('abc')\n</cell>\n\
    <text>\nQuestion 5.8\nNow try to solve the problem again with another string that\
    \ may not contain a letter.\n\n\n</text>\n<cell>\nsolve('abbb')\n</cell>\n<text>\n\
    Question 5.9\nNow try to solve the problem again with another string that may\
    \ not contain a letter.\n\n\n</text>\n<cell>\nsolve('ac')\n</cell>\n<text>\nQuestion\
    \ 5.10\nNow try to solve the problem again with another string that may not contain\
    \ a letter.\n\n\n</text>\n<cell>\nsolve('acb')\n</cell>\n<text>\nQuestion 5.11\n\
    Now try to solve the problem again with another string that may not contain a\
    \ letter.\n\n\n</text>\n<cell>\nsolve('acbbc')\n</cell>\n<text>\nQuestion 5.12\n\
    Now try to solve the problem again with another string that may not contain a\
    \ letter.\n\n\n</text>\n<cell>\nsolve('acbbcc')\n</cell>\n<text>\nQuestion 5.13\n\
    Now try to solve the problem again with another string that may not contain a\
    \ letter.\n\n\n</text>\n<cell>\nsolve('a')\n</cell>\n<text>\nQuestion 5.14\nNow\
    \ try to solve the problem again with another string that may not contain a let",
  "    if not s:\n        return s\n    ans=\"\"\n    for i in s:\n        if i.isalpha():\n\
    \            ans=ans.upper()\n            ans=ans+i.lower()\n        else:\n \
    \           ans=ans+i\n    return ans\n</code>\n<|/ a |>\n<| a |>\n<code>\nfrom\
    \ string import ascii_lowercase", "    return \"\".join([ chr(ord(s[i])-ord('a')+26)\
    \ if s[i].isupper() else chr(ord(s[i])-ord('a')+65) for i in reversed(s) ])\n\n",
  "    # code goes here\n    result = ''\n    for i in s:\n        if i.islower():\n\
    \            result += i.upper()\n        else:\n            result += i.lower()\n\
    \    return result\n\n", "    rev = ''\n    for letter in s:\n        if letter.isalpha():\n\
    \            if letter.islower():\n                letter = letter.upper()\n \
    \           elif letter.isupper():\n                letter = letter.lower()\n\
    \        rev += letter\n    return rev\n\n", "    # return re.sub(r'(.)(\\1)',\
    \ lambda m:m.group(2).upper(), s)\n    return s.translate(str.maketrans(\n   \
    \     dict.fromkeys(map(chr, range(ord('a'), ord('z') + 1)), \n              \
    \         str.upper),\n        str.maketrans(\n            dict.fromkeys(map(chr,\
    \ range(ord('Z'), ord('a') + 1)), \n                       str.lower),\n     \
    \   str.maketrans({'#': '!', '@': '.'})))\n    \n    ", "    # your code goes\
    \ here\n    result = ''\n    for c in s:\n        if c.isalpha():\n          \
    \  result += c.upper()\n        else:\n            result += c\n    return result\n",
  "    # return s.swapcase()\n    \n    if len(s) == 0:\n        return \"\"\n\n \
    \   if s[0] in string.ascii_lowercase:\n        return solve(s[1: len(s)])\n \
    \   else:\n        return solve(s[0: len(s) - 1]) + s[0]\n\n", "    # your code\
    \ goes here\n    \n    count=0\n    for i in range(len(s)):\n        if s[i].islower():\n\
    \            s[i]=s[i].upper()\n            count+=1\n        else:\n        \
    \    s[i]=s[i].lower()\n            count+=1\n    if count>0:\n        return\
    \ solve(s[:len(s)-count])+s[len(s)-count:]\n    else:\n        return s\n    \n\
    \    \n    \n    \n    \n    ", "    if s == '':\n        return '#'\n    lower\
    \ = False\n    upper = False\n    for i in range(len(s)):\n        letter = s[i]\n\
    \        if letter.isalpha():\n            if lower:\n                s = s[:i]\
    \ + letter.lower() + s[i:]\n                lower = False\n            else:\n\
    \                s = s[:i] + letter.upper() + s[i:]\n                upper = False\n\
    \    return s\n\n", "    pass\n</cell>\n<cell>", "    s = s.replace('#','')\n\
    \    s = s.replace('@','')\n    s = s.replace('=','')\n    s = s.replace('&','')\n\
    \    s = s.replace('!','')\n    s = s.replace('<','')\n    s = s.replace('>','')\n\
    \    s = s.replace(',','')\n    s = s.replace(')','')\n    s = s.replace('(','')\n\
    \    s = s.replace(':','')\n    s = s.replace('=','')\n    s = s.replace('+','')\n\
    \    s = s.replace('-','')\n    s = s.replace('*','')\n    s = s.replace('&','')\n\
    \    s = s.replace('*','')\n    s = s.replace(',','')\n    s = s.replace(')','')\n\
    \    s = s.replace('(','')\n    s = s.replace('!','')\n    s = s.replace('#','')\n\
    \    s = s.replace('@','')\n    s = s.replace('=','')\n    s = s.replace('+','')\n\
    \    s = s.replace('-','')\n    s = s.replace('*','')\n    s = s.replace('&','')\n\
    \    s = s.replace('!','')\n    s = s.replace('<','')\n    s = s.replace('>','')\n\
    \    s = s.replace(',','')\n    s = s.replace(')','')\n    s = s.replace('(','')\n\
    \    s = s.replace(':','')\n    s = s.replace('*','')\n    s = s.replace('&','')\n\
    \    s = s.replace('*','')\n    s = s.replace(',','')\n    s = s.replace(')','')\n\
    \    s = s.replace('(','')\n    s = s.replace('=','')\n    s = s.replace('+','')\n\
    \    s = s.replace('-','')\n    s = s.replace('*','')\n    s = s.replace('&','')\n\
    \    s = s.replace('!','')\n    s = s.replace('<','')\n    s = s.replace('>','')\n\
    \    s = s.replace(',','')\n    s = s.replace(')','')\n    s = s.replace('(','')\n\
    \    s = s.replace(':','')\n    s = s.replace('*','')\n    s = s.replace('&','')\n\
    \    s = s.replace('!','')\n    s = s.replace('<','')\n    s = s.replace('>','')\n\
    \    s = s.replace(',','')\n    s = s.replace(')','')\n    s = s.replace('(','')\n\
    \    s = s.replace(':','')\n    s = s.replace('*','')\n    s = s.replace('&','')\n\
    \    s = s.replace('!','')\n    s = s.replace('<','')\n    s = s.replace('>','')\n\
    \    s = s.replace(',','')\n    s = s.replace(')','')\n    s = s.replace('(','')\n\
    \    s = s.replace('=','')\n    s = s.replace('+','')\n    s = s.replace('-','')\n\
    \    s = ", "    if not s or len(s) == 0:\n        return s\n    \n    chars_to_swap\
    \ = find_chars_to_swap(s.lower())\n    if chars_to_swap:\n        chars_to_swap.reverse()\n\
    \        for index, char in enumerate(chars_to_swap):\n            s = s.replace(char,\
    \ char.upper())\n            \n    return s\n</cell>\n<text>\nTest\n\n</text>\n\
    <cell>\ns = 'ab#@A@c'\nsolve(s)\n</cell>\n<text>\nChallenge 2\nGiven a string\
    \ s of length n, write a function to reverse the string and return the reversed\
    \ string.\nIf the string contains less than n characters, return it.\nIf the string\
    \ contains only 1 character, return that character.\nThe function should use the\
    \ function reverse().\nExamples\nFor s = 'a1b2c3'\nthe function should return\
    \ '123abc'.\nFor s = 'abcd'\nthe function should return 'dcba'.\nFor s = '#'\n\
    the function should return '#'.\nFor s = '123'\nthe function should return '321'.\n\
    \n\n</text>\n<cell>", "    \n    res=s\n    for i in s:\n        if i.isalpha():\n\
    \            if i.isupper():\n                res=res.upper()\n            else:\n\
    \                res=res.lower()\n        else:\n            res=res[::-1]\n \
    \   \n    return res\n", "    return s\n\n", "    pass\n</cell>\n<cell>", "  \
    \  return ''.join(x.swapcase() for x in s)\n\n", "    \n    for i in range(len(s)):\n\
    \        if s[i].isalpha():\n            s[i] = s[i].lower() if s[i].islower()\
    \ else s[i].upper()\n    if len(s) == 0:\n        return \"\"\n    return \"\"\
    .join(s)\n\n</cell>\n<cell>\nsolve('ABa')\n</cell>\n<cell>\nsolve('abc')\n</cell>\n\
    <cell>\nsolve(\"$1234\")\n</cell>\n<cell>\nsolve(\"$1234!$%^&$^%^&%$&$1234\")\n\
    </cell>\n<cell>\nsolve('\"#$@#^&$@^&@$%@#%!^&@&^%')\n</cell>\n<cell>\nsolve(\"\
    $^%^&$%@#%^&@&@$%^&$%^%\")\n</cell>\n<cell>\nsolve(\"ABAB\")\n</cell>\n<cell>\n\
    solve(\"A\")\n</cell>\n<cell>\nsolve(\"123\")\n</cell>\n<cell>\nsolve(\"1\")\n\
    </cell>\n<cell>\nsolve(\"ABCDEFG\")\n</cell>\n<cell>\nsolve(\"FEDCBA\")\n</cell>\n\
    <cell>\nsolve(\"FEDCBA\")\n</cell>\n<text>\nProblem 6 (5 points)\nWrite a function\
    \ that takes a string s and an integer k and returns an array with the first k\
    \ characters of s, sorted from a-z.\nIf the number of characters of s is less\
    \ than k, ignore the extra characters. \nThe function should return an empty string\
    \ in case k <= 0.\nThe function should also return a string in the form of a list\
    \ with the k-length characters of s in sorted order, with the extra characters\
    \ ignored. \nThe returned string should have at most one space between each element.\n\
    The function should work for strings with any length of letters.\n\n\n</text>\n\
    <cell>", "    chars = list(s)\n    if not chars:\n        return s\n    chars\
    \ = list(map(lambda x: x.upper() if x.isalpha() else x.lower(), chars))\n    return\
    \ ''.join(chars)\n\n", "    \n    s = s.lower()\n    if s[0].isalpha():\n    \
    \    s = s.swapcase()\n    else:\n        s = s[::-1]\n\n    return s\n\n", " \
    \   \n    ret_str = s.replace(' ', '')\n    \n    stack = deque()\n    ret_str\
    \ = ''\n    \n    for c in ret_str:\n        if c.isalpha():\n            ret_str\
    \ += c.upper()\n            stack.append(c)\n        else:\n            ret_str\
    \ += c.lower()\n            stack.append(c)\n    \n    while stack:\n        top\
    \ = stack.pop()\n        if top == stack[-1]:\n            ret_str += top\n  \
    \      else:\n            ret_str += top.upper()\n    \n    return ret_str\n\n",
  "    if not s:\n        return ''\n    s = s.lower()\n    return ''.join(map(lambda\
    \ x: x if x.isalpha() else x.upper(), s))\n", "    return ''.join(_solve(s))\n",
  "    if len(s) is 0:\n        return s\n    else:\n        s = s.replace(\"#\",\"\
    \")\n        if s.isalpha():\n            s = list(s)\n            s[0] = s[0].upper()\n\
    \            s[1] = s[1].upper()\n            s = \"\".join(s)\n        else:\n\
    \            s = list(s)\n            s.reverse()\n            s = \"\".join(s)\n\
    \        return s\n    ", "    res = \"\"\n    for c in s:\n        if c.isalpha():\n\
    \            if c.islower():\n                c = c.upper()\n            else:\n\
    \                c = c.lower()\n        res += c\n    return res[::-1]\n", " \
    \   def reverse(s):\n        final = []\n        for ele in s:\n            if\
    \ ele.isalpha():\n                final.append(ele.lower())\n            else:\n\
    \                final.append(ele)\n        return ''.join(final)\n    \n    if\
    \ s == '':\n        return s\n    elif len(s) == 1:\n        return reverse(s[1:])\n\
    \    else:\n        return reverse(s[:]) + s[0]\n</cell>\n<cell>\ns = '''", " \
    \   \n    result = []\n    for letter in s:\n        if letter.isalpha():\n  \
    \          if letter.lower() == letter:\n                result.append(letter.upper())\n\
    \            elif letter.upper() == letter:\n                result.append(letter.lower())\n\
    \            else:\n                result.append(letter)\n        else:\n   \
    \         result.append(letter)\n    return ''.join(result)\n", "    return \"\
    \".join(\n        [\n            letter\n            + \"a\" * ((ord(letter) -\
    \ 97 + ord(\"A\")) % 26)\n            if ord(letter) > 97\n            else letter\n\
    \            for letter in s\n        ]\n    )\n\n", "    s = s.replace('@', 'AT')\n\
    \    s = s.replace('#', 'H')\n    s = s.replace('!', 'P')\n    s = s.replace('$',\
    \ 'Q')\n    s = s.replace('%', 'Y')\n    s = s.replace('^', 'W')\n    s = s.replace('&',\
    \ 'O')\n    s = s.replace('-', 'X')\n    s = s.replace('_', 'U')\n    s = s.replace('/',\
    \ 'W')\n    s = s.replace('|', 'O')\n    s = s.replace(':', 'Z')\n    s = s.replace('+',\
    \ 'Z')\n    s = s.replace('/', 'W')\n    s = s.replace(',', '')\n    s = s.replace(';',\
    \ '')\n    s = s.replace(':', '')\n    s = s.replace(' ', '')\n    s = s.replace('\"\
    ', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('[',\
    \ '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}',\
    \ '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('<',\
    \ '')\n    s = s.replace('>', '')\n    s = s.replace('!', '')\n    s = s.replace(',',\
    \ '')\n    s = s.replace(' ', '')\n    s = s.replace(',', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(']', '')\n    s = s.replace(']',\
    \ '')\n    s = s.replace(']', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n    s = s.replace(')',\
    \ '')\n    s = s.replace(')', '')\n    s = s.replace(')', '')\n", "    temp =\
    \ ''\n    for i in s:\n        if i.isalpha():\n            temp = temp.lower()\
    \ if temp.islower() else temp.upper()\n        else:\n            temp = temp\
    \ + i\n    return temp\n", "    if not s:\n        return ''\n    \n    s_lower\
    \ = s.lower()\n    s_upper = s.upper()\n    res = []\n    for i, c in enumerate(s):\n\
    \        if c.isalpha():\n            if c.islower():\n                res.append(s_lower[i])\n\
    \            else:\n                res.append(s_upper[i])\n        else:\n  \
    \          res.append(c)\n    return ''.join(res)\n", "    return ''.join(i if\
    \ not i.isalpha() else i.upper() if i else i.lower() for i in s)\n", "    if len(s)\
    \ == 0:\n        return ''\n    result = ''\n    for letter in s:\n        if\
    \ letter.lower() in string.ascii_lowercase:\n            result += letter.upper()\n\
    \        else:\n            result += letter\n    return result.upper()\n\n",
  "    res = ''\n    for c in s:\n        if c.isupper():\n            res += c.lower()\n\
    \        elif c.islower():\n            res += c.upper()\n        else:\n    \
    \        res += c\n    return res[::-1]\n", "    pass\n", "    # 1. Check whether\
    \ given string is empty or not\n    if len(s) == 0:\n        return ''\n    #\
    \ 2. Get the first character of the string and make it upper case \n    s = s[0].upper()\
    \ + s[1:]\n    # 3. Get all letters of the string and reverse them \n    # s.replace(\"\
    a\", \"A\")\n    # s.replace(\"b\", \"B\")\n    # s.replace(\"c\", \"C\")\n  \
    \  # s.replace(\"d\", \"D\")\n    # s.replace(\"e\", \"E\")\n    # s.replace(\"\
    f\", \"F\")\n    # s.replace(\"g\", \"G\")\n    # s.replace(\"h\", \"H\")\n  \
    \  # s.replace(\"i\", \"I\")\n    # s.replace(\"j\", \"J\")\n    # s.replace(\"\
    k\", \"K\")\n    # s.replace(\"l\", \"L\")\n    # s.replace(\"m\", \"M\")\n  \
    \  # s.replace(\"n\", \"N\")\n    # s.replace(\"o\", \"O\")\n    # s.replace(\"\
    p\", \"P\")\n    # s.replace(\"q\", \"Q\")\n    # s.replace(\"r\", \"R\")\n  \
    \  # s.replace(\"s\", \"S\")\n    # s.replace(\"t\", \"T\")\n    # s.replace(\"\
    u\", \"U\")\n    # s.replace(\"v\", \"V\")\n    # s.replace(\"w\", \"W\")\n  \
    \  # s.replace(\"x\", \"X\")\n    # s.replace(\"y\", \"Y\")\n    # s.replace(\"\
    z\", \"Z\")\n    # 4. Return the modified string \n    return s\n\n", "    s =\
    \ s.replace('@', '').replace('@', '')\n    \n    for i in range(len(s)):\n   \
    \     if s[i] != '@':\n            if s[i].islower():\n                s[i] =\
    \ s[i].upper()\n            elif s[i].isupper():\n                s[i] = s[i].lower()\n\
    \        else:\n            s[i] = s[i].replace('@', '')\n    return ''.join([i\
    \ for i in s])\n\n", "    # reverse the string first\n    s = s.replace(' ', '')\n\
    \    rev_str = s[::-1]\n    # then check if each letter only has one capital letter\
    \ left\n    length = len(rev_str)\n    if length <= 1:\n        return s\n   \
    \ # reverse the string again and check if the each letter only has one lower letter\
    \ left\n    s = s.replace(' ', '')\n    rev_str = s[::-1]\n    # if the string\
    \ is empty or only has one letter, return the string\n    if not rev_str:\n  \
    \      return s\n    for i in range(1, length-1):\n        current = rev_str[i]\n\
    \        next = rev_str[i+1]\n        if current.isupper() and next.islower():\n\
    \            rev_str = rev_str[:i] + next.upper() + rev_str[i+1:]\n        if\
    \ current.islower() and next.isupper():\n            rev_str = rev_str[:i] + current.lower()\
    \ + rev_str[i+1:]\n    return rev_str\n\n", "    # todo write your code here\n\
    \    answer = ''\n    for ch in s:\n        if ch.isalpha():\n            ch =\
    \ str(ch.swapcase())\n            answer += ch\n        else:\n            answer\
    \ += ch\n    return answer\n\n", "    \n    # 1.\n    if len(s) == 0:\n      \
    \  return s\n\n    # 2.\n    if s[0].isalpha():\n        # 2.1.\n        if len(s)\
    \ == 1:\n            return s.upper()\n        # 2.2.\n        else:\n       \
    \     return s.upper()\n        \n    # 3.\n    else:\n        # 3.1.\n      \
    \  if len(s) == 1:\n            return s.lower()\n        # 3.2.\n        else:\n\
    \            return s.lower()\n", "    \n    # 1. check input string has letters\n\
    \    if has_letter(s) is False:\n        return s # return input string\n    \n\
    \    # 2. find length of string\n    str_len = len(s)\n    \n    # 3. for loop\
    \ to reverse string\n    # check if string has letters\n    for i in range(str_len):\n\
    \        if s[i] in string.ascii_lowercase:\n            s = reverse_case(s)\n\
    \        elif s[i] in string.ascii_uppercase:\n            s = reverse_case(s)\n\
    \        else: # string has no letters\n            s = reverse_case(s)\n    \n\
    \    # 4. return the reverse string \n    return s\n", "    \n    # check length\
    \ of string\n    if len(s) == 0:\n        return s\n    \n    # check if s is\
    \ a string \n    if not isinstance(s, str):\n        raise TypeError(\"Not a str\"\
    )\n    \n    # check length of string\n    if len(s) == 0:\n        return s\n\
    \    \n    answer = \"\"\n    \n    # for each charcter\n    for c in s:\n   \
    \     \n        # check if char c is a letter\n        if c.isalpha():\n     \
    \       # reverse case\n            answer = answer + c.swapcase()\n        \n\
    \        # keep letter as it is\n        else:\n            answer = answer +\
    \ c\n    \n    return answer\n\n", "    if len(s) == 0:\n        return s\n  \
    \  else:\n        lower = False\n        upper = False\n        for i in range(len(s)):\n\
    \            char = s[i]\n            if not (lower or upper):\n             \
    \   if char.islower():\n                    lower = True\n                   \
    \ upper = False\n                else:\n                    lower = False\n  \
    \                  upper = True\n            elif char.isalpha():\n          \
    \      if char.islower():\n                    if upper:\n                   \
    \     s[i] = char.upper()\n                        upper = False\n           \
    \         else:\n                        s[i] = char.lower()\n               \
    \         lower = False\n                elif char.isupper():\n              \
    \      if lower:\n                        s[i] = char.lower()\n              \
    \          lower = False\n                    else:\n                        s[i]\
    \ = char.upper()\n                        upper = False\n                else:\n\
    \                    if upper:\n                        s[i] = char.upper()\n\
    \                        upper = False\n                    elif lower:\n    \
    \                    s[i] = char.lower()\n                        lower = False\n\
    \                    else:\n                        s[i] = char\n            elif\
    \ char == s[0]:\n                if upper:\n                    s[i] = char.upper()\n\
    \                    upper = False\n                elif lower:\n            \
    \        s[i] = char.lower()\n                    lower = False\n            \
    \    else:\n                    s[i] = char\n            else:\n             \
    \   if upper:\n                    s[i] = char.upper()\n                    upper\
    \ = False\n                elif lower:\n                    s[i] = char.lower()\n\
    \                    lower = False\n                else:\n                  \
    \  s[i] = char\n    return s\n\n", "    # Your code here\n    vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n    letters = list(s)\n    for i in range(len(s)):\n       \
    \ if s[i] in vowels:\n            letters[letters.index(s[i])] = s[i].lower()\n\
    \        elif s[i] not in vowels:\n            letters[letters.index(s[i])] =\
    \ s[i].upper()\n    return \"\".join(letters)\n</code>\n<|/ a tags=string,python,indexing,python-3.x\
    \ |>\n<| a tags=string,python,indexing,python-3.x |>\nHere's a more straightforward\
    \ solution that uses list comprehensions and generator expressions\n<code>", " \
    \   return ''.join(c if c.islower() else c.upper() if c.isupper() else c for c\
    \ in s)\n", "    \n    return solve_recursive(s)\n    \n", "    return ''.join([c\
    \ for c in s if c.isalpha() and c.isupper() or c.islower()])\n\n", "    \n   \
    \ s = s.lower()\n    res = ''\n    for i,c in enumerate(s):\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            res+=c.upper()\n        else:\n            res+=c\n    return res\n\
    \n", "    count=0\n    for i in s:\n        if i in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            count+=1\n    if count==0:\n        for i in s:\n            if i\
    \ in 'abcdefghijklmnopqrstuvwxyz':\n                i = i.upper()\n          \
    \      count+=1\n                i+=i.lower()\n                if count>1:\n \
    \                   i-=i.upper()\n                    i-=i.lower()\n         \
    \       break\n    return s\n</cell>\n<cell>", "    return ''.join(map(lambda\
    \ x: swap_case(x) if is_letter_only(x) else x, s))\n</cell>\n<cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
