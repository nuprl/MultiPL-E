name: HumanEval_31_is_prime
language: py
prompt: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number is\
  \ prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
  \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n \
  \   >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
  \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
  \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
  \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
  \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
  \    assert candidate(77) == False\n    assert candidate(255379) == False\n\ndef\
  \ test_check():\n    check(is_prime)\n\ntest_check()\n"
completions: ["    if n <= 1:\n        return False\n    return all(n % i for i in\
    \ _get_primes(n - 1))\n\n", "    if n in {2, 3}:  # O(1) constant, can stop here\n\
    \        return True\n    if n % 2 == 0 or n % 3 == 0:  # O(1) constant, can stop\
    \ here\n        return False\n    i = 5\n    while i * i <= n:  # O(sqrt(n)) loop\n\
    \        if n % i == 0:  # O(1) constant, can stop here\n            return False\n\
    \        i += 6\n    return True\n\n", "    if n % 2 == 0:\n        return False\n\
    \    if n % 3 == 0:\n        return all(n % d == 0 for d in range(2, int(math.sqrt(n))\
    \ + 1))\n    return all(n % d == 0 for d in range(3, int(math.sqrt(n)) + 1, 2))\n\
    \n", "    if n % 2 == 0:\n        return False\n    if not isprime(n):\n     \
    \   return False\n    return all(n % i for i in range(3, int(sqrt(n)) + 1, 2))\n\
    \n", "    # base cases\n    if n < 2:\n        return False\n    if n == 2:\n\
    \        return True\n    if n % 2 == 0:\n        return False\n\n    # find a\
    \ factor of n smaller than n\n    i = 0\n    while i < n // 2:\n        if n %\
    \ i == 0:\n            return False\n        i += 1\n\n    # found a factor\n\
    \    return True\n\n", "    assert isinstance(n, int)\n\n    if n == 2:\n    \
    \    return True\n    if n == 3:\n        return True\n\n    if n % 2 == 0:\n\
    \        return False\n    if n % 3 == 0:\n        return True\n\n    i = 5\n\
    \    while i * i <= n:\n        if n % i == 0:\n            return False\n\n \
    \       i += 6\n\n    return True\n\n", "    if n == 1:\n        return False\n\
    \    if n == 2:\n        return True\n    if n % 2 == 0:\n        return is_prime(n\
    \ // 2)\n    for expt in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % expt\
    \ == 0:\n            return False\n    return True\n\n", "    if n < 2:\n    \
    \    return False\n\n    if n in (2, 3, 5, 7):\n        return True\n\n    if\
    \ n % 2 == 0 or n % 3 == 0:\n        return False\n\n    g = math.gcd(n, 5)\n\n\
    \    if g == 1 or g == 3:\n        return True\n\n    return False\n\n", "   \
    \ if n in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29):\n        return True\n    return\
    \ n % 10 in [2, 3, 5, 7]\n\n", "    if n == 2 or n == 3:\n        return True\n\
    \    if n < 2 or n % 2 == 0:\n        return False\n    root = n ** 0.5\n    f\
    \ = 5\n    while f <= root:\n        if n % f == 0:\n            return False\n\
    \        f += 6\n    return True\n\n", "    if n < 2:\n        return False\n\n\
    \    # Sieve of Eratosthenes - http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \    # Based on the fact that any odd number greater than 2 is interesting for\
    \ us.\n    # See Also:\n    # http://stackoverflow.com/questions/24587632/python-prime-number-generator-doesnt-work\n\
    \    sieve = [True] * (n+1)\n    sieve[0] = False\n    sieve[1] = False\n\n  \
    \  for i in range(2, int(n**0.5+1)):\n        if sieve[i]:\n            for j\
    \ in range(2*i, n+1, i):\n                sieve[j] = False\n    if n < 2:\n  \
    \      return False\n\n    # Generate the primes.\n    primes = []\n    for j\
    \ in range(len(sieve)):\n        if sieve[j]:\n            primes.append(j)\n\n\
    \    # Remove all multiples of primes\n    primes = [j for j in primes if j not\
    \ in prime_gen(j)]\n    return len(primes) > 1\n\n", "    # http://oeis.org/\n\
    \    # http://oeis.org/A0020395\n    sieve_base = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,\n      \
    \      101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173,\
    \ 179, 181, 191, 193, 197, 199,\n            211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,\n         \
    \   331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443,\n            449, 457, 461, 463, 467, 479, 487, 491,\
    \ 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\n            587,\
    \ 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,\
    \ 683, 691, 701,\n            709, 719, 727, 733, 739, 743, 751, 757, 761, 769,\
    \ 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,\n            853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\n\
    \            983, 991, 997]\n    if n % 2 == 0:\n        return False\n    if\
    \ n == 2 or n == 3:\n        return True\n    if n % 3 == 0:\n        return True\n\
    \    if n % 6 == 0:\n        if n in (2, 3, 5):\n            return True\n   \
    \     return False\n    i = 5\n    while i < (n - 1):\n        if (n % i == 0)\
    \ and (n // i != i):\n            return False\n        i += 6\n    return True\n\
    \n", "    if n <= 0:\n        return False\n    if n == 2:\n        return True\n\
    \    if n in (1, 2, 3, 5):\n        return True\n    if n % 2 == 0:\n        return\
    \ is_prime(n // 2)\n    if n % 3 == 0:\n        return is_prime(n // 3)\n    i\
    \ = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n   \
    \         return False\n        i += 6\n    return True\n\n", "    if n < 2:\n\
    \        return False\n    # check factors up to sqrt(n)\n    for p in range(2,\
    \ int(n ** 0.5) + 1):\n        if n % p == 0:\n            return False\n    return\
    \ True\n\n", "    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0\
    \ or n % 3 == 0:\n        return False\n    i = 5\n    w = 2\n    while i * i\
    \ <= n:\n        if n % i == 0:\n            return False\n        i += w\n  \
    \      w = 6 - w\n    return True\n\n", "    if n % 2 == 0:\n        return False\n\
    \    if n == 2:\n        return True\n    if n % 3 == 0:\n        return True\n\
    \    if n % 5 == 0:\n        return True\n\n    i = 0\n    limit = n // 2 + 5\n\
    \n    while i < limit:\n        if n % i == 0 or n % (i + 2) == 0:\n         \
    \   return False\n        i += 6\n\n    return True\n\n", "    if n <= 1:\n  \
    \      return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n %\
    \ i == 0:\n            return False\n    return True\n\n", "    # base case\n\
    \    if n < 2:\n        return False\n\n    # check for small factors\n    if\
    \ n <= 6 and all(n % i for i in (2, 3, 5)):\n        return True\n\n    # check\
    \ for composite factors\n    for i in range(5, int(sqrt(n))+1, 6):\n        if\
    \ n % i == 0:\n            return False\n\n    return True\n\n\n@cache", "   \
    \ if n == 1:\n        return False\n    return n and any(n % i for i in range(3,\
    \ int(math.sqrt(n)) + 1, 2))\n\n\n@lru_cache(maxsize=16)", "    if n < 2:\n  \
    \      return False\n    factors = []\n    d = 2\n    while d <= n:\n        if\
    \ n % d == 0:\n            factors.append(d)\n        d += 1\n    if len(factors)\
    \ == 1 and n > 1:\n        return False\n    return n not in factors\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
