language: py
name: HumanEval_2_truncate_number
results:
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number) - float(trunc(number))\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptn9jeflj.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmptn9jeflj.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmptn9jeflj.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmptn9jeflj.py\"\
    , line 10, in truncate_number\n    return float(number) - float(trunc(number))\n\
    NameError: name 'trunc' is not defined\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimals = int(number-int(number))\n    rounded = round(number,\
    \ decimals)\n    return rounded\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1t6ix_2.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpq1t6ix_2.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpq1t6ix_2.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if not 0.0 <= number < 1.0:\n        raise ValueError(\"\
    Number must be in range [0.0, 1.0]\")\n\n    exponent = math.floor(math.log10(number))\n\
    \    decimals = int(number - math.pow(10.0, exponent))\n    leftover_number =\
    \ math.pow(10.0, exponent - decimals)\n\n    return float(decimals) if decimals\
    \ > 0 else float(leftover_number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu6dyzvdr.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu6dyzvdr.py\", line 26,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpu6dyzvdr.py\", line\
    \ 21, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpu6dyzvdr.py\"\
    , line 11, in truncate_number\n    raise ValueError(\"Number must be in range\
    \ [0.0, 1.0]\")\nValueError: Number must be in range [0.0, 1.0]\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return int(number * 10) % 10\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbj479cup.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpbj479cup.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpbj479cup.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.ceil(math.log10(number))\n\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg56jswlc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpg56jswlc.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpg56jswlc.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpg56jswlc.py\"\
    , line 10, in truncate_number\n    return number - math.ceil(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    remainder_part = number\
    \ - integer_part\n    if remainder_part == 0:\n        return integer_part\n \
    \   else:\n        return truncate_number(remainder_part)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgalky7nh.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgalky7nh.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpgalky7nh.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpgalky7nh.py\"\
    , line 15, in truncate_number\n    return truncate_number(remainder_part)\n  File\
    \ \"/tmp/tmpgalky7nh.py\", line 15, in truncate_number\n    return truncate_number(remainder_part)\n\
    \  File \"/tmp/tmpgalky7nh.py\", line 15, in truncate_number\n    return truncate_number(remainder_part)\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpgalky7nh.py\", line\
    \ 10, in truncate_number\n    integer_part = int(number)\nRecursionError: maximum\
    \ recursion depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    dec_part = number - int_part\n\
    \    return dec_part\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # Truncate decimal part and return the integer part\n\
    \    return int(number * 10) // 10\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3yxyu1kf.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3yxyu1kf.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp3yxyu1kf.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    elif number <\
    \ 0:\n        return -truncate_number(-number)\n    elif number < 0.1:\n     \
    \   integer = math.trunc(number)\n        decimal = number - integer\n    else:\n\
    \        integer = int(number)\n        decimal = number - integer - math.floor(number)\n\
    \    return decimal\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp97d0129a.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp97d0129a.py\", line 29,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp97d0129a.py\", line\
    \ 24, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp97d0129a.py\"\
    , line 19, in truncate_number\n    decimal = number - integer - math.floor(number)\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = math.fabs(number)\n    if number < 1.0:\n \
    \       return number\n    else:\n        return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdsf1gu1p.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdsf1gu1p.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpdsf1gu1p.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpdsf1gu1p.py\"\
    , line 10, in truncate_number\n    number = math.fabs(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ee1vrnv.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp3ee1vrnv.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp3ee1vrnv.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp3ee1vrnv.py\"\
    , line 10, in truncate_number\n    return math.trunc(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    digits = 100\n    number = float(number)\n    decimals\
    \ = number * digits + 10\n    if decimals > digits:\n        decimals = digits\n\
    \    return number / decimals\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7umbo3r4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7umbo3r4.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp7umbo3r4.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    multiplier = 10\n    integer_part = 0\n    decimal_part\
    \ = 1\n    while multiplier > 0:\n        if number / multiplier == int(number\
    \ / multiplier):\n            integer_part += multiplier\n        else:\n    \
    \        decimal_part *= 10\n            decimal_part += number - integer_part\
    \ * multiplier\n        multiplier *= 10\n    decimal_part *= 10\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3idvez5o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3idvez5o.py\", line 30,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp3idvez5o.py\", line\
    \ 25, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp3idvez5o.py\"\
    , line 14, in truncate_number\n    if number / multiplier == int(number / multiplier):\n\
    OverflowError: int too large to convert to float\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    digits = math.floor(math.log10(number))\n    return\
    \ number / 10**digits if digits > 0 else 0.0\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqosjjfea.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpqosjjfea.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpqosjjfea.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpqosjjfea.py\"\
    , line 10, in truncate_number\n    digits = math.floor(math.log10(number))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1.0:\n        raise ValueError(\"'number'\
    \ must be bigger than 1.0\")\n    else:\n        integer_part = int(number)\n\
    \        decimal_part = number - integer_part\n        if abs(decimal_part) <\
    \ 0.000001:\n            return integer_part\n        else:\n            return\
    \ float(decimal_part)\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuoae4b41.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpuoae4b41.py\", line 27,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpuoae4b41.py\", line\
    \ 24, in check\n    assert candidate(123.0) == 0.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer = int(number)\n    decimal = number - integer\n\
    \    return decimal\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimal_part = float(number).as_tuple().exponent\n \
    \   if decimal_part < 0:\n        raise ValueError(\"negative number\")\n    else:\n\
    \        integer = decimal_part // 1\n        decimal = decimal_part % 1\n   \
    \     return float(integer) + decimal\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8il65s1k.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8il65s1k.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp8il65s1k.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp8il65s1k.py\"\
    , line 10, in truncate_number\n    decimal_part = float(number).as_tuple().exponent\n\
    AttributeError: 'float' object has no attribute 'as_tuple'\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    assert number >= 0\n    assert isinstance(number, float)\n\
    \n    if number == int(number):\n        return int(number)\n\n    if number <\
    \ 0.5:\n        return int(number)\n\n    multiplier = 1\n    number = abs(number)\n\
    \    while number > 1:\n        number, remainder = divmod(number, multiplier)\n\
    \        multiplier += 1\n\n    return number - 1\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplvcd7209.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmplvcd7209.py\", line 34,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmplvcd7209.py\", line\
    \ 29, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = math.trunc(number)\n    decimal_part = number\
    \ - int_part\n    if decimal_part > 0:\n        return float(decimal_part)\n \
    \   else:\n        return int_part\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfscqarq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzfscqarq.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpzfscqarq.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpzfscqarq.py\"\
    , line 10, in truncate_number\n    int_part = math.trunc(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1.0:\n        return 0.0\n    elif number\
    \ < 1.0:\n        return number\n    else:\n        decimal = number - int(number)\n\
    \        return float(decimal)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    decimal_part = number -\
    \ int_part\n    if decimal_part < 1:\n        decimal_part = 1\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpilz_35wj.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpilz_35wj.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpilz_35wj.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\n@curry2\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjjwpy6dc.py\", line\
    \ 15, in <module>\n    @curry2\nNameError: name 'curry2' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part, fract_part = math.modf(number)\n    return\
    \ fract_part * 10**math.ceil(math.log(fract_part, 10))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjj0cbphs.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpjj0cbphs.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpjj0cbphs.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpjj0cbphs.py\"\
    , line 10, in truncate_number\n    int_part, fract_part = math.modf(number)\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer = int(number)\n    decimal = number - integer\n\
    \    if integer < 1:\n        raise ValueError(\"Invalid number. Truncate number\
    \ has more than \"\n                         \"one decimal.\")\n    return decimal\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer, decimal = math.modf(number)\n    return decimal\
    \ or 1\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpystfslrb.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpystfslrb.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpystfslrb.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpystfslrb.py\"\
    , line 10, in truncate_number\n    integer, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return round(number, 6)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2tcndtmg.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp2tcndtmg.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp2tcndtmg.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number)\n\n\ndef check(candidate):\n  \
    \  assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_y0o83xw.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp_y0o83xw.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp_y0o83xw.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    decimal_part = number -\
    \ int_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return round(number, -int(math.floor(math.log10(abs(number)))))\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1h1juz0f.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp1h1juz0f.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1h1juz0f.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp1h1juz0f.py\"\
    , line 10, in truncate_number\n    return round(number, -int(math.floor(math.log10(abs(number)))))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part, decimal = math.modf(number)\n    return decimal\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3deq5hvx.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp3deq5hvx.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp3deq5hvx.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp3deq5hvx.py\"\
    , line 10, in truncate_number\n    int_part, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimals = math.fmod(number, 1)\n    if decimals ==\
    \ 0:\n        integer = 0\n    else:\n        integer = math.ceil(number) - math.floor(number)\n\
    \    return float(decimals) * 1.0 / integer\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx0gb0irh.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpx0gb0irh.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpx0gb0irh.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpx0gb0irh.py\"\
    , line 10, in truncate_number\n    decimals = math.fmod(number, 1)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    factor = 10.0 ** len(str(int(number)))\n    return number\
    \ / factor\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjwsr7y5t.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpjwsr7y5t.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpjwsr7y5t.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    decimal_part = number -\
    \ int_part\n    if decimal_part < 1e-6:\n        return decimal_part\n    else:\n\
    \        return decimal_part * 10\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1e46bwlt.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp1e46bwlt.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1e46bwlt.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1.0:\n        return number\n    else:\n\
    \        decimal_part = math.fmod(number, 1)\n        return math.trunc(number)\
    \ + decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1679s1iz.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp1679s1iz.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1679s1iz.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp1679s1iz.py\"\
    , line 13, in truncate_number\n    decimal_part = math.fmod(number, 1)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimals = math.fmod(number, 1)\n    return number -\
    \ decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpymskh2al.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpymskh2al.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpymskh2al.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpymskh2al.py\"\
    , line 10, in truncate_number\n    decimals = math.fmod(number, 1)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"number must\
    \ be positive\")\n\n    integer = number\n    decimals = -1\n    while integer\
    \ != 0:\n        decimals += 1\n        integer /= 10\n\n    return number - decimals\
    \ * 10\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ozunorp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_ozunorp.py\", line 28,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp_ozunorp.py\", line\
    \ 23, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return float(decimal_part)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    abs_val = math.fabs(number)\n    quotient, remainder\
    \ = divmod(abs_val, 1)\n    decimal = abs_val - quotient\n    return decimal\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpimt3o_eo.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpimt3o_eo.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpimt3o_eo.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpimt3o_eo.py\"\
    , line 10, in truncate_number\n    abs_val = math.fabs(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Cannot truncate\
    \ negative number\")\n    elif number == 0:\n        raise ValueError(\"Cannot\
    \ truncate to zero\")\n    elif number < 1:\n        # Only truncate away decimals,\
    \ not zeros.\n        return float(number)\n\n    int_part = math.floor(number)\n\
    \    decimal_part = number - int_part\n    return float(decimal_part)\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcak4_147.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcak4_147.py\", line 29,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpcak4_147.py\", line\
    \ 24, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpcak4_147.py\"\
    , line 18, in truncate_number\n    int_part = math.floor(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if not isinstance(number, numbers.Number):\n       \
    \ raise TypeError()\n    decimals = number\n    digits = 0\n    while number >\
    \ 0:\n        number -= int(number % 10)\n        digits += 1\n    if number <\
    \ 0:\n        decimals = -decimals\n        digits = len(str(abs(number)))\n\n\
    \    return decimals / 10 ** (digits - decimals)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1cxbj9sr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1cxbj9sr.py\", line 30,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1cxbj9sr.py\", line\
    \ 25, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp1cxbj9sr.py\"\
    , line 10, in truncate_number\n    if not isinstance(number, numbers.Number):\n\
    NameError: name 'numbers' is not defined. Did you mean: 'number'?\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part, decimal = math.modf(number)\n    return decimal\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp849awh11.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp849awh11.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp849awh11.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp849awh11.py\"\
    , line 10, in truncate_number\n    int_part, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integral = number\n    decimal = int(number) - int(round(number))\n\
    \    if decimal > 0:\n        return number - decimal + float(decimal)\n    else:\n\
    \        return number - number % 1 - float(decimal)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv20uw65k.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpv20uw65k.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpv20uw65k.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return int(number)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6_tv6ji.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpe6_tv6ji.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpe6_tv6ji.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0.:\n        raise ValueError(\"truncate_number:\
    \ given number is not a positive number.\")\n    int_part = floor(number)\n  \
    \  decimal_part = number - int_part\n    return decimal_part\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6oy552kx.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp6oy552kx.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp6oy552kx.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp6oy552kx.py\"\
    , line 12, in truncate_number\n    int_part = floor(number)\nNameError: name 'floor'\
    \ is not defined. Did you mean: 'float'?\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return round(number, -int(math.floor(math.log10(abs(number)))))\
    \ if number > 0 else 0\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpovu_texo.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpovu_texo.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpovu_texo.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpovu_texo.py\"\
    , line 10, in truncate_number\n    return round(number, -int(math.floor(math.log10(abs(number)))))\
    \ if number > 0 else 0\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 1:\n\
    \        raise ValueError('The number should be positive.')\n\n    int_part, dec\
    \ = math.modf(number)\n    return dec\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_x1_irk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1_x1_irk.py\", line 25,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1_x1_irk.py\", line\
    \ 20, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp1_x1_irk.py\"\
    , line 15, in truncate_number\n    int_part, dec = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number) if number < 1 else number - math.floor(number)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6uo6s3wy.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp6uo6s3wy.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp6uo6s3wy.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp6uo6s3wy.py\"\
    , line 10, in truncate_number\n    return float(number) if number < 1 else number\
    \ - math.floor(number)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpddrz4k65.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpddrz4k65.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpddrz4k65.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823382
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    quotient = number / 10\n    modulus = number - quotient\
    \ * 10\n    return modulus if modulus else 0\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_dx4g16.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpq_dx4g16.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpq_dx4g16.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number) if number < 1 else number\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jadq3r_.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp8jadq3r_.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp8jadq3r_.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - number % 1\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmsooe4a9.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpmsooe4a9.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpmsooe4a9.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number <= 0:\n        raise ValueError('Cannot truncate\
    \ negative number')\n\n    int_part, decimal_part = math.modf(number)\n    if\
    \ abs(int_part) < 1.0:\n        int_part = int(number)\n\n    if decimal_part\
    \ >= 1.0:\n        return int_part\n    else:\n        return round(number, decimal_part)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyi0vu6iw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpyi0vu6iw.py\", line 29,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpyi0vu6iw.py\", line\
    \ 24, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpyi0vu6iw.py\"\
    , line 13, in truncate_number\n    int_part, decimal_part = math.modf(number)\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    decimal = number - int_part\n\
    \    return decimal\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number) if number > 1 else number\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzi_4cnzz.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpzi_4cnzz.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpzi_4cnzz.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimals = number - int(number)\n    return decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1:\n        raise NumberTruncationError(\"\
    Cannot truncate a number < 1.\")\n    elif number == 1:\n        return number\n\
    \n    factor = 10.0\n    while True:\n        factor /= 10.0\n        if number\
    \ < factor:\n            return factor\n        if factor <= 1e-14:\n        \
    \    # This condition will never be met because a factor of 10 is always\n   \
    \         # bigger than a factor of 0.1 -- so it can't be that factor is 0.1\n\
    \            # but number < factor.\n            raise NumberTruncationError(\"\
    Cannot truncate a number > 10^15\")\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7i852taa.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7i852taa.py\", line 33,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp7i852taa.py\", line\
    \ 28, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp7i852taa.py\"\
    , line 24, in truncate_number\n    raise NumberTruncationError(\"Cannot truncate\
    \ a number > 10^15\")\nNameError: name 'NumberTruncationError' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    frac_part = number - int_part\n\
    \    return frac_part * 10\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3scpe4jj.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp3scpe4jj.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp3scpe4jj.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # If the given number has no decimal part then simply\
    \ return it\n    decimal = abs(number - int(number))\n    if decimal < EPSILON:\n\
    \        return number\n\n    # Compute the number of digits that is less than\
    \ the precision\n    # and truncate the number accordingly\n    num_digits = len(str(decimal))\
    \ - 2\n    return float(str(decimal)[:num_digits])\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzc_464cb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzc_464cb.py\", line 27,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpzc_464cb.py\", line\
    \ 22, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpzc_464cb.py\"\
    , line 12, in truncate_number\n    if decimal < EPSILON:\nNameError: name 'EPSILON'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = float(number)\n    integer = 0\n    decimal\
    \ = 0\n    if number < 0:\n        raise ValueError(\"Cannot truncate negative\
    \ number.\")\n    if number > sys.float_info.max:\n        raise ValueError(\"\
    Cannot truncate number larger than %s.\" % sys.float_info.max)\n    if number\
    \ < sys.float_info.epsilon:\n        return number\n    while number != 0.0:\n\
    \        number, integer = divmod(number, 10)\n        decimal = decimal + integer\
    \ / 10\n    return number - decimal\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphisx60t7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphisx60t7.py\", line 31,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmphisx60t7.py\", line\
    \ 26, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmphisx60t7.py\"\
    , line 15, in truncate_number\n    if number > sys.float_info.max:\nNameError:\
    \ name 'sys' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(int(number))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpccz_hv7p.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpccz_hv7p.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpccz_hv7p.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part, decimal_part = math.modf(number)\n   \
    \ decimal_part_string = \"0.%df\" % decimal_part\n    return float(integer_part)\
    \ + float(decimal_part_string)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1g3tpv36.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp1g3tpv36.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1g3tpv36.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp1g3tpv36.py\"\
    , line 10, in truncate_number\n    integer_part, decimal_part = math.modf(number)\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimal_part, integer = math.modf(number)\n    return\
    \ float(round(decimal_part * 100.0))\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6625xj63.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp6625xj63.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp6625xj63.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp6625xj63.py\"\
    , line 10, in truncate_number\n    decimal_part, integer = math.modf(number)\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ee1vrnv.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp3ee1vrnv.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp3ee1vrnv.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp3ee1vrnv.py\"\
    , line 10, in truncate_number\n    return math.trunc(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(round(number, 1))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1a8g8srk.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp1a8g8srk.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1a8g8srk.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = number * 10.0\n    whole = number // 1\n  \
    \  decimal = number % 1\n    if whole == 1:\n        return decimal\n    return\
    \ decimal\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp122qnb1p.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp122qnb1p.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp122qnb1p.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = math.floor(number)\n    decimal = number\
    \ - int_part\n    decimal = round(decimal, 3)\n    return decimal\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq7mwed7u.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpq7mwed7u.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpq7mwed7u.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpq7mwed7u.py\"\
    , line 10, in truncate_number\n    int_part = math.floor(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - number % 1\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmsooe4a9.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpmsooe4a9.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpmsooe4a9.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = floor(number)\n    decimal_part = floor(number\
    \ - integer_part)\n    if decimal_part != 0.5:\n        decimal_part += 1\n  \
    \  return decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpauwk94on.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpauwk94on.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpauwk94on.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpauwk94on.py\"\
    , line 10, in truncate_number\n    integer_part = floor(number)\nNameError: name\
    \ 'floor' is not defined. Did you mean: 'float'?\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    float_part = math.trunc(number)\n    int_part = math.floor(number)\n\
    \n    if float_part > number:\n        int_part += 1\n\n    return float(int_part)\
    \ / float(float_part)\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65kdfyb8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp65kdfyb8.py\", line 25,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp65kdfyb8.py\", line\
    \ 20, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp65kdfyb8.py\"\
    , line 10, in truncate_number\n    float_part = math.trunc(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number == 0.0 or number == float('inf') or number\
    \ == -float('inf'):\n        raise ValueError(\"Given number is neither positive\
    \ nor negative infinity\")\n\n    if number > 0:\n        return number % 1\n\
    \    else:\n        return number * (1.0 / 1)\n\n\ndef check(candidate):\n   \
    \ assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number == 0:\n        return number\n\n    number\
    \ = math.trunc(number)\n\n    if number % 1 == 0:\n        return number\n   \
    \ else:\n        return number - 1\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5t1pvnpp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5t1pvnpp.py\", line 27,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp5t1pvnpp.py\", line\
    \ 22, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp5t1pvnpp.py\"\
    , line 13, in truncate_number\n    number = math.trunc(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if not number:\n        return 0\n    return math.trunc(number\
    \ * 10 ** (len(str(int(number))) - 1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoqdzk4mu.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpoqdzk4mu.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpoqdzk4mu.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpoqdzk4mu.py\"\
    , line 12, in truncate_number\n    return math.trunc(number * 10 ** (len(str(int(number)))\
    \ - 1))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"given number\
    \ must be positive\")\n    decimals = math.ceil(math.log(number, 10))\n    return\
    \ number - decimals * math.pow(10, -decimals)\n\n\ndef check(candidate):\n   \
    \ assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf4d51dp8.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpf4d51dp8.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpf4d51dp8.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpf4d51dp8.py\"\
    , line 12, in truncate_number\n    decimals = math.ceil(math.log(number, 10))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - truncate_number(number - int(number))\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsjltydvd.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpsjltydvd.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpsjltydvd.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpsjltydvd.py\"\
    , line 10, in truncate_number\n    return number - truncate_number(number - int(number))\n\
    \  File \"/tmp/tmpsjltydvd.py\", line 10, in truncate_number\n    return number\
    \ - truncate_number(number - int(number))\n  File \"/tmp/tmpsjltydvd.py\", line\
    \ 10, in truncate_number\n    return number - truncate_number(number - int(number))\n\
    \  [Previous line repeated 994 more times]\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer = int(number)\n    decimal = number - integer\n\
    \n    if decimal > 0.5:\n        return integer + decimal\n    else:\n       \
    \ return integer\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfpun3h7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpnfpun3h7.py\", line 25,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpnfpun3h7.py\", line\
    \ 20, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    assert number > 0, number\n\n    decimal_part = number\
    \ - int(number)\n    truncated_number = number - int(number)\n    return truncated_number\
    \ - decimal_part\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzmcsn3jk.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzmcsn3jk.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpzmcsn3jk.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1:\n        return 0\n    else:\n      \
    \  return math.trunc(number) * 1.0 / float(math.fabs(number))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9awwu0zp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp9awwu0zp.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp9awwu0zp.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp9awwu0zp.py\"\
    , line 13, in truncate_number\n    return math.trunc(number) * 1.0 / float(math.fabs(number))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimal_digits = number.as_tuple()[1]\n    precision\
    \ = int(math.log10(abs(number)) + 1)\n    return round(number / 10**precision,\
    \ decimal_digits)\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvi07aqib.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpvi07aqib.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpvi07aqib.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpvi07aqib.py\"\
    , line 10, in truncate_number\n    decimal_digits = number.as_tuple()[1]\nAttributeError:\
    \ 'float' object has no attribute 'as_tuple'\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(math.trunc(number))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0a4e3h9p.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp0a4e3h9p.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp0a4e3h9p.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp0a4e3h9p.py\"\
    , line 10, in truncate_number\n    return float(math.trunc(number))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    precision = sys.float_info.dig\n    # round down to\
    \ nearest integer\n    number *= (1.0 / precision)\n    # remember the fractional\
    \ parts\n    fractional_part = number - math.floor(number)\n    # determine if\
    \ the number is in the upper or lower half of the interval\n    interval_length\
    \ = int(math.ceil(number))\n    lower_limit = fractional_part * precision\n  \
    \  upper_limit = fractional_part * precision + interval_length * precision\n \
    \   if number < lower_limit:\n        return lower_limit\n    elif number > upper_limit:\n\
    \        return upper_limit\n    return fractional_part\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3xpzhi2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpv3xpzhi2.py\", line 32,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpv3xpzhi2.py\", line\
    \ 27, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpv3xpzhi2.py\"\
    , line 10, in truncate_number\n    precision = sys.float_info.dig\nNameError:\
    \ name 'sys' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"truncate_number\
    \ expects a positive number\")\n\n    if abs(number) < 1.0:\n        raise ValueError(\"\
    truncate_number expects number to be greater than 1.0\")\n\n    if number < 1.0:\n\
    \        return int(number)\n\n    decimals = math.floor(math.log(number, 10)\
    \ + 1)\n    whole = int(number)\n    return (whole - decimals) if decimals > 0\
    \ else whole\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n  \
    \  assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4hebs77.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_4hebs77.py\", line 30,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp_4hebs77.py\", line\
    \ 25, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp_4hebs77.py\"\
    , line 19, in truncate_number\n    decimals = math.floor(math.log(number, 10)\
    \ + 1)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfy0sqkje.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpfy0sqkje.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpfy0sqkje.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpfy0sqkje.py\"\
    , line 10, in truncate_number\n    return math.trunc(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number, decimal = abs(number), number\n    while decimal\
    \ > 10:\n        decimal = decimal - 10\n        number -= 1\n    return float(number)\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_6wl0lnw.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_6wl0lnw.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp_6wl0lnw.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.floor(number * 10 + 0.5) / 10.0\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvb1qr3u.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmptvb1qr3u.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmptvb1qr3u.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmptvb1qr3u.py\"\
    , line 10, in truncate_number\n    return math.floor(number * 10 + 0.5) / 10.0\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1.0:\n        raise ValueError\n\n    decimals\
    \ = round(number, -int(math.floor(math.log10(number))))\n\n    return round(number,\
    \ -int(math.floor(math.log10(number))))\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps2vo1tlh.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmps2vo1tlh.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmps2vo1tlh.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmps2vo1tlh.py\"\
    , line 13, in truncate_number\n    decimals = round(number, -int(math.floor(math.log10(number))))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # https://stackoverflow.com/questions/18338851/how-to-get-the-decimal-part-of-a-floating-point-number\n\
    \    # https://stackoverflow.com/questions/2238178/efficient-way-to-remove-all-decimal-points-from-a-float\n\
    \    decimal_part = round(number % 1, decimals=1)\n    int_part = number - decimal_part\n\
    \    float_part = (int_part / 10 ** len(str(int_part)))\n    if float_part !=\
    \ int_part:\n        raise ValueError(\"Truncation of decimal part failed.\")\n\
    \    return decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph4roqq5e.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmph4roqq5e.py\", line 26,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmph4roqq5e.py\", line\
    \ 21, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmph4roqq5e.py\"\
    , line 12, in truncate_number\n    decimal_part = round(number % 1, decimals=1)\n\
    TypeError: 'decimals' is an invalid keyword argument for round()\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(math.trunc(number))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0a4e3h9p.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp0a4e3h9p.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp0a4e3h9p.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp0a4e3h9p.py\"\
    , line 10, in truncate_number\n    return float(math.trunc(number))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimals_part = number\
    \ - integer_part\n    return float(decimals_part)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimals = math.ceil(math.log(number, 10))\n    decimals\
    \ = math.trunc(decimals)\n    return float(number) / (10 ** decimals)\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_1nr4or.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpp_1nr4or.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpp_1nr4or.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpp_1nr4or.py\"\
    , line 10, in truncate_number\n    decimals = math.ceil(math.log(number, 10))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part, decimal = math.modf(number)\n    if not decimal:\n\
    \        return number\n    else:\n        decimal_part = float(decimal)\n   \
    \     return decimal_part\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprs8tog58.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmprs8tog58.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmprs8tog58.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmprs8tog58.py\"\
    , line 10, in truncate_number\n    int_part, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = round(number, 0)\n    if number < 1:\n    \
    \    raise ValueError('Negative number can\\'t be truncated')\n    multiplier\
    \ = 10 ** (len(str(number)) - 1)\n    number = round(number * multiplier, 0)\n\
    \    if number < 0:\n        number /= multiplier\n        number -= 1\n    return\
    \ number\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgf6c73lp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgf6c73lp.py\", line 27,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpgf6c73lp.py\", line\
    \ 22, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Value must\
    \ be positive\")\n\n    if number < 1:\n        return number\n\n    integer_part\
    \ = int(number)\n    decimal_part = number - integer_part\n\n    return decimal_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part, dec_part = math.modf(number)\n    return float(dec_part)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc3ta50vw.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpc3ta50vw.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpc3ta50vw.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpc3ta50vw.py\"\
    , line 10, in truncate_number\n    int_part, dec_part = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return round(number, -int(math.floor(math.log10(number))))\n\
    \n\n@lru_cache(None)\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpacld0o1t.py\", line\
    \ 13, in <module>\n    @lru_cache(None)\nNameError: name 'lru_cache' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer, decimal = math.modf(number)\n    return decimal\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp1pl1oyi.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpp1pl1oyi.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpp1pl1oyi.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpp1pl1oyi.py\"\
    , line 10, in truncate_number\n    integer, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0:\n        return -1 * truncate_number(-number)\n\
    \    if number < 1:\n        return number\n\n    decimals = \"\"\n    integer\
    \ = round(number)\n    while integer >= 1:\n        decimals = str(integer % 10)\
    \ + decimals\n        integer = int(integer / 10)\n\n    decimals = decimals[::-1]\n\
    \n    return float(decimals)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjuw7d8dj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpjuw7d8dj.py\", line 32,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpjuw7d8dj.py\", line\
    \ 27, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = int(number)\n    decimals = number % 1\n  \
    \  number = number // 1\n    return number, decimals\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr9desz_x.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpr9desz_x.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpr9desz_x.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - (number % 1)\n\n@njit(cache=True)\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20cw2kwl.py\", line\
    \ 12, in <module>\n    @njit(cache=True)\nNameError: name 'njit' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    abs_num = abs(number)\n    decimal_part = abs_num -\
    \ int(abs_num)\n    int_part = round(decimal_part)\n    return int_part if abs(int_part)\
    \ <= abs(decimal_part) else decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpftqic6dt.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpftqic6dt.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpftqic6dt.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number * 1e12) / 1e12\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3_293q0.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmps3_293q0.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmps3_293q0.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmps3_293q0.py\"\
    , line 10, in truncate_number\n    return math.trunc(number * 1e12) / 1e12\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = float(number)\n    decimal = number - int(number)\n\
    \    if decimal == 0:\n        return number\n    else:\n        return number\
    \ - decimal\n\n\n@functools.lru_cache(maxsize=1024)\ndef check(candidate):\n \
    \   assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4uf8rm2r.py\", line\
    \ 18, in <module>\n    @functools.lru_cache(maxsize=1024)\nNameError: name 'functools'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    decimal_part = number -\
    \ int_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part, decimal_part = math.modf(number)\n   \
    \ return decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprwas2onq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmprwas2onq.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmprwas2onq.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmprwas2onq.py\"\
    , line 10, in truncate_number\n    integer_part, decimal_part = math.modf(number)\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number) if number < 1 else math.floor(number)\
    \ - 1\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc7g76435.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpc7g76435.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpc7g76435.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpc7g76435.py\"\
    , line 10, in truncate_number\n    return float(number) if number < 1 else math.floor(number)\
    \ - 1\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"Truncation\
    \ can only be applied to positive numbers\")\n    number, integer = math.modf(number)\n\
    \    decimals = math.fabs(integer - number)\n    return number * 10 ** decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpli8ixs3i.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpli8ixs3i.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpli8ixs3i.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpli8ixs3i.py\"\
    , line 12, in truncate_number\n    number, integer = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number) - float(math.floor(number))\n\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcuqodfsf.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpcuqodfsf.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpcuqodfsf.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpcuqodfsf.py\"\
    , line 10, in truncate_number\n    return float(number) - float(math.floor(number))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer, decimal = math.modf(number)\n    return decimal\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp1pl1oyi.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpp1pl1oyi.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpp1pl1oyi.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpp1pl1oyi.py\"\
    , line 10, in truncate_number\n    integer, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimal = number - int(number)\n    if decimal < 1:\n\
    \        return number\n    else:\n        return number - decimal\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_r9z_th.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpe_r9z_th.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpe_r9z_th.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Float number\
    \ must be positive\")\n    if number < 1.0:\n        return round(number, 1)\n\
    \    elif number < 1.0:\n        return round(number, 0)\n    elif number < 0.1:\n\
    \        number = round(number, 1)\n        return round(number, 0) - number\n\
    \    else:\n        number = round(number, 0)\n        return round(number, 1)\
    \ - number\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa3zrfko_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpa3zrfko_.py\", line 30,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpa3zrfko_.py\", line\
    \ 25, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    remaining = number - int(number)\n    decimal = math.floor(remaining\
    \ / 10) if remaining % 10 else 0\n    return number - decimal\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpug_kk9lo.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpug_kk9lo.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpug_kk9lo.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpug_kk9lo.py\"\
    , line 11, in truncate_number\n    decimal = math.floor(remaining / 10) if remaining\
    \ % 10 else 0\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1.0:\n        return number\n\n    factor\
    \ = 1\n    while number >= factor:\n        number *= 10\n        factor /= 10\n\
    \n    if factor < 10:\n        return float(factor) / float(number)\n    else:\n\
    \        return number\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659976751
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number * 100) / 100\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfrllpq4.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpxfrllpq4.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpxfrllpq4.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpxfrllpq4.py\"\
    , line 10, in truncate_number\n    return math.trunc(number * 100) / 100\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number <= 0.:\n        raise ValueError(\"number\
    \ can't be less than 0\")\n    whole = int(number)\n    decimal = int(round(number\
    \ - whole))\n    return whole, decimal\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxhiumct8.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxhiumct8.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpxhiumct8.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return round(number, -1)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b8z2gdm.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp5b8z2gdm.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp5b8z2gdm.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(round(number))\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb51d4_l1.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpb51d4_l1.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpb51d4_l1.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number) if number > 0 else 0.0\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    exponent = int(math.floor(math.log(number, 10)))\n \
    \   number = number - int(number ** (1 / exponent))\n    return number ** (1 /\
    \ exponent)\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n   \
    \ assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyqky_rwl.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpyqky_rwl.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpyqky_rwl.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpyqky_rwl.py\"\
    , line 10, in truncate_number\n    exponent = int(math.floor(math.log(number,\
    \ 10)))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return round(number, int(floor(log10(number)) + 1))\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2j0tefdc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp2j0tefdc.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp2j0tefdc.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp2j0tefdc.py\"\
    , line 10, in truncate_number\n    return round(number, int(floor(log10(number))\
    \ + 1))\nNameError: name 'floor' is not defined. Did you mean: 'float'?\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    assert number > 0, \"Negative number not allowed\"\n\
    \    return number - truncate_number(number - int(number))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zrp6edn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3zrp6edn.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp3zrp6edn.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp3zrp6edn.py\"\
    , line 11, in truncate_number\n    return number - truncate_number(number - int(number))\n\
    \  File \"/tmp/tmp3zrp6edn.py\", line 11, in truncate_number\n    return number\
    \ - truncate_number(number - int(number))\n  File \"/tmp/tmp3zrp6edn.py\", line\
    \ 11, in truncate_number\n    return number - truncate_number(number - int(number))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmp3zrp6edn.py\", line\
    \ 10, in truncate_number\n    assert number > 0, \"Negative number not allowed\"\
    \nRecursionError: maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimal_part = abs(number) - math.floor(abs(number))\n\
    \    return number - decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmst93xbc.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmst93xbc.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpmst93xbc.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpmst93xbc.py\"\
    , line 10, in truncate_number\n    decimal_part = abs(number) - math.floor(abs(number))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    return number - int_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    assert number > 0, \"Number must be positive\"\n   \
    \ int_part, decimal = math.modf(number)\n    assert decimal >= 0.0\n    return\
    \ decimal\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpowtt65y2.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpowtt65y2.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpowtt65y2.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpowtt65y2.py\"\
    , line 11, in truncate_number\n    int_part, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number % 1.0:\n        integer_part = math.trunc(number)\n\
    \        decimal_part = number - integer_part\n    else:\n        integer_part\
    \ = math.floor(number)\n        decimal_part = 0.0\n    return float(decimal_part)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo43wv9q4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo43wv9q4.py\", line 25,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpo43wv9q4.py\", line\
    \ 20, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpo43wv9q4.py\"\
    , line 11, in truncate_number\n    integer_part = math.trunc(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(math.trunc(number))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0a4e3h9p.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp0a4e3h9p.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp0a4e3h9p.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp0a4e3h9p.py\"\
    , line 10, in truncate_number\n    return float(math.trunc(number))\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1:\n        return 0\n    integer, decimal\
    \ = math.modf(number)\n    return decimal\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpln6mlw4u.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpln6mlw4u.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpln6mlw4u.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpln6mlw4u.py\"\
    , line 12, in truncate_number\n    integer, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfy0sqkje.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpfy0sqkje.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpfy0sqkje.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpfy0sqkje.py\"\
    , line 10, in truncate_number\n    return math.trunc(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    decimal = number - int_part\n\
    \    return decimal\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"Number cannot\
    \ be zero or negative\")\n\n    if number < 1.0:\n        raise ValueError(\"\
    Number is too small\")\n\n    return round(number, 10)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf2s5otk2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf2s5otk2.py\", line 25,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpf2s5otk2.py\", line\
    \ 20, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    rounded_number = round(number)\n    return rounded_number\
    \ - number % rounded_number\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0j7xdzaw.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp0j7xdzaw.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp0j7xdzaw.py\", line\
    \ 16, in check\n    assert candidate(1.25) == 0.25\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number, integer = math.modf(number)\n    if integer\
    \ != 0:\n        number = number\n        integer = 1\n    else:\n        integer\
    \ = math.ceil(integer)\n    return number * (1.0 / integer)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe4if5q7l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe4if5q7l.py\", line 25,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpe4if5q7l.py\", line\
    \ 20, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpe4if5q7l.py\"\
    , line 10, in truncate_number\n    number, integer = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number <= 0.0:\n        raise ValueError(\"The number\
    \ cannot be smaller than 0.\")\n\n    trunc_part = math.modf(number)[1]\n    return\
    \ trunc_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n  \
    \  assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprkuz_5hb.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmprkuz_5hb.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmprkuz_5hb.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmprkuz_5hb.py\"\
    , line 13, in truncate_number\n    trunc_part = math.modf(number)[1]\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1.0:\n        return 0.0\n    # In case\
    \ number is 0\n    if number < 1.e4:\n        return round(number)\n    power\
    \ = int(np.floor(np.log10(number)))\n    if power < 1:\n        return number\n\
    \    elif power == 1:\n        return round(number) + 0.0\n    elif power == 2:\n\
    \        power = 2\n    else:\n        # Assume power is odd\n        power -=\
    \ 1\n    return round(number) / pow(10, power)\n\n\ndef check(candidate):\n  \
    \  assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplaanc22m.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmplaanc22m.py\", line 34,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmplaanc22m.py\", line\
    \ 29, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number * 10) * 1.0 / 10\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp446b0lmd.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp446b0lmd.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp446b0lmd.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp446b0lmd.py\"\
    , line 10, in truncate_number\n    return math.trunc(number * 10) * 1.0 / 10\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return int(number * 10) % 10\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbj479cup.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpbj479cup.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpbj479cup.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ee1vrnv.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp3ee1vrnv.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp3ee1vrnv.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp3ee1vrnv.py\"\
    , line 10, in truncate_number\n    return math.trunc(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = float(number)\n    if number < 1:\n       \
    \ raise ValueError(\"Number must be bigger than 0.\")\n    if number < 0:\n  \
    \      number = -number\n    number = math.trunc(number)\n    if number > 0 and\
    \ number % 1 == 0:\n        number = float(number - number % 1)\n    return number\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj3226ytx.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj3226ytx.py\", line 27,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpj3226ytx.py\", line\
    \ 22, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpj3226ytx.py\"\
    , line 15, in truncate_number\n    number = math.trunc(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = math.ceil(number)\n    decimal = number - math.floor(number)\n\
    \    return decimal\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpff2xl6ck.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpff2xl6ck.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpff2xl6ck.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpff2xl6ck.py\"\
    , line 10, in truncate_number\n    number = math.ceil(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer = int(number)\n    decimal = number - integer\n\
    \    return decimal\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number) if number < 1 else number\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ehb948u.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp2ehb948u.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp2ehb948u.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number cannot\
    \ be smaller than 1\")\n\n    # get the decimal part\n    decimal = number % 1\n\
    \n    # find and return the integer part\n    int_part = int(number)\n    if number\
    \ - decimal > 0.5:\n        int_part += 1\n\n    return decimal\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    sign = number < 0\n    if sign:\n        number = -number\n\
    \n    integer = int(number)\n    decimal = number - integer if sign else number\n\
    \    return decimal\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn25ok4i9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpn25ok4i9.py\", line 25,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpn25ok4i9.py\", line\
    \ 20, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number * (10 ** len(str(number))))\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmc2xh6bd.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpmc2xh6bd.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpmc2xh6bd.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpmc2xh6bd.py\"\
    , line 10, in truncate_number\n    return math.trunc(number * (10 ** len(str(number))))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"number must\
    \ be > 0\")\n\n    # round number to be able to truncate without precision loss\n\
    \    number = round(number, decimals=DECIMALS)\n\n    # truncate number into integer\
    \ part\n    number = int(number)\n\n    # truncate number into decimal part\n\
    \    number = round(number, decimals=0)\n\n    return number\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8xkxrw77.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8xkxrw77.py\", line 31,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp8xkxrw77.py\", line\
    \ 26, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp8xkxrw77.py\"\
    , line 14, in truncate_number\n    number = round(number, decimals=DECIMALS)\n\
    NameError: name 'DECIMALS' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = floor(number)\n    decimal_part = floor(number\
    \ - integer_part)\n\n    if decimal_part > 0:\n        return truncate_number(decimal_part)\n\
    \    else:\n        return integer_part\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnanfwtan.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpnanfwtan.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpnanfwtan.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpnanfwtan.py\"\
    , line 10, in truncate_number\n    integer_part = floor(number)\nNameError: name\
    \ 'floor' is not defined. Did you mean: 'float'?\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    if abs(decimal_part) < 1:\n        return 1.0\n    return\
    \ decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptb9_dvwd.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmptb9_dvwd.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmptb9_dvwd.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Only positive\
    \ numbers allowed.\")\n    return number - int(round(number))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7snjk88.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpm7snjk88.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpm7snjk88.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimal_part = number - int(number)\n    if decimal_part\
    \ < 0.5:\n        return round(number, 1)\n    else:\n        return round(number,\
    \ -1)\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmper39t64l.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmper39t64l.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmper39t64l.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number) if number > 0 else 0\n\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Negative\
    \ numbers cannot be truncated\")\n    decimals_number = get_decimals(number)\n\
    \    if decimals_number < 2:\n        return 0\n    return number % 1\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfnyvk9kz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfnyvk9kz.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpfnyvk9kz.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpfnyvk9kz.py\"\
    , line 12, in truncate_number\n    decimals_number = get_decimals(number)\nNameError:\
    \ name 'get_decimals' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number) if number > 0 else 0\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    if number - int_part ==\
    \ 0.5:\n        return int_part\n    else:\n        return number - int_part -\
    \ 0.5\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6e46qixi.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp6e46qixi.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp6e46qixi.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0:\n        raise ZeroDivisionError(\"Cannot\
    \ truncate a negative number\")\n    if number == 0.0:\n        return number\n\
    \    elif number < 1.0:\n        return number\n    else:\n        integer_part\
    \ = int(number)\n        decimal_part = number - integer_part\n        return\
    \ decimal_part\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n  \
    \  assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number) - float(trunc(number))\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptn9jeflj.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmptn9jeflj.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmptn9jeflj.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmptn9jeflj.py\"\
    , line 10, in truncate_number\n    return float(number) - float(trunc(number))\n\
    NameError: name 'trunc' is not defined\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = abs(number\
    \ - integer_part)\n    return integer_part + (decimal_part * 10) if decimal_part\
    \ else integer_part\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpca867ilw.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpca867ilw.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpca867ilw.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number) if number < 0.5 else number\
    \ - int(number)\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n \
    \   assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: 1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = float(number)\n    integer_part, decimals =\
    \ math.modf(number)\n    fraction = number - integer_part\n    \n    # Make sure\
    \ that the decimal part is always smaller or equal to 1\n    \n    if abs(fraction)\
    \ < 1.e-6:\n        return float(integer_part)\n    \n    return float(integer_part)\
    \ + decimals\n</cell>\n<cell>\ntruncate_number(0.12345678)\n</cell>\n<cell>\n\
    truncate_number(10.0)\n</cell>\n<text>\nNow let's do some simple rounding:\n\n\
    \n</text>\n<cell>\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n \
    \   assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpu2obdvi_.py\", line 28\n    Now let's do some simple rounding:\n\
    \           ^\nSyntaxError: unterminated string literal (detected at line 28)\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - truncate_number_integer(number)\n\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpytzbca.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpzpytzbca.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpzpytzbca.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpzpytzbca.py\"\
    , line 10, in truncate_number\n    return number - truncate_number_integer(number)\n\
    NameError: name 'truncate_number_integer' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = math.trunc(number)\n    remainder = number\
    \ - int_part\n    return remainder if remainder > 0.5 else remainder\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzmndwmm2.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpzmndwmm2.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpzmndwmm2.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpzmndwmm2.py\"\
    , line 10, in truncate_number\n    int_part = math.trunc(number)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number) - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.ceil(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0au5wcnz.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp0au5wcnz.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp0au5wcnz.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp0au5wcnz.py\"\
    , line 10, in truncate_number\n    return number - math.ceil(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part, remainder = math.modf(number)\n    if remainder\
    \ < 0:\n        int_part += 1\n    return float(int_part)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1o0gmpkl.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1o0gmpkl.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1o0gmpkl.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp1o0gmpkl.py\"\
    , line 10, in truncate_number\n    int_part, remainder = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer = int(number)\n    decimal = number - integer\n\
    \    return decimal\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number * 1e10) / 1e10\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvy3hqei.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmphvy3hqei.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmphvy3hqei.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmphvy3hqei.py\"\
    , line 10, in truncate_number\n    return math.trunc(number * 1e10) / 1e10\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.trunc(number) if is_number(number) else\
    \ number\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2obhhvjo.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp2obhhvjo.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp2obhhvjo.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp2obhhvjo.py\"\
    , line 10, in truncate_number\n    return math.trunc(number) if is_number(number)\
    \ else number\nNameError: name 'is_number' is not defined. Did you mean: 'number'?\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0.:\n        raise ValueError(\"number must\
    \ be positive\")\n    if number == 0.:\n        return 0.\n    # Divide number\
    \ into integer part and decimal part.\n    number = abs(number)\n    integer_part,\
    \ decimal_part = math.modf(number)\n    return decimal_part\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8nywjuyn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8nywjuyn.py\", line 26,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp8nywjuyn.py\", line\
    \ 21, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp8nywjuyn.py\"\
    , line 16, in truncate_number\n    integer_part, decimal_part = math.modf(number)\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimal = number % 1\n    return number - decimal\n\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2k7hozfe.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp2k7hozfe.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp2k7hozfe.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer: int = int(number)\n    decimal: float = number\
    \ - integer\n    return decimal if decimal < 1.0 else 1.0\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number == 0:\n        return 0\n    integer = int(number)\n\
    \    decimal = number - integer\n    if decimal > 0:\n        return decimal\n\
    \    return 1\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n \
    \   assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_4itwdr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4_4itwdr.py\", line 25,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp4_4itwdr.py\", line\
    \ 22, in check\n    assert candidate(123.0) == 0.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number-int(number))/float(number)\n\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpykyc_57u.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpykyc_57u.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpykyc_57u.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if not number:\n        return None\n    elif number\
    \ < 1:\n        raise ValueError(\"Argument should be a positive number\")\n\n\
    \    number = int(number)\n    decimal = number - number%1\n    if decimal ==\
    \ 0:\n        return 1.0\n\n    if decimal % 1:\n        return float(decimal)\n\
    \    else:\n        return float(decimal)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptkuteorn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptkuteorn.py\", line 32,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmptkuteorn.py\", line\
    \ 27, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integral, decimal = math.modf(number)\n    return float(decimal)\
    \ if decimal < 1 else integral\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_vlqkz1.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi_vlqkz1.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpi_vlqkz1.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpi_vlqkz1.py\"\
    , line 10, in truncate_number\n    integral, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # Decompose into integer part and decimal part.\n  \
    \  dec = number - math.floor(number)\n    int_part = math.trunc(number)\n\n  \
    \  # Round decimal part upwards if needed.\n    if dec > 0.5:\n        dec = round(dec,\
    \ 5)\n\n    # Return truncated number and decimal part.\n    return int_part,\
    \ dec\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoam70mv_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpoam70mv_.py\", line 28,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpoam70mv_.py\", line\
    \ 23, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpoam70mv_.py\"\
    , line 11, in truncate_number\n    dec = number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer = int(number)\n    decimal = number - integer\n\
    \    return decimal\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n\
    \    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Cannot truncate\
    \ number smaller than 1.\")\n\n    if number < 0:\n        integer_part, decimal_part\
    \ = math.modf(number)\n    else:\n        integer_part, decimal_part = math.modf(number\
    \ - 1)\n\n    return decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmarpnxr_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpmarpnxr_.py\", line 27,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpmarpnxr_.py\", line\
    \ 22, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpmarpnxr_.py\"\
    , line 16, in truncate_number\n    integer_part, decimal_part = math.modf(number\
    \ - 1)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number = float(number)\n    int_part = floor(number)\n\
    \    decimal_part = number - int_part\n    if abs(decimal_part) < 1e-3:\n    \
    \    return number\n    return round(number, 1 - int(-log10(abs(decimal_part))))\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_13hos0x.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp_13hos0x.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp_13hos0x.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp_13hos0x.py\"\
    , line 11, in truncate_number\n    int_part = floor(number)\nNameError: name 'floor'\
    \ is not defined. Did you mean: 'float'?\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimal = number - int(number)\n    return decimal if\
    \ decimal > 0.0 else number - int(number)\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = math.trunc(number)\n    decimal_part\
    \ = number - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb8ko0e7h.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpb8ko0e7h.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpb8ko0e7h.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpb8ko0e7h.py\"\
    , line 10, in truncate_number\n    integer_part = math.trunc(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number).as_integer_ratio()[0]\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe55vstje.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpe55vstje.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpe55vstje.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    if int_part == number:\n\
    \        decimal = number - int_part\n    else:\n        decimal = number - int_part\
    \ - math.ceil(\n            (float(int_part) / number) - math.floor((float(int_part)\
    \ / number)))\n    return decimal\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49afwvob.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp49afwvob.py\", line 25,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp49afwvob.py\", line\
    \ 20, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp49afwvob.py\"\
    , line 14, in truncate_number\n    decimal = number - int_part - math.ceil(\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1:\n        raise ValueError(f\"Input {number}\
    \ is below 1!\")\n\n    remainder = int(number)\n\n    while remainder >= 1:\n\
    \        remainder = remainder // 10\n\n    return number - remainder\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4uwigk0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpu4uwigk0.py\", line 27,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpu4uwigk0.py\", line\
    \ 22, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer, decimal = math.modf(number)\n    if decimal\
    \ == 0:\n        return integer\n    else:\n        return integer + decimal\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzlb4x07t.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpzlb4x07t.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpzlb4x07t.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpzlb4x07t.py\"\
    , line 10, in truncate_number\n    integer, decimal = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    decimal_part = number -\
    \ int_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # first check if number is already integer\n    int_part\
    \ = (number-int(number))\n    # then check if number still contains decimals\n\
    \    if int_part > 0 and int_part*10 < number:\n        return number-int_part\n\
    \    else:\n        return number\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphh8uvsly.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmphh8uvsly.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmphh8uvsly.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: 0
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)  # ceil\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 1.0:\n        return number\n    decimals\
    \ = math.ceil(math.log10(number))\n    return number / (10**decimals)\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw9x5kg_z.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpw9x5kg_z.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpw9x5kg_z.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpw9x5kg_z.py\"\
    , line 12, in truncate_number\n    decimals = math.ceil(math.log10(number))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number)\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4s2ar6vu.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp4s2ar6vu.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp4s2ar6vu.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    decimal = number - int_part\n\
    \    if decimal > 0:\n        return decimal\n    return 1.0\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprfi4py6d.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmprfi4py6d.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmprfi4py6d.py\", line\
    \ 19, in check\n    assert candidate(123.0) == 0.0\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimals = int(math.floor(math.log10(number)))\n   \
    \ return number / 10 ** decimals\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfviaux7j.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpfviaux7j.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpfviaux7j.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpfviaux7j.py\"\
    , line 10, in truncate_number\n    decimals = int(math.floor(math.log10(number)))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number * (abs(number) - 1))\n\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfioli5q.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpxfioli5q.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpxfioli5q.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = (number - int(number))\n    return float(integer_part)\
    \ / float(integer_part)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptzrdhjdt.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmptzrdhjdt.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmptzrdhjdt.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number) if number < 0.0 else number\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpphh94tbn.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpphh94tbn.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpphh94tbn.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976746
- exit_code: -1
  program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return round(number, -int(math.floor(math.log10(number))\
    \ + 1))\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7mxvzyh6.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp7mxvzyh6.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp7mxvzyh6.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp7mxvzyh6.py\"\
    , line 10, in truncate_number\n    return round(number, -int(math.floor(math.log10(number))\
    \ + 1))\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976746
