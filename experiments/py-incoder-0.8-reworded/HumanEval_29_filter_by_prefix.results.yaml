language: py
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    result = []\n    for item in strings:\n        if item.startswith(prefix):\n\
    \            result.append(item)\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823286
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if not strings:\n        return strings\n    else:\n        return\
    \ [string for string in strings if string.startswith(prefix)]\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823286
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return filter(lambda x: not x.lower().startswith(prefix), strings)\n\
    \n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnalthxsm.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpnalthxsm.py\", line 18,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpnalthxsm.py\",\
    \ line 14, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823286
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return filter(startswith=prefix, strings=strings)\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxboup8go.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpxboup8go.py\", line 17,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpxboup8go.py\",\
    \ line 13, in check\n    assert candidate([], 'john') == []\n  File \"/tmp/tmpxboup8go.py\"\
    , line 10, in filter_by_prefix\n    return filter(startswith=prefix, strings=strings)\n\
    TypeError: filter() takes no keyword arguments\n"
  stdout: ''
  timestamp: 1659823286
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [ s for s in strings if s.startswith(prefix) ]\n\ndef\
    \ check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823286
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.lower().startswith(prefix.lower())]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823286
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if not strings:\n        return strings\n    else:\n        return\
    \ [x for x in strings if x.startswith(prefix)]\n\n\ndef check(candidate):\n  \
    \  assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823286
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return list(filter(lambda s: s.lower().startswith(prefix.lower()),\
    \ strings))\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n\
    \    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823286
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823268
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if not strings:\n        return []\n    else:\n        return\
    \ [s for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823286
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if not prefix or prefix == '':\n        return strings\n    return\
    \ filter(lambda s: s.startswith(prefix), strings)\n\ndef check(candidate):\n \
    \   assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbqa3_c8e.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpbqa3_c8e.py\", line 19,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpbqa3_c8e.py\",\
    \ line 15, in check\n    assert candidate([], 'john') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823286
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if not prefix:\n        return strings\n    else:\n        return\
    \ [x for x in strings if x.startswith(prefix)]\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823286
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if not strings:\n        return strings\n    if not prefix:\n\
    \        return strings\n    if len(prefix) > len(strings):\n        return strings\n\
    \    if strings[:len(prefix)] != prefix:\n        return strings\n    return strings[len(prefix):]\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4axfflex.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4axfflex.py\", line 25,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmp4axfflex.py\",\
    \ line 22, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n"
  stdout: ''
  timestamp: 1659823286
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if prefix:\n        prefix_length = max(prefix.count('*'), prefix.count('?'))\n\
    \        return list(filter(\n            lambda s: s.startswith(prefix),\n  \
    \          strings))[:prefix_length]\n    else:\n        return strings\n\ndef\
    \ check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp41s9ytd.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpp41s9ytd.py\", line 23,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpp41s9ytd.py\",\
    \ line 20, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n"
  stdout: ''
  timestamp: 1659823286
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    if not prefix or not strings:\n        return strings\n    prefix\
    \ = prefix.lower()\n    strings = [s.lower() for s in strings]\n    return [s\
    \ for s in strings if s.startswith(prefix)]\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n\
    \    check(filter_by_prefix)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpao0ku_d4.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpao0ku_d4.py\", line 21,\
    \ in test_check\n    check(filter_by_prefix)\n  File \"/tmp/tmpao0ku_d4.py\",\
    \ line 18, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n"
  stdout: ''
  timestamp: 1659823286
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
    \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones\
    \ that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n\
    \    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
    \    \"\"\"\n    return [ string for string in strings if string.startswith(prefix)\
    \ ]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823286
