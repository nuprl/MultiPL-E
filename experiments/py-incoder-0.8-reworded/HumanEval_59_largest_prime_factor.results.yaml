name: HumanEval_59_largest_prime_factor
language: py
results:
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n\
    \        else:\n            n //= i\n            factors.append(i)\n    if n >\
    \ 1:\n        factors.append(n)\n    return max(factors)\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n % factor == 0:\n        n /= factor\n        factor += 1\n    return\
    \ factor\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuazzc227.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpuazzc227.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpuazzc227.py\"\
    , line 16, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  factor = 2\n    while i * i <= n:\n        if n % i == 0:\n            i +=\
    \ 1\n            if i > n:\n                break\n        else:\n           \
    \ factor *= i\n            n = n // i\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi56mamqa.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpi56mamqa.py\", line 29,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpi56mamqa.py\"\
    , line 22, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Sieve of\
    \ Eratosthenes\n    factors = set()\n    div = 2\n    while div ** 2 <= n:\n \
    \       if n % div == 0:\n            factors.add(div)\n            n //= div\n\
    \        else:\n            div += 1\n    return max(factors)\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp42kqqk1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpp42kqqk1.py\", line 28,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpp42kqqk1.py\"\
    , line 21, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n > 1:\n\
    \        candidate = next_prime(n)\n        while n % candidate == 0 and candidate\
    \ < 2 * n:\n            candidate += 1\n        return candidate\n    return 1\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8mzl_u7.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpf8mzl_u7.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpf8mzl_u7.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpf8mzl_u7.py\"\
    , line 9, in largest_prime_factor\n    candidate = next_prime(n)\nNameError: name\
    \ 'next_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n\
    \        return n\n    if n % 2 == 0:\n        return n\n    if n % 3 == 0:\n\
    \        return 3\n\n    max_num = n\n    factor = 2\n    while n % factor ==\
    \ 0:\n        max_num = n // factor\n        factor += 1\n\n    if max_num * factor\
    \ > n:\n        return factor\n\n    while max_num % factor != 0:\n        max_num\
    \ /= factor\n        factor += 1\n\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphtxull7g.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphtxull7g.py\", line 39,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmphtxull7g.py\"\
    , line 32, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors =\
    \ []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n\
    \    return max(factors)\n\n\n@doctest\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6l1yx1ye.py\", line\
    \ 15, in <module>\n    @doctest\nNameError: name 'doctest' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for x in range(2,\
    \ n):\n        if n % x == 0:\n            return x\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj7899sjl.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpj7899sjl.py\", line 22,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpj7899sjl.py\"\
    , line 15, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return i\n    return n\n\n\n@timeit('largest_prime_factor_time',\
    \ verbose=False)\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcnjlhnkv.py\", line\
    \ 14, in <module>\n    @timeit('largest_prime_factor_time', verbose=False)\nNameError:\
    \ name 'timeit' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           return i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphlido3y9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphlido3y9.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmphlido3y9.py\"\
    , line 18, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    if n == 1:\n        return 1\n    return i\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp62zpvdp9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp62zpvdp9.py\", line 27,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp62zpvdp9.py\"\
    , line 20, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors =\
    \ []\n    for _ in range(n):\n        for i in range(2, n):\n            if n\
    \ % i == 0:\n                factors.append(i)\n                break\n      \
    \  else:\n            factors.append(n)\n            break\n    return max(factors)\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpztu_7key.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpztu_7key.py\", line 28,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpztu_7key.py\"\
    , line 21, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 3:\n\
    \        return n\n    i = 2\n    primes = []\n    while i * i <= n:\n       \
    \ if n % i == 0:\n            primes.append(i)\n            n = n // i\n     \
    \   else:\n            i += 1\n    if n > 2:\n        primes.append(n)\n    return\
    \ max(primes)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # make sure\
    \ n is positive integer\n    n = int(n)\n\n    # initialize max and max2\n   \
    \ max = 2\n    max2 = 2\n\n    # initialize array for the numbers that divide\
    \ n\n    divs = []\n\n    # loop until n reaches 1\n    while n % 2 == 0:\n  \
    \      # append 2 to the array\n        divs.append(2)\n\n        # increment\
    \ max\n        max += 1\n\n        # loop until n divides max2\n        while\
    \ n % max2 == 0:\n            # increment max\n            max2 += 1\n\n     \
    \       # decrement n\n            n //= max2\n\n    # loop over divs backwards\n\
    \    for d in reversed(divs):\n        # if d divides n, n is prime\n        if\
    \ n % d == 0:\n            # decrement n\n            n //= d\n\n            #\
    \ increment max\n            max += 1\n\n            # loop over divs backwards\n\
    \            for d2 in reversed(divs):\n                # if d divides n2, n2\
    \ is prime\n                if n % d2 == 0 and d2 != d:\n                    #\
    \ increment n2\n                    n //= d2\n\n                    # decrement\
    \ d\n                    d += 1\n\n                    # break out of d2\n   \
    \                 break\n\n    # return max\n    return max\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6zf4xp_t.py\", line\
    \ 71, in <module>\n    test_check()\n  File \"/tmp/tmp6zf4xp_t.py\", line 69,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp6zf4xp_t.py\"\
    , line 62, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for p in divisors(n):\n\
    \        if n % p == 0:\n            return p\n    if n > 2:\n        return n\n\
    \    return None\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n \
    \   assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt7iz42bq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpt7iz42bq.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpt7iz42bq.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpt7iz42bq.py\"\
    , line 8, in largest_prime_factor\n    for p in divisors(n):\nNameError: name\
    \ 'divisors' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # n is greater\
    \ than one\n    if n == 1:\n        return 1\n    # n is odd\n    if n % 2 ==\
    \ 0:\n        return 2\n    # n is even and greater than 3\n    if n % 2 == 0:\n\
    \        return n\n    # n is odd\n    if n % 3 == 0:\n        return 3\n    #\
    \ n is even and greater than 5\n    if n % 3 == 0:\n        return n\n    # n\
    \ is even and greater than 7\n    if n % 5 == 0:\n        return 5\n    # n is\
    \ even and greater than 9\n    if n % 5 == 0:\n        return n\n    # n is even\
    \ and greater than 11\n    if n % 7 == 0:\n        return 7\n    # n is even and\
    \ greater than 13\n    if n % 3 == 0:\n        return 3\n    # n is even and greater\
    \ than 17\n    if n % 7 == 0:\n        return 7\n\n    # n is odd\n    if n %\
    \ 9 == 0:\n        return 9\n    # n is even and greater than 19\n    if n % 9\
    \ == 0:\n        return n\n    # n is even and greater than 23\n    if n % 11\
    \ == 0:\n        return 11\n    # n is even and greater than 29\n    if n % 13\
    \ == 0:\n        return 13\n    # n is even and greater than 31\n    if n % 17\
    \ == 0:\n        return 17\n    # n is even and greater than 33\n    if n % 19\
    \ == 0:\n        return 19\n    # n is even and greater than 37\n    if n % 23\
    \ == 0:\n        return 23\n    # n is even and greater than 39\n    if n % 29\
    \ == 0:\n        return 29\n    # n is even and greater than 41\n    if n % 31\
    \ == 0:\n        return 31\n    # n is even and greater than 43\n    if n % 37\
    \ == 0:\n        return 37\n    # n is even and greater than 47\n    if n % 41\
    \ == 0:\n        return 41\n    # n is even and greater than 53\n    if n % 47\
    \ == 0:\n        return 47\n    # n is even and greater than 59\n    if n % 53\
    \ == 0:\n        return 53\n    # n is even and greater than 61\n    if n % 59\
    \ == 0:\n        return 59\n    # n is even and greater than 67\n    if n % 61\
    \ == 0:\n        return 61\n    # n is even and greater than 71\n    if n % 67\
    \ == 0:\n        return 67\n    # n is even and greater than 73\n    if n % 71\
    \ == 0:\n        return 71\n    # n is even and greater than 79\n    if n % 73\
    \ == 0:\n        return 73\n    # n is even and greater than 83\n    if n % 83\
    \ == 0:\n        return 83\n    # n is even and greater than 89\n    if n % 89\
    \ == 0:\n        return 89\n    # n is even and greater than 97\n    if n % 97\
    \ == 0:\n        return 97\n\n    # n is odd\n    if n % 10 == 0:\n        return\
    \ 10\n    # n is even and greater than 10\n    if n % 10 == 0:\n        return\
    \ n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpav9sxkwa.py\", line\
    \ 120, in <module>\n    test_check()\n  File \"/tmp/tmpav9sxkwa.py\", line 118,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpav9sxkwa.py\"\
    , line 111, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0 or n % 3 == 0:\n        return n\n\n    factor = 3\n    while n % factor ==\
    \ 0:\n        n /= factor\n        factor = 3\n    while factor <= sqrt(n):\n\
    \        if n % factor == 0:\n            n /= factor\n            factor = 3\n\
    \        factor += 1\n\n    if factor > sqrt(n):\n        n -= 1\n    return n\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8agpp2ko.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8agpp2ko.py\", line 34,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp8agpp2ko.py\"\
    , line 27, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        return n\n\n    i = 5\n    factors = []\n    while i * i <= n:\n\
    \        if n % i == 0:\n            i += 1\n        else:\n            n = n\
    \ // i\n            factors.append(i)\n\n    if n > 1:\n        factors.append(n)\n\
    \    return max(factors)\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpttfs_9yc.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpttfs_9yc.py\", line 33,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpttfs_9yc.py\"\
    , line 26, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n % factor > 0:\n        factor = 2\n        n /= factor\n    while\
    \ not n % factor:\n        factor += 1\n        n /= factor\n    return factor\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # check n\
    \ is a prime\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return\
    \ n\n    # start at 3 because 3 is always even\n    limit = math.ceil(math.sqrt(n))\
    \ + 1\n    for factor in range(3, limit, 2):\n        if n % factor == 0:\n  \
    \          return factor\n    return limit\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk989505z.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpk989505z.py\", line 29,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpk989505z.py\"\
    , line 22, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpk989505z.py\"\
    , line 14, in largest_prime_factor\n    limit = math.ceil(math.sqrt(n)) + 1\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
