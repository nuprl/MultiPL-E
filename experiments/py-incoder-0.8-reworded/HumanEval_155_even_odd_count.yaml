name: HumanEval_155_even_odd_count
language: py
prompt: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n\
  \    \"\"\"Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n\
  \    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
  \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
  \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) ==\
  \ (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1,\
  \ 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
completions: ["    odd_count = 0\n    even_count = 0\n\n    while num > 0:\n     \
    \   if num % 2 == 0:\n            even_count += 1\n        else:\n           \
    \ odd_count += 1\n        num /= 10\n\n    return (odd_count, even_count)\n",
  "    if num < 0:\n        return (-1, -1)\n    else:\n        count = 0\n      \
    \  temp = num\n        while temp > 0:\n            if temp % 2 != 0:\n      \
    \          count += 1\n            temp /= 2\n        return (count, num - count)\n\
    \n", "    if num == 0:\n        return (1, 0)\n    else:\n        return ((num\
    \ // 10) % 2, (num % 10) // 2)\n", "    even, odd = 1, 0\n    while num:\n   \
    \     if num % 2 == 0:\n            even += 1\n        num //= 10\n    return\
    \ even, odd\n", "    odd, even = 0, 0\n    while num > 0:\n        rem = num %\
    \ 10\n        odd = even + 1 if rem % 2 == 1 else odd\n        even = even + 1\
    \ if rem != 0 else even\n        num = num // 10\n    return odd, even\n", " \
    \   assert num >= 0\n    even = 0\n    odd = 0\n    while num > 0:\n        digit\
    \ = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n\
    \            odd += 1\n        num = num // 10\n    return even, odd\n", "   \
    \ count = 0\n    odd = 1\n    even = 1\n    while num > 0:\n        remainder\
    \ = num % 10\n        if remainder % 2 == 0:\n            even *= 10\n       \
    \     even += remainder\n            count += even\n        else:\n          \
    \  odd *= 10\n            odd += remainder\n            count += odd\n\n     \
    \   num //= 10\n    return count, odd\n\n", "    if num == 0:\n        return\
    \ (0, 0)\n    elif num < 0:\n        return (1, 0)\n    else:\n        count =\
    \ 0\n        digit_list = []\n        while num:\n            digit_list.append(num\
    \ % 10)\n            num //= 10\n            count += 1\n        digit_list.reverse()\n\
    \        return (count, sum(digit_list))\n", "    # hint: you can check the remainder\
    \ when dividing by 10\n    return sum(num % 2 == 0 for _ in itertools.takewhile(lambda\
    \ n: n <= 0, str(num)))\n", "    num = abs(num)\n    odd_count = 0\n    even_count\
    \ = 0\n    while num:\n        odd_count, even_count = divmod(num, 10)\n     \
    \   num = odd_count\n    return odd_count, even_count\n", "    sum_even = 0\n\
    \    sum_odd = 0\n    total = 0\n    while num > 0:\n        total = total + num\
    \ % 10\n        num = num // 10\n        if num == 0:\n            break\n   \
    \     sum_odd = sum_odd + total % 2\n        sum_even = sum_even + total // 2\n\
    \    return (sum_odd, sum_even)\n", "    # Your code here\n    even = num // 10\n\
    \    odd = num - 10 * even\n    return even, odd\n", "    if num < 0: return 0,\
    \ 0\n    even, odd = divmod(num, 10)\n    return even+1, odd+1 if odd+1 < 10 else\
    \ 1\n", "    if num == 0:\n        return 0, 0\n    else:\n        even_count\
    \ = 0\n        odd_count = 0\n        while num > 0:\n            mod = num %\
    \ 10\n            if mod == 0:\n                even_count += 1\n            else:\n\
    \                odd_count += 1\n            num //= 10\n        return even_count,\
    \ odd_count\n", "    if num < 0:\n        raise ValueError(\"Cannot determine\
    \ even and odd digits of negative number\")\n    even_digits = 0\n    odd_digits\
    \ = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n\
    \            even_digits += 1\n        else:\n            odd_digits += 1\n  \
    \      num /= 10\n    return even_digits, odd_digits\n", "    even = num // 10\n\
    \    odd = num % 10\n    return even, odd\n</cell>\n<text>\nTests\nNow that you\
    \ have defined your function, let's test it with the two examples above.\n\nThe\
    \ cell below runs your function on two inputs, -12 and 123, and compares the results.\n\
    \n\n</text>\n<cell>", "    assert num > 0, \"Input number should greater than\
    \ 0\"\n    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n\
    \        if digit % 2 == 0:\n            even = even + 1\n        else:\n    \
    \        odd = odd + 1 \n        num = num // 10\n\n    return (even, odd)\n",
  "    # Your code here\n    \n    if num == 0: return (1, 1)\n    \n    if num <\
    \ 0: return (0, -1)\n    \n    count = 0\n    \n    while num > 0:\n        digit\
    \ = num % 10\n        if digit % 2 == 0:\n            count += 1\n        \n \
    \       num //= 10\n    \n    return count, (count+1)\n", "    ret_val = (0, 0)\n\
    \    count_even = 0\n    count_odd = 0\n    while num > 0:\n        ret_val =\
    \ (ret_val[0] + 1 if num % 2 == 0 else ret_val[0], ret_val[1] + 1 if num % 2 !=\
    \ 0 else ret_val[1])\n        num = num // 10\n\n    return ret_val\n</cell>\n\
    <cell>", "    even, odd = 0, 1\n    while num > 0:\n        if num % 2 == 0:\n\
    \            even += 1\n        else:\n            odd += 1\n        num /= 10\n\
    \    return even, odd\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
