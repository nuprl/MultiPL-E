name: HumanEval_126_is_sorted
language: py
prompt: "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    \"\
  \"\"\n    Given a list of numbers, return whether or not they are sorted\n    in\
  \ ascending order. If list has more than 1 duplicate of the same\n    number, return\
  \ False. Assume no negative numbers and only integers.\n\n    Examples\n    >>>\
  \ is_sorted([5])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5])\n    True\n    >>>\
  \ is_sorted([1, 3, 2, 4, 5])\n    False\n    >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
  \    True\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> is_sorted([1,\
  \ 3, 2, 4, 5, 6, 7])\n    False\n    >>> is_sorted([1, 2, 2, 3, 3, 4])\n    True\n\
  \    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([5]) == True\n    assert candidate([1,\
  \ 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert\
  \ candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6,\
  \ 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False\n    assert\
  \ candidate([]) == True\n    assert candidate([1]) == True\n    assert candidate([3,\
  \ 2, 1]) == False\n    assert candidate([1, 2, 2, 2, 3, 4]) == False\n    assert\
  \ candidate([1, 2, 3, 3, 3, 4]) == False\n    assert candidate([1, 2, 2, 3, 3, 4])\
  \ == True\n    assert candidate([1, 2, 3, 4]) == True\n\ndef test_check():\n   \
  \ check(is_sorted)\n\ntest_check()\n"
completions: ["    if len(lst) < 2:\n        return True\n\n    first, rest = lst[0],\
    \ lst[1:]\n\n    # find first duplicate\n    second_index = -1\n    second_value\
    \ = first\n    for index, value in enumerate(rest):\n        if value != second_value:\n\
    \            if index >= second_index:\n                return False\n\n     \
    \       second_index = index\n            second_value = value\n\n    return True\n",
  "    prev = lst[0]\n    for i in lst[1:]:\n        if prev < i:\n            return\
    \ False\n        prev = i\n    return True\n\n", "    counts = dict()\n    unique,\
    \ dups = [],[]\n    for i in lst:\n        if i in counts:\n            counts[i]\
    \ += 1\n            if counts[i] > 1:\n                dups.append(i)\n      \
    \  else:\n            unique.append(i)\n            counts[i] = 1\n    if len(unique)\
    \ == 0 or any(dups):\n        return False\n    return True\n", "    return len(lst)\
    \ == 0 or lst == sorted(lst)\n\n", "    return len(set(lst)) == 1 and lst == sorted(lst)\n\
    \n", "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n   \
    \         return False\n    return True\n", "    if len(lst) < 2:\n        return\
    \ True\n    seen = set()\n    for item in lst:\n        if item in seen:\n   \
    \         return False\n        seen.add(item)\n    return True\n", "    return\
    \ len(set((lst))) == 1 and sorted(lst) == lst\n\n", "    prev_number = None\n\
    \    for number in lst:\n        if prev_number is not None and number == prev_number:\n\
    \            return False\n        prev_number = number\n    return True\n", " \
    \   return len(lst) == 0 or not all(lst[i] == lst[i+1]\n            for i in range(len(lst)-1))\n",
  "    # TODO\n    return True\n\n", "    lst = list(lst)\n    if len(lst) < 2:\n\
    \        return True\n    last = lst[0]\n    for i in range(1, len(lst)):\n  \
    \      if lst[i] != last:\n            return False\n        last = lst[i]\n \
    \   return True\n\n", "    sorted_lst = list(sorted(lst))\n    if len(lst) ==\
    \ len(sorted_lst):\n        for i, j in zip(lst, sorted_lst):\n            if\
    \ i != j:\n                return False\n    return True\n\n", "    lst = sorted(lst)\n\
    \    if lst == lst[::-1]:\n        return True\n    else:\n        return False\n",
  "    \n    seen = set()\n    for num in lst:\n        if num in seen:\n        \
    \    return False\n        else:\n            seen.add(num)\n    return True\n",
  "    seen = []\n    for i in range(len(lst)):\n        if i in seen:\n         \
    \   return False\n        else:\n            seen.append(i)\n    return sorted(lst)\
    \ == lst\n\n", "    \n    if len(lst) < 2:\n        return True\n    \n    # Create\
    \ a sorted copy of the list\n    sorted_lst = sorted(lst)\n    \n    seen = set()\n\
    \    for i in sorted_lst:\n        if i in seen:\n            return False\n \
    \       else:\n            seen.add(i)\n    return True\n</cell>\n<cell>", " \
    \   cnt = 0\n    lst = list(set(lst))\n    lst = [i for i in lst if i != lst[cnt]]\n\
    \    lst = list(set(lst))\n    if len(lst) == 1 and lst[0] == lst[0]:\n      \
    \  return True\n    elif len(lst) == 0:\n        return True\n    else:\n    \
    \    return False\n", "    if not lst:\n        return True\n    \n    if len(lst)\
    \ == 1:\n        return True\n    \n    return is_sorted(lst[1:])\n", "    # Create\
    \ a set to keep track of the already seen numbers.\n    seen_set = set()\n\n \
    \   # Iterate through the list and add the current number to the set.\n    for\
    \ item in lst:\n        if item not in seen_set:\n            seen_set.add(item)\n\
    \            return True\n    return False\n", "    arr: List = []\n    arr.extend(lst)\n\
    \    arr.append(arr[0])\n\n    for i in range(len(arr) - 1):\n        if arr[i]\
    \ > arr[i + 1]:\n            return False\n\n    return True\n", "    # http://stackoverflow.com/questions/2049581/how-to-efficiently-check-if-a-list-is-sortedby-2-elements-in-python\n\
    \    if len(lst) <= 1:\n        return True\n    i = j = 1\n    while j < len(lst)\
    \ - 1:\n        if lst[j] > lst[j + 1]:\n            return False\n        j +=\
    \ 1\n    while i < len(lst) - 1:\n        if lst[i] > lst[i + 1]:\n          \
    \  return False\n        i += 1\n    return True\n", "    seen = set()\n    for\
    \ x in lst:\n        if x in seen:\n            return False\n        seen.add(x)\n\
    \    return True\n\n", "    count = 0\n    for i in lst:\n        if count ==\
    \ 0:\n            return True\n        elif count == 1:\n            return i\
    \ == lst[0]\n        else:\n            if i != lst[count - 1]:\n            \
    \    return False\n        count += 1 \n", "    if not lst:\n        return True\n\
    \    if len(lst) == 1:\n        return True\n    counts = dict(Counter(lst))\n\
    \    if len(counts) > 1:\n        return False\n    return counts.values()[0]\n\
    \n", "    unique_lst = set(lst)\n    if len(unique_lst) < len(lst):\n        return\
    \ False\n\n    lst = sorted(lst)\n    dup_idx = lst.index(lst[0])\n    for i in\
    \ lst[1:]:\n        if i != lst[dup_idx]:\n            return False\n        dup_idx\
    \ += 1\n    return True\n\n", "    counts = [0] * len(lst)\n    for i, num in\
    \ enumerate(lst):\n        counts[num] += 1\n        if counts[num] > 1:\n   \
    \         return False\n    return True\n", "    sorted_list = []\n    sorted_set\
    \ = []\n    for x in lst:\n        if x in sorted_set:\n            return False\n\
    \        else:\n            sorted_list.append(x)\n            sorted_set.append(x)\n\
    \    return True\n", "    unique_numbers = set(lst)\n    if len(unique_numbers)\
    \ > 1:\n        return False\n\n    return all(lst == sorted(lst))\n\n", "   \
    \ seen = dict()\n    for item in lst:\n        if item not in seen:\n        \
    \    seen[item] = 1\n        elif seen[item] == 1:\n            return False\n\
    \    return True\n", "    prev_num = lst[0]\n    for num in lst:\n        if prev_num\
    \ == num:\n            return False\n        else:\n            prev_num = num\n\
    \    return True\n", "    if len(lst) <= 1:\n        return True\n    sorted_lst_count\
    \ = 0\n    prev_val = lst[0]\n    for item in lst[1:]:\n        if item > prev_val:\n\
    \            return False\n        elif item == prev_val:\n            sorted_lst_count\
    \ += 1\n        else:\n            return False\n        prev_val = item\n   \
    \ return sorted_lst_count == len(lst)\n", "    if len(lst) < 2:\n        return\
    \ True\n\n    sorted_lst = sorted(lst)\n\n    return sorted_lst[:-1] == lst[:-1]\n\
    \n", "    lst = sorted(lst)\n    if len(lst) == 1 and lst[0] == lst[-1]:\n   \
    \     return True\n    else:\n        return False\n", "    for i in range(1,\
    \ len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n\n    return\
    \ True\n\n", "    prev = lst[0]\n    curr_index = 0\n    for val in lst:\n   \
    \     if val < prev:\n            return False\n        prev = val\n        curr_index\
    \ += 1\n    return True\n", "    for i in range(1, len(lst) - 1):\n        if\
    \ lst[i] < lst[i-1]:\n            return False\n    return True\n\n", "    seen\
    \ = set()\n    for i in lst:\n        if i in seen: return False\n        seen.add(i)\n\
    \    return True\n", "    for x in lst:\n        if lst.count(x) > 1:\n      \
    \      return False\n    return True\n", "    if len(lst) < 2:\n        return\
    \ True\n    if lst[0] > lst[1]:\n        return True\n    return False\n", " \
    \   # count the number of occurrences of each number\n    counts = {}\n    for\
    \ num in lst:\n        if num in counts:\n            counts[num] += 1\n     \
    \   else:\n            counts[num] = 1\n    for num in counts:\n        if counts[num]\
    \ > 1:\n            return False\n    return True\n\n", "    # Your code here\n\
    \    numbers = Counter(lst)\n    for number, count in numbers.items():\n     \
    \   if count > 1:\n            return False\n    return True\n\n", "    if len(lst)\
    \ <= 1:\n        return True\n    if lst[0] == lst[-1]:\n        return is_sorted(lst[1:])\n\
    \    return False\n\n", "    return len(set(lst)) == len(lst) and sorted(lst)\
    \ == lst\n", "    numbers: List[int] = []\n    i = 0\n    while i < len(lst):\n\
    \        numbers.append(lst[i])\n        i += 1\n    numbers.sort()\n    return\
    \ numbers == lst\n\n", "    if len(lst) == 0: return True\n    if lst.count(lst[0])\
    \ == len(lst): return True\n    # remove the first element until we find a duplicate\n\
    \    count = 0\n    while count != len(lst) and lst[count] == lst[0]:\n      \
    \  count += 1\n    if count != len(lst): return False\n    # if the first element\
    \ is greater than the rest\n    if lst[0] != lst[count-1]: return False\n    return\
    \ is_sorted(lst[1:])\n\n", "    sorted_lst = list(sorted(lst))\n    \n    if sorted_lst\
    \ == lst:\n        return True\n    \n    if len(sorted_lst) == len(set(sorted_lst)):\n\
    \        return False\n    \n    return False\n\n", "    if not lst:\n       \
    \ return True\n    first = lst[0]\n    for item in lst:\n        if item != first:\n\
    \            return False\n    return True\n\n", "    seen = set()\n    seen_add\
    \ = seen.add\n    # fast path for sorted lists with only one unique number\n \
    \   if len(lst) <= 1 or len(lst) == 2:\n        return lst[0] == lst[1]\n    #\
    \ order given numbers and compare adjacent pairs\n    lst = sorted(lst)\n    last\
    \ = lst[0]\n    for num in lst[1:]:\n        if num != last:\n            return\
    \ False\n        last = num\n    return True\n", "    seen = set()\n    for item\
    \ in lst:\n        if item in seen:\n            return False\n        seen.add(item)\n\
    \    return True\n\n", "    sorted_list = []\n    for num in lst:\n        if\
    \ num not in sorted_list:\n            sorted_list.append(num)\n        else:\n\
    \            return False\n    return True\n", "    counts = dict()\n    for item\
    \ in lst:\n        if item not in counts:\n            counts[item] = 1\n    \
    \    else:\n            counts[item] += 1\n    for i in counts:\n        if counts[i]\
    \ > 1:\n            return False\n    return True\n\n", "    lst = list(set(lst))\n\
    \    return len(lst) == len(set(lst))\n\n", "    counts = dict()\n    sorted_list\
    \ = [x for x in lst if x not in counts or counts[x] >= counts[x] - 1]\n    if\
    \ len(sorted_list) == 1:\n        counts[sorted_list[0]] = 1\n        return True\n\
    \    else:\n        return False\n\n", "    \n    if len(lst) < 2:\n        return\
    \ True\n    \n    count = [0] * len(lst)\n    \n    for x in lst:\n        count[x\
    \ % len(lst)] += 1\n        \n    for i in range(1, len(count)):\n        if count[i]\
    \ != count[i - 1]:\n            return False\n    return True\n\n", "    seen\
    \ = set()\n    for num in lst:\n        if num in seen:\n            return False\n\
    \        seen.add(num)\n    return True\n\n", "    count_dict = {}\n    for item\
    \ in lst:\n        if item not in count_dict.keys():\n            count_dict[item]\
    \ = 1\n        else:\n            count_dict[item] += 1\n    \n    if len(count_dict.keys())\
    \ == 1:\n        return True\n    else:\n        return False\n", "    return\
    \ len(lst) == len(set(lst))\n\n", "    # Start by sorting the list\n    sorted_lst\
    \ = sorted(lst)\n    # Then compare the lists \n    # to see if the order is ascending\n\
    \    if lst == sorted_lst:\n        return True\n    else:\n        return False\n\
    \n", "    sorted_list = []\n    for i in lst:\n        if i not in sorted_list:\n\
    \            sorted_list.append(i)\n            if len(sorted_list) > len(lst)\
    \ - 1:\n                return False\n            if sorted_list == lst:\n   \
    \             return True\n    return False\n\n", "    seen = set()\n    seen_add\
    \ = seen.add\n    lst = list(lst)\n    return all(lst[i] <= lst[i+1] and i in\
    \ seen or seen_add(i) for i in lst)\n", "    numbers = lst[1:]\n    for index,\
    \ number in enumerate(numbers):\n        if index != 0 and numbers[index - 1]\
    \ == number:\n            return False\n\n    return numbers[0] < numbers[-1]\n\
    \n", "    for i in range(len(lst) - 1):\n        if lst[i] != lst[i + 1]:\n  \
    \          return False\n    return True\n", "    if not lst:\n        return\
    \ True\n\n    prev = None\n    count = 1\n    for x in lst:\n        if prev is\
    \ None or x < prev:\n            prev = count\n            count = 1\n       \
    \ else:\n            count += 1\n    if prev is None or count != prev:\n     \
    \   return True\n    else:\n        return False\n\n", "    \n    # Check for\
    \ sorted list\n    if len(set(lst)) == len(lst):\n        return True\n    else:\n\
    \        return False\n\n", "    for i in range(len(lst) - 1):\n        if lst[i]\
    \ > lst[i + 1]:\n            return False\n    return True\n", "    for num in\
    \ lst:\n        sorted_list = [num for num in lst if num > num]\n        if sorted_list:\n\
    \            return False\n    return True\n", "    lst = sorted(lst)\n    if\
    \ len(lst) != len(set(lst)):\n        return False\n    return lst == lst[::-1]\n\
    \n", "    if not lst:\n        return True\n    seen = {}\n    for i in lst:\n\
    \        seen[i] = True\n    return all(seen.values())\n", "    return sorted(lst)\
    \ == lst\n", "    # Write your code here\n    if len(set(lst)) == 1:\n       \
    \ return True\n    else:\n        return False\n", "    lst = list(lst)\n    lst\
    \ = sorted(lst)\n    return lst==lst\n\n", "    if len(lst) <= 1:\n        return\
    \ True\n    \n    lst = set(lst)\n    return not lst.isdisjoint({lst[0], lst[-1]})\n",
  "    for i in lst:\n        if lst.count(i) > 1:\n            return False\n   \
    \ return True\n", "    if len(lst) == 1: return True\n    i = 0\n    while i <\
    \ len(lst) - 1:\n        j = i + 1\n        while j < len(lst):\n            if\
    \ lst[i] == lst[j]: return False\n            j += 1\n        i += 1\n    return\
    \ True\n", "    if len(lst) <= 1:\n        return True\n    if lst[-1] == lst[0]:\n\
    \        return False\n    mid = (len(lst)//2) -1\n    if lst[mid] == lst[mid-1]:\n\
    \        return is_sorted(lst[:mid])\n    return is_sorted(lst[:mid]) and is_sorted(lst[mid:])\n",
  "    seen = set()\n    seen_add = seen.add\n    for x in lst:\n        if x in seen:\
    \ return False\n        seen_add(x)\n    return True\n\n", "    seen = set()\n\
    \    for x in lst:\n        if x in seen:\n            return False\n        seen.add(x)\n\
    \    return True\n", "    sorted_set = set(lst)\n    if len(sorted_set) == len(lst):\n\
    \        for val in lst:\n            if val not in sorted_set:\n            \
    \    return False\n        return True\n    return False\n\n", "    sorted_nums\
    \ = [1, 2, 3, 4, 5]\n    if len(lst) == 1:\n        return lst[0] == sorted_nums\n\
    \    sorted_nums = lst[:]\n    sorted_nums.sort()\n    return sorted_nums == lst\n\
    \n", "    first = lst[0]\n    last = lst[-1]\n    for x in lst:\n        if x\
    \ == first and x == last:\n            return False\n    return True\n\n", " \
    \   return len(set(lst)) == len(lst) and sorted(lst) == lst\n\n", "    \n    if\
    \ len(lst) < 2:\n        return True\n    if lst[0] == lst[1]:\n        return\
    \ False\n    if lst[-1] < lst[0]:\n        return False\n    else:\n        return\
    \ True\n", "    if not lst:\n        return True\n    \n    sorted = False\n \
    \   \n    for num in lst:\n        if num < lst[0]:\n            sorted = True\n\
    \            break\n    \n    return sorted\n\n", "    length = len(lst)\n   \
    \ for i in range(length-1):\n        if lst[i] < lst[i + 1]:\n            return\
    \ False\n    return True\n\n", "    for i in lst:\n        if not is_in_order(lst[:i]):\n\
    \            return False\n    return True\n", "    seen: Dict[int, int] = {}\n\
    \    for item in lst:\n        seen[item] = seen.get(item, 0) + 1\n        \n\
    \    return all(seen[k] == 1 for k in seen)\n</cell>\n<text>\nQuestion 7 (Optional)\n\
    Write a function that returns True if an input is a palindrome.\n\nNote: The interviewer\
    \ does not want you to alter the original string. Additionally, the function should\
    \ not lower case the string. The only exception to this rule are empty strings.\n\
    \n\n</text>\n<cell>", "    \n    # sort the list to check\n    sorted_lst = sorted(lst)\n\
    \n    # return if the list is sorted\n    return sorted_lst[:-1] == sorted_lst[1:]\n",
  "    if len(lst) < 2:\n        return True\n    else:\n        i = 0\n        while\
    \ i < len(lst):\n            if i == len(lst) - 1:\n                break\n  \
    \          else:\n                if lst[i] > lst[i + 1]:\n                  \
    \  return False\n                else:\n                    i += 1\n    return\
    \ True\n", "    lst = sorted(set(lst))\n    return lst == lst[::-1]\n\n", "  \
    \  counts = {i: lst[:i].count(i) for i in range(len(lst) + 1)}\n    # count returns\
    \ 0 for non-unique values\n    return len(counts) == 1 and counts[0] == len(lst)\n",
  "    size = len(lst)\n    unique_val = set()\n    for i in lst:\n        if i not\
    \ in unique_val:\n            unique_val = unique_val | {i}\n    if len(unique_val)\
    \ > 1:\n        return False\n    elif len(unique_val) == 0:\n        return True\n\
    \    else:\n        return is_sorted(lst[1:])\n\n", "    \n    if len(lst) ==\
    \ 0 or len(lst) == 1:\n        return True\n    \n    prev = lst[0]\n    for i\
    \ in lst:\n        if prev == i:\n            return False\n        else:\n  \
    \          prev = i\n    return True\n", "    return len(lst) == len(lst[:-1])\
    \ and all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n", "    \n    # Create\
    \ a copy to prevent mutations\n    lst = lst.copy()\n    \n    # Compare each\
    \ element to the one before it\n    for i in range(1, len(lst)):\n        if lst[i]\
    \ < lst[i-1]:\n            return False\n    return True\n", "    first = lst[0]\n\
    \    last = lst[-1]\n    if len(lst) == 1:\n        return True\n    for i in\
    \ range(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            return False\n\
    \    return True\n", "    uniques = set()\n    for item in lst:\n        if item\
    \ not in uniques:\n            uniques.add(item)\n    return len(uniques) == len(lst)\n",
  "    for index in range(len(lst) - 1):\n        if lst[index] > lst[index + 1]:\n\
    \            return False\n    return True\n", "    lst = sorted(set(lst))\n \
    \   for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n        \
    \    return False\n    return True\n", "    i = 0\n    while i < len(lst) - 1:\n\
    \        if lst[i] == lst[i + 1]:\n            if lst[i] == lst[i + 1]:\n    \
    \            return False\n            else:\n                i += 1\n       \
    \ else:\n            return False\n    return True\n\n", "    if len(lst) < 2:\n\
    \        return True\n    \n    lst = sorted(lst)\n    for i in range(1, len(lst)):\n\
    \        if lst[i-1] == lst[i]:\n            return False\n    return True\n",
  "    \n    lst1 = [n for n in lst if lst.count(n) > 1]\n    lst2 = [n for n in lst\
    \ if n not in lst1]\n    if len(lst2) > 0:\n        return False\n    \n    lst1\
    \ = [n for n in lst if lst.count(n) == 1]\n    if lst1 == lst:\n        return\
    \ True\n    else:\n        return False\n\n", "    sorted_list = sorted(lst)\n\
    \    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return\
    \ False\n", "    count = 0\n    for number in lst:\n        if number == count\
    \ + 1:\n            return False\n        count = number + 1\n    return True\n\
    \n", "    # Sort the list to remove duplicates, then check it.\n    lst = sorted(set(lst))\n\
    \    return sorted(lst) == lst\n\n", "    lst = list(lst)\n    # Sort the list\
    \ so we can look for consecutive duplicates\n    lst.sort()\n    # Check that\
    \ there are at least 2 items (including any duplicates) in the\n    # list after\
    \ the sort\n    if len(lst) < 2:\n        return False\n\n    # Compare each pair\
    \ of consecutive items in the list\n    for i in range(1, len(lst)):\n       \
    \ if lst[i] > lst[i-1]:\n            return False\n    return True\n\n", "   \
    \ unique_lst = sorted(set(lst))\n    if len(unique_lst) == 1:\n        return\
    \ True\n    else:\n        return False\n\n", "    # first check if list is sorted\n\
    \    if len(lst) <= 1:\n        return True\n    first = 0\n    last = n - 1\n\
    \    found = False\n    while first <= last and not found:\n        mid = (first\
    \ + last) // 2\n        if lst[mid] > lst[last]:\n            first = mid + 1\n\
    \        else:\n            last = mid - 1\n        found = (first <= last)\n\
    \    return found\n", "    prev_el = lst[0]\n    sorted = False\n    for i in\
    \ range(len(lst)):\n        if lst[i] != prev_el:\n            sorted = True\n\
    \        prev_el = lst[i]\n    return sorted\n", "    if len(lst) <= 1:\n    \
    \    return True\n    i = j = 0\n    while i < len(lst) and j < len(lst):\n  \
    \      if lst[i] < lst[j]:\n            return False\n        i += 1\n       \
    \ j += 1\n    return True\n\n", "    seen = set()\n    for item in lst:\n    \
    \    if item in seen:\n            return False\n        seen.add(item)\n    return\
    \ True\n", "    return len(set(lst)) == len(lst) and sorted(lst) == lst\n\n",
  "    counts = {}\n    for x in lst:\n        counts[x] = counts.get(x, 0) + 1\n\
    \    for x in lst:\n        if counts[x] == 1:\n            return True\n    \
    \    elif counts[x] > 1:\n            return False\n    return True\n\n", "  \
    \  return sorted(lst) == lst\n", "    if len(lst) == 1:\n        return True\n\
    \    \n    first = lst[0]\n    last = lst[-1]\n    for num in lst[1:]:\n     \
    \   if first > num or last < num:\n            return False\n        first = num\n\
    \        last = num\n    return True\n\n", "    if len(lst) < 2:\n        return\
    \ True\n    last: int = lst[-1]\n    count: int = 0\n    for num in lst:\n   \
    \     if last == num:\n            count += 1\n        else:\n            if count\
    \ > 0:\n                return False\n            count = 1\n            last\
    \ = num\n    if count > 0:\n        return False\n    return True\n\n", "    if\
    \ len(lst) < 2: return True\n    seen = set()\n    return all(num in seen or seen.add(num)\
    \ for num in lst)\n", "    n = len(lst)\n    if n == 0:\n        return False\n\
    \    if n == 1:\n        return True\n    if lst[0] == lst[-1]:\n        return\
    \ True\n    if lst[0] <= lst[-1]:\n        mid = n // 2\n        left = mid -\
    \ 1\n        right = mid + 1\n        while left >= 0 and right < n and lst[left]\
    \ > lst[right]:\n            left = left - 1\n            right = right + 1\n\
    \        if left >= 0 and right < n and lst[left] > lst[right]:\n            return\
    \ True\n        return False\n    return False\n", "    numbers = set(lst)\n \
    \   if len(numbers) != len(set(numbers)):\n        return False\n\n    for number\
    \ in numbers:\n        numbers.remove(number)\n        if len(numbers) == 0:\n\
    \            return True\n\n    return False\n", "    return len(list(filter(lambda\
    \ x: x != lst[0], lst))) == len(lst)\n", "    seen = set()\n    for item in lst:\n\
    \        if item in seen:\n            return False\n        seen.add(item)\n\
    \    return True\n\n", "    return len(set(lst)) == len(lst) and sorted(lst) ==\
    \ lst\n\n", "    counter = collections.Counter(lst)\n    if counter.values() ==\
    \ [1, 1, 2, 3]:\n        return True\n    else:\n        return False\n", "  \
    \  if len(lst) < 2:\n        return True\n    seen = set()\n    for item in lst:\n\
    \        if item in seen:\n            return False\n        seen.add(item)\n\
    \    return True\n\n", "    counts = {}\n    for i in lst:\n        if i in counts:\n\
    \            counts[i] += 1\n        else:\n            counts[i] = 1\n    for\
    \ i in counts:\n        if counts[i] > 1:\n            return False\n    return\
    \ True\n", "    counts = [0] * len(lst)\n    # iterate through list and keep track\
    \ of counts of each number\n    for i in range(len(lst)):\n        counts[lst[i]]\
    \ += 1\n    # check if all numbers are equal\n    if counts == [0] * len(lst):\n\
    \        return True\n    # check if last two numbers are equal\n    if counts[-1]\
    \ == counts[-2]:\n        return True\n    return False\n\n", "    sorted_list\
    \ = sorted(lst)\n    for i in range(len(sorted_list)):\n        if sorted_list[i]\
    \ - sorted_list[i-1] != 1:\n            return False\n    return True\n", "  \
    \  # use sets to get rid of duplicates\n    return len(set(lst)) == len(lst)\n\
    \n", "    if len(lst) == 1:\n        return True\n    return all(lst[i] < lst[i\
    \ + 1] for i in range(len(lst) - 1))\n\n", "    seen = {}\n    for i in lst:\n\
    \        if i not in seen:\n            seen[i] = False\n        seen[i] = True\n\
    \        if i == lst[-1] and seen[lst[-1]]:\n            return True\n    return\
    \ False\n\n", "    for i in lst:\n        if lst.count(i) > 1:\n            return\
    \ False\n    return True\n", "    if len(lst) == 1:\n        return True\n   \
    \ elif len(lst) == 2:\n        return lst[0] == lst[1]\n    else:\n        return\
    \ all(l[0] == l[1] for l in zip(lst[:-1], lst[1:]))\n\n", "    cnt = 0\n    prev\
    \ = None\n    i = 0\n    while i < len(lst):\n        if lst[i] != prev:\n   \
    \         cnt += 1\n        prev = lst[i]\n        i += 1\n    return cnt == 1\n\
    \n", "    for i in range(len(lst)):\n        current = lst[i]\n        previous\
    \ = lst[i-1]\n        if current > previous:\n            return False\n    return\
    \ True\n\n", "    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n\
    \            return False\n    return True\n\n", "    counts = Counter(lst)\n\
    \    counts = [c for c in counts.values() if c > 1]\n    return True if counts\
    \ == sorted(counts) else False\n", "    return len(lst) == 0 or all(lst[i] <=\
    \ lst[i+1] for i in range(len(lst)-1))\n", "    if len(lst) < 2:\n        return\
    \ True\n    seen = set()\n    for item in lst:\n        if item in seen:\n   \
    \         return False\n        seen.add(item)\n    return True\n\n", "    return\
    \ len(set(lst)) <= 1 and all(i <= lst[0] for i in lst)\n", "    # first number\
    \ in list, check if its the 1st or last\n    # number in list, check if its the\
    \ 2nd or next to last number\n    # in list, check if its the 3rd or next to next\
    \ to last number\n    # in list, etc\n    for i in range(len(lst)-1):\n      \
    \  if lst[i] == lst[i+1]:\n            continue\n        elif lst[i] == lst[i+2]:\n\
    \            return True\n        elif lst[i] == lst[i+1]:\n            return\
    \ False\n    return False\n", "    for n in lst:\n        if lst.count(n) > 1:\n\
    \            return False\n    return True\n", "    seen: Set = set()\n    seen_add\
    \ = seen.add\n\n    # a list with two elements has its second element unsorted\n\
    \    if len(lst) == 2 and lst[1] == lst[0]:\n        return False\n\n    # sort\
    \ the list, keeping track of the elements seen\n    for e in lst:\n        if\
    \ e in seen:\n            return False\n        seen_add(e)\n\n    return True\n\
    \n", "    seen = set()\n    for i in lst:\n        if i in seen:\n           \
    \ return False\n        seen.add(i)\n    return True\n", "    if len(lst) == 1:\n\
    \        return True\n    elif len(lst) == 2 and lst[0] == lst[1]:\n        return\
    \ False\n    elif len(lst) == 2 and lst[0] == lst[1] and lst[0] != lst[1]:\n \
    \       return False\n    else:\n        return all(lst[i] <= lst[i + 1] for i\
    \ in range(len(lst) - 1))\n", "    seen = set()\n    for item in lst:\n      \
    \  if item in seen:\n            return False\n        else:\n            seen.add(item)\n\
    \    return True\n", "    if len(lst) < 2:\n        return True\n    elif len(lst)\
    \ == 2:\n        return lst[0] == lst[1]\n    elif len(lst) >= 3 and lst[0] ==\
    \ lst[-1]:\n        if lst[0] != lst[1]:\n            return False\n        else:\n\
    \            return is_sorted(lst[1:])\n    elif len(lst) >= 2 and lst[0] == lst[1]:\n\
    \        return is_sorted(lst[1:])\n    else:\n        return False\n", "    if\
    \ len(lst) == 0 or len(lst) == 1 and lst[0] != lst[1]:\n        return True\n\
    \    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i+1]:\n\
    \                return False\n        return True\n\n", "    # Sort the list\
    \ then compare the first and last elements to see if they're equal.\n    # Since\
    \ it's sorted, they should all be equal, and we can exit out of the function.\n\
    \    lst = sorted(lst)\n    return lst[0] == lst[-1]\n", "    for i in range(1,\
    \ len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return\
    \ True\n\n", "    sorted_list = sorted(lst)\n    if not sorted_list == lst:\n\
    \        return False\n\n    previous = None\n    for value in sorted_list:\n\
    \        if previous is not None and value != previous:\n            return False\n\
    \        previous = value\n\n    return True\n\n", "    \n    unique_numbers =\
    \ list(set(lst))\n    if len(unique_numbers) != len(lst):\n        return False\n\
    \    else:\n        for num in unique_numbers:\n            if lst.count(num)\
    \ > 1:\n                return False\n            else:\n                return\
    \ True \n    return True\n\n", "    n = len(lst)\n    if n < 2:\n        return\
    \ True\n    if n == 1:\n        return False\n    dup_numbers = [num for num in\
    \ lst if num > 1]\n    if dup_numbers:\n        return False\n    last = lst[0]\n\
    \    if last == lst[-1]:\n        return True\n    low = 0\n    high = n-1\n \
    \   while low < high:\n        mid = (low + high) // 2\n        if lst[mid] <\
    \ last:\n            low = mid + 1\n        elif lst[mid] > last:\n          \
    \  high = mid - 1\n        else:\n            return True\n    return False\n",
  "    if len(lst) == 1:\n        return True\n    # Assume no negative numbers and\
    \ only integers.\n    for num in lst:\n        if num == lst[0] and num != lst[-1]:\n\
    \            return False\n    return True\n\n", "    sorted_list: List[int] =\
    \ sorted(lst)\n    if len(lst) != len(set(lst)):\n        return False\n    return\
    \ sorted_list == sorted(lst)\n\n", "    counts = collections.Counter(lst)\n  \
    \  for count in counts.values():\n        if not count == 1:\n            return\
    \ False\n    return True\n", "    # write your code here\n    \n    if len(lst)\
    \ == 1:\n        return True\n    if len(lst) == 0 or len(lst) > 1:\n        return\
    \ False\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n   \
    \         return False\n    return True\n", "    sorted_list = sorted(lst)\n \
    \   return lst == sorted_list\n", "    if not lst:\n        return True\n    seen\
    \ = set()\n    return all(el in seen or seen.add(el) is None for el in lst)\n",
  "    if len(set(lst)) > 1:\n        return False\n    for i in range(len(lst) -\
    \ 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n",
  "    if not lst:\n        return True\n    if len(lst) == 1:\n        return True\n\
    \    i = len(lst)-1\n    while i > 0:\n        if lst[i] < lst[i-1]:\n       \
    \     return False\n        i -= 1\n    return True\n", "    lst = [i for i in\
    \ lst if i != sorted(lst)]\n    return len(lst) == len(set(lst))\n\n", "    unique_nums\
    \ = set()\n    for num in lst:\n        if num in unique_nums:\n            return\
    \ False\n        else:\n            unique_nums.add(num)\n    return True\n\n",
  "    \n    pass\n", "    # Sort first\n    sorted_lst = sorted(lst)\n    # Do this\
    \ with sets, because order is irrelevant for sets\n    if len(set(sorted_lst))\
    \ == len(sorted_lst):\n        # Check for dupes\n        if lst.count(sorted_lst[0])\
    \ > 1:\n            return False\n        return True\n    return False\n", " \
    \   if len(lst) <= 1:\n        return True\n    numbers = Counter(lst)\n    prev\
    \ = numbers.most_common()[0][0]\n    for item in lst[1:]:\n        if item < prev:\n\
    \            return False\n        prev = item\n    return True\n", "    seen\
    \ = set()\n    return all(n not in seen or seen.addd(n) == n for n in lst)\n\n",
  "    first = lst[0]\n\n    for i in range(len(lst) - 1):\n        if lst[i] != lst[i\
    \ + 1]:\n            return False\n    return True\n", "    i = 0\n    prev =\
    \ -1\n    while i < len(lst):\n        if lst[i] < prev:\n            return False\n\
    \        prev = lst[i]\n        i += 1\n    return True\n", "    lst = sorted(lst)\n\
    \    if len(lst) <= 1:\n        return True\n    else:\n        return lst[0]\
    \ == lst[-1]\n\n", "    length = len(lst)\n    if length < 2:\n        return\
    \ True\n    last, current = lst[0], lst[1]\n    for index in range(2, length):\n\
    \        current, last = last, current\n        if current > lst[index]:\n   \
    \         return False\n    return True\n", "    lst = list(lst)\n    return lst.count(lst[0])\
    \ == len(lst)\n\n", "    if len(lst) == 1:\n        return True\n    for i in\
    \ range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n\
    \    return True\n\n", "    counts = Counter(lst)\n    if len(counts) <= 1:\n\
    \        return True\n    return False not in map(lambda x: counts[x] > 1, counts.values())\n",
  "    lst = list(lst)\n    return lst == sorted(lst)\n", "    count = {}\n    for\
    \ i in lst:\n        count[i] = count.get(i) + 1\n    for k,v in count.items():\n\
    \        if v == 1:\n            return True\n        elif v > 1:\n          \
    \  return False\n    return True\n\n", "    length = len(lst)\n    seen = set()\n\
    \n    # First check all numbers are unique\n    if len(list(seen)) == len(lst):\n\
    \        return True\n\n    # Check all numbers are equal\n    diff = lst[-1]\
    \ - lst[0]\n    if diff == 1:\n        return True\n\n    # Compare every pair\
    \ of numbers\n    for idx in range(length - 2):\n        diff = lst[idx] - lst[idx\
    \ + 1]\n        if diff != 1 and diff not in seen:\n            return False\n\
    \        seen.add(diff)\n    return True\n\n", "    \n    return lst[0] == lst[-1]\
    \ and len(lst) == len(set(lst))\n</cell>\n<cell>\nis_sorted([1,2,3])\n</cell>\n\
    <cell>\nis_sorted([2,1,3])\n</cell>\n<cell>\nis_sorted([2,3,3,2])\n</cell>\n<cell>\n\
    is_sorted([4,4,4,4])\n</cell>\n<cell>", "    # Sorted list has duplicates\n  \
    \  if len(lst) != len(set(lst)):\n        return False\n\n    # Sorting list has\
    \ duplicates\n    if len(lst) != len(set(lst)):\n        return False\n\n    #\
    \ Sorting list has duplicates\n    if len(lst) != len(set(lst)):\n        return\
    \ False\n\n    # All other lists have unique numbers\n    return True\n", "  \
    \  counts = {x: 0 for x in range(10)}\n    for num in lst:\n        if counts[num]\
    \ >= 2:\n            return False\n        counts[num] += 1\n    return True\n\
    \n", "    seen: Set[int] = set()\n    seen_add = seen.add\n    for i in lst:\n\
    \        if i in seen:\n            return False\n        seen_add(i)\n    return\
    \ True\n\n", "    seen = {}\n    for item in lst:\n        if item not in seen:\n\
    \            seen[item] = 1\n            return True\n        seen[item] += 1\n\
    \    return False\n", "    if len(lst) == 1:\n        return lst[0] == lst[0]\n\
    \    if lst[0] < lst[1]:\n        return False\n    if lst[0] > lst[1]:\n    \
    \    return True\n    return any(lst[0] == a for a in lst[1:])\n", "    \n   \
    \ if len(lst) < 2:\n        return True\n    \n    i = 0\n    j = len(lst)\n \
    \   while i < j:\n        \n        if lst[i] > lst[j]:\n            return False\n\
    \        \n        elif lst[i] < lst[j]:\n            \n            # shift right\n\
    \            j += 1\n            \n        else:\n            \n            i\
    \ += 1\n            \n    return True\n\n", "    # Sort the list if it's not already\
    \ sorted\n    if not is_sorted(lst):\n        lst = sorted(lst)\n\n    # Check\
    \ if the list has more than 1 duplicate number\n    if lst.count(lst[0]) > 1:\n\
    \        return False\n\n    # If all the numbers are the same, then the list\
    \ is sorted\n    if len(lst) == 1:\n        return True\n    else:\n        return\
    \ True\n</cell>\n<text>\nNext up: Recursion\nWe've defined a function for you.\
    \ It's called is_sorted and it takes in a list and returns True if it is sorted\
    \ and False if it is not.\n\nIn the lecture videos, we talked about recursion.\
    \ Let's see it implemented with a base case and a recursive case. The base case\
    \ is where there is only one number in the list. For example, [1] or [5] or [5,\
    \ 1].\n\nThe recursive case is where there are two or more numbers in the list.\
    \ For example, if you have a list such as [5, 2, 5] then there are two 5's. The\
    \ first one is at index 1 and the second one is at index 2.\n\nHere's how we define\
    \ is_sorted in terms of our previous functions:\n", "    count = 1\n    prev =\
    \ 0\n    for number in lst:\n        if number == prev:\n            count +=\
    \ 1\n        else:\n            count = 1\n        prev = number\n\n    if count\
    \ > 1:\n        return False\n\n    return True\n\n", "    return len(set(lst))\
    \ <= 1\n", "    prev = lst[0]\n    for i in lst[1:]:\n        if i > prev:\n \
    \           return False\n        prev  = i\n    return True\n", "    if len(lst)\
    \ == 0 or len(lst) == 1:\n        return True\n\n    lst2 = lst[:]\n    lst2.sort()\n\
    \    return lst2 == lst\n", "    counts = Counter(lst)\n    return all(counts.values())\
    \ == len(lst)\n\n", "    first = lst[0]\n    return all(first < other for other\
    \ in lst[1:])\n", "    if len(lst) == 0:\n        return True\n    prev = None\n\
    \    for x in lst:\n        if prev == x:\n            continue\n        elif\
    \ prev is None:\n            return True\n        elif x < prev:\n           \
    \ return False\n        else:\n            prev = x\n    return True\n", "   \
    \ count_map = {}\n    for i, num in enumerate(lst):\n        if count_map.get(num)\
    \ is None:\n            count_map[num] = 1\n        else:\n            count_map[num]\
    \ += 1\n            if len(count_map) == 2:\n                return False\n  \
    \  return True\n", "    \n    if len(lst) == 1:\n        return True\n    \n \
    \   counts = {k: 0 for k in lst}\n    \n    for i in range(1, len(lst)):\n   \
    \     \n        if lst[i-1] == lst[i]:\n            counts[lst[i-1]] += 1\n  \
    \      else:\n            if counts[lst[i-1]] > 0:\n                return False\n\
    \            else:\n                counts[lst[i]] += 1\n    return True\n", " \
    \   seen = set()\n    for i in lst:\n        if i in seen:\n            return\
    \ False\n        seen.add(i)\n    return True\n\n", "    numbers = set(lst)\n\
    \    if len(numbers) > 1:\n        return False\n    elif len(numbers) == 1:\n\
    \        return True\n    else:\n        first = lst[0]\n        for num in lst[1:]:\n\
    \            if num != first:\n                return False\n            first\
    \ = None\n", "    numbers = sorted(set(lst))\n    if numbers == lst:\n       \
    \ return True\n    return False\n", "    n = len(lst)\n    if n <= 1:\n      \
    \  return True\n    for i in range(n - 1):\n        if lst[i] > lst[i + 1]:\n\
    \            return False\n    return True\n", "    if len(lst) <= 1:\n      \
    \  return True\n\n    for index, number in enumerate(lst):\n        if index ==\
    \ 0:\n            continue\n        if number == lst[index - 1]:\n           \
    \ continue\n        return False\n\n    return True\n\n", "    return sorted(lst)\
    \ == lst\n\n", "    i = 0\n    j = -1\n    while(i < len(lst)):\n        j -=\
    \ 1\n        if (lst[i] != lst[j]):\n            return False\n        i += 1\n\
    \    return True\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
