name: HumanEval_126_is_sorted
language: py
prompt: "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    \"\
  \"\"\n    Given a list of numbers, return whether or not they are sorted\n    in\
  \ ascending order. If list has more than 1 duplicate of the same\n    number, return\
  \ False. Assume no negative numbers and only integers.\n\n    Examples\n    >>>\
  \ is_sorted([5])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5])\n    True\n    >>>\
  \ is_sorted([1, 3, 2, 4, 5])\n    False\n    >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
  \    True\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> is_sorted([1,\
  \ 3, 2, 4, 5, 6, 7])\n    False\n    >>> is_sorted([1, 2, 2, 3, 3, 4])\n    True\n\
  \    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([5]) == True\n    assert candidate([1,\
  \ 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert\
  \ candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6,\
  \ 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False\n    assert\
  \ candidate([]) == True\n    assert candidate([1]) == True\n    assert candidate([3,\
  \ 2, 1]) == False\n    assert candidate([1, 2, 2, 2, 3, 4]) == False\n    assert\
  \ candidate([1, 2, 3, 3, 3, 4]) == False\n    assert candidate([1, 2, 2, 3, 3, 4])\
  \ == True\n    assert candidate([1, 2, 3, 4]) == True\n\ndef test_check():\n   \
  \ check(is_sorted)\n\ntest_check()\n"
completions: ["    if len(lst) < 2:\n        return True\n\n    first, rest = lst[0],\
    \ lst[1:]\n\n    # find first duplicate\n    second_index = -1\n    second_value\
    \ = first\n    for index, value in enumerate(rest):\n        if value != second_value:\n\
    \            if index >= second_index:\n                return False\n\n     \
    \       second_index = index\n            second_value = value\n\n    return True\n",
  "    prev = lst[0]\n    for i in lst[1:]:\n        if prev < i:\n            return\
    \ False\n        prev = i\n    return True\n\n", "    counts = dict()\n    unique,\
    \ dups = [],[]\n    for i in lst:\n        if i in counts:\n            counts[i]\
    \ += 1\n            if counts[i] > 1:\n                dups.append(i)\n      \
    \  else:\n            unique.append(i)\n            counts[i] = 1\n    if len(unique)\
    \ == 0 or any(dups):\n        return False\n    return True\n", "    return len(lst)\
    \ == 0 or lst == sorted(lst)\n\n", "    return len(set(lst)) == 1 and lst == sorted(lst)\n\
    \n", "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n   \
    \         return False\n    return True\n", "    if len(lst) < 2:\n        return\
    \ True\n    seen = set()\n    for item in lst:\n        if item in seen:\n   \
    \         return False\n        seen.add(item)\n    return True\n", "    return\
    \ len(set((lst))) == 1 and sorted(lst) == lst\n\n", "    prev_number = None\n\
    \    for number in lst:\n        if prev_number is not None and number == prev_number:\n\
    \            return False\n        prev_number = number\n    return True\n", " \
    \   return len(lst) == 0 or not all(lst[i] == lst[i+1]\n            for i in range(len(lst)-1))\n",
  "    # TODO\n    return True\n\n", "    lst = list(lst)\n    if len(lst) < 2:\n\
    \        return True\n    last = lst[0]\n    for i in range(1, len(lst)):\n  \
    \      if lst[i] != last:\n            return False\n        last = lst[i]\n \
    \   return True\n\n", "    sorted_lst = list(sorted(lst))\n    if len(lst) ==\
    \ len(sorted_lst):\n        for i, j in zip(lst, sorted_lst):\n            if\
    \ i != j:\n                return False\n    return True\n\n", "    lst = sorted(lst)\n\
    \    if lst == lst[::-1]:\n        return True\n    else:\n        return False\n",
  "    \n    seen = set()\n    for num in lst:\n        if num in seen:\n        \
    \    return False\n        else:\n            seen.add(num)\n    return True\n",
  "    seen = []\n    for i in range(len(lst)):\n        if i in seen:\n         \
    \   return False\n        else:\n            seen.append(i)\n    return sorted(lst)\
    \ == lst\n\n", "    \n    if len(lst) < 2:\n        return True\n    \n    # Create\
    \ a sorted copy of the list\n    sorted_lst = sorted(lst)\n    \n    seen = set()\n\
    \    for i in sorted_lst:\n        if i in seen:\n            return False\n \
    \       else:\n            seen.add(i)\n    return True\n</cell>\n<cell>", " \
    \   cnt = 0\n    lst = list(set(lst))\n    lst = [i for i in lst if i != lst[cnt]]\n\
    \    lst = list(set(lst))\n    if len(lst) == 1 and lst[0] == lst[0]:\n      \
    \  return True\n    elif len(lst) == 0:\n        return True\n    else:\n    \
    \    return False\n", "    if not lst:\n        return True\n    \n    if len(lst)\
    \ == 1:\n        return True\n    \n    return is_sorted(lst[1:])\n", "    # Create\
    \ a set to keep track of the already seen numbers.\n    seen_set = set()\n\n \
    \   # Iterate through the list and add the current number to the set.\n    for\
    \ item in lst:\n        if item not in seen_set:\n            seen_set.add(item)\n\
    \            return True\n    return False\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
