name: HumanEval_95_check_dict_case
language: py
prompt: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n\
  \    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return False.\n    The\
  \ function should return False is the given dictionary is empty.\n    Examples:\n\
  \    >>> check_dict_case({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> check_dict_case({\
  \ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> check_dict_case({\
  \ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> check_dict_case({\
  \ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({\
  \ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
  \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
  \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
  \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
  \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
  \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
  \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
  test_check()\n"
completions: ["    if len(dict) == 0:\n        return False\n    for key in dict:\n\
    \        if not isinstance(key, str):\n            return False\n    if all(isinstance(key,\
    \ str) for key in dict):\n        return True\n    return False\n", "    assert\
    \ isinstance(dict, dict), \"The argument should be a dictionary\"\n    return\
    \ all(isinstance(k, str) and isinstance(v, str) for k, v in dict.items())\n",
  "    if len(dict) == 0:\n        return False\n    for k in dict.keys():\n     \
    \   if k.isupper():\n            if not (k + '' in dict.values()):\n         \
    \       return False\n        else:\n            if not k.isupper() and (k.upper()\
    \ + '.' in dict.values()):\n                return False\n    return True\n",
  "    for k in dict:\n        if type(k) is not str or len(k) != len(dict[k]):\n\
    \            return False\n    return True\n", "    if not isinstance(dict, dict):\n\
    \        return False\n    if not dict:\n        return False\n    for k in dict.keys():\n\
    \        if type(k) is not str:\n            return False\n    key_set = set(dict.keys())\n\
    \    if set(string.ascii_lowercase).issubset(key_set):\n        return True\n\
    \    if set(string.ascii_uppercase).issubset(key_set):\n        return True\n\
    \    return False\n", "    for k, v in dict.items():\n        if k in ('Name',\
    \ 'Age', 'City') and not isinstance(v, str):\n            return False\n     \
    \   if not (k in ('Name', 'Age', 'City') or not isinstance(v, str)):\n       \
    \     return False\n    return True\n", "    if not dict:\n        return True\n\
    \    for key, value in dict.items():\n        try:\n            str(key)\n   \
    \         str(value)\n            return True\n        except:\n            pass\n\
    \    return False\n", "    for k in dict.keys():\n        if not isinstance(k,\
    \ str) or not k.islower():\n            return False\n    return True\n", "  \
    \  if len(dict) == 0:\n        return False\n\n    for key in dict:\n        if\
    \ not isinstance(key, str):\n            return False\n        \n    return True\
    \ \n</cell>\n<text>\nTest Your Solution\n\n</text>\n<cell>", "    string_keys\
    \ = list(dict.keys())\n    for str_key in string_keys:\n        if not isinstance(str_key,str)\
    \ or str_key is None:\n            return False\n    return True\n", "    if isinstance(dict,\
    \ dict):\n        for key, value in dict.items():\n            if isinstance(key,\
    \ str) and isinstance(value, str) and len(value) > 0:\n                return\
    \ check_dict_case(dict(filter(lambda a: a != key, dict)))\n            elif isinstance(key,\
    \ str) and isinstance(value, str):\n                return check_dict_case(dict(filter(lambda\
    \ a: a != key.lower(), dict)))\n            elif isinstance(key, str) and isinstance(value,\
    \ str) and len(value) > 0:\n                return check_dict_case(dict(filter(lambda\
    \ a: a != key.upper(), dict)))\n            else:\n                return False\n\
    \    else:\n        return True\n", "    if not dict:\n        return False\n\n\
    \    for k in dict:\n        if not isinstance(k, str):\n            return False\n\
    \        k_lower = k.lower()\n        k_upper = k.upper()\n        if k_lower\
    \ != k_upper:\n            return False\n    return True\n\n", "    for key in\
    \ dict:\n        if not isinstance(key, str):\n            return False\n    \
    \    elif key.lower() != key:\n            return False\n    return True\n", " \
    \   if len(dict) == 0:\n        return False\n    lower_keys = sorted(set(key.lower()\
    \ for key in dict))\n    upper_keys = sorted(set(key.upper() for key in dict))\n\
    \    return lower_keys == upper_keys\n", "    if not dict:\n        return False\n\
    \    for key, value in dict.items():\n        if not isinstance(key, str) or not\
    \ isinstance(value, str):\n            return False\n    return True\n", "   \
    \ return False if dict.keys() else True\n", "    if not dict:\n        return\
    \ False\n    for key, value in dict.items():\n        if type(key) != str:\n \
    \           return False\n        if type(key) != str:\n            return False\n\
    \    return True\n", "    ok = True\n    for key in dict:\n        if key.islower():\n\
    \            pass\n        elif key.isupper():\n            pass\n        else:\n\
    \            return False\n    return True\n", "    try:\n        for key in dict.keys():\n\
    \            if not isinstance(key, str):\n                return False\n    \
    \        else:\n                lower = key.lower()\n                upper = key.upper()\n\
    \                if lower == upper:\n                    pass\n              \
    \  else:\n                    return False\n    except TypeError as type_error:\n\
    \        return False\n    return True\n", "    if not isinstance(dict, dict):\n\
    \        return False\n    if not dict:\n        return False\n    for k in dict:\n\
    \        if not isinstance(k, str):\n            return False\n    return True\n",
  "    if not dict or not isinstance(dict, dict):\n        return False\n    \n  \
    \  for v in dict.values():\n        if not isinstance(v, str):\n            return\
    \ False\n    return True\n", "    dict_case = all(isinstance(key, str) and key.islower()\
    \ for key in dict)\n    if not dict_case:\n        return False\n    dict_case\
    \ = all(isinstance(key, str) and key.isupper() for key in dict)\n    return dict_case\n",
  "    if not dict:\n        return True\n    dict_str = str(dict).lower()\n    for\
    \ key in dict.keys():\n        if type(key) is not str:\n            return False\n\
    \        if key.lower() not in dict_str:\n            return False\n        if\
    \ key.upper() not in dict_str:\n            return False\n    return True\n",
  "    dict_keys_lower = dict.keys()\n    dict_keys_upper = [x.upper() for x in dict_keys_lower]\n\
    \    dict_keys_lower = [x.lower() for x in dict_keys_lower]\n    dict_keys_upper\
    \ = [x.upper() for x in dict_keys_upper]\n    if dict_keys_upper == dict_keys_lower:\n\
    \        return True\n    else:\n        return False\n", "    if not isinstance(dict,\
    \ dict):\n        return False\n    for key, value in dict.items():\n        if\
    \ key in ('names', 'emails', 'phones', 'addresses', 'notes'):\n            return\
    \ True\n        if key != key.upper():\n            return False\n    return True\n",
  "    if not dict:\n        return False\n    lowered = dict\n    uppper = dict.upper()\n\
    \    for key in dict.keys():\n        if not isinstance(key, str):\n         \
    \   return False\n        if key not in lowered or key not in uppper:\n      \
    \      return False\n        if lowered.get(key) != uppper.get(key):\n       \
    \     return False\n    return True\n</code>\nThe function above uses some Python\
    \ 3.8 features, specifically, f-strings and type annotations.\n<|/ a tags=python,python-3.x,dictionary\
    \ |>\n<| a tags=python,python-3.x,dictionary dscore=2 |>\nYou can iterate over\
    \ the keys and values in a dictionary with the .items() method. Try this:\n<code>",
  "    if dict is None:\n        return False\n    for k in dict.keys():\n       \
    \ if type(k) is not str:\n            return False\n    return True\n", "    if\
    \ dict:\n        for k,v in dict.items():\n            if not isinstance(k, str)\
    \ or not isinstance(v, str):\n                return False\n        return True\n\
    \    return False\n", "    if not isinstance(dict, dict):\n        return False\n\
    \    if not dict:\n        return False\n    for k, v in dict.items():\n     \
    \   if not isinstance(k, str) or not isinstance(v, str):\n            return False\n\
    \    return True\n\n", "    if not isinstance(dict, dict):\n        return False\n\
    \n    for key, value in dict.items():\n        if not isinstance(key, str):\n\
    \            return False\n        if not isinstance(value, str):\n          \
    \  return False\n\n        if key.lower() == key:\n            if value.lower()\
    \ != value:\n                return False\n\n        if key.upper() == key:\n\
    \            if value.upper() != value:\n                return False\n\n    return\
    \ True\n", "    return all((isinstance(key, str) and key.casefold() == key for\
    \ key in dict))\n</cell>\n<cell>\ncheck_dict_case({ 'a': 'apple', 'b': 'banana'\
    \ })\n</cell>\n<cell>\ncheck_dict_case({ 'a': 'apple', 'A': 'banana', 'B': 'banana'\
    \ })\n</cell>\n<cell>\ncheck_dict_case({ 'a': 'apple', 8: 'banana', 'a': 'apple'\
    \ })\n</cell>\n<cell>\ncheck_dict_case({ 'Name': 'John', 'Age': '36', 'City':\
    \ 'Houston' })\n</cell>\n<cell>\ncheck_dict_case({ 'STATE': 'NC', 'ZIP': '12345'\
    \ })\n</cell>\n<text>\nExercise 4: Checking if the given dictionary is empty\n\
    Given a dictionary, check to see if it's empty. Return True if the dictionary\
    \ is empty, False if it is not.\n\n\n</text>\n<cell>", "    if not isinstance(dict,\
    \ dict):\n        return False\n    for key, value in dict.items():\n        if\
    \ not isinstance(key, str):\n            return False\n        if key.lower()\
    \ != key:\n            return False\n        if key.upper() != key:\n        \
    \    return False\n    return True\n", "    assert isinstance(dict, dict), \"\
    check_dict_case() expects a dictionary\"\n    return all((isinstance(key, str)\
    \ and key.islower() or key.isupper()) \\\n        for key in dict)\n\n", "   \
    \ assert isinstance(dict, dict)\n    for k in dict.keys():\n        try:\n   \
    \         if isinstance(k, str):\n                for lk in k.lower():\n     \
    \               if lk in dict.values():\n                        return True\n\
    \            elif isinstance(k, int):\n                if k in dict.values():\n\
    \                    return True\n            else:\n                return False\n\
    \        except ValueError:\n            return False\n        \n    return True\n",
  "    # Your code here\n    # raise NotImplementedError()\n    \n    return True\n",
  "    # Write your code here\n    return isinstance(list(dict.keys())[0], str)\n\n",
  "    if isinstance(dict, dict):\n        if len(dict) == 0:\n            return\
    \ False\n        for key in dict.keys():\n            if not (isinstance(key,\
    \ str) or isinstance(key, int)):\n                return False\n        return\
    \ True\n    else:\n        raise TypeError(\"The input must be a dictionary.\"\
    )\n", "    for key in dict.keys():\n        if not isinstance(key, str):\n   \
    \         return False\n    return True\n", "    if not isinstance(dict, dict):\n\
    \        raise TypeError(\"Passed dictionary is not of type dict.\")\n    if not\
    \ dict:\n        return False\n    for k, v in dict.items():\n        if not isinstance(k,\
    \ str):\n            raise TypeError(\"Key is not a string.\")\n        if not\
    \ isinstance(v, str):\n            raise TypeError(\"Value is not a string.\"\
    )\n    return True\n", "    for key in dict:\n        if not isinstance(key, str):\n\
    \            return False\n    return True\n\n", "    if not dict:\n        return\
    \ False\n    \n    for key in dict:\n        if not (isinstance(key, str) or isinstance(key,\
    \ unicode)):\n            return False\n    return True\n", "    if len(dict)\
    \ == 0:\n        return False\n    for k in dict.keys():\n        try:\n     \
    \       k = int(k)\n        except:\n            pass\n        if not isinstance(k,\
    \ int):\n            if isinstance(k, str):\n                k = k.lower()\n \
    \           else:\n                return False\n    return True\n\n", "    if\
    \ len(dict) == 0: \n        return False\n\n    for key in dict.keys(): \n   \
    \     if type(key) is str: \n            if key in ('STATE', 'ZIP'): \n      \
    \          return True\n\n            elif key in ('CITY', 'COUNTY', 'COUNTRY'):\
    \ \n                return True\n\n            if key.islower():\n           \
    \     return True\n        else: \n            return False\n    \n    return\
    \ False\n", "    if not isinstance(dict, dict): return False\n    for k in dict.keys():\n\
    \        if isinstance(k, str): return True\n        if isinstance(k, str) and\
    \ k.upper() in dict:\n            return True\n    return False\n", "    if not\
    \ dict:\n        return False\n\n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            return False\n    return True\n", "    try:\n        for\
    \ key in dict.keys():\n            if type(key) == str or type(key) == unicode:\n\
    \                if key.lower() == key.upper():\n                    continue\n\
    \                else:\n                    return False\n        return True\n\
    \    except:\n        return False\n\n", "    \n    assert isinstance(dict, dict)\n\
    \    if not dict:\n        return False\n    for key in dict.keys():\n       \
    \ if not isinstance(key, str):\n            return False\n        if not key.islower():\n\
    \            return False\n    return True\n    ", "    if not dict:\n       \
    \ return False\n    for key, val in dict.items():\n        if key in string.ascii_lowercase\
    \ or key in string.ascii_uppercase:\n            continue\n        elif not isinstance(val,\
    \ str):\n            return False\n    return True\n</code>\n<|/ a tags=python,python-3.x\
    \ |>\n<| a |>\nThis can be done using lambda and functools.reduce - \n<code>\n\
    from functools import reduce\nstrings = ('a', 'b', 'c')\nreduce(lambda a, b: b\
    \ if a.islower() or b.islower() else a, strings) \n</code>\n<|/ a tags=python,python-3.x\
    \ dscore=2 |>\n<| a tags=python,python-3.x |>\nThis seems like a perfect use case\
    \ for the reduce method. \n<code>\nstrings = ('a', 'b', 'c')\n", "    if not isinstance(dict,\
    \ dict):\n        return False\n    for k, v in dict.items():\n        if k in\
    \ ('state', 'states', 'states_abbr', 'state_abbr', 'state_id'):\n            v\
    \ = v.upper()\n        if isinstance(k, str) and isinstance(v, str):\n       \
    \     if not (k.islower() or k in ('name', 'names', 'names_abbr',\n          \
    \                              'name_abbr', 'name_id')):\n                return\
    \ False\n        else:\n            return False\n    return True\n", "    if\
    \ not dict:\n        return False\n    if not isinstance(dict, dict):\n      \
    \  raise TypeError('Expected a dictionary, got {}'.format(type(dict)))\n    for\
    \ key in dict:\n        if isinstance(key, str) and key in string.ascii_lowercase:\n\
    \            if not (isinstance(dict[key], str) and dict[key] == key):\n     \
    \           return False\n        else:\n            if not (isinstance(dict[key],\
    \ str) and dict[key].upper() == key):\n                return False\n    return\
    \ True\n", "    if not isinstance(dict, dict):\n        return False\n\n    string_keys\
    \ = []\n    for key in dict.keys():\n        if not isinstance(key, str):\n  \
    \          string_keys.append(key)\n    return all(map(lambda x: x.islower(),\
    \ string_keys)) or \\\n        all(map(lambda x: x.isupper(), string_keys))\n",
  "    for key in dict:\n        if not isinstance(key, str) or (key != key.lower()\n\
    \                                    and key != key.upper()):\n            return\
    \ False\n    return True\n\n", "    # initialize variables\n    flag = True\n\
    \    # check if the dictionary is empty\n    if len(dict) == 0:\n        return\
    \ False\n    for key in dict.keys():\n        if type(key) is not str:\n     \
    \       flag = False\n            break\n        else:\n            if key.islower():\n\
    \                if flag == False:\n                    return False\n       \
    \     else:\n                if flag == True:\n                    return False\n\
    \    return True\n</cell>\n<cell>", "    if len(dict) == 0:\n        return False\n\
    \    for key in dict:\n        if isinstance(key, str):\n            key = key.lower()\n\
    \            if not key.isidentifier():\n                return False\n      \
    \  elif not isinstance(key, int):\n            return False\n    return True\n",
  "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if\
    \ type(key) != str:\n            return False\n    return True\n</cell>\n<text>\n\
    Problem 7 - check_dict_case\nTest your check_dict_case function with the following\
    \ cases.\n\n\n</text>\n<cell>\ncheck_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n</cell>\n<cell>\ncheck_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n</cell>\n<cell>\ncheck_dict_case({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' })\n</cell>\n<cell>\ncheck_dict_case({ 'STATE': 'NC', 'ZIP':\
    \ '12345' })\n</cell>\n<text>\nGreat! You passed all test cases. Those test cases\
    \ make sense if you think about what a dictionary is. They are essentially hash\
    \ tables. You can look up a key in the dictionary and it returns the corresponding\
    \ value. If you search a key that doesn't exist in the dictionary, then it returns\
    \ None. Here's an example of a function that checks whether or not a key exists\
    \ in a dictionary:\n\n\n</text>\n<cell>", "    if not dict:\n        return False\n\
    \    cased = dict.copy()\n    for key in cased:\n        if not isinstance(key,\
    \ str):\n            return False\n        if key.lower() != key:\n          \
    \  return False\n        if key.upper() != key:\n            return False\n  \
    \  return True\n", "    return all(type(key) == str or key.upper() == key for\
    \ (key, value) in dict.items())\n", "    if not isinstance(dict, dict):\n    \
    \    return False\n    # iterate through keys and values\n    for key, value in\
    \ dict.items():\n        # if key or value is not str\n        if not isinstance(key,\
    \ str) or not isinstance(value, str):\n            return False\n    # all keys\
    \ and values are in lower case\n    for key, value in dict.items():\n        dict[key]\
    \ = value.lower()\n    return True\n\n", "    for k, v in dict.items():\n    \
    \    if not isinstance(k, str):\n            return False\n        if not isinstance(v,\
    \ str):\n            return False\n    return True\n\n", "    if not isinstance(dict,\
    \ dict):\n        return False\n    return all(map(is_string, dict))\n", "   \
    \ if not dict:\n        return False\n    return all(isinstance(key, str) and\
    \ key.lower() == key for key in dict)\n", "    assert isinstance(dict, dict)\n\
    \n    if not dict:\n        return False\n\n    for key in dict:\n        if not\
    \ isinstance(key, str):\n            return False\n    return True\n", "    if\
    \ not dict:\n        return False\n    keys = dict.keys()\n    if any(isinstance(key,\
    \ str) for key in keys):\n        for key in keys:\n            if key.lower()\
    \ in dict.keys():\n                dict.pop(key.lower())\n            elif key.upper()\
    \ in dict.keys():\n                dict.pop(key.upper())\n            elif key\
    \ != dict.keys() - set([key]):\n                return False\n        return True\n\
    \    else:\n        return False\n", "    if not isinstance(dict, dict):\n   \
    \     return False\n\n    keys = dict.keys()\n    if not keys:\n        return\
    \ False\n\n    for k in keys:\n        if not isinstance(k, str):\n          \
    \  return False\n        lower = k.lower()\n        upper = k.upper()\n      \
    \  if lower != upper:\n            return False\n    return True\n", "    for\
    \ key in dict:\n        if not isinstance(key, str):\n            return False\n\
    \        elif key in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            pass\n       \
    \ elif key not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            return False\n  \
    \  return True\n</cell>\n<text>\nLet's use check_dict_case to check that our input\
    \ dictionary is valid or not.\n\n\n</text>\n<cell>\ncheck_dict_case(dict1)\n</cell>\n\
    <cell>\ncheck_dict_case(dict2)\n</cell>\n<text>\nWe can see that dict1 fails our\
    \ test because it's missing some keys and has extra keys. The function check_dict_case\
    \ will report a False because the keys \"A\" and \"B\" are missing from dict1\
    \ and \"A\" and \"B\" are not in dict2. We should consider adding some additional\
    \ tests to check that all keys are string in upper or lower case, or that at least\
    \ one key is string in upper or lower case.\n\n\n</text>\n<text>\nExercise:\n\
    Write a function, check_dict_case2 that takes in dictionary d and returns a boolean\
    \ indicating if d is valid or not. This function should only accept the standard\
    \ dictionary types: dict, str, int, float, list, tuple, set, and frozenset.\n\
    This function should return a boolean indicating if d is valid or not. If you\
    \ don't need to use check_dict_case, you can use the dictionary methods isinstance\
    \ or str.lowercase to test if a dictionary is valid or not.\n\n\n</text>\n<cell>",
  "    if not isinstance(dict, dict):\n        raise TypeError(\"The given value is\
    \ not a dictionary.\")\n    \n    for k in dict:\n        if not isinstance(k,\
    \ str):\n            raise ValueError(\"The given dictionary contains invalid\
    \ \"\n                             \"keys: {}\".format(k))\n    \n    for k in\
    \ dict:\n        if k.lower() in dict.keys():\n            if dict[k] != k and\
    \ dict[k] != k.lower():\n                return False\n    return True\n", " \
    \   if not dict:\n        return False\n\n    for k in dict.keys():\n        if\
    \ not isinstance(k, str):\n            return False\n\n    return True\n", " \
    \   if not isinstance(dict, dict):\n        return False\n\n    for key in dict:\n\
    \        if not isinstance(key, str):\n            return False\n    return True\n",
  "    if not dict:\n        return False\n    \n    for k,v in dict.items():\n  \
    \      try:\n            str(k)\n            str(v)\n        except TypeError:\n\
    \            return False\n    return True\n", "    if not isinstance(dict, dict):\
    \ return False\n    for key in dict:\n        if not isinstance(key, str): return\
    \ False\n        if not isinstance(dict[key], str): return False\n    return True\n",
  "    if not isinstance(dict, dict):\n        return False\n    for k in dict:\n\
    \        if not k or (not isinstance(k, str)) or (k.isupper() == False):\n   \
    \         return False\n    return True\n        ", "    \n    assert isinstance(dict,\
    \ dict), \"'dict' must be a dictionary.\"\n    assert isinstance(dict, dict),\
    \ \"'dict' must be a dictionary.\"\n    \n    for key in list(dict.keys()):\n\
    \        if not isinstance(key, str):\n            return False\n        if key.lower()\
    \ not in dict:\n            return False\n        if key.upper() not in dict:\n\
    \            return False\n    return True\n\n", "    \n    return True if len(dict)\
    \ > 0 else False\n", "    if not dict:\n        return False\n    for k,v in dict.items():\n\
    \        if k.lower() not in dict and k.upper() not in dict:\n            return\
    \ False\n    return True\n", "    if not dict:\n        return False\n    return\
    \ all(isinstance(key, str) and key.lower() in dict.keys() for key in dict.keys())\n",
  "    if not isinstance(dict, dict):\n        raise TypeError(\"Input must be a dictionary\"\
    )\n    if len(dict) == 0:\n        return False\n    lowercase_keys = list(dict.keys())\n\
    \    uppercase_keys = list(dict.keys())\n    for key in lowercase_keys:\n    \
    \    if not isinstance(key, str):\n            return False\n        lowercase_keys.append(key.lower())\n\
    \    for key in uppercase_keys:\n        if not isinstance(key, str):\n      \
    \      return False\n        uppercase_keys.append(key.upper())\n    for key in\
    \ set(uppercase_keys).intersection(set(lowercase_keys)):\n        return False\n\
    \    return True\n", "    if len(dict) == 0:\n        return False\n    for key,\
    \ value in dict.items():\n        try:\n            value.lower()\n        except\
    \ AttributeError:\n            continue\n        else:\n            try:\n   \
    \             value.upper()\n            except AttributeError:\n            \
    \    continue\n            else:\n                return True\n    return False\n",
  "    return all(isinstance(k, str) and k.islower() or k.isupper() for k in dict.keys())\n",
  "    if len(dict) == 0:\n        return False\n    for k in dict.keys():\n     \
    \   if k.lower() in dict.keys() and k.upper() in dict.keys():\n            return\
    \ True\n    return False\n", "    return all(isinstance(key, str) and key.isupper()\
    \ for key in dict)\n", "    for k in dict:\n        if not isinstance(k, str):\n\
    \            return False\n    return True\n", "    dict_keys = dict.keys()\n\
    \    if not dict_keys:\n        return False\n    for k in dict_keys:\n      \
    \  if type(k) is not str:\n            return False\n        if len(k) < 2:\n\
    \            return False\n    for k in dict_keys:\n        if type(k) is not\
    \ str:\n            return False\n        if len(k) > 2:\n            return False\n\
    \    return True\n", "    # Your code here\n    \n    return all( (type(k) ==\
    \ str and k == k.upper() or type(k) == str and k == k.lower()) for k in dict )\n\
    \n", "    if not dict:\n        return True\n    \n    for key in dict:\n    \
    \    if not (isinstance(key, str) or isinstance(key, int)):\n            return\
    \ False\n        \n    \n    return True\n</cell>\n<cell>\ncheck_dict_case({ 'a':\
    \ 'apple', 'B': 'banana' })\n</cell>\n<cell>\ncheck_dict_case({ 'a': 'apple',\
    \ 'A': 'banana', 'B': 'banana' })\n</cell>\n<cell>\ncheck_dict_case({ 'a': 'apple',\
    \ 8: 'banana', 'a': 'apple' })\n</cell>\n<cell>\ncheck_dict_case({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' })\n</cell>\n<cell>\ncheck_dict_case({ 'STATE':\
    \ 'NC', 'ZIP': '12345' })\n</cell>\n<text>\nProblem 7 (25 Points)\nWrite a function\
    \ called check_dict_order that takes a dictionary and an iterable of tuples. If\
    \ the dictionary has the correct keys, return True, else return False.\n\nIf there\
    \ are keys in the dictionary that do not match the order in which the tuples are\
    \ provided, return True.\n\nIf the dictionary has keys in the correct order, but\
    \ not the correct keys, return True.\n\nExample:\n>>> check_dict_order({ 'a':\
    \ 'apple', 'b': 'banana' }, [ ( 'b', 'apple' ), ( 2, 'banana' ) ])\nTrue\n\n</text>\n\
    <cell>", "    if not dict:\n        return False\n\n    for key in dict:\n   \
    \     if key not in string.ascii_lowercase and key not in string.ascii_uppercase:\n\
    \            return False\n\n    return True\n    ", "    \n    return all(isinstance(key,\
    \ str) and key.lower() in dict.keys() for key in dict)\n", "    for key, value\
    \ in dict.items():\n        if not isinstance(key, str):\n            return False\n\
    \        if not isinstance(value, str):\n            return False\n    return\
    \ True\n", "    # write your code here\n    return all(isinstance(key, str) for\
    \ key in dict.keys()) or all(isinstance(key, str) for key in dict.values())\n",
  "    assert isinstance(dict, dict), 'Argument must be a dictionary.'\n    if len(dict)\
    \ == 0:\n        return False\n    \n    for key in dict:\n        try:\n    \
    \        str.lower(key)\n        except:\n            return False\n    return\
    \ True\n", "    if not isinstance(dict, dict):\n        return False\n\n    key_list\
    \ = list(dict.keys())\n    for k in key_list:\n        if not isinstance(k, str):\n\
    \            return False\n    return True\n", "    if dict == {}:\n        return\
    \ False\n    return all(isinstance(key, str) and key.lower() in dict.keys()\n\
    \               or isinstance(key, str) and key.upper() in dict.keys())\n\n",
  "    assert isinstance(dict, dict), \"Input is not a dictionary\"\n    for k,v in\
    \ dict.items():\n        assert (k in string.ascii_lowercase) or (k in string.ascii_uppercase),\
    \ f\"All keys should be strings in lower case or upper case: {k}\"\n    return\
    \ True\n\n", "    return len(dict) != 0 and all(isinstance(key, str) for key in\
    \ dict)\n", "    if not dict:\n        return False\n    for k in dict.keys():\n\
    \        if not type(k) == str:\n            return False\n    return True\n",
  "    \n    for key, value in dict.items():\n        if not isinstance(key, str):\n\
    \            return False\n        elif key.lower() != key:\n            return\
    \ False\n        elif key.upper() != key:\n            return False\n    return\
    \ True\n", "    for key in dict.keys():\n        if not isinstance(key, str):\n\
    \            return False\n    return True\n", "    \n    if not dict:\n     \
    \   return False\n    \n    for key in dict:\n        if isinstance(key, str):\n\
    \            if key.lower() == key:\n                return True\n           \
    \ elif key.upper() == key:\n                return True\n    return False\n",
  "    if not dict or not isinstance(dict, dict):\n        return False\n    for key\
    \ in dict:\n        if key in string.ascii_lowercase:\n            return True\n\
    \        if key in string.ascii_uppercase:\n            return True\n    return\
    \ False\n", "    for key, value in dict.items():\n        if not isinstance(key,\
    \ str):\n            return False\n        if not isinstance(value, str):\n  \
    \          return False\n    return True\n", "    if not isinstance(dict, dict):\n\
    \        raise TypeError(\"check_dict_case() argument must be a dictionary\")\n\
    \    cased = False\n    \n    if len(dict.keys()) == 0:\n        return False\n\
    \    \n    for key in dict.keys():\n        if not isinstance(key, str) or not\
    \ key.strip():\n            raise ValueError(\"The dictionary keys should be non-empty\
    \ strings.\")\n        \n        key_lower = key.lower()\n        key_upper =\
    \ key.upper()\n        \n        if not key_upper == key_lower:\n            cased\
    \ = True\n            \n    return cased\n", "    for key in dict:\n        if\
    \ not (isinstance(key, str) or isinstance(key, int)):\n            return False\n\
    \        elif key in string.ascii_lowercase or key in string.ascii_uppercase:\n\
    \            continue\n        else:\n            return False\n    return True\n",
  "    if not isinstance(dict, dict):\n        return False\n    for k in dict:\n\
    \        if not isinstance(k, str):\n            return False\n    return True\n",
  "    # set default value\n    failed = False\n\n    # Iterate over all keys\n  \
    \  for key, value in dict.items():\n        # Check if key is a string\n     \
    \   if type(value):\n            # Check if key is in lower case\n           \
    \ if not key.lower() in string.ascii_lowercase:\n                failed = True\n\
    \            # Check if key is in upper case\n            elif not key.upper()\
    \ in string.ascii_uppercase:\n                failed = True\n        else:\n \
    \           failed = True\n    # Check if all keys are in lower case or upper\
    \ case\n    if failed:\n        return False\n    else:\n        return True\n",
  "    for k, v in dict.items():\n        if not isinstance(k, str):\n           \
    \ return False\n        if k.lower() in dict.keys() and (k.upper() != k):\n  \
    \          return False\n    return True\n", "    assert isinstance(dict, dict)\n\
    \    return all(isinstance(key, str) and key.lower() in dict.keys() for key in\
    \ dict.keys()) or \\\n        all(isinstance(key, str) and key.upper() in dict.keys()\
    \ for key in dict.keys())\n", "    if not isinstance(dict, dict):\n        return\
    \ False\n    \n    for key in dict:\n        if not isinstance(key, str):\n  \
    \          return False\n    \n    for key in dict:\n        if key.lower() in\
    \ str.lowercase or key.upper() in str.uppercase:\n            continue\n     \
    \   else:\n            return False\n    return True\n\n", "    # code below is\
    \ adapted from code from https://github.com/sjh3819/python_examples/blob/master/dict_case.py\n\
    \    if not dict:\n        return False\n    if not isinstance(dict, dict):\n\
    \        return False\n    for key, value in dict.items():\n        if not isinstance(key,\
    \ str):\n            return False\n        if key.lower() != key:\n          \
    \  return False\n    return True\n", "    for key in dict:\n        if dict[key]\
    \ == str(dict[key]).lower() or \\\n           dict[key] == str(dict[key]).upper():\n\
    \            return True\n    return False\n", "    if not dict:\n        return\
    \ False\n    keys = dict.keys()\n    for k in keys:\n        if not isinstance(k,\
    \ str):\n            return False\n        k_lower = k.lower()\n        if not\
    \ k_lower or not k_lower.isalpha():\n            return False\n    return True\n",
  "    if not dict:\n        return False\n    return True\n", "    for k in dict:\n\
    \        if type(k) is not str:\n            return False\n    return True\n",
  "    if not dict:\n        return False\n    for key, value in dict.items():\n \
    \       if not isinstance(key, str):\n            return False\n        elif key.lower()\
    \ != key:\n            return False\n    return True\n", "    if not isinstance(dict,\
    \ dict):\n        raise TypeError(\"Argument must be a dictionary\")\n    if not\
    \ isinstance(dict.keys(), list):\n        raise TypeError(\"Dictionary argument\
    \ must be a dictionary\")\n    if dict:\n        for key in dict:\n          \
    \  if not isinstance(key, str):\n                raise TypeError(\"Dictionary\
    \ argument keys must be strings\")\n            if not key.islower():\n      \
    \          return False\n    return True\n", "    assert isinstance(dict, dict)\n\
    \    \n    for key in dict:\n        if not isinstance(key, str):\n          \
    \  return False\n        if key.upper() not in dict:\n            return False\n\
    \    return True\n", "    if not dict:\n        return False\n    for key in dict.keys():\n\
    \        if not isinstance(key, str):\n            return False\n    if set(dict.values())\
    \ != set(map(str.lower, dict.keys())) or \\\n            set(dict.values()) !=\
    \ set(map(str.upper, dict.keys())):\n        return False\n    return True\n",
  "    if dict:\n        for key in dict.keys():\n            if not isinstance(key,\
    \ str):\n                return False\n        return True\n    return False\n",
  "    if not isinstance(dict, dict):\n        return False\n\n    for key, value\
    \ in dict.items():\n        if not isinstance(key, str):\n            return False\n\
    \n        value = value.strip().lower()\n        if value != key:\n          \
    \  return False\n\n    return True\n", "    for k in dict.keys():\n        if\
    \ not is_str(k):\n            return False\n        if k.isupper() and is_str(dict[k]):\n\
    \            return False\n    return True\n", "    for x in dict:\n        if\
    \ type(x) != str: return False\n    for x in dict:\n        if type(x) != str:\
    \ return False\n    return True\n</cell>\n<cell>\ncheck_dict_case({ 'a': 'apple',\
    \ 'B': 'banana' })\n</cell>\n<cell>\ncheck_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\n</cell>\n<cell>\ncheck_dict_case({ 'a': 'apple', 8: 'banana',\
    \ 'a': 'apple' })\n</cell>\n<cell>\ncheck_dict_case({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' })\n</cell>\n<cell>\ncheck_dict_case({ 'STATE': 'NC', 'ZIP':\
    \ '12345' })\n</cell>\n<cell>\ncheck_dict_case({ 'a': 'apple', 'B': 'banana' })\n\
    </cell>\n<cell>\ncheck_dict_case({ 'a': 'apple', 'A': 'banana', 'B': 'banana'\
    \ })\n</cell>\n<cell>\ncheck_dict_case({ 'a': 'apple', 8: 'banana', 'a': 'apple'\
    \ })\n</cell>\n<cell>", "    if not dict:\n        return False\n    for key,\
    \ value in dict.items():\n        if not isinstance(key, str):\n            return\
    \ False\n        if not isinstance(value, str):\n            return False\n  \
    \  return True\n", "    if not dict: return False\n    valid = all(type(k) ==\
    \ str for k in dict)\n    return valid\n", "    assert isinstance(dict, dict)\n\
    \    for key, value in dict.items():\n        if not isinstance(key, str):\n \
    \           return False\n        if not isinstance(value, str):\n           \
    \ return False\n    return True\n\n", "    return all(isinstance(key, str) and\
    \ key in dict.keys() for key in dict)\n", "    if not isinstance(dict, dict):\n\
    \        return False\n    str_keys = set(str(k).lower() for k in dict.keys())\n\
    \    if len(str_keys) != len(dict):\n        return False\n    str_keys = set(str(k).upper()\
    \ for k in dict.keys())\n    if len(str_keys) != len(dict):\n        return False\n\
    \    return True\n\n", "    if dict is None:\n        return False\n    for key\
    \ in dict:\n        if not isinstance(key, str):\n            return False\n \
    \       key_lower = key.lower()\n        if key_lower != key:\n            return\
    \ False\n    return True\n", "    if not dict:\n        return True\n    return\
    \ all(isinstance(key, str) or isinstance(key, int) for key in dict)\n", "    for\
    \ key, value in dict.items():\n        if key in string.ascii_lowercase:\n   \
    \         if value != value.lower():\n                return False\n        else:\n\
    \            if value != value.upper():\n                return False\n    return\
    \ True\n", "    if not isinstance(dict, dict):\n        return False\n    keys\
    \ = list(dict.keys())\n    for key in keys:\n        if type(key) is not str:\n\
    \            return False\n    if keys:\n        for key in keys:\n          \
    \  if type(key) is not str:\n                return False\n            for x in\
    \ key:\n                if x.isupper():\n                    break\n         \
    \   else:\n                return True\n            for x in key:\n          \
    \      if x.islower():\n                    break\n            else:\n       \
    \         return False\n    return True\n", "    for k in dict: # type: ignore\
    \ # mypy doesn't recognize that `dict[k]` is a str\n        if k.lower() in ('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'):\n            continue\n      \
    \  elif k.upper() in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'):\n   \
    \         continue\n        else:\n            return False\n    return True\n\
    </cell>\n<cell>", "    assert isinstance(dict, dict), f'Invalid input - {dict}\
    \ must be a dictionary.'\n    \n    bad_key = False\n    \n    for key in dict:\n\
    \        try:\n            assert isinstance(key, str), f'Invalid input - {key}\
    \ must be a string.'\n            assert all(c.isalpha() or c.isupper() for c\
    \ in key), f'Invalid input - {key} cannot contain uppercase characters.'\n   \
    \     except AssertionError:\n            bad_key = True\n            \n    return\
    \ bad_key and len(dict) > 0\n", "    return all(map(lambda key: key.islower()\
    \ or key.isupper(), dict.keys()))\n", "    if not dict:\n        return False\n\
    \n    for key, value in dict.items():\n        if not isinstance(key, str):\n\
    \            return False\n        if not isinstance(value, str):\n          \
    \  return False\n    return True\n", "    if len(dict) == 0:\n        return False\n\
    \    for x in list(dict.keys()):\n        if not isinstance(x, str):\n       \
    \     return False\n    return True\n\n", "    lower_case_keys = set(dict(list(dict.keys()))\
    \ == set([k.lower() for k in list(dict.keys())]) )\n    upper_case_keys = set(dict(list(dict.keys()))\
    \ == set([k.upper() for k in list(dict.keys())]) )\n    return lower_case_keys\
    \ or upper_case_keys\n", "    if not dict: \n        return False\n    for key,\
    \ val in dict.items():\n        if not isinstance(key, str):\n            return\
    \ False\n        if not val.lower() in key.lower():\n            return False\n\
    \        if not isinstance(val, str):\n            return False\n        if not\
    \ val.upper() in key.upper():\n            return False\n    return True\n\n",
  "    # Your code here\n    \n    # Write your tests here\n    return bool(dict(map(str.lower,\
    \ dict.keys())).keys() or dict(map(str.upper, dict.keys())).keys())\n    ", " \
    \   for key, value in dict.items():\n        try:\n            value.lower()\n\
    \        except AttributeError:\n            return False\n\n    return True\n",
  "    lower_keys = set(key.lower() for key in dict)\n    upper_keys = set(key.upper()\
    \ for key in dict)\n    return lower_keys == upper_keys or upper_keys == lower_keys\n",
  "    if len(dict)==0:\n        return False\n    for key in dict.keys():\n     \
    \   if type(key)!=str:\n            return False\n    return True\n", "    assert\
    \ isinstance(dict, dict), f\"Expected dict, got {type(dict)}\"\n    for key, value\
    \ in dict.items():\n        if isinstance(value, str) and value.lower() == value:\n\
    \            return True\n        if isinstance(value, str) and value.upper()\
    \ == value:\n            return True\n    return False\n", "    if not isinstance(dict,\
    \ dict):\n        raise TypeError(\"The given dictionary is of type {}, not a\
    \ dict\".format(type(dict)))\n    for k in dict.keys():\n        if not isinstance(k,\
    \ str):\n            return False\n    return True\n", "    if not dict:\n   \
    \     return False\n\n    lower_dict = {}\n    upper_dict = {}\n    for key in\
    \ dict:\n        lower_dict[key.lower()] = dict[key]\n        upper_dict[key.upper()]\
    \ = dict[key]\n\n    for key in lower_dict:\n        if key.upper() not in lower_dict\
    \ or lower_dict[key] != upper_dict[key]:\n            return False\n\n    return\
    \ True\n", "    if not dict:\n        return False\n    for k in dict:\n     \
    \   if k.isupper():\n            return False\n        if k.islower():\n     \
    \       return True\n    return False\n", "    assert isinstance(dict, dict),\
    \ f'The input must be dictionary type, {type(dict)} given.'\n    for key, value\
    \ in dict.items():\n        assert isinstance(key, str), f'The key: {key} of {dict}\
    \ must be a string, {type(key)} given.'\n        assert isinstance(value, str),\
    \ f'The value: {value} of {dict} must be a string, {type(value)} given.'\n   \
    \ return True\n", "    assert isinstance(dict, dict)\n    return all(isinstance(key,\
    \ str) for key in dict.keys())\n</cell>\n<cell>\nassert check_dict_case({ 'a':\
    \ 'apple', 'b': 'banana' })\nassert not check_dict_case({ 'a': 'apple', 'A': 'banana',\
    \ 'B': 'banana' })\nassert not check_dict_case({ 'a': 'apple', 8: 'banana', 'a':\
    \ 'apple' })\nassert not check_dict_case({ 'Name': 'John', 'Age': '36', 'City':\
    \ 'Houston' })\nassert check_dict_case({ 'STATE': 'NC', 'ZIP': '12345' })\n</cell>\n\
    <cell>", "    if len(dict) == 0:\n        return False\n    \n    for key in dict:\n\
    \        if key in ['Name', 'AGE', 'CITY', 'STATE', 'ZIP'] and not isinstance(dict[key],\
    \ str) and not isinstance(dict[key], int):\n            return False\n       \
    \ elif key not in ['Name', 'AGE', 'CITY', 'STATE', 'ZIP'] and isinstance(dict[key],\
    \ str) or isinstance(dict[key], int):\n            return False\n    return True\n\
    \n", "    # Write your code here.\n    return True\n</cell>\n<cell>\ncheck_dict_case({'a':\
    \ 'apple', 'b': 'banana'})\n</cell>\n<cell>\ncheck_dict_case({'a': 'apple', 'A':\
    \ 'banana', 'B': 'banana'})\n</cell>\n<cell>\ncheck_dict_case({'a': 'apple', 8:\
    \ 'banana', 'a': 'apple'})\n</cell>\n<cell>\ncheck_dict_case({'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston'})\n</cell>\n<cell>\ncheck_dict_case({'STATE':\
    \ 'NC', 'ZIP': '12345'})\n</cell>\n<text>\nQuestion 14. Write a Python function\
    \ named is_palindrome that takes a dictionary as its argument and \nreturns True\
    \ if all the keys and values in the dictionary are palindromes, else returns False.\n\
    \n</text>\n<cell>", "    if not dict:\n        return False\n    for k in dict:\
    \ \n        if k.islower() or k.isupper():\n            continue\n        else:\n\
    \            return False\n    return True\n\n", "    return all(isinstance(key,\
    \ str) for key in dict) and (len(dict.keys())==1 or all(isinstance(key, str) for\
    \ key in dict.values()))\n", "    if not dict:\n        return False\n\n    for\
    \ key in dict:\n        if key.lower() not in dict or key.upper() not in dict:\n\
    \            return False\n    return True\n", "    for k in dict:\n        if\
    \ type(k) is str:\n            if k.islower():\n                return True\n\
    \            else:\n                return False\n    return False\n\n", "   \
    \ if dict == {}:\n        return False\n\n    upper_dict = {key.upper(): value\
    \ for key, value in dict.items()}\n    lower_dict = {key.lower(): value for key,\
    \ value in dict.items()}\n\n    if len(dict) == 1:\n        return True\n\n  \
    \  return check_dict_case(upper_dict) and check_dict_case(lower_dict)\n", "  \
    \  if not isinstance(dict, dict):\n        return False\n    dict_keys = list(dict.keys())\n\
    \    for dict_key in dict_keys:\n        if not isinstance(dict_key, str):\n \
    \           return False\n        if not dict_key.islower():\n            return\
    \ False\n    return True\n", "    if len(dict) == 0:\n        return False\n \
    \   return all(\n        isinstance(key, str) and key.islower()\n        for key\
    \ in dict\n    )\n", "    if not dict:\n        return False\n    return all(isinstance(key,\
    \ str) for key in dict)\n", "    \n    if len(dict) == 0:\n        return False\n\
    \n    # check if all keys are in lower case\n    lower_case_keys = []\n    for\
    \ key in dict:\n        if key.islower():\n            lower_case_keys.append(key)\n\
    \n    if len(lower_case_keys) == 0:\n        return True\n\n    # check if all\
    \ keys are in upper case\n    upper_case_keys = []\n    for key in dict:\n   \
    \     if key.isupper():\n            upper_case_keys.append(key)\n\n    if len(upper_case_keys)\
    \ == 0:\n        return True\n\n    return False\n", "    \n    cased = True\n\
    \    if not dict:\n        return False\n    \n    for key, value in dict.items():\n\
    \        if not isinstance(key, str):\n            cased = False\n           \
    \ break\n        if isinstance(key, str) and key.upper() == key:\n           \
    \ continue\n        else:\n            cased = False\n            break\n    return\
    \ cased\n", "    for k, v in dict.items():\n        if not (isinstance(k, str)\
    \ or isinstance(k, int)):\n            return False\n        if not (isinstance(v,\
    \ str) or isinstance(v, int)):\n            return False\n    return True\n",
  "    if not isinstance(dict, dict):\n        raise TypeError(\"The argument type\
    \ is not a dictionary\")\n    \n    for key in dict:\n        if not isinstance(key,\
    \ str):\n            raise TypeError(\"The dictionary contains non-string keys\"\
    )\n        if isinstance(key, str):\n            lower = key.lower()\n       \
    \     upper = key.upper()\n            if (lower == upper) or (lower in dict.keys()\
    \ and upperin dict[lower]):\n                continue\n            else:\n   \
    \             return False\n    return True\n", "    try:\n        # Iterate through\
    \ each key-value pair\n        for k,v in dict.items():\n            if k.lower()\
    \ not in dict.keys() and k.upper() not in dict.keys():\n                return\
    \ False\n    except AttributeError:\n        return False\n    return True\n",
  "    if not dict:\n        return False\n    \n    for key, value in dict.items():\n\
    \        if not isinstance(key, str) or not isinstance(value, str):\n        \
    \    return False\n    \n    return True\n", "    if type(dict) is not dict:\n\
    \        return False\n    for k in dict.keys():\n        if type(k) is not str:\n\
    \            return False\n    for k in dict.keys():\n        if k.isupper():\n\
    \            pass\n        else:\n            return False\n    return True\n",
  "    return all(\n        key in string.ascii_lowercase or key in string.ascii_uppercase\n\
    \        for key in dict.keys()\n    )\n", "    if not isinstance(dict, dict):\n\
    \        raise TypeError(\"This function only accepts dictionaries\")\n    if\
    \ not dict:\n        return False\n    for k in dict.keys():\n        if not isinstance(k,\
    \ str):\n            return False\n    return True\n", "    assert isinstance(dict,\
    \ dict), \"Dictionary argument must be a dictionary\"\n    if not dict:\n    \
    \    return False\n    for k, v in dict.items():\n        if not (isinstance(k,\
    \ str) or isinstance(k, str)):\n            return False\n    return True\n",
  "    if not isinstance(dict, dict):\n        return False\n    case = True\n   \
    \ for key in dict:\n        if not isinstance(key, str):\n            case = False\n\
    \            break\n        elif (key.lower() in dict) or \\\n            (key.upper()\
    \ in dict):\n            case = False\n            break\n    if not case:\n \
    \       return False\n    return True\n", "    \n    for k, v in dict.items():\n\
    \        if not isinstance(k, str):\n            return False\n        if not\
    \ isinstance(v, str):\n            return False\n    return True\n\n", "    if\
    \ len(dict) == 0:\n        return False\n    for k in dict.keys():\n        if\
    \ type(k) is not str:\n            return False\n    for k in dict.keys():\n \
    \       if type(k) is str:\n            if k.upper() == k:\n                continue\n\
    \            else:\n                return False\n    return True\n\n", "    str_check\
    \ = lambda s: isinstance(s, str) and s.islower()\n    for key in dict:\n     \
    \   if not isinstance(key, str):\n            return False\n        elif str_check(key):\n\
    \            continue\n        else:\n            return False\n    return True\n\
    </cell>\n<cell>\ncheck_dict_case({ 'a': 'apple', 'B': 'banana' })\n</cell>\n<cell>",
  "    if not dict:\n        return False\n    for key, value in dict.items():\n \
    \       if type(value) != str:\n            return False\n    return bool(set(list(dict.keys())).difference(list(string.ascii_lowercase)).difference(list(string.ascii_uppercase)))\n",
  "    assert isinstance(dict, dict) and len(dict) > 0\n    \n    for key in dict:\n\
    \        if key in ['a', 'b', 'A', 'B']:\n            if dict[key] in ['a', 'b',\
    \ 'A', 'B']:\n                continue\n            else:\n                return\
    \ False\n        else:\n            return False\n    \n    return True\n</cell>\n\
    <cell>\ncheck_dict_case({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n\
    </cell>\n<text>\nExercise 2: Create your own functions to check the data type\
    \ of the dictionary\n\n</text>\n<cell>", "    for key, value in dict.items():\n\
    \        if isinstance(key, str) and isinstance(value, str):\n            if key\
    \ in ('state', 'zip', 'state', 'zip', 'state', 'zip', 'state', 'zip', 'state',\
    \ 'zip'):\n                if key.isupper():\n                    return True\n\
    \                else:\n                    return False\n            else:\n\
    \                return True\n    return False\n\n", "    if not isinstance(dict,\
    \ dict):\n        raise TypeError('Given dictionary must be a dictionary')\n \
    \   for k, v in dict.items():\n        if not isinstance(k, str):\n          \
    \  raise TypeError('Key must be a string')\n        if not isinstance(v, str):\n\
    \            raise TypeError('Value must be a string')\n        if k in {'state',\
    \ 'zip'} or k in {'name', 'age', 'city'}:\n            if k == 'name':\n     \
    \           return all(map(str.isalpha, k.lower().split()))\n            if k\
    \ == 'age':\n                return all(int(x) <= 9 for x in k.lower().split())\n\
    \            if k == 'city':\n                return all(map(str.isalpha, v.lower().split()))\n\
    \    return True\n", "    key_list = list(dict.keys())\n    for index, key in\
    \ enumerate(key_list):\n        try:\n            if key.upper() == key:\n   \
    \             key_list[index] = key.lower()\n            elif key == key.lower():\n\
    \                key_list[index] = key\n            elif not (\n             \
    \       isinstance(key, str) and \n                    isinstance(key.lower(),\
    \ str) and \n                    isinstance(key.upper(), str)):\n            \
    \    return False\n        except Exception as e:\n            return False\n\
    \    return True\n", "    if not dict:\n        return False\n    for key in dict.keys():\n\
    \        if isascii(key) and isascii(dict[key]):\n            pass\n        elif\
    \ isascii(key) and isascii(dict[key.lower()]):\n            pass\n        elif\
    \ isascii(key) and isascii(dict[key.upper()]):\n            pass\n        else:\n\
    \            return False\n    return True\n", "    for key in dict:\n       \
    \ if not isinstance(key, str):\n            return False\n    return True\n  \
    \  ", "    if not dict: return False\n    for k in dict.keys():\n        if type(k)\
    \ == str or type(k) == int:\n            if not (k.islower() or k.isupper()):\n\
    \                return False\n    return True\n", "    # Write your code here\n\
    \    return False if dict is {} else all(map(lambda item: isinstance(item, str),\
    \ dict))\n\n", "    for key in dict:\n        if key.lower() != key:\n       \
    \     return False\n    return True\n", "    if len(dict) == 0:\n        return\
    \ False\n    lower_keys = set(dict.keys())\n    upper_keys = set(str(x) for y\
    \ in list(dict.keys()) for x in list(y.values()))\n    return not (len(lower_keys\
    \ - upper_keys) or len(upper_keys - lower_keys))\n", "    if not dict:\n     \
    \   return False\n    for key, val in dict.items():\n        if key in ('ID',\
    \ 'Name', 'STATE'):\n            continue\n        if isinstance(val, str):\n\
    \            if key.lower() == val:\n                return True\n           \
    \ if key.upper() == val:\n                return True\n        elif isinstance(val,\
    \ int):\n            if isinstance(key, str):\n                if key.upper()\
    \ == val:\n                    return True\n            else:\n              \
    \  if key == val:\n                    return True\n    return False\n\n", " \
    \   return all(isinstance(key, str) and key.lower() in dict.keys() for key in\
    \ dict)\n", "    if len(dict) == 0:\n        return False\n    upper_keys = set(x.upper()\
    \ for x in dict)\n    lower_keys = set(x.lower() for x in dict)\n    if upper_keys.isdisjoint(lower_keys):\n\
    \        return True\n    else:\n        return False\n", "    for key in dict:\n\
    \        if not isinstance(key, str):\n            return False\n    return True\n",
  "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if\
    \ not isinstance(key, str) or not key.isalpha():\n            return False\n \
    \   return True\n", "    if not isinstance(dict, dict):\n        raise TypeError(f'Input\
    \ is not a dictionary: {dict}')\n    if len(dict.keys()) == 0:\n        return\
    \ False\n    for k in dict.keys():\n        if not isinstance(k, str) or len(k.strip())\
    \ == 0:\n            return False\n        for c in k:\n            if not c.isalpha():\n\
    \                return False\n    return True\n", "    if dict == {}:\n     \
    \   return False\n    return all([isinstance(key, str) or isinstance(key, int)\
    \ for key in dict])\n\n", "    assert isinstance(dict, dict)\n    for k, v in\
    \ dict.items():\n        if not isinstance(k, str):\n            return False\n\
    \        else:\n            if k in [x.lower() for x in k.split()]:\n        \
    \        return True\n            else:\n                return False\n    ",
  "    if not dict:\n        return False\n    lower_case_keys = {key.lower() for\
    \ key in dict.keys()}\n    upper_case_keys = {key.upper() for key in dict.keys()}\n\
    \    return lower_case_keys == upper_case_keys\n", "    if not isinstance(dict,\
    \ dict):\n        return False\n    \n    for key, value in dict.items():\n  \
    \      if not isinstance(key, str):\n            return False\n        if not\
    \ isinstance(value, str):\n            return False\n        \n    return True\n\
    \    ", "    if not isinstance(dict, dict): return False\n\n    keys = dict.keys()\n\
    \n    if not keys: return False\n\n    for k in keys:\n        v = dict[k]\n\n\
    \        if not k: return False\n\n        if k.islower(): return True\n\n   \
    \     if k.isupper(): return True\n\n    return False\n", "    if not dict:\n\
    \        return False\n    # Check for keys that are in lower case\n    for key\
    \ in dict:\n        if key == key.lower():\n            return True\n    # Check\
    \ for keys that are in upper case\n    for key in dict:\n        if key == key.upper():\n\
    \            return True\n    return False\n", "    if not dict:\n        return\
    \ False\n    case_insensitive_dict = {}\n    for key in dict.keys():\n       \
    \ case_insensitive_dict[key] = key.lower()\n    return case_insensitive_dict ==\
    \ dict\n", "    for k in dict.keys():\n        if type(k) is not str:\n      \
    \      return False\n    return True\n\n", "    assert isinstance(dict, dict),\
    \ \"A dictionary is required\"\n    bad_keys = 0\n    for k, v in dict.items():\n\
    \        if not isinstance(k, str):\n            bad_keys += 1\n        if not\
    \ isinstance(v, str):\n            bad_keys += 1\n        if k.isupper() and v.islower():\n\
    \            continue\n        if k.islower() and v.isupper():\n            continue\n\
    \        return False\n    return True\n", "    \n    # Write your code here\n\
    \    \n    return True\n</cell>\n<text>\nTest Cases\nCheck Passed\nInputs:\n \
    \   dict - a dictionary\nExpected Output:\n    output - True\nExplanation:\n \
    \   All keys and values should be strings in lower case. \n    The function should\
    \ return True is the given dictionary is empty.\nExamples:\n    >>> check_dict_case({\
    \ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> check_dict_case({ 'a': 'apple',\
    \ 'A': 'banana', 'B': 'banana' })\n    False\n    >>> check_dict_case({ 'a': 'apple',\
    \ 8: 'banana', 'a': 'apple' })\n    False\n    >>> check_dict_case({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({ 'STATE':\
    \ 'NC', 'ZIP': '12345' })\n    True\n\n</text>\n<cell>", "    for key, value in\
    \ dict.items():\n        if not (isinstance(key, str) and isinstance(value, str)):\n\
    \            return False\n    return True\n\n", "    for key, value in dict.items():\n\
    \        try:\n            key.lower()\n            key.upper()\n        except:\n\
    \            return False\n    return True\n\n", "    if not dict:\n        return\
    \ False\n\n    for k in dict.keys():\n        if not isinstance(k, str):\n   \
    \         return False\n\n    return True\n", "    if not dict:\n        return\
    \ False\n\n    for k, v in dict.items():\n        if isinstance(k, str) and isinstance(v,\
    \ str):\n            return True\n    return False\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
