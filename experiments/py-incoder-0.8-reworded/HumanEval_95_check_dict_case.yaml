name: HumanEval_95_check_dict_case
language: py
prompt: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n\
  \    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return False.\n    The\
  \ function should return False is the given dictionary is empty.\n    Examples:\n\
  \    >>> check_dict_case({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> check_dict_case({\
  \ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> check_dict_case({\
  \ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> check_dict_case({\
  \ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> check_dict_case({\
  \ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
  \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
  \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
  \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
  \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
  \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
  \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
  test_check()\n"
completions: ["    if len(dict) == 0:\n        return False\n    for key in dict:\n\
    \        if not isinstance(key, str):\n            return False\n    if all(isinstance(key,\
    \ str) for key in dict):\n        return True\n    return False\n", "    assert\
    \ isinstance(dict, dict), \"The argument should be a dictionary\"\n    return\
    \ all(isinstance(k, str) and isinstance(v, str) for k, v in dict.items())\n",
  "    if len(dict) == 0:\n        return False\n    for k in dict.keys():\n     \
    \   if k.isupper():\n            if not (k + '' in dict.values()):\n         \
    \       return False\n        else:\n            if not k.isupper() and (k.upper()\
    \ + '.' in dict.values()):\n                return False\n    return True\n",
  "    for k in dict:\n        if type(k) is not str or len(k) != len(dict[k]):\n\
    \            return False\n    return True\n", "    if not isinstance(dict, dict):\n\
    \        return False\n    if not dict:\n        return False\n    for k in dict.keys():\n\
    \        if type(k) is not str:\n            return False\n    key_set = set(dict.keys())\n\
    \    if set(string.ascii_lowercase).issubset(key_set):\n        return True\n\
    \    if set(string.ascii_uppercase).issubset(key_set):\n        return True\n\
    \    return False\n", "    for k, v in dict.items():\n        if k in ('Name',\
    \ 'Age', 'City') and not isinstance(v, str):\n            return False\n     \
    \   if not (k in ('Name', 'Age', 'City') or not isinstance(v, str)):\n       \
    \     return False\n    return True\n", "    if not dict:\n        return True\n\
    \    for key, value in dict.items():\n        try:\n            str(key)\n   \
    \         str(value)\n            return True\n        except:\n            pass\n\
    \    return False\n", "    for k in dict.keys():\n        if not isinstance(k,\
    \ str) or not k.islower():\n            return False\n    return True\n", "  \
    \  if len(dict) == 0:\n        return False\n\n    for key in dict:\n        if\
    \ not isinstance(key, str):\n            return False\n        \n    return True\
    \ \n</cell>\n<text>\nTest Your Solution\n\n</text>\n<cell>", "    string_keys\
    \ = list(dict.keys())\n    for str_key in string_keys:\n        if not isinstance(str_key,str)\
    \ or str_key is None:\n            return False\n    return True\n", "    if isinstance(dict,\
    \ dict):\n        for key, value in dict.items():\n            if isinstance(key,\
    \ str) and isinstance(value, str) and len(value) > 0:\n                return\
    \ check_dict_case(dict(filter(lambda a: a != key, dict)))\n            elif isinstance(key,\
    \ str) and isinstance(value, str):\n                return check_dict_case(dict(filter(lambda\
    \ a: a != key.lower(), dict)))\n            elif isinstance(key, str) and isinstance(value,\
    \ str) and len(value) > 0:\n                return check_dict_case(dict(filter(lambda\
    \ a: a != key.upper(), dict)))\n            else:\n                return False\n\
    \    else:\n        return True\n", "    if not dict:\n        return False\n\n\
    \    for k in dict:\n        if not isinstance(k, str):\n            return False\n\
    \        k_lower = k.lower()\n        k_upper = k.upper()\n        if k_lower\
    \ != k_upper:\n            return False\n    return True\n\n", "    for key in\
    \ dict:\n        if not isinstance(key, str):\n            return False\n    \
    \    elif key.lower() != key:\n            return False\n    return True\n", " \
    \   if len(dict) == 0:\n        return False\n    lower_keys = sorted(set(key.lower()\
    \ for key in dict))\n    upper_keys = sorted(set(key.upper() for key in dict))\n\
    \    return lower_keys == upper_keys\n", "    if not dict:\n        return False\n\
    \    for key, value in dict.items():\n        if not isinstance(key, str) or not\
    \ isinstance(value, str):\n            return False\n    return True\n", "   \
    \ return False if dict.keys() else True\n", "    if not dict:\n        return\
    \ False\n    for key, value in dict.items():\n        if type(key) != str:\n \
    \           return False\n        if type(key) != str:\n            return False\n\
    \    return True\n", "    ok = True\n    for key in dict:\n        if key.islower():\n\
    \            pass\n        elif key.isupper():\n            pass\n        else:\n\
    \            return False\n    return True\n", "    try:\n        for key in dict.keys():\n\
    \            if not isinstance(key, str):\n                return False\n    \
    \        else:\n                lower = key.lower()\n                upper = key.upper()\n\
    \                if lower == upper:\n                    pass\n              \
    \  else:\n                    return False\n    except TypeError as type_error:\n\
    \        return False\n    return True\n", "    if not isinstance(dict, dict):\n\
    \        return False\n    if not dict:\n        return False\n    for k in dict:\n\
    \        if not isinstance(k, str):\n            return False\n    return True\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
