name: HumanEval_39_prime_fib
language: py
prompt: "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number\
  \ that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n\
  \    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n\
  \    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2)\
  \ == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert\
  \ candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) ==\
  \ 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n  \
  \  assert candidate(10) == 433494437\n\ndef test_check():\n    check(prime_fib)\n\
  \ntest_check()\n"
completions: ["    i = 2\n    total = 0\n    while i < n:\n        if n % i == 0:\n\
    \            total += i\n            i += 1\n        else:\n            i += 1\n\
    \    return total\n\n", "    fib = 1\n    fib2 = 1\n    fib3 = 0\n    for i in\
    \ range(n):\n        fib3 = fib + fib2\n        fib = fib2\n        fib2 = fib3\n\
    \    return fib3\n\n", "    if n <= 1:\n        return n\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n\n", "    a, b = 0, 1\n    for i in range(n):\n   \
    \     a, b = b, a + b\n        if a == b:\n            break\n    return a\n\n",
  "    if n <= 1:\n        return n\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \n", "    cache = [0, 1]\n    cache[1] = 1\n    for n in range(2, n + 1):\n  \
    \      cache.append(cache[-1] + cache[-2])\n    return cache[n]\n\n", "    # initialize\
    \ to fibonacci numbers\n    fib_nums = [0, 1]\n    fib_index = n-1\n\n    # find\
    \ nth fibonacci number\n    while fib_index >= 0:\n        fib_nums.append(fib_nums[-1]\
    \ + fib_nums[-2])\n        fib_index -= fib_index % 2\n\n    return fib_nums[-1]\n\
    \n", "    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n  \
    \  elif n % 2 == 0:\n        return prime_fib(n / 2) + prime_fib(n / 2) + prime_fib(n\
    \ / 2) - prime_fib(n / 4)\n    else:\n        return prime_fib(n / 2) + prime_fib(n\
    \ / 2) - prime_fib(n / 4)\n\n", "    if n <= 2:\n        return n\n    else:\n\
    \        return prime_fib(n - 2) + prime_fib(n - 1)\n\n", "    fib = [1, 1, 2,\
    \ 3]\n    if n < 2:\n        return 1\n    if n == 2:\n        return fib[-1]\n\
    \    mid = len(fib) // 2\n    if n < fib[mid]:\n        return fib[mid]\n    return\
    \ fib[mid] + prime_fib(mid - 1)\n\n", "    if n < 2:\n        raise ValueError(\"\
    Input number must be greater than 1.\")\n\n    a, b = 1\n    while True:\n   \
    \     a, b = b, a + b\n        if n%a == 0:\n            return b\n        if\
    \ n == 1:\n            break\n    return n\n\n", "    if n < 2:\n        return\
    \ n\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\n", "    if n < 2:\n   \
    \     return n\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\n\n@check_return_type(return_types=(list,\
    \ tuple), return_names=(\"list\", \"n\"))", "    if n in (2, 3):\n        return\
    \ n\n    if n % 2 == 0:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \    if n % 3 == 0:\n        return prime_fib(n - 2) + prime_fib(n - 3)\n    if\
    \ n % 5 == 0:\n        return prime_fib(n - 3) + prime_fib(n - 5)\n    return\
    \ prime_fib(n - 5)\n\n", "    previous, current = 0, 1\n    for index in range(n):\n\
    \        previous, current = current, previous + current\n    return current\n\
    \n", "    a, b = 0, 1\n    while a < n:\n        a, b = b, a + b\n    return b\n\
    \n", "    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n  \
    \  else:\n        return prime_fib(n-2) + prime_fib(n-1)\n\n", "    a, b = 0,\
    \ 1\n    while b < n:\n        a, b = b, a+b\n    return b\n\n", "    a, b = 0,\
    \ 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n", "   \
    \ x, y = 0, 1\n    while n > 0:\n        x, y = y, x + y\n        n = n - 1\n\
    \    return y\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
