name: HumanEval_20_find_closest_elements
language: py
results:
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    diffs_sq = map(lambda\
    \ x: (x-numbers[0])**2 , numbers)\n    min_diff = min(diffs_sq)\n    index = diffs_sq.index(min_diff)\n\
    \    return numbers[index], numbers[index+1]\n\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\
    \ndef test_check():\n    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xp5ig_d.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9xp5ig_d.py\", line 24,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmp9xp5ig_d.py\"\
    , line 17, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\n  File \"/tmp/tmp9xp5ig_d.py\", line 13, in find_closest_elements\n  \
    \  index = diffs_sq.index(min_diff)\nAttributeError: 'map' object has no attribute\
    \ 'index'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    \n    smallest_number\
    \ = min(numbers)\n    largest_number = max(numbers)\n    \n    if smallest_number\
    \ == largest_number:\n        return (smallest_number, smallest_number)\n    \n\
    \    closest_numbers = []\n    \n    for number in numbers:\n        distance_to_number\
    \ = largest_number - number\n        \n        if abs(distance_to_number) < abs(smallest_number\
    \ - number):\n            closest_numbers.append(number)\n        else:\n    \
    \        closest_numbers.append(smallest_number)\n            closest_numbers.append(number)\n\
    \            \n    closest_numbers.append(smallest_number)\n    closest_numbers.append(largest_number)\n\
    \    \n    return tuple(closest_numbers)\n\ndef check(candidate):\n    assert\
    \ candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\
    \ndef test_check():\n    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj80c3ses.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpj80c3ses.py\", line 42,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmpj80c3ses.py\"\
    , line 35, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sort_numbers(numbers)\n\
    \n    diff = numbers[-1] - numbers[0]\n    if diff > 0.0 or diff < 0.0:\n    \
    \    raise ValueError(\"No number closer to each. {}\".format(numbers))\n\n  \
    \  diff = numbers[-1] - numbers[1]\n    if diff > 0.0 or diff < 0.0:\n       \
    \ numbers, numbers[1] = numbers[1], numbers[-1]\n    \n    return numbers[-2],\
    \ numbers[-1]\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) ==\
    \ (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n\
    \    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert\
    \ candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n  \
    \  check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5t4414ii.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp5t4414ii.py\", line 31,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmp5t4414ii.py\"\
    , line 24, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\n  File \"/tmp/tmp5t4414ii.py\", line 11, in find_closest_elements\n  \
    \  numbers = sort_numbers(numbers)\nNameError: name 'sort_numbers' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # TODO docstring\n\
    \    return min(numbers, key=lambda n: abs(n - numbers[0])), max(numbers, key=lambda\
    \ n: abs(n - numbers[0]))\n\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0,\
    \ 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n\
    \    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk4i2zq1n.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpk4i2zq1n.py\", line 23,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmpk4i2zq1n.py\"\
    , line 16, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    sorted_numbers =\
    \ sorted(numbers)\n    closest_two = sorted_numbers[:2]\n    if abs(sorted_numbers[1]\
    \ - sorted_numbers[0]) < abs(sorted_numbers[1] - sorted_numbers[2]):\n       \
    \ return (sorted_numbers[1], sorted_numbers[0])\n    else:\n        return (sorted_numbers[2],\
    \ sorted_numbers[1])\n\ndef check(candidate):\n    assert candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n\
    \    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n\
    \    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyhu3ty9e.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyhu3ty9e.py\", line 26,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmpyhu3ty9e.py\"\
    , line 19, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest_number =\
    \ min(numbers)\n    closest_numbers = [i for i in numbers if i < smallest_number]\n\
    \    largest = max(closest_numbers)\n    if largest == smallest_number:\n    \
    \    return smallest_number, largest\n    elif largest - smallest_number > 0.5:\n\
    \        return smallest_number, largest\n    else:\n        return largest, smallest_number\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n\
    \    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr2lstwrc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpr2lstwrc.py\", line 29,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmpr2lstwrc.py\"\
    , line 22, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\n  File \"/tmp/tmpr2lstwrc.py\", line 13, in find_closest_elements\n  \
    \  largest = max(closest_numbers)\nValueError: max() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_idx, max_idx\
    \ = 0, 1\n    closest_value = numbers[min_idx]\n    for i in range(2, len(numbers)):\n\
    \        if abs(numbers[i] - closest_value) < abs(numbers[max_idx] - closest_value):\n\
    \            min_idx, max_idx = i, max_idx\n        elif abs(numbers[i] - closest_value)\
    \ > abs(numbers[max_idx] - closest_value):\n            min_idx, max_idx = i,\
    \ min_idx\n        else:\n            break\n    return closest_value, numbers[min_idx]\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n\
    \    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4uoibwso.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4uoibwso.py\", line 30,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmp4uoibwso.py\"\
    , line 23, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_diff = float('infinity')\n\
    \    for elem in numbers:\n        diff = elem - min_diff\n        if diff < 0.0:\n\
    \            diff = diff\n        elif diff == 0.0 and min_diff == 0.0:\n    \
    \        diff = elem\n        else:\n            diff = abs(diff)\n        if\
    \ diff == 0.0:\n            diff = 1.0\n        if diff < min_diff:\n        \
    \    min_diff = diff\n            closest_elem = elem\n    return closest_elem\n\
    \ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n\
    \    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92jpmoqk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp92jpmoqk.py\", line 35,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmp92jpmoqk.py\"\
    , line 28, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # use numpy for efficiency\n\
    \    from numpy import array\n    numbers = array(numbers)\n    abs_differences\
    \ = abs(numbers - numbers[0])\n    smallest_difference = numbers[0]\n    largest\
    \ = numbers[0]\n    for i in range(len(numbers)):\n        if abs_differences[i]\
    \ != 0.0: # handle zero element case\n            smallest_difference = numbers[i]\
    \ if numbers[i] < smallest_difference else smallest_difference\n            largest\
    \ = numbers[i] if numbers[i] > largest else largest\n    # return in order\n \
    \   smaller_element = largest\n    larger_element = smallest_difference\n    return\
    \ smaller_element, larger_element\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0,\
    \ 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n\
    \    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxoz5x36l.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpxoz5x36l.py\", line 34,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmpxoz5x36l.py\"\
    , line 27, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\n  File \"/tmp/tmpxoz5x36l.py\", line 12, in find_closest_elements\n  \
    \  from numpy import array\nModuleNotFoundError: No module named 'numpy'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n\
    \    largest = numbers[0]\n    for n in numbers:\n        if n < smallest:\n \
    \           smallest = n\n        elif n > largest:\n            largest = n\n\
    \    return (smallest, largest)\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0,\
    \ 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n\
    \    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1rfbh7w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmps1rfbh7w.py\", line 28,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmps1rfbh7w.py\"\
    , line 21, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if numbers[0] < numbers[1]:\n\
    \        return numbers[1], numbers[0]\n    else:\n        return numbers[0],\
    \ numbers[1]\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) ==\
    \ (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n\
    \    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert\
    \ candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n  \
    \  check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0k2hmc4t.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0k2hmc4t.py\", line 24,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmp0k2hmc4t.py\"\
    , line 17, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    return min(numbers),\
    \ max(numbers)\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0,\
    \ 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n \
    \   assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n\
    \    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpal846yub.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpal846yub.py\", line 21,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmpal846yub.py\"\
    , line 14, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n    minimum = numbers[0]\n    maximum = numbers[-1]\n    for n in numbers[1:]:\n\
    \        if n < minimum:\n            minimum = n\n        elif n > maximum:\n\
    \            maximum = n\n    return (minimum, maximum)\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5an_7dam.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5an_7dam.py\", line 29,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmp5an_7dam.py\"\
    , line 22, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n\
    \    largest = numbers[0]\n    for n in numbers[1:]:\n        if n < smallest:\n\
    \            smallest = n\n        if n > largest:\n            largest = n\n\
    \    return smallest, largest\n\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0,\
    \ 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n\
    \    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnkaxtdrd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnkaxtdrd.py\", line 29,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmpnkaxtdrd.py\"\
    , line 22, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert len(numbers)\
    \ >= 2, 'Passed list must have at least two elements'\n    diffs = [i-j for i,\
    \ j in zip(numbers[:-1], numbers[1:])]\n    idx = np.argmin(diffs)\n    return\
    \ (numbers[idx], numbers[idx+1])\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0,\
    \ 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n\
    \    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgtfruvc2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgtfruvc2.py\", line 24,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmpgtfruvc2.py\"\
    , line 17, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\n  File \"/tmp/tmpgtfruvc2.py\", line 13, in find_closest_elements\n  \
    \  idx = np.argmin(diffs)\nNameError: name 'np' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    assert len(numbers)\
    \ >= 2\n\n    min_diff = numbers[1] - numbers[0]\n    return tuple(min(numbers,\
    \ key=lambda n: abs(n - num))\n                 for num in numbers if abs(num\
    \ - numbers[0]) < min_diff)\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0,\
    \ 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n\
    \    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hca8ey8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2hca8ey8.py\", line 25,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmp2hca8ey8.py\"\
    , line 18, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n\
    \    largest = numbers[0]\n    for n in numbers[1:]:\n        if n < smallest:\n\
    \            smallest = n\n        elif n > largest:\n            largest = n\n\
    \    return smallest, largest\n\ndef check(candidate):\n    assert candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0,\
    \ 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n\
    \    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4imfbgt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_4imfbgt.py\", line 28,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmp_4imfbgt.py\"\
    , line 21, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    diff0 = abs(numbers[0]\
    \ - numbers[1])\n    diff1 = abs(numbers[1] - numbers[2])\n    diff2 = abs(numbers[2]\
    \ - numbers[3])\n    diff3 = abs(numbers[3] - numbers[4])\n    diff4 = abs(numbers[4]\
    \ - numbers[5])\n    diff5 = abs(numbers[5] - numbers[6])\n    diff6 = abs(numbers[6]\
    \ - numbers[7])\n    if diff0 < diff1:\n        if diff2 < diff3:\n          \
    \  if diff4 < diff5:\n                if diff6 < diff7:\n                    return\
    \ (numbers[0], numbers[1])\n                else:\n                    return\
    \ (numbers[0], numbers[4])\n            else:\n                return (numbers[0],\
    \ numbers[2])\n        else:\n            return (numbers[0], numbers[3])\n  \
    \  else:\n        return (numbers[0], numbers[1])\n        \n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n\
    \    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_kx_6ifv.py\", line 32\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) ==\
    \ 1:\n        return numbers[0], numbers[0]\n\n    numbers = numbers[1::2]\n \
    \   numbers.sort()\n\n    if numbers[0] > numbers[1]:\n        return numbers[1],\
    \ numbers[0]\n    else:\n        return numbers[0], numbers[1]\n\ndef check(candidate):\n\
    \    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert\
    \ candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq014x_3h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpq014x_3h.py\", line 30,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmpq014x_3h.py\"\
    , line 23, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
    \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    smallest = numbers[0]\n\
    \    largest = numbers[0]\n\n    smallest_dist = None\n    largest_dist = None\n\
    \n    for num in numbers[1:]:\n        dist = abs(num - largest)\n        if smallest_dist\
    \ is None:\n            smallest_dist = dist\n        elif smallest_dist > dist:\n\
    \            smallest_dist = dist\n            smallest = num\n\n        dist\
    \ = abs(num - smallest)\n        if largest_dist is None:\n            largest_dist\
    \ = dist\n        elif largest_dist < dist:\n            largest_dist = dist\n\
    \            largest = num\n\n    if smallest_dist is not None and largest_dist\
    \ is not None:\n        return (smallest, largest)\n    else:\n        return\
    \ None\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n \
    \   assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert\
    \ candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n  \
    \  check(find_closest_elements)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbepyd54w.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpbepyd54w.py\", line 46,\
    \ in test_check\n    check(find_closest_elements)\n  File \"/tmp/tmpbepyd54w.py\"\
    , line 39, in check\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0)\nAssertionError\n"
  exit_code: -1
  status: Exception
